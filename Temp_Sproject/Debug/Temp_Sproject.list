
Temp_Sproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c538  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c8  0800c738  0800c738  0001c738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e900  0800e900  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e900  0800e900  0001e900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e908  0800e908  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e908  0800e908  0001e908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e90c  0800e90c  0001e90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800e910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  200001f4  0800eb04  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  0800eb04  00020654  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce4c  00000000  00000000  00020265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025f2  00000000  00000000  0002d0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  0002f6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095b  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029c8e  00000000  00000000  00030c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012040  00000000  00000000  0005a901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6b14  00000000  00000000  0006c941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004700  00000000  00000000  00163458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00167b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f4 	.word	0x200001f4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c720 	.word	0x0800c720

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f8 	.word	0x200001f8
 800023c:	0800c720 	.word	0x0800c720

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <SELECT>:
/***************************************
 * SPI functions
 **************************************/
/* slave select */
static void SELECT(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2110      	movs	r1, #16
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <SELECT+0x18>)
 80009de:	f002 fb73 	bl	80030c8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f001 fc74 	bl	80022d0 <HAL_Delay>
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40020000 	.word	0x40020000

080009f0 <DESELECT>:
/* slave deselect */
static void DESELECT(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2110      	movs	r1, #16
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <DESELECT+0x18>)
 80009fa:	f002 fb65 	bl	80030c8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f001 fc66 	bl	80022d0 <HAL_Delay>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40020000 	.word	0x40020000

08000a0c <SPI_TxByte>:
/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a16:	bf00      	nop
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <SPI_TxByte+0x30>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d1f8      	bne.n	8000a18 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000a26:	1df9      	adds	r1, r7, #7
 8000a28:	2364      	movs	r3, #100	; 0x64
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <SPI_TxByte+0x30>)
 8000a2e:	f003 f900 	bl	8003c32 <HAL_SPI_Transmit>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000260 	.word	0x20000260

08000a40 <SPI_TxBuffer>:
/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a4c:	bf00      	nop
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <SPI_TxBuffer+0x30>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d1f8      	bne.n	8000a4e <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000a5c:	887a      	ldrh	r2, [r7, #2]
 8000a5e:	2364      	movs	r3, #100	; 0x64
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	4803      	ldr	r0, [pc, #12]	; (8000a70 <SPI_TxBuffer+0x30>)
 8000a64:	f003 f8e5 	bl	8003c32 <HAL_SPI_Transmit>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000260 	.word	0x20000260

08000a74 <SPI_RxByte>:
/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000a7a:	23ff      	movs	r3, #255	; 0xff
 8000a7c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a7e:	bf00      	nop
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <SPI_RxByte+0x34>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d1f8      	bne.n	8000a80 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000a8e:	1dba      	adds	r2, r7, #6
 8000a90:	1df9      	adds	r1, r7, #7
 8000a92:	2364      	movs	r3, #100	; 0x64
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2301      	movs	r3, #1
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <SPI_RxByte+0x34>)
 8000a9a:	f003 fa38 	bl	8003f0e <HAL_SPI_TransmitReceive>
  return data;
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000260 	.word	0x20000260

08000aac <SPI_RxBytePtr>:
/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000ab4:	f7ff ffde 	bl	8000a74 <SPI_RxByte>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	701a      	strb	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/
/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <SD_ReadyWait+0x30>)
 8000ad0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ad4:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000ad6:	f7ff ffcd 	bl	8000a74 <SPI_RxByte>
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2bff      	cmp	r3, #255	; 0xff
 8000ae2:	d003      	beq.n	8000aec <SD_ReadyWait+0x24>
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SD_ReadyWait+0x30>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1f4      	bne.n	8000ad6 <SD_ReadyWait+0xe>
  return res;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000212 	.word	0x20000212

08000afc <SD_PowerOn>:
/* power on */
static void SD_PowerOn(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8000b02:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000b06:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8000b08:	f7ff ff72 	bl	80009f0 <DESELECT>
  for(int i = 0; i < 10; i++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	e005      	b.n	8000b1e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000b12:	20ff      	movs	r0, #255	; 0xff
 8000b14:	f7ff ff7a 	bl	8000a0c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	2b09      	cmp	r3, #9
 8000b22:	ddf6      	ble.n	8000b12 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8000b24:	f7ff ff56 	bl	80009d4 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000b28:	2340      	movs	r3, #64	; 0x40
 8000b2a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000b3c:	2395      	movs	r3, #149	; 0x95
 8000b3e:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8000b40:	463b      	mov	r3, r7
 8000b42:	2106      	movs	r1, #6
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff7b 	bl	8000a40 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8000b4a:	e002      	b.n	8000b52 <SD_PowerOn+0x56>
  {
    cnt--;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000b52:	f7ff ff8f 	bl	8000a74 <SPI_RxByte>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d002      	beq.n	8000b62 <SD_PowerOn+0x66>
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1f4      	bne.n	8000b4c <SD_PowerOn+0x50>
  }
  DESELECT();
 8000b62:	f7ff ff45 	bl	80009f0 <DESELECT>
  SPI_TxByte(0XFF);
 8000b66:	20ff      	movs	r0, #255	; 0xff
 8000b68:	f7ff ff50 	bl	8000a0c <SPI_TxByte>
  PowerFlag = 1;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <SD_PowerOn+0x80>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000215 	.word	0x20000215

08000b80 <SD_PowerOff>:
/* power off */
static void SD_PowerOff(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <SD_PowerOff+0x14>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	20000215 	.word	0x20000215

08000b98 <SD_CheckPower>:
/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <SD_CheckPower+0x14>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000215 	.word	0x20000215

08000bb0 <SD_RxDataBlock>:
/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <SD_RxDataBlock+0x58>)
 8000bbc:	22c8      	movs	r2, #200	; 0xc8
 8000bbe:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000bc0:	f7ff ff58 	bl	8000a74 <SPI_RxByte>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2bff      	cmp	r3, #255	; 0xff
 8000bcc:	d103      	bne.n	8000bd6 <SD_RxDataBlock+0x26>
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <SD_RxDataBlock+0x58>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f4      	bne.n	8000bc0 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	2bfe      	cmp	r3, #254	; 0xfe
 8000bda:	d001      	beq.n	8000be0 <SD_RxDataBlock+0x30>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e00f      	b.n	8000c00 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff60 	bl	8000aac <SPI_RxBytePtr>
  } while(len--);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	1e5a      	subs	r2, r3, #1
 8000bf0:	603a      	str	r2, [r7, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1f4      	bne.n	8000be0 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8000bf6:	f7ff ff3d 	bl	8000a74 <SPI_RxByte>
  SPI_RxByte();
 8000bfa:	f7ff ff3b 	bl	8000a74 <SPI_RxByte>
  return TRUE;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000210 	.word	0x20000210

08000c0c <SD_TxDataBlock>:
/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000c1c:	f7ff ff54 	bl	8000ac8 <SD_ReadyWait>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2bff      	cmp	r3, #255	; 0xff
 8000c24:	d001      	beq.n	8000c2a <SD_TxDataBlock+0x1e>
 8000c26:	2300      	movs	r3, #0
 8000c28:	e02f      	b.n	8000c8a <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8000c2a:	78fb      	ldrb	r3, [r7, #3]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff feed 	bl	8000a0c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	2bfd      	cmp	r3, #253	; 0xfd
 8000c36:	d020      	beq.n	8000c7a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000c38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff feff 	bl	8000a40 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8000c42:	f7ff ff17 	bl	8000a74 <SPI_RxByte>
    SPI_RxByte();
 8000c46:	f7ff ff15 	bl	8000a74 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8000c4a:	e00b      	b.n	8000c64 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000c4c:	f7ff ff12 	bl	8000a74 <SPI_RxByte>
 8000c50:	4603      	mov	r3, r0
 8000c52:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	f003 031f 	and.w	r3, r3, #31
 8000c5a:	2b05      	cmp	r3, #5
 8000c5c:	d006      	beq.n	8000c6c <SD_TxDataBlock+0x60>
      i++;
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	3301      	adds	r3, #1
 8000c62:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	2b40      	cmp	r3, #64	; 0x40
 8000c68:	d9f0      	bls.n	8000c4c <SD_TxDataBlock+0x40>
 8000c6a:	e000      	b.n	8000c6e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000c6c:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8000c6e:	bf00      	nop
 8000c70:	f7ff ff00 	bl	8000a74 <SPI_RxByte>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0fa      	beq.n	8000c70 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	f003 031f 	and.w	r3, r3, #31
 8000c80:	2b05      	cmp	r3, #5
 8000c82:	d101      	bne.n	8000c88 <SD_TxDataBlock+0x7c>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <SD_TxDataBlock+0x7e>
  return FALSE;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <SD_SendCmd>:
#endif /* _USE_WRITE */
/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b084      	sub	sp, #16
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	6039      	str	r1, [r7, #0]
 8000c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000c9e:	f7ff ff13 	bl	8000ac8 <SD_ReadyWait>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2bff      	cmp	r3, #255	; 0xff
 8000ca6:	d001      	beq.n	8000cac <SD_SendCmd+0x1a>
 8000ca8:	23ff      	movs	r3, #255	; 0xff
 8000caa:	e042      	b.n	8000d32 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff feac 	bl	8000a0c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	0e1b      	lsrs	r3, r3, #24
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fea6 	bl	8000a0c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	0c1b      	lsrs	r3, r3, #16
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fea0 	bl	8000a0c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	0a1b      	lsrs	r3, r3, #8
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fe9a 	bl	8000a0c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fe95 	bl	8000a0c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b40      	cmp	r3, #64	; 0x40
 8000ce6:	d102      	bne.n	8000cee <SD_SendCmd+0x5c>
 8000ce8:	2395      	movs	r3, #149	; 0x95
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e007      	b.n	8000cfe <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b48      	cmp	r3, #72	; 0x48
 8000cf2:	d102      	bne.n	8000cfa <SD_SendCmd+0x68>
 8000cf4:	2387      	movs	r3, #135	; 0x87
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e001      	b.n	8000cfe <SD_SendCmd+0x6c>
  else crc = 1;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fe83 	bl	8000a0c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b4c      	cmp	r3, #76	; 0x4c
 8000d0a:	d101      	bne.n	8000d10 <SD_SendCmd+0x7e>
 8000d0c:	f7ff feb2 	bl	8000a74 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8000d10:	230a      	movs	r3, #10
 8000d12:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000d14:	f7ff feae 	bl	8000a74 <SPI_RxByte>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000d1c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	da05      	bge.n	8000d30 <SD_SendCmd+0x9e>
 8000d24:	7bbb      	ldrb	r3, [r7, #14]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	73bb      	strb	r3, [r7, #14]
 8000d2a:	7bbb      	ldrb	r3, [r7, #14]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1f1      	bne.n	8000d14 <SD_SendCmd+0x82>
  return res;
 8000d30:	7b7b      	ldrb	r3, [r7, #13]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SD_disk_initialize+0x14>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e0d1      	b.n	8000ef4 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000d50:	4b6a      	ldr	r3, [pc, #424]	; (8000efc <SD_disk_initialize+0x1c0>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <SD_disk_initialize+0x2a>
 8000d5e:	4b67      	ldr	r3, [pc, #412]	; (8000efc <SD_disk_initialize+0x1c0>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	e0c6      	b.n	8000ef4 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8000d66:	f7ff fec9 	bl	8000afc <SD_PowerOn>
  /* slave select */
  SELECT();
 8000d6a:	f7ff fe33 	bl	80009d4 <SELECT>
  /* check disk type */
  type = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000d72:	2100      	movs	r1, #0
 8000d74:	2040      	movs	r0, #64	; 0x40
 8000d76:	f7ff ff8c 	bl	8000c92 <SD_SendCmd>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	f040 80a1 	bne.w	8000ec4 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000d82:	4b5f      	ldr	r3, [pc, #380]	; (8000f00 <SD_disk_initialize+0x1c4>)
 8000d84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d88:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000d8a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000d8e:	2048      	movs	r0, #72	; 0x48
 8000d90:	f7ff ff7f 	bl	8000c92 <SD_SendCmd>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d155      	bne.n	8000e46 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]
 8000d9e:	e00c      	b.n	8000dba <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000da0:	7bfc      	ldrb	r4, [r7, #15]
 8000da2:	f7ff fe67 	bl	8000a74 <SPI_RxByte>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	f104 0310 	add.w	r3, r4, #16
 8000dae:	443b      	add	r3, r7
 8000db0:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	3301      	adds	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d9ef      	bls.n	8000da0 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000dc0:	7abb      	ldrb	r3, [r7, #10]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d17e      	bne.n	8000ec4 <SD_disk_initialize+0x188>
 8000dc6:	7afb      	ldrb	r3, [r7, #11]
 8000dc8:	2baa      	cmp	r3, #170	; 0xaa
 8000dca:	d17b      	bne.n	8000ec4 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2077      	movs	r0, #119	; 0x77
 8000dd0:	f7ff ff5f 	bl	8000c92 <SD_SendCmd>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d807      	bhi.n	8000dea <SD_disk_initialize+0xae>
 8000dda:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000dde:	2069      	movs	r0, #105	; 0x69
 8000de0:	f7ff ff57 	bl	8000c92 <SD_SendCmd>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d004      	beq.n	8000df4 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000dea:	4b45      	ldr	r3, [pc, #276]	; (8000f00 <SD_disk_initialize+0x1c4>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1ec      	bne.n	8000dcc <SD_disk_initialize+0x90>
 8000df2:	e000      	b.n	8000df6 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000df4:	bf00      	nop
        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000df6:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <SD_disk_initialize+0x1c4>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d062      	beq.n	8000ec4 <SD_disk_initialize+0x188>
 8000dfe:	2100      	movs	r1, #0
 8000e00:	207a      	movs	r0, #122	; 0x7a
 8000e02:	f7ff ff46 	bl	8000c92 <SD_SendCmd>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d15b      	bne.n	8000ec4 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	e00c      	b.n	8000e2c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8000e12:	7bfc      	ldrb	r4, [r7, #15]
 8000e14:	f7ff fe2e 	bl	8000a74 <SPI_RxByte>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	f104 0310 	add.w	r3, r4, #16
 8000e20:	443b      	add	r3, r7
 8000e22:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d9ef      	bls.n	8000e12 <SD_disk_initialize+0xd6>
          }
          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000e32:	7a3b      	ldrb	r3, [r7, #8]
 8000e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SD_disk_initialize+0x104>
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	e000      	b.n	8000e42 <SD_disk_initialize+0x106>
 8000e40:	2304      	movs	r3, #4
 8000e42:	73bb      	strb	r3, [r7, #14]
 8000e44:	e03e      	b.n	8000ec4 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000e46:	2100      	movs	r1, #0
 8000e48:	2077      	movs	r0, #119	; 0x77
 8000e4a:	f7ff ff22 	bl	8000c92 <SD_SendCmd>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d808      	bhi.n	8000e66 <SD_disk_initialize+0x12a>
 8000e54:	2100      	movs	r1, #0
 8000e56:	2069      	movs	r0, #105	; 0x69
 8000e58:	f7ff ff1b 	bl	8000c92 <SD_SendCmd>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d801      	bhi.n	8000e66 <SD_disk_initialize+0x12a>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e000      	b.n	8000e68 <SD_disk_initialize+0x12c>
 8000e66:	2301      	movs	r3, #1
 8000e68:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8000e6a:	7bbb      	ldrb	r3, [r7, #14]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d10e      	bne.n	8000e8e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000e70:	2100      	movs	r1, #0
 8000e72:	2077      	movs	r0, #119	; 0x77
 8000e74:	f7ff ff0d 	bl	8000c92 <SD_SendCmd>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d80e      	bhi.n	8000e9c <SD_disk_initialize+0x160>
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2069      	movs	r0, #105	; 0x69
 8000e82:	f7ff ff06 	bl	8000c92 <SD_SendCmd>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d107      	bne.n	8000e9c <SD_disk_initialize+0x160>
 8000e8c:	e00c      	b.n	8000ea8 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2041      	movs	r0, #65	; 0x41
 8000e92:	f7ff fefe 	bl	8000c92 <SD_SendCmd>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d004      	beq.n	8000ea6 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <SD_disk_initialize+0x1c4>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1e2      	bne.n	8000e6a <SD_disk_initialize+0x12e>
 8000ea4:	e000      	b.n	8000ea8 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000ea6:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <SD_disk_initialize+0x1c4>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d007      	beq.n	8000ec0 <SD_disk_initialize+0x184>
 8000eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb4:	2050      	movs	r0, #80	; 0x50
 8000eb6:	f7ff feec 	bl	8000c92 <SD_SendCmd>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SD_disk_initialize+0x188>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8000ec4:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <SD_disk_initialize+0x1c8>)
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8000eca:	f7ff fd91 	bl	80009f0 <DESELECT>
  SPI_RxByte();
 8000ece:	f7ff fdd1 	bl	8000a74 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d008      	beq.n	8000eea <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <SD_disk_initialize+0x1c0>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SD_disk_initialize+0x1c0>)
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	e001      	b.n	8000eee <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000eea:	f7ff fe49 	bl	8000b80 <SD_PowerOff>
  }
  return Stat;
 8000eee:	4b03      	ldr	r3, [pc, #12]	; (8000efc <SD_disk_initialize+0x1c0>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b2db      	uxtb	r3, r3
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd90      	pop	{r4, r7, pc}
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000210 	.word	0x20000210
 8000f04:	20000214 	.word	0x20000214

08000f08 <SD_disk_status>:
/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SD_disk_status+0x14>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e002      	b.n	8000f22 <SD_disk_status+0x1a>
  return Stat;
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SD_disk_status+0x28>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000000 	.word	0x20000000

08000f34 <SD_disk_read>:
/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <SD_disk_read+0x1c>
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <SD_disk_read+0x20>
 8000f50:	2304      	movs	r3, #4
 8000f52:	e051      	b.n	8000ff8 <SD_disk_read+0xc4>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f54:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <SD_disk_read+0xcc>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SD_disk_read+0x32>
 8000f62:	2303      	movs	r3, #3
 8000f64:	e048      	b.n	8000ff8 <SD_disk_read+0xc4>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <SD_disk_read+0xd0>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d102      	bne.n	8000f78 <SD_disk_read+0x44>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	025b      	lsls	r3, r3, #9
 8000f76:	607b      	str	r3, [r7, #4]
  SELECT();
 8000f78:	f7ff fd2c 	bl	80009d4 <SELECT>
  if (count == 1)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d111      	bne.n	8000fa6 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	2051      	movs	r0, #81	; 0x51
 8000f86:	f7ff fe84 	bl	8000c92 <SD_SendCmd>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d129      	bne.n	8000fe4 <SD_disk_read+0xb0>
 8000f90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f94:	68b8      	ldr	r0, [r7, #8]
 8000f96:	f7ff fe0b 	bl	8000bb0 <SD_RxDataBlock>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d021      	beq.n	8000fe4 <SD_disk_read+0xb0>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	e01e      	b.n	8000fe4 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	2052      	movs	r0, #82	; 0x52
 8000faa:	f7ff fe72 	bl	8000c92 <SD_SendCmd>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d117      	bne.n	8000fe4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb8:	68b8      	ldr	r0, [r7, #8]
 8000fba:	f7ff fdf9 	bl	8000bb0 <SD_RxDataBlock>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00a      	beq.n	8000fda <SD_disk_read+0xa6>
        buff += 512;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000fca:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1ed      	bne.n	8000fb4 <SD_disk_read+0x80>
 8000fd8:	e000      	b.n	8000fdc <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000fda:	bf00      	nop
      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	204c      	movs	r0, #76	; 0x4c
 8000fe0:	f7ff fe57 	bl	8000c92 <SD_SendCmd>
    }
  }
  /* Idle */
  DESELECT();
 8000fe4:	f7ff fd04 	bl	80009f0 <DESELECT>
  SPI_RxByte();
 8000fe8:	f7ff fd44 	bl	8000a74 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	bf14      	ite	ne
 8000ff2:	2301      	movne	r3, #1
 8000ff4:	2300      	moveq	r3, #0
 8000ff6:	b2db      	uxtb	r3, r3
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000000 	.word	0x20000000
 8001004:	20000214 	.word	0x20000214

08001008 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	4603      	mov	r3, r0
 8001016:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d102      	bne.n	8001024 <SD_disk_write+0x1c>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <SD_disk_write+0x20>
 8001024:	2304      	movs	r3, #4
 8001026:	e06b      	b.n	8001100 <SD_disk_write+0xf8>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001028:	4b37      	ldr	r3, [pc, #220]	; (8001108 <SD_disk_write+0x100>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SD_disk_write+0x32>
 8001036:	2303      	movs	r3, #3
 8001038:	e062      	b.n	8001100 <SD_disk_write+0xf8>
  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800103a:	4b33      	ldr	r3, [pc, #204]	; (8001108 <SD_disk_write+0x100>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SD_disk_write+0x44>
 8001048:	2302      	movs	r3, #2
 800104a:	e059      	b.n	8001100 <SD_disk_write+0xf8>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800104c:	4b2f      	ldr	r3, [pc, #188]	; (800110c <SD_disk_write+0x104>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <SD_disk_write+0x56>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	025b      	lsls	r3, r3, #9
 800105c:	607b      	str	r3, [r7, #4]
  SELECT();
 800105e:	f7ff fcb9 	bl	80009d4 <SELECT>
  if (count == 1)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d110      	bne.n	800108a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	2058      	movs	r0, #88	; 0x58
 800106c:	f7ff fe11 	bl	8000c92 <SD_SendCmd>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d13a      	bne.n	80010ec <SD_disk_write+0xe4>
 8001076:	21fe      	movs	r1, #254	; 0xfe
 8001078:	68b8      	ldr	r0, [r7, #8]
 800107a:	f7ff fdc7 	bl	8000c0c <SD_TxDataBlock>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d033      	beq.n	80010ec <SD_disk_write+0xe4>
      count = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	e030      	b.n	80010ec <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <SD_disk_write+0x104>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d007      	beq.n	80010a6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001096:	2100      	movs	r1, #0
 8001098:	2077      	movs	r0, #119	; 0x77
 800109a:	f7ff fdfa 	bl	8000c92 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800109e:	6839      	ldr	r1, [r7, #0]
 80010a0:	2057      	movs	r0, #87	; 0x57
 80010a2:	f7ff fdf6 	bl	8000c92 <SD_SendCmd>
    }
    if (SD_SendCmd(CMD25, sector) == 0)
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	2059      	movs	r0, #89	; 0x59
 80010aa:	f7ff fdf2 	bl	8000c92 <SD_SendCmd>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d11b      	bne.n	80010ec <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80010b4:	21fc      	movs	r1, #252	; 0xfc
 80010b6:	68b8      	ldr	r0, [r7, #8]
 80010b8:	f7ff fda8 	bl	8000c0c <SD_TxDataBlock>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00a      	beq.n	80010d8 <SD_disk_write+0xd0>
        buff += 512;
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80010c8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1ee      	bne.n	80010b4 <SD_disk_write+0xac>
 80010d6:	e000      	b.n	80010da <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80010d8:	bf00      	nop
      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80010da:	21fd      	movs	r1, #253	; 0xfd
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fd95 	bl	8000c0c <SD_TxDataBlock>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <SD_disk_write+0xe4>
      {
        count = 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	603b      	str	r3, [r7, #0]
      }
    }
  }
  /* Idle */
  DESELECT();
 80010ec:	f7ff fc80 	bl	80009f0 <DESELECT>
  SPI_RxByte();
 80010f0:	f7ff fcc0 	bl	8000a74 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bf14      	ite	ne
 80010fa:	2301      	movne	r3, #1
 80010fc:	2300      	moveq	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000000 	.word	0x20000000
 800110c:	20000214 	.word	0x20000214

08001110 <SD_disk_ioctl>:
#endif /* _USE_WRITE */
/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b08b      	sub	sp, #44	; 0x2c
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	603a      	str	r2, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	460b      	mov	r3, r1
 800111e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	623b      	str	r3, [r7, #32]
  WORD csize;
  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SD_disk_ioctl+0x1e>
 800112a:	2304      	movs	r3, #4
 800112c:	e115      	b.n	800135a <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (ctrl == CTRL_POWER)
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	2b05      	cmp	r3, #5
 8001138:	d124      	bne.n	8001184 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800113a:	6a3b      	ldr	r3, [r7, #32]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d012      	beq.n	8001168 <SD_disk_ioctl+0x58>
 8001142:	2b02      	cmp	r3, #2
 8001144:	dc1a      	bgt.n	800117c <SD_disk_ioctl+0x6c>
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <SD_disk_ioctl+0x40>
 800114a:	2b01      	cmp	r3, #1
 800114c:	d006      	beq.n	800115c <SD_disk_ioctl+0x4c>
 800114e:	e015      	b.n	800117c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001150:	f7ff fd16 	bl	8000b80 <SD_PowerOff>
      res = RES_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800115a:	e0fc      	b.n	8001356 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 800115c:	f7ff fcce 	bl	8000afc <SD_PowerOn>
      res = RES_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001166:	e0f6      	b.n	8001356 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	1c5c      	adds	r4, r3, #1
 800116c:	f7ff fd14 	bl	8000b98 <SD_CheckPower>
 8001170:	4603      	mov	r3, r0
 8001172:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800117a:	e0ec      	b.n	8001356 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 800117c:	2304      	movs	r3, #4
 800117e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001182:	e0e8      	b.n	8001356 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001184:	4b77      	ldr	r3, [pc, #476]	; (8001364 <SD_disk_ioctl+0x254>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SD_disk_ioctl+0x86>
 8001192:	2303      	movs	r3, #3
 8001194:	e0e1      	b.n	800135a <SD_disk_ioctl+0x24a>
    SELECT();
 8001196:	f7ff fc1d 	bl	80009d4 <SELECT>
    switch (ctrl)
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	2b0d      	cmp	r3, #13
 800119e:	f200 80cb 	bhi.w	8001338 <SD_disk_ioctl+0x228>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <SD_disk_ioctl+0x98>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	080012a3 	.word	0x080012a3
 80011ac:	080011e1 	.word	0x080011e1
 80011b0:	08001293 	.word	0x08001293
 80011b4:	08001339 	.word	0x08001339
 80011b8:	08001339 	.word	0x08001339
 80011bc:	08001339 	.word	0x08001339
 80011c0:	08001339 	.word	0x08001339
 80011c4:	08001339 	.word	0x08001339
 80011c8:	08001339 	.word	0x08001339
 80011cc:	08001339 	.word	0x08001339
 80011d0:	08001339 	.word	0x08001339
 80011d4:	080012b5 	.word	0x080012b5
 80011d8:	080012d9 	.word	0x080012d9
 80011dc:	080012fd 	.word	0x080012fd
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80011e0:	2100      	movs	r1, #0
 80011e2:	2049      	movs	r0, #73	; 0x49
 80011e4:	f7ff fd55 	bl	8000c92 <SD_SendCmd>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 80a8 	bne.w	8001340 <SD_disk_ioctl+0x230>
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2110      	movs	r1, #16
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fcda 	bl	8000bb0 <SD_RxDataBlock>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 809e 	beq.w	8001340 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8001204:	7b3b      	ldrb	r3, [r7, #12]
 8001206:	099b      	lsrs	r3, r3, #6
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d10e      	bne.n	800122c <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800120e:	7d7b      	ldrb	r3, [r7, #21]
 8001210:	b29a      	uxth	r2, r3
 8001212:	7d3b      	ldrb	r3, [r7, #20]
 8001214:	b29b      	uxth	r3, r3
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b29b      	uxth	r3, r3
 800121a:	4413      	add	r3, r2
 800121c:	b29b      	uxth	r3, r3
 800121e:	3301      	adds	r3, #1
 8001220:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001222:	8bfb      	ldrh	r3, [r7, #30]
 8001224:	029a      	lsls	r2, r3, #10
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e02e      	b.n	800128a <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800122c:	7c7b      	ldrb	r3, [r7, #17]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	b2da      	uxtb	r2, r3
 8001234:	7dbb      	ldrb	r3, [r7, #22]
 8001236:	09db      	lsrs	r3, r3, #7
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4413      	add	r3, r2
 800123c:	b2da      	uxtb	r2, r3
 800123e:	7d7b      	ldrb	r3, [r7, #21]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f003 0306 	and.w	r3, r3, #6
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b2db      	uxtb	r3, r3
 800124e:	3302      	adds	r3, #2
 8001250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001254:	7d3b      	ldrb	r3, [r7, #20]
 8001256:	099b      	lsrs	r3, r3, #6
 8001258:	b2db      	uxtb	r3, r3
 800125a:	b29a      	uxth	r2, r3
 800125c:	7cfb      	ldrb	r3, [r7, #19]
 800125e:	b29b      	uxth	r3, r3
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	b29b      	uxth	r3, r3
 8001264:	4413      	add	r3, r2
 8001266:	b29a      	uxth	r2, r3
 8001268:	7cbb      	ldrb	r3, [r7, #18]
 800126a:	029b      	lsls	r3, r3, #10
 800126c:	b29b      	uxth	r3, r3
 800126e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001272:	b29b      	uxth	r3, r3
 8001274:	4413      	add	r3, r2
 8001276:	b29b      	uxth	r3, r3
 8001278:	3301      	adds	r3, #1
 800127a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800127c:	8bfa      	ldrh	r2, [r7, #30]
 800127e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001282:	3b09      	subs	r3, #9
 8001284:	409a      	lsls	r2, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001290:	e056      	b.n	8001340 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001298:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012a0:	e055      	b.n	800134e <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80012a2:	f7ff fc11 	bl	8000ac8 <SD_ReadyWait>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2bff      	cmp	r3, #255	; 0xff
 80012aa:	d14b      	bne.n	8001344 <SD_disk_ioctl+0x234>
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012b2:	e047      	b.n	8001344 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80012b4:	2100      	movs	r1, #0
 80012b6:	2049      	movs	r0, #73	; 0x49
 80012b8:	f7ff fceb 	bl	8000c92 <SD_SendCmd>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d142      	bne.n	8001348 <SD_disk_ioctl+0x238>
 80012c2:	2110      	movs	r1, #16
 80012c4:	6a38      	ldr	r0, [r7, #32]
 80012c6:	f7ff fc73 	bl	8000bb0 <SD_RxDataBlock>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d03b      	beq.n	8001348 <SD_disk_ioctl+0x238>
 80012d0:	2300      	movs	r3, #0
 80012d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012d6:	e037      	b.n	8001348 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80012d8:	2100      	movs	r1, #0
 80012da:	204a      	movs	r0, #74	; 0x4a
 80012dc:	f7ff fcd9 	bl	8000c92 <SD_SendCmd>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d132      	bne.n	800134c <SD_disk_ioctl+0x23c>
 80012e6:	2110      	movs	r1, #16
 80012e8:	6a38      	ldr	r0, [r7, #32]
 80012ea:	f7ff fc61 	bl	8000bb0 <SD_RxDataBlock>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d02b      	beq.n	800134c <SD_disk_ioctl+0x23c>
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012fa:	e027      	b.n	800134c <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80012fc:	2100      	movs	r1, #0
 80012fe:	207a      	movs	r0, #122	; 0x7a
 8001300:	f7ff fcc7 	bl	8000c92 <SD_SendCmd>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d116      	bne.n	8001338 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 800130a:	2300      	movs	r3, #0
 800130c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001310:	e00b      	b.n	800132a <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8001312:	6a3c      	ldr	r4, [r7, #32]
 8001314:	1c63      	adds	r3, r4, #1
 8001316:	623b      	str	r3, [r7, #32]
 8001318:	f7ff fbac 	bl	8000a74 <SPI_RxByte>
 800131c:	4603      	mov	r3, r0
 800131e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001324:	3301      	adds	r3, #1
 8001326:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800132a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800132e:	2b03      	cmp	r3, #3
 8001330:	d9ef      	bls.n	8001312 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8001338:	2304      	movs	r3, #4
 800133a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800133e:	e006      	b.n	800134e <SD_disk_ioctl+0x23e>
      break;
 8001340:	bf00      	nop
 8001342:	e004      	b.n	800134e <SD_disk_ioctl+0x23e>
      break;
 8001344:	bf00      	nop
 8001346:	e002      	b.n	800134e <SD_disk_ioctl+0x23e>
      break;
 8001348:	bf00      	nop
 800134a:	e000      	b.n	800134e <SD_disk_ioctl+0x23e>
      break;
 800134c:	bf00      	nop
    }
    DESELECT();
 800134e:	f7ff fb4f 	bl	80009f0 <DESELECT>
    SPI_RxByte();
 8001352:	f7ff fb8f 	bl	8000a74 <SPI_RxByte>
  }
  return res;
 8001356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800135a:	4618      	mov	r0, r3
 800135c:	372c      	adds	r7, #44	; 0x2c
 800135e:	46bd      	mov	sp, r7
 8001360:	bd90      	pop	{r4, r7, pc}
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000

08001368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136c:	f000 ff53 	bl	8002216 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001370:	f000 f856 	bl	8001420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001374:	f000 f954 	bl	8001620 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001378:	f000 f914 	bl	80015a4 <MX_SPI1_Init>
  MX_FATFS_Init();
 800137c:	f003 f962 	bl	8004644 <MX_FATFS_Init>
  MX_ADC1_Init();
 8001380:	f000 f8be 	bl	8001500 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Measurement_of_ADC_Voltage_18650();
 8001384:	f000 fce6 	bl	8001d54 <Measurement_of_ADC_Voltage_18650>
	  process_SD_card();
 8001388:	f000 fad4 	bl	8001934 <process_SD_card>
	  HAL_Delay(100);
 800138c:	2064      	movs	r0, #100	; 0x64
 800138e:	f000 ff9f 	bl	80022d0 <HAL_Delay>
	  process_SD_card1();
 8001392:	f000 fbd7 	bl	8001b44 <process_SD_card1>

	  if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET)
 8001396:	2101      	movs	r1, #1
 8001398:	481e      	ldr	r0, [pc, #120]	; (8001414 <main+0xac>)
 800139a:	f001 fe7d 	bl	8003098 <HAL_GPIO_ReadPin>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d105      	bne.n	80013b0 <main+0x48>
	  	  	  {
		  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2108      	movs	r1, #8
 80013a8:	481a      	ldr	r0, [pc, #104]	; (8001414 <main+0xac>)
 80013aa:	f001 fe8d 	bl	80030c8 <HAL_GPIO_WritePin>
 80013ae:	e010      	b.n	80013d2 <main+0x6a>
	  	  	  }

	  	  else if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_RESET) {
 80013b0:	2101      	movs	r1, #1
 80013b2:	4818      	ldr	r0, [pc, #96]	; (8001414 <main+0xac>)
 80013b4:	f001 fe70 	bl	8003098 <HAL_GPIO_ReadPin>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d109      	bne.n	80013d2 <main+0x6a>
	  		HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2108      	movs	r1, #8
 80013c2:	4814      	ldr	r0, [pc, #80]	; (8001414 <main+0xac>)
 80013c4:	f001 fe80 	bl	80030c8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2101      	movs	r1, #1
 80013cc:	4812      	ldr	r0, [pc, #72]	; (8001418 <main+0xb0>)
 80013ce:	f001 fe7b 	bl	80030c8 <HAL_GPIO_WritePin>
	  	  }

	  //Testing Load Switch at 2 seconds
	  	HAL_GPIO_WritePin(Load_Switch_CMOS_GPIO_Port, Load_Switch_CMOS_Pin, GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d8:	4810      	ldr	r0, [pc, #64]	; (800141c <main+0xb4>)
 80013da:	f001 fe75 	bl	80030c8 <HAL_GPIO_WritePin>
	  	HAL_Delay(3000);
 80013de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013e2:	f000 ff75 	bl	80022d0 <HAL_Delay>
	  	HAL_GPIO_WritePin(Load_Switch_CMOS_GPIO_Port, Load_Switch_CMOS_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ec:	480b      	ldr	r0, [pc, #44]	; (800141c <main+0xb4>)
 80013ee:	f001 fe6b 	bl	80030c8 <HAL_GPIO_WritePin>

	  	HAL_GPIO_WritePin(Load_Switch_18650_GPIO_Port, Load_Switch_18650_Pin, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f8:	4808      	ldr	r0, [pc, #32]	; (800141c <main+0xb4>)
 80013fa:	f001 fe65 	bl	80030c8 <HAL_GPIO_WritePin>
	  	HAL_Delay(3000);
 80013fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001402:	f000 ff65 	bl	80022d0 <HAL_Delay>
	  	HAL_GPIO_WritePin(Load_Switch_18650_GPIO_Port, Load_Switch_18650_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800140c:	4803      	ldr	r0, [pc, #12]	; (800141c <main+0xb4>)
 800140e:	f001 fe5b 	bl	80030c8 <HAL_GPIO_WritePin>
	  Measurement_of_ADC_Voltage_18650();
 8001412:	e7b7      	b.n	8001384 <main+0x1c>
 8001414:	40020800 	.word	0x40020800
 8001418:	40021800 	.word	0x40021800
 800141c:	40020400 	.word	0x40020400

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b094      	sub	sp, #80	; 0x50
 8001424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	2234      	movs	r2, #52	; 0x34
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f007 fb11 	bl	8008a56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <SystemClock_Config+0xd8>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	4a2b      	ldr	r2, [pc, #172]	; (80014f8 <SystemClock_Config+0xd8>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144e:	6413      	str	r3, [r2, #64]	; 0x40
 8001450:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <SystemClock_Config+0xd8>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <SystemClock_Config+0xdc>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001464:	4a25      	ldr	r2, [pc, #148]	; (80014fc <SystemClock_Config+0xdc>)
 8001466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <SystemClock_Config+0xdc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001478:	2302      	movs	r3, #2
 800147a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800147c:	2301      	movs	r3, #1
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001480:	2310      	movs	r3, #16
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001484:	2302      	movs	r3, #2
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001488:	2300      	movs	r3, #0
 800148a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800148c:	2308      	movs	r3, #8
 800148e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001490:	2360      	movs	r3, #96	; 0x60
 8001492:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001494:	2302      	movs	r3, #2
 8001496:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001498:	2304      	movs	r3, #4
 800149a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800149c:	2302      	movs	r3, #2
 800149e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 fe79 	bl	800319c <HAL_RCC_OscConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014b0:	f000 fcc0 	bl	8001e34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014b4:	f001 fe22 	bl	80030fc <HAL_PWREx_EnableOverDrive>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80014be:	f000 fcb9 	bl	8001e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c2:	230f      	movs	r3, #15
 80014c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c6:	2302      	movs	r3, #2
 80014c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	2103      	movs	r1, #3
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 f90a 	bl	80036f8 <HAL_RCC_ClockConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0xce>
  {
    Error_Handler();
 80014ea:	f000 fca3 	bl	8001e34 <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	3750      	adds	r7, #80	; 0x50
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40007000 	.word	0x40007000

08001500 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001506:	463b      	mov	r3, r7
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <MX_ADC1_Init+0x98>)
 8001514:	4a21      	ldr	r2, [pc, #132]	; (800159c <MX_ADC1_Init+0x9c>)
 8001516:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <MX_ADC1_Init+0x98>)
 800151a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800151e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <MX_ADC1_Init+0x98>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <MX_ADC1_Init+0x98>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <MX_ADC1_Init+0x98>)
 800152e:	2201      	movs	r2, #1
 8001530:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_ADC1_Init+0x98>)
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <MX_ADC1_Init+0x98>)
 800153c:	2200      	movs	r2, #0
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_ADC1_Init+0x98>)
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <MX_ADC1_Init+0xa0>)
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_ADC1_Init+0x98>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_ADC1_Init+0x98>)
 800154e:	2201      	movs	r2, #1
 8001550:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_ADC1_Init+0x98>)
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_ADC1_Init+0x98>)
 800155c:	2201      	movs	r2, #1
 800155e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <MX_ADC1_Init+0x98>)
 8001562:	f000 fed9 	bl	8002318 <HAL_ADC_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800156c:	f000 fc62 	bl	8001e34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001570:	2303      	movs	r3, #3
 8001572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001574:	2301      	movs	r3, #1
 8001576:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157c:	463b      	mov	r3, r7
 800157e:	4619      	mov	r1, r3
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_ADC1_Init+0x98>)
 8001582:	f001 f8a7 	bl	80026d4 <HAL_ADC_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800158c:	f000 fc52 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000218 	.word	0x20000218
 800159c:	40012000 	.word	0x40012000
 80015a0:	0f000001 	.word	0x0f000001

080015a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_SPI1_Init+0x74>)
 80015aa:	4a1c      	ldr	r2, [pc, #112]	; (800161c <MX_SPI1_Init+0x78>)
 80015ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_SPI1_Init+0x74>)
 80015b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_SPI1_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_SPI1_Init+0x74>)
 80015be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_SPI1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <MX_SPI1_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_SPI1_Init+0x74>)
 80015d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_SPI1_Init+0x74>)
 80015da:	2210      	movs	r2, #16
 80015dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_SPI1_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_SPI1_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_SPI1_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_SPI1_Init+0x74>)
 80015f2:	2207      	movs	r2, #7
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_SPI1_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_SPI1_Init+0x74>)
 80015fe:	2208      	movs	r2, #8
 8001600:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_SPI1_Init+0x74>)
 8001604:	f002 fa6a 	bl	8003adc <HAL_SPI_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800160e:	f000 fc11 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000260 	.word	0x20000260
 800161c:	40013000 	.word	0x40013000

08001620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001636:	4b53      	ldr	r3, [pc, #332]	; (8001784 <MX_GPIO_Init+0x164>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a52      	ldr	r2, [pc, #328]	; (8001784 <MX_GPIO_Init+0x164>)
 800163c:	f043 0320 	orr.w	r3, r3, #32
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b50      	ldr	r3, [pc, #320]	; (8001784 <MX_GPIO_Init+0x164>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	4b4d      	ldr	r3, [pc, #308]	; (8001784 <MX_GPIO_Init+0x164>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a4c      	ldr	r2, [pc, #304]	; (8001784 <MX_GPIO_Init+0x164>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b4a      	ldr	r3, [pc, #296]	; (8001784 <MX_GPIO_Init+0x164>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	4b47      	ldr	r3, [pc, #284]	; (8001784 <MX_GPIO_Init+0x164>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a46      	ldr	r2, [pc, #280]	; (8001784 <MX_GPIO_Init+0x164>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b44      	ldr	r3, [pc, #272]	; (8001784 <MX_GPIO_Init+0x164>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800167e:	4b41      	ldr	r3, [pc, #260]	; (8001784 <MX_GPIO_Init+0x164>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a40      	ldr	r2, [pc, #256]	; (8001784 <MX_GPIO_Init+0x164>)
 8001684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <MX_GPIO_Init+0x164>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <MX_GPIO_Init+0x164>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a3a      	ldr	r2, [pc, #232]	; (8001784 <MX_GPIO_Init+0x164>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b38      	ldr	r3, [pc, #224]	; (8001784 <MX_GPIO_Init+0x164>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2108      	movs	r1, #8
 80016b2:	4835      	ldr	r0, [pc, #212]	; (8001788 <MX_GPIO_Init+0x168>)
 80016b4:	f001 fd08 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2110      	movs	r1, #16
 80016bc:	4833      	ldr	r0, [pc, #204]	; (800178c <MX_GPIO_Init+0x16c>)
 80016be:	f001 fd03 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2101      	movs	r1, #1
 80016c6:	4832      	ldr	r0, [pc, #200]	; (8001790 <MX_GPIO_Init+0x170>)
 80016c8:	f001 fcfe 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Load_Switch_CMOS_Pin|Load_Switch_18650_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80016d2:	4830      	ldr	r0, [pc, #192]	; (8001794 <MX_GPIO_Init+0x174>)
 80016d4:	f001 fcf8 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_Write_Button_Pin */
  GPIO_InitStruct.Pin = SD_Write_Button_Pin;
 80016d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Write_Button_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	482a      	ldr	r0, [pc, #168]	; (8001798 <MX_GPIO_Init+0x178>)
 80016ee:	f001 fb27 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CardDetect_Input_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Input_Pin;
 80016f2:	2301      	movs	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CardDetect_Input_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4820      	ldr	r0, [pc, #128]	; (8001788 <MX_GPIO_Init+0x168>)
 8001706:	f001 fb1b 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CardDetect_Output_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Output_Pin;
 800170a:	2308      	movs	r3, #8
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CardDetect_Output_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4819      	ldr	r0, [pc, #100]	; (8001788 <MX_GPIO_Init+0x168>)
 8001722:	f001 fb0d 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001726:	2310      	movs	r3, #16
 8001728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4813      	ldr	r0, [pc, #76]	; (800178c <MX_GPIO_Init+0x16c>)
 800173e:	f001 faff 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001742:	2301      	movs	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <MX_GPIO_Init+0x170>)
 800175a:	f001 faf1 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Load_Switch_CMOS_Pin Load_Switch_18650_Pin */
  GPIO_InitStruct.Pin = Load_Switch_CMOS_Pin|Load_Switch_18650_Pin;
 800175e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	4807      	ldr	r0, [pc, #28]	; (8001794 <MX_GPIO_Init+0x174>)
 8001778:	f001 fae2 	bl	8002d40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800177c:	bf00      	nop
 800177e:	3728      	adds	r7, #40	; 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40023800 	.word	0x40023800
 8001788:	40020800 	.word	0x40020800
 800178c:	40020000 	.word	0x40020000
 8001790:	40021800 	.word	0x40021800
 8001794:	40020400 	.word	0x40020400
 8001798:	40021400 	.word	0x40021400

0800179c <reverse>:

/* USER CODE BEGIN 4 */
void reverse(char* str, int len)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80017b0:	e018      	b.n	80017e4 <reverse+0x48>
        temp = str[i];
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	441a      	add	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	440b      	add	r3, r1
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	701a      	strb	r2, [r3, #0]
        i++;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3301      	adds	r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
        j--;
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbe2      	blt.n	80017b2 <reverse+0x16>
    }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <intToStr>:
int intToStr(int x, char str[], int d)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
    while (x) {
 800180c:	e01d      	b.n	800184a <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <intToStr+0x8c>)
 8001812:	fb83 1302 	smull	r1, r3, r3, r2
 8001816:	1099      	asrs	r1, r3, #2
 8001818:	17d3      	asrs	r3, r2, #31
 800181a:	1ac9      	subs	r1, r1, r3
 800181c:	460b      	mov	r3, r1
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	1ad1      	subs	r1, r2, r3
 8001826:	b2ca      	uxtb	r2, r1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	1c59      	adds	r1, r3, #1
 800182c:	6179      	str	r1, [r7, #20]
 800182e:	4619      	mov	r1, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	440b      	add	r3, r1
 8001834:	3230      	adds	r2, #48	; 0x30
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4a12      	ldr	r2, [pc, #72]	; (8001888 <intToStr+0x8c>)
 800183e:	fb82 1203 	smull	r1, r2, r2, r3
 8001842:	1092      	asrs	r2, r2, #2
 8001844:	17db      	asrs	r3, r3, #31
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	60fb      	str	r3, [r7, #12]
    while (x) {
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1de      	bne.n	800180e <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001850:	e007      	b.n	8001862 <intToStr+0x66>
        str[i++] = '0';
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	617a      	str	r2, [r7, #20]
 8001858:	461a      	mov	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	4413      	add	r3, r2
 800185e:	2230      	movs	r2, #48	; 0x30
 8001860:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	dbf3      	blt.n	8001852 <intToStr+0x56>

    reverse(str, i);
 800186a:	6979      	ldr	r1, [r7, #20]
 800186c:	68b8      	ldr	r0, [r7, #8]
 800186e:	f7ff ff95 	bl	800179c <reverse>
    str[i] = '\0';
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	4413      	add	r3, r2
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
    return i;
 800187c:	697b      	ldr	r3, [r7, #20]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	66666667 	.word	0x66666667

0800188c <ftoa>:
void ftoa(float n, char* res, int afterpoint)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	ed2d 8b02 	vpush	{d8}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	ed87 0a03 	vstr	s0, [r7, #12]
 800189a:	60b8      	str	r0, [r7, #8]
 800189c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 800189e:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a6:	ee17 3a90 	vmov	r3, s15
 80018aa:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80018ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018be:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	69f8      	ldr	r0, [r7, #28]
 80018c8:	f7ff ff98 	bl	80017fc <intToStr>
 80018cc:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d029      	beq.n	8001928 <ftoa+0x9c>
        res[i] = '.'; // add dot
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	4413      	add	r3, r2
 80018da:	222e      	movs	r2, #46	; 0x2e
 80018dc:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 80018de:	edd7 7a06 	vldr	s15, [r7, #24]
 80018e2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018f0:	eeb0 1b47 	vmov.f64	d1, d7
 80018f4:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80018f8:	f00a fc52 	bl	800c1a0 <pow>
 80018fc:	eeb0 7b40 	vmov.f64	d7, d0
 8001900:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001904:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001908:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 800190c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	4413      	add	r3, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4619      	mov	r1, r3
 8001920:	ee17 0a90 	vmov	r0, s15
 8001924:	f7ff ff6a 	bl	80017fc <intToStr>
    }
}
 8001928:	bf00      	nop
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	ecbd 8b02 	vpop	{d8}
 8001932:	bd80      	pop	{r7, pc}

08001934 <process_SD_card>:
void process_SD_card( void )
{
 8001934:	b580      	push	{r7, lr}
 8001936:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 800193a:	af00      	add	r7, sp, #0
  FIL         fil;                  //File handle
  FRESULT     fres;                 //Result after operations
  char        buf[100];
  //Measurement_of_ADC_Voltage_18650();
  char res[20];
  float n = V_18650;
 800193c:	4b74      	ldr	r3, [pc, #464]	; (8001b10 <process_SD_card+0x1dc>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f242 02fc 	movw	r2, #8444	; 0x20fc
 8001944:	443a      	add	r2, r7
 8001946:	6013      	str	r3, [r2, #0]
  float o = V_CMOS;
 8001948:	4b72      	ldr	r3, [pc, #456]	; (8001b14 <process_SD_card+0x1e0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f242 02f8 	movw	r2, #8440	; 0x20f8
 8001950:	443a      	add	r2, r7
 8001952:	6013      	str	r3, [r2, #0]
  ftoa(n, res, 3);
 8001954:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <process_SD_card+0x1e4>)
 8001956:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800195a:	443b      	add	r3, r7
 800195c:	2103      	movs	r1, #3
 800195e:	4618      	mov	r0, r3
 8001960:	f242 03fc 	movw	r3, #8444	; 0x20fc
 8001964:	443b      	add	r3, r7
 8001966:	ed93 0a00 	vldr	s0, [r3]
 800196a:	f7ff ff8f 	bl	800188c <ftoa>

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 800196e:	4b6b      	ldr	r3, [pc, #428]	; (8001b1c <process_SD_card+0x1e8>)
 8001970:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001974:	443b      	add	r3, r7
 8001976:	2201      	movs	r2, #1
 8001978:	4969      	ldr	r1, [pc, #420]	; (8001b20 <process_SD_card+0x1ec>)
 800197a:	4618      	mov	r0, r3
 800197c:	f005 f8aa 	bl	8006ad4 <f_mount>
 8001980:	4603      	mov	r3, r0
 8001982:	f242 02f7 	movw	r2, #8439	; 0x20f7
 8001986:	443a      	add	r2, r7
 8001988:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 800198a:	f242 03f7 	movw	r3, #8439	; 0x20f7
 800198e:	443b      	add	r3, r7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 80ac 	bne.w	8001af0 <process_SD_card+0x1bc>
    //printf("SD Card Mounted Successfully!!!\r\n");
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;
    f_getfree("", &fre_clust, &pfs);
 8001998:	4a62      	ldr	r2, [pc, #392]	; (8001b24 <process_SD_card+0x1f0>)
 800199a:	f502 5304 	add.w	r3, r2, #8448	; 0x2100
 800199e:	19da      	adds	r2, r3, r7
 80019a0:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <process_SD_card+0x1f4>)
 80019a2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80019a6:	443b      	add	r3, r7
 80019a8:	4619      	mov	r1, r3
 80019aa:	485d      	ldr	r0, [pc, #372]	; (8001b20 <process_SD_card+0x1ec>)
 80019ac:	f005 fe3f 	bl	800762e <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80019b0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019b4:	f853 3cf8 	ldr.w	r3, [r3, #-248]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	3b02      	subs	r3, #2
 80019bc:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80019c0:	f852 2cf8 	ldr.w	r2, [r2, #-248]
 80019c4:	8952      	ldrh	r2, [r2, #10]
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	ee07 3a90 	vmov	s15, r3
 80019ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80019d2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80019d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80019de:	ee17 3a90 	vmov	r3, s15
 80019e2:	f242 02f0 	movw	r2, #8432	; 0x20f0
 80019e6:	443a      	add	r2, r7
 80019e8:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80019ea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019ee:	f853 3cf8 	ldr.w	r3, [r3, #-248]
 80019f2:	895b      	ldrh	r3, [r3, #10]
 80019f4:	461a      	mov	r2, r3
 80019f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019fa:	f853 3cfc 	ldr.w	r3, [r3, #-252]
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a0a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001a0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a12:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a16:	ee17 3a90 	vmov	r3, s15
 8001a1a:	f242 02ec 	movw	r2, #8428	; 0x20ec
 8001a1e:	443a      	add	r2, r7
 8001a20:	6013      	str	r3, [r2, #0]
    //printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
    //Open the file
    fres = f_open(&fil, "Readings.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8001a22:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <process_SD_card+0x1f8>)
 8001a24:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001a28:	443b      	add	r3, r7
 8001a2a:	220b      	movs	r2, #11
 8001a2c:	4940      	ldr	r1, [pc, #256]	; (8001b30 <process_SD_card+0x1fc>)
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f005 f896 	bl	8006b60 <f_open>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f242 02f7 	movw	r2, #8439	; 0x20f7
 8001a3a:	443a      	add	r2, r7
 8001a3c:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8001a3e:	f242 03f7 	movw	r3, #8439	; 0x20f7
 8001a42:	443b      	add	r3, r7
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d154      	bne.n	8001af4 <process_SD_card+0x1c0>
      //printf("File creation/open Error : (%i)\r\n", fres);
      break;
    }
    //printf("Writing data!!!\r\n");
    //write the data
    f_puts("Voltage Readings-\n", &fil);
 8001a4a:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <process_SD_card+0x1f8>)
 8001a4c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001a50:	443b      	add	r3, r7
 8001a52:	4619      	mov	r1, r3
 8001a54:	4837      	ldr	r0, [pc, #220]	; (8001b34 <process_SD_card+0x200>)
 8001a56:	f005 ff53 	bl	8007900 <f_puts>
    f_puts("18650:", &fil);
 8001a5a:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <process_SD_card+0x1f8>)
 8001a5c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001a60:	443b      	add	r3, r7
 8001a62:	4619      	mov	r1, r3
 8001a64:	4834      	ldr	r0, [pc, #208]	; (8001b38 <process_SD_card+0x204>)
 8001a66:	f005 ff4b 	bl	8007900 <f_puts>
    f_puts(res, &fil);
 8001a6a:	4a30      	ldr	r2, [pc, #192]	; (8001b2c <process_SD_card+0x1f8>)
 8001a6c:	f502 5304 	add.w	r3, r2, #8448	; 0x2100
 8001a70:	19da      	adds	r2, r3, r7
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <process_SD_card+0x1e4>)
 8001a74:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001a78:	443b      	add	r3, r7
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f005 ff3f 	bl	8007900 <f_puts>
    f_puts("\nCMOS: \n",&fil);
 8001a82:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <process_SD_card+0x1f8>)
 8001a84:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001a88:	443b      	add	r3, r7
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	482b      	ldr	r0, [pc, #172]	; (8001b3c <process_SD_card+0x208>)
 8001a8e:	f005 ff37 	bl	8007900 <f_puts>
    //close your file
    f_close(&fil);
 8001a92:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <process_SD_card+0x1f8>)
 8001a94:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001a98:	443b      	add	r3, r7
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f005 fd9d 	bl	80075da <f_close>
    //Open the file
    fres = f_open(&fil, "Readings.txt", FA_READ);
 8001aa0:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <process_SD_card+0x1f8>)
 8001aa2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001aa6:	443b      	add	r3, r7
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4921      	ldr	r1, [pc, #132]	; (8001b30 <process_SD_card+0x1fc>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f005 f857 	bl	8006b60 <f_open>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f242 02f7 	movw	r2, #8439	; 0x20f7
 8001ab8:	443a      	add	r2, r7
 8001aba:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8001abc:	f242 03f7 	movw	r3, #8439	; 0x20f7
 8001ac0:	443b      	add	r3, r7
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d117      	bne.n	8001af8 <process_SD_card+0x1c4>
    {
      //printf("File opening Error : (%i)\r\n", fres);
      break;
    }
    //read the data
    f_gets(buf, sizeof(buf), &fil);
 8001ac8:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <process_SD_card+0x1f8>)
 8001aca:	f502 5304 	add.w	r3, r2, #8448	; 0x2100
 8001ace:	19da      	adds	r2, r3, r7
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <process_SD_card+0x20c>)
 8001ad2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001ad6:	443b      	add	r3, r7
 8001ad8:	2164      	movs	r1, #100	; 0x64
 8001ada:	4618      	mov	r0, r3
 8001adc:	f005 fe5c 	bl	8007798 <f_gets>
    //printf("Read Data : %s\n", buf);
    //close your file
    f_close(&fil);
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <process_SD_card+0x1f8>)
 8001ae2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001ae6:	443b      	add	r3, r7
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f005 fd76 	bl	80075da <f_close>
 8001aee:	e004      	b.n	8001afa <process_SD_card+0x1c6>
      break;
 8001af0:	bf00      	nop
 8001af2:	e002      	b.n	8001afa <process_SD_card+0x1c6>
      break;
 8001af4:	bf00      	nop
 8001af6:	e000      	b.n	8001afa <process_SD_card+0x1c6>
      break;
 8001af8:	bf00      	nop
      //printf("Cannot able to delete the file\n");
    }
#endif
  } while(0);
  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	4908      	ldr	r1, [pc, #32]	; (8001b20 <process_SD_card+0x1ec>)
 8001afe:	2000      	movs	r0, #0
 8001b00:	f004 ffe8 	bl	8006ad4 <f_mount>
  //printf("SD Card Unmounted Successfully!!!\r\n");
}
 8001b04:	bf00      	nop
 8001b06:	f507 5704 	add.w	r7, r7, #8448	; 0x2100
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000004 	.word	0x20000004
 8001b14:	20000008 	.word	0x20000008
 8001b18:	ffffdf0c 	.word	0xffffdf0c
 8001b1c:	ffffefb4 	.word	0xffffefb4
 8001b20:	0800c738 	.word	0x0800c738
 8001b24:	ffffdf08 	.word	0xffffdf08
 8001b28:	ffffdf04 	.word	0xffffdf04
 8001b2c:	ffffdf84 	.word	0xffffdf84
 8001b30:	0800c73c 	.word	0x0800c73c
 8001b34:	0800c74c 	.word	0x0800c74c
 8001b38:	0800c760 	.word	0x0800c760
 8001b3c:	0800c768 	.word	0x0800c768
 8001b40:	ffffdf20 	.word	0xffffdf20

08001b44 <process_SD_card1>:

void process_SD_card1( void )
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 8001b4a:	af00      	add	r7, sp, #0
  FIL         fil;                  //File handle
  FRESULT     fres;                 //Result after operations
  char        buf[100];
  //Measurement_of_ADC_Voltage_18650();
  char res[20];
  float n = 0.00;
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	f242 02fc 	movw	r2, #8444	; 0x20fc
 8001b54:	443a      	add	r2, r7
 8001b56:	6013      	str	r3, [r2, #0]
  float o = V_CMOS;
 8001b58:	4b71      	ldr	r3, [pc, #452]	; (8001d20 <process_SD_card1+0x1dc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f242 02f8 	movw	r2, #8440	; 0x20f8
 8001b60:	443a      	add	r2, r7
 8001b62:	6013      	str	r3, [r2, #0]
  ftoa(n, res, 3);
 8001b64:	4b6f      	ldr	r3, [pc, #444]	; (8001d24 <process_SD_card1+0x1e0>)
 8001b66:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001b6a:	443b      	add	r3, r7
 8001b6c:	2103      	movs	r1, #3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f242 03fc 	movw	r3, #8444	; 0x20fc
 8001b74:	443b      	add	r3, r7
 8001b76:	ed93 0a00 	vldr	s0, [r3]
 8001b7a:	f7ff fe87 	bl	800188c <ftoa>

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 8001b7e:	4b6a      	ldr	r3, [pc, #424]	; (8001d28 <process_SD_card1+0x1e4>)
 8001b80:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001b84:	443b      	add	r3, r7
 8001b86:	2201      	movs	r2, #1
 8001b88:	4968      	ldr	r1, [pc, #416]	; (8001d2c <process_SD_card1+0x1e8>)
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f004 ffa2 	bl	8006ad4 <f_mount>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f242 02f7 	movw	r2, #8439	; 0x20f7
 8001b96:	443a      	add	r2, r7
 8001b98:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 8001b9a:	f242 03f7 	movw	r3, #8439	; 0x20f7
 8001b9e:	443b      	add	r3, r7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 80ac 	bne.w	8001d00 <process_SD_card1+0x1bc>
    //printf("SD Card Mounted Successfully!!!\r\n");
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;
    f_getfree("", &fre_clust, &pfs);
 8001ba8:	4a61      	ldr	r2, [pc, #388]	; (8001d30 <process_SD_card1+0x1ec>)
 8001baa:	f502 5304 	add.w	r3, r2, #8448	; 0x2100
 8001bae:	19da      	adds	r2, r3, r7
 8001bb0:	4b60      	ldr	r3, [pc, #384]	; (8001d34 <process_SD_card1+0x1f0>)
 8001bb2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001bb6:	443b      	add	r3, r7
 8001bb8:	4619      	mov	r1, r3
 8001bba:	485c      	ldr	r0, [pc, #368]	; (8001d2c <process_SD_card1+0x1e8>)
 8001bbc:	f005 fd37 	bl	800762e <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001bc0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001bc4:	f853 3cf8 	ldr.w	r3, [r3, #-248]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	3b02      	subs	r3, #2
 8001bcc:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8001bd0:	f852 2cf8 	ldr.w	r2, [r2, #-248]
 8001bd4:	8952      	ldrh	r2, [r2, #10]
 8001bd6:	fb02 f303 	mul.w	r3, r2, r3
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001be2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001be6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001bea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001bee:	ee17 3a90 	vmov	r3, s15
 8001bf2:	f242 02f0 	movw	r2, #8432	; 0x20f0
 8001bf6:	443a      	add	r2, r7
 8001bf8:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001bfa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001bfe:	f853 3cf8 	ldr.w	r3, [r3, #-248]
 8001c02:	895b      	ldrh	r3, [r3, #10]
 8001c04:	461a      	mov	r2, r3
 8001c06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c0a:	f853 3cfc 	ldr.w	r3, [r3, #-252]
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	ee07 3a90 	vmov	s15, r3
 8001c16:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c1a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001c1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c26:	ee17 3a90 	vmov	r3, s15
 8001c2a:	f242 02ec 	movw	r2, #8428	; 0x20ec
 8001c2e:	443a      	add	r2, r7
 8001c30:	6013      	str	r3, [r2, #0]
    //printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
    //Open the file
    fres = f_open(&fil, "Readings1.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <process_SD_card1+0x1f4>)
 8001c34:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001c38:	443b      	add	r3, r7
 8001c3a:	220b      	movs	r2, #11
 8001c3c:	493f      	ldr	r1, [pc, #252]	; (8001d3c <process_SD_card1+0x1f8>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f004 ff8e 	bl	8006b60 <f_open>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f242 02f7 	movw	r2, #8439	; 0x20f7
 8001c4a:	443a      	add	r2, r7
 8001c4c:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8001c4e:	f242 03f7 	movw	r3, #8439	; 0x20f7
 8001c52:	443b      	add	r3, r7
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d154      	bne.n	8001d04 <process_SD_card1+0x1c0>
      //printf("File creation/open Error : (%i)\r\n", fres);
      break;
    }
    //printf("Writing data!!!\r\n");
    //write the data
    f_puts("Voltage Readings-\n", &fil);
 8001c5a:	4b37      	ldr	r3, [pc, #220]	; (8001d38 <process_SD_card1+0x1f4>)
 8001c5c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001c60:	443b      	add	r3, r7
 8001c62:	4619      	mov	r1, r3
 8001c64:	4836      	ldr	r0, [pc, #216]	; (8001d40 <process_SD_card1+0x1fc>)
 8001c66:	f005 fe4b 	bl	8007900 <f_puts>
    f_puts("18650:", &fil);
 8001c6a:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <process_SD_card1+0x1f4>)
 8001c6c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001c70:	443b      	add	r3, r7
 8001c72:	4619      	mov	r1, r3
 8001c74:	4833      	ldr	r0, [pc, #204]	; (8001d44 <process_SD_card1+0x200>)
 8001c76:	f005 fe43 	bl	8007900 <f_puts>
    f_puts(res, &fil);
 8001c7a:	4a2f      	ldr	r2, [pc, #188]	; (8001d38 <process_SD_card1+0x1f4>)
 8001c7c:	f502 5304 	add.w	r3, r2, #8448	; 0x2100
 8001c80:	19da      	adds	r2, r3, r7
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <process_SD_card1+0x1e0>)
 8001c84:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001c88:	443b      	add	r3, r7
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f005 fe37 	bl	8007900 <f_puts>
    f_puts("\nCMOS: \n",&fil);
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <process_SD_card1+0x1f4>)
 8001c94:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001c98:	443b      	add	r3, r7
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	482a      	ldr	r0, [pc, #168]	; (8001d48 <process_SD_card1+0x204>)
 8001c9e:	f005 fe2f 	bl	8007900 <f_puts>
    //close your file
    f_close(&fil);
 8001ca2:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <process_SD_card1+0x1f4>)
 8001ca4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001ca8:	443b      	add	r3, r7
 8001caa:	4618      	mov	r0, r3
 8001cac:	f005 fc95 	bl	80075da <f_close>
    //Open the file
    fres = f_open(&fil, "Readings.txt", FA_READ);
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <process_SD_card1+0x1f4>)
 8001cb2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001cb6:	443b      	add	r3, r7
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4924      	ldr	r1, [pc, #144]	; (8001d4c <process_SD_card1+0x208>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f004 ff4f 	bl	8006b60 <f_open>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f242 02f7 	movw	r2, #8439	; 0x20f7
 8001cc8:	443a      	add	r2, r7
 8001cca:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8001ccc:	f242 03f7 	movw	r3, #8439	; 0x20f7
 8001cd0:	443b      	add	r3, r7
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d117      	bne.n	8001d08 <process_SD_card1+0x1c4>
    {
      //printf("File opening Error : (%i)\r\n", fres);
      break;
    }
    //read the data
    f_gets(buf, sizeof(buf), &fil);
 8001cd8:	4a17      	ldr	r2, [pc, #92]	; (8001d38 <process_SD_card1+0x1f4>)
 8001cda:	f502 5304 	add.w	r3, r2, #8448	; 0x2100
 8001cde:	19da      	adds	r2, r3, r7
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <process_SD_card1+0x20c>)
 8001ce2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001ce6:	443b      	add	r3, r7
 8001ce8:	2164      	movs	r1, #100	; 0x64
 8001cea:	4618      	mov	r0, r3
 8001cec:	f005 fd54 	bl	8007798 <f_gets>
    //printf("Read Data : %s\n", buf);
    //close your file
    f_close(&fil);
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <process_SD_card1+0x1f4>)
 8001cf2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001cf6:	443b      	add	r3, r7
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f005 fc6e 	bl	80075da <f_close>
 8001cfe:	e004      	b.n	8001d0a <process_SD_card1+0x1c6>
      break;
 8001d00:	bf00      	nop
 8001d02:	e002      	b.n	8001d0a <process_SD_card1+0x1c6>
      break;
 8001d04:	bf00      	nop
 8001d06:	e000      	b.n	8001d0a <process_SD_card1+0x1c6>
      break;
 8001d08:	bf00      	nop
      //printf("Cannot able to delete the file\n");
    }
#endif
  } while(0);
  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4907      	ldr	r1, [pc, #28]	; (8001d2c <process_SD_card1+0x1e8>)
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f004 fee0 	bl	8006ad4 <f_mount>
  //printf("SD Card Unmounted Successfully!!!\r\n");
}
 8001d14:	bf00      	nop
 8001d16:	f507 5704 	add.w	r7, r7, #8448	; 0x2100
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000008 	.word	0x20000008
 8001d24:	ffffdf0c 	.word	0xffffdf0c
 8001d28:	ffffefb4 	.word	0xffffefb4
 8001d2c:	0800c738 	.word	0x0800c738
 8001d30:	ffffdf08 	.word	0xffffdf08
 8001d34:	ffffdf04 	.word	0xffffdf04
 8001d38:	ffffdf84 	.word	0xffffdf84
 8001d3c:	0800c774 	.word	0x0800c774
 8001d40:	0800c74c 	.word	0x0800c74c
 8001d44:	0800c760 	.word	0x0800c760
 8001d48:	0800c768 	.word	0x0800c768
 8001d4c:	0800c73c 	.word	0x0800c73c
 8001d50:	ffffdf20 	.word	0xffffdf20

08001d54 <Measurement_of_ADC_Voltage_18650>:

void Measurement_of_ADC_Voltage_18650(){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
	float V_ref = 3.3;  // This is known for each micro controller from data
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <Measurement_of_ADC_Voltage_18650+0x94>)
 8001d5c:	60fb      	str	r3, [r7, #12]
		// sheet, V_ref = power supply in
		float ADC_resolution = (4096 - 1);  // 2^12 - 1
 8001d5e:	4b23      	ldr	r3, [pc, #140]	; (8001dec <Measurement_of_ADC_Voltage_18650+0x98>)
 8001d60:	60bb      	str	r3, [r7, #8]
		float V_stepSize = V_ref / ADC_resolution;
 8001d62:	edd7 6a03 	vldr	s13, [r7, #12]
 8001d66:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d6e:	edc7 7a01 	vstr	s15, [r7, #4]

		//char msg[20];


	    /* Start ADC Conversion for ADC1 */
	    ADC_Select_Voltage18650();
 8001d72:	f000 f843 	bl	8001dfc <ADC_Select_Voltage18650>
	    HAL_ADC_Start(&hadc1);
 8001d76:	481e      	ldr	r0, [pc, #120]	; (8001df0 <Measurement_of_ADC_Voltage_18650+0x9c>)
 8001d78:	f000 fb12 	bl	80023a0 <HAL_ADC_Start>
	    uint16_t rawValue1;
	       if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	481b      	ldr	r0, [pc, #108]	; (8001df0 <Measurement_of_ADC_Voltage_18650+0x9c>)
 8001d82:	f000 fc0f 	bl	80025a4 <HAL_ADC_PollForConversion>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d125      	bne.n	8001dd8 <Measurement_of_ADC_Voltage_18650+0x84>
	           /* Read the ADC1 value */
	           rawValue1 = HAL_ADC_GetValue(&hadc1);
 8001d8c:	4818      	ldr	r0, [pc, #96]	; (8001df0 <Measurement_of_ADC_Voltage_18650+0x9c>)
 8001d8e:	f000 fc94 	bl	80026ba <HAL_ADC_GetValue>
 8001d92:	4603      	mov	r3, r0
 8001d94:	807b      	strh	r3, [r7, #2]
	           // write a current get and map the voltage to a current
//	           sprintf("%f", (int)rawValue1);
//	           HAL_UART_Transmit(&hlpuart1, (uint16_t*)msg, strlen(msg), HAL_MAX_DELAY);


	           V_18650 = rawValue1 * V_stepSize;  // You might want to use a different name
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	ee07 3a90 	vmov	s15, r3
 8001d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <Measurement_of_ADC_Voltage_18650+0xa0>)
 8001daa:	edc3 7a00 	vstr	s15, [r3]
	                                        // for this variable
	           // write to sD card
	           // pass to buffer
	           // SD_write(time, voltage, current)
	           /* Check if the value corresponds to 3.3V */
	           if (V_18650 > 3.0)  // Slight tolerance might be needed depending on
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <Measurement_of_ADC_Voltage_18650+0xa0>)
 8001db0:	edd3 7a00 	vldr	s15, [r3]
 8001db4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	dd05      	ble.n	8001dce <Measurement_of_ADC_Voltage_18650+0x7a>
                   // your application's accuracy requirements.
	           {
   /* Turn ON the B_18650_LoadSwitch_Pin */
	        	   HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	480c      	ldr	r0, [pc, #48]	; (8001df8 <Measurement_of_ADC_Voltage_18650+0xa4>)
 8001dc8:	f001 f97e 	bl	80030c8 <HAL_GPIO_WritePin>
 8001dcc:	e004      	b.n	8001dd8 <Measurement_of_ADC_Voltage_18650+0x84>
	           } else {
   /* Turn OFF the B_18650_LoadSwitch_Pin */
	        	   HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	4809      	ldr	r0, [pc, #36]	; (8001df8 <Measurement_of_ADC_Voltage_18650+0xa4>)
 8001dd4:	f001 f978 	bl	80030c8 <HAL_GPIO_WritePin>
	           }
	       }

	    HAL_ADC_Stop(&hadc1);
 8001dd8:	4805      	ldr	r0, [pc, #20]	; (8001df0 <Measurement_of_ADC_Voltage_18650+0x9c>)
 8001dda:	f000 fbaf 	bl	800253c <HAL_ADC_Stop>
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40533333 	.word	0x40533333
 8001dec:	457ff000 	.word	0x457ff000
 8001df0:	20000218 	.word	0x20000218
 8001df4:	20000004 	.word	0x20000004
 8001df8:	40021800 	.word	0x40021800

08001dfc <ADC_Select_Voltage18650>:

void ADC_Select_Voltage18650(void){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
ADC_ChannelConfTypeDef sConfig = {0};
 8001e02:	463b      	mov	r3, r7
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
sConfig.Channel = ADC_CHANNEL_3;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	603b      	str	r3, [r7, #0]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e12:	463b      	mov	r3, r7
 8001e14:	4619      	mov	r1, r3
 8001e16:	4806      	ldr	r0, [pc, #24]	; (8001e30 <ADC_Select_Voltage18650+0x34>)
 8001e18:	f000 fc5c 	bl	80026d4 <HAL_ADC_ConfigChannel>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <ADC_Select_Voltage18650+0x2a>
{
  Error_Handler();
 8001e22:	f000 f807 	bl	8001e34 <Error_Handler>
}
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000218 	.word	0x20000218

08001e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e38:	b672      	cpsid	i
}
 8001e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <Error_Handler+0x8>
	...

08001e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <HAL_MspInit+0x44>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <HAL_MspInit+0x44>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <HAL_MspInit+0x44>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_MspInit+0x44>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <HAL_MspInit+0x44>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e68:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_MspInit+0x44>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800

08001e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a15      	ldr	r2, [pc, #84]	; (8001efc <HAL_ADC_MspInit+0x74>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d123      	bne.n	8001ef2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_ADC_MspInit+0x78>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a14      	ldr	r2, [pc, #80]	; (8001f00 <HAL_ADC_MspInit+0x78>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_ADC_MspInit+0x78>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <HAL_ADC_MspInit+0x78>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <HAL_ADC_MspInit+0x78>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_ADC_MspInit+0x78>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = Voltage_ADC_18650_Pin;
 8001eda:	2308      	movs	r3, #8
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Voltage_ADC_18650_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4805      	ldr	r0, [pc, #20]	; (8001f04 <HAL_ADC_MspInit+0x7c>)
 8001eee:	f000 ff27 	bl	8002d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ef2:	bf00      	nop
 8001ef4:	3728      	adds	r7, #40	; 0x28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40012000 	.word	0x40012000
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020000 	.word	0x40020000

08001f08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a17      	ldr	r2, [pc, #92]	; (8001f84 <HAL_SPI_MspInit+0x7c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d127      	bne.n	8001f7a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f2a:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <HAL_SPI_MspInit+0x80>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <HAL_SPI_MspInit+0x80>)
 8001f30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f34:	6453      	str	r3, [r2, #68]	; 0x44
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_SPI_MspInit+0x80>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_SPI_MspInit+0x80>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <HAL_SPI_MspInit+0x80>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_SPI_MspInit+0x80>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f5a:	23e0      	movs	r3, #224	; 0xe0
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4619      	mov	r1, r3
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <HAL_SPI_MspInit+0x84>)
 8001f76:	f000 fee3 	bl	8002d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f7a:	bf00      	nop
 8001f7c:	3728      	adds	r7, #40	; 0x28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40013000 	.word	0x40013000
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020000 	.word	0x40020000

08001f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <NMI_Handler+0x4>

08001f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <HardFault_Handler+0x4>

08001f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <MemManage_Handler+0x4>

08001fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa6:	e7fe      	b.n	8001fa6 <BusFault_Handler+0x4>

08001fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <UsageFault_Handler+0x4>

08001fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <SysTick_Handler+0x34>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <SysTick_Handler+0x18>
		  Timer1--;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <SysTick_Handler+0x34>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <SysTick_Handler+0x34>)
 8001fee:	801a      	strh	r2, [r3, #0]
		if(Timer2 > 0)
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <SysTick_Handler+0x38>)
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <SysTick_Handler+0x2c>
		  Timer2--;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <SysTick_Handler+0x38>)
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <SysTick_Handler+0x38>)
 8002002:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002004:	f000 f944 	bl	8002290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000210 	.word	0x20000210
 8002010:	20000212 	.word	0x20000212

08002014 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return 1;
 8002018:	2301      	movs	r3, #1
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <_kill>:

int _kill(int pid, int sig)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800202e:	f006 fd65 	bl	8008afc <__errno>
 8002032:	4603      	mov	r3, r0
 8002034:	2216      	movs	r2, #22
 8002036:	601a      	str	r2, [r3, #0]
  return -1;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_exit>:

void _exit (int status)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ffe7 	bl	8002024 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002056:	e7fe      	b.n	8002056 <_exit+0x12>

08002058 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	e00a      	b.n	8002080 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800206a:	f3af 8000 	nop.w
 800206e:	4601      	mov	r1, r0
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	60ba      	str	r2, [r7, #8]
 8002076:	b2ca      	uxtb	r2, r1
 8002078:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	dbf0      	blt.n	800206a <_read+0x12>
  }

  return len;
 8002088:	687b      	ldr	r3, [r7, #4]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	e009      	b.n	80020b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	60ba      	str	r2, [r7, #8]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3301      	adds	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	dbf1      	blt.n	80020a4 <_write+0x12>
  }
  return len;
 80020c0:	687b      	ldr	r3, [r7, #4]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <_close>:

int _close(int file)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020f2:	605a      	str	r2, [r3, #4]
  return 0;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <_isatty>:

int _isatty(int file)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <_sbrk+0x5c>)
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <_sbrk+0x60>)
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <_sbrk+0x64>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <_sbrk+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d207      	bcs.n	8002174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002164:	f006 fcca 	bl	8008afc <__errno>
 8002168:	4603      	mov	r3, r0
 800216a:	220c      	movs	r2, #12
 800216c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	e009      	b.n	8002188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <_sbrk+0x64>)
 8002184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20080000 	.word	0x20080000
 8002194:	00000400 	.word	0x00000400
 8002198:	200002c4 	.word	0x200002c4
 800219c:	20000658 	.word	0x20000658

080021a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <SystemInit+0x20>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <SystemInit+0x20>)
 80021ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021ca:	490e      	ldr	r1, [pc, #56]	; (8002204 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021cc:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0b      	ldr	r2, [pc, #44]	; (800220c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021e0:	4c0b      	ldr	r4, [pc, #44]	; (8002210 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021ee:	f7ff ffd7 	bl	80021a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021f2:	f006 fc89 	bl	8008b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f6:	f7ff f8b7 	bl	8001368 <main>
  bx  lr    
 80021fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021fc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002204:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002208:	0800e910 	.word	0x0800e910
  ldr r2, =_sbss
 800220c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002210:	20000654 	.word	0x20000654

08002214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC_IRQHandler>

08002216 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221a:	2003      	movs	r0, #3
 800221c:	f000 fd5c 	bl	8002cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002220:	2000      	movs	r0, #0
 8002222:	f000 f805 	bl	8002230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002226:	f7ff fe0b 	bl	8001e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_InitTick+0x54>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_InitTick+0x58>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002246:	fbb3 f3f1 	udiv	r3, r3, r1
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fd69 	bl	8002d26 <HAL_SYSTICK_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00e      	b.n	800227c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	d80a      	bhi.n	800227a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002264:	2200      	movs	r2, #0
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f000 fd3f 	bl	8002cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002270:	4a06      	ldr	r2, [pc, #24]	; (800228c <HAL_InitTick+0x5c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	2000000c 	.word	0x2000000c
 8002288:	20000014 	.word	0x20000014
 800228c:	20000010 	.word	0x20000010

08002290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_IncTick+0x20>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_IncTick+0x24>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <HAL_IncTick+0x24>)
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000014 	.word	0x20000014
 80022b4:	200002c8 	.word	0x200002c8

080022b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return uwTick;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_GetTick+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	200002c8 	.word	0x200002c8

080022d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7ff ffee 	bl	80022b8 <HAL_GetTick>
 80022dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d005      	beq.n	80022f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_Delay+0x44>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022f6:	bf00      	nop
 80022f8:	f7ff ffde 	bl	80022b8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d8f7      	bhi.n	80022f8 <HAL_Delay+0x28>
  {
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000014 	.word	0x20000014

08002318 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e031      	b.n	8002392 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff fda6 	bl	8001e88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_ADC_Init+0x84>)
 800235c:	4013      	ands	r3, r2
 800235e:	f043 0202 	orr.w	r2, r3, #2
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fb0a 	bl	8002980 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f023 0303 	bic.w	r3, r3, #3
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
 8002382:	e001      	b.n	8002388 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	ffffeefd 	.word	0xffffeefd

080023a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_Start+0x1a>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e0ad      	b.n	8002516 <HAL_ADC_Start+0x176>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d018      	beq.n	8002402 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80023e0:	4b50      	ldr	r3, [pc, #320]	; (8002524 <HAL_ADC_Start+0x184>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a50      	ldr	r2, [pc, #320]	; (8002528 <HAL_ADC_Start+0x188>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0c9a      	lsrs	r2, r3, #18
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80023f4:	e002      	b.n	80023fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f9      	bne.n	80023f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d175      	bne.n	80024fc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002414:	4b45      	ldr	r3, [pc, #276]	; (800252c <HAL_ADC_Start+0x18c>)
 8002416:	4013      	ands	r3, r2
 8002418:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002436:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244a:	d106      	bne.n	800245a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002450:	f023 0206 	bic.w	r2, r3, #6
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	645a      	str	r2, [r3, #68]	; 0x44
 8002458:	e002      	b.n	8002460 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002470:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002472:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <HAL_ADC_Start+0x190>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d143      	bne.n	8002514 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	e03a      	b.n	8002514 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a24      	ldr	r2, [pc, #144]	; (8002534 <HAL_ADC_Start+0x194>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d10e      	bne.n	80024c6 <HAL_ADC_Start+0x126>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d107      	bne.n	80024c6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024c4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <HAL_ADC_Start+0x190>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d120      	bne.n	8002514 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a18      	ldr	r2, [pc, #96]	; (8002538 <HAL_ADC_Start+0x198>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d11b      	bne.n	8002514 <HAL_ADC_Start+0x174>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d114      	bne.n	8002514 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	e00b      	b.n	8002514 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f043 0210 	orr.w	r2, r3, #16
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	2000000c 	.word	0x2000000c
 8002528:	431bde83 	.word	0x431bde83
 800252c:	fffff8fe 	.word	0xfffff8fe
 8002530:	40012300 	.word	0x40012300
 8002534:	40012000 	.word	0x40012000
 8002538:	40012200 	.word	0x40012200

0800253c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_ADC_Stop+0x16>
 800254e:	2302      	movs	r3, #2
 8002550:	e01f      	b.n	8002592 <HAL_ADC_Stop+0x56>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0201 	bic.w	r2, r2, #1
 8002568:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d107      	bne.n	8002588 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_ADC_Stop+0x64>)
 800257e:	4013      	ands	r3, r2
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	ffffeefe 	.word	0xffffeefe

080025a4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c0:	d113      	bne.n	80025ea <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d0:	d10b      	bne.n	80025ea <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f043 0220 	orr.w	r2, r3, #32
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e063      	b.n	80026b2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80025ea:	f7ff fe65 	bl	80022b8 <HAL_GetTick>
 80025ee:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025f0:	e021      	b.n	8002636 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d01d      	beq.n	8002636 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_ADC_PollForConversion+0x6c>
 8002600:	f7ff fe5a 	bl	80022b8 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d212      	bcs.n	8002636 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b02      	cmp	r3, #2
 800261c:	d00b      	beq.n	8002636 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f043 0204 	orr.w	r2, r3, #4
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e03d      	b.n	80026b2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b02      	cmp	r3, #2
 8002642:	d1d6      	bne.n	80025f2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0212 	mvn.w	r2, #18
 800264c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d123      	bne.n	80026b0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800266c:	2b00      	cmp	r3, #0
 800266e:	d11f      	bne.n	80026b0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002688:	2b00      	cmp	r3, #0
 800268a:	d111      	bne.n	80026b0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x1c>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e136      	b.n	800295e <HAL_ADC_ConfigChannel+0x28a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b09      	cmp	r3, #9
 80026fe:	d93a      	bls.n	8002776 <HAL_ADC_ConfigChannel+0xa2>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002708:	d035      	beq.n	8002776 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68d9      	ldr	r1, [r3, #12]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	b29b      	uxth	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	4613      	mov	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	3b1e      	subs	r3, #30
 8002720:	2207      	movs	r2, #7
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	400a      	ands	r2, r1
 800272e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a8d      	ldr	r2, [pc, #564]	; (800296c <HAL_ADC_ConfigChannel+0x298>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10a      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68d9      	ldr	r1, [r3, #12]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	061a      	lsls	r2, r3, #24
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800274e:	e035      	b.n	80027bc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68d9      	ldr	r1, [r3, #12]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	4618      	mov	r0, r3
 8002762:	4603      	mov	r3, r0
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4403      	add	r3, r0
 8002768:	3b1e      	subs	r3, #30
 800276a:	409a      	lsls	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002774:	e022      	b.n	80027bc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6919      	ldr	r1, [r3, #16]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	2207      	movs	r2, #7
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43da      	mvns	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	400a      	ands	r2, r1
 8002798:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6919      	ldr	r1, [r3, #16]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	4618      	mov	r0, r3
 80027ac:	4603      	mov	r3, r0
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4403      	add	r3, r0
 80027b2:	409a      	lsls	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b06      	cmp	r3, #6
 80027c2:	d824      	bhi.n	800280e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	3b05      	subs	r3, #5
 80027d6:	221f      	movs	r2, #31
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43da      	mvns	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	400a      	ands	r2, r1
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	3b05      	subs	r3, #5
 8002800:	fa00 f203 	lsl.w	r2, r0, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	635a      	str	r2, [r3, #52]	; 0x34
 800280c:	e04c      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d824      	bhi.n	8002860 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	3b23      	subs	r3, #35	; 0x23
 8002828:	221f      	movs	r2, #31
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	400a      	ands	r2, r1
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	4618      	mov	r0, r3
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	3b23      	subs	r3, #35	; 0x23
 8002852:	fa00 f203 	lsl.w	r2, r0, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
 800285e:	e023      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	3b41      	subs	r3, #65	; 0x41
 8002872:	221f      	movs	r2, #31
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43da      	mvns	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	400a      	ands	r2, r1
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	4618      	mov	r0, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	3b41      	subs	r3, #65	; 0x41
 800289c:	fa00 f203 	lsl.w	r2, r0, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a30      	ldr	r2, [pc, #192]	; (8002970 <HAL_ADC_ConfigChannel+0x29c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10a      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x1f4>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028ba:	d105      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80028bc:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_ADC_ConfigChannel+0x2a0>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a2c      	ldr	r2, [pc, #176]	; (8002974 <HAL_ADC_ConfigChannel+0x2a0>)
 80028c2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80028c6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a28      	ldr	r2, [pc, #160]	; (8002970 <HAL_ADC_ConfigChannel+0x29c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d10f      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x21e>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b12      	cmp	r3, #18
 80028d8:	d10b      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <HAL_ADC_ConfigChannel+0x2a0>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4a25      	ldr	r2, [pc, #148]	; (8002974 <HAL_ADC_ConfigChannel+0x2a0>)
 80028e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028e4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80028e6:	4b23      	ldr	r3, [pc, #140]	; (8002974 <HAL_ADC_ConfigChannel+0x2a0>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4a22      	ldr	r2, [pc, #136]	; (8002974 <HAL_ADC_ConfigChannel+0x2a0>)
 80028ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028f0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <HAL_ADC_ConfigChannel+0x29c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d12b      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x280>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1a      	ldr	r2, [pc, #104]	; (800296c <HAL_ADC_ConfigChannel+0x298>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d003      	beq.n	800290e <HAL_ADC_ConfigChannel+0x23a>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b11      	cmp	r3, #17
 800290c:	d122      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_ADC_ConfigChannel+0x2a0>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_ADC_ConfigChannel+0x2a0>)
 8002914:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002918:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800291a:	4b16      	ldr	r3, [pc, #88]	; (8002974 <HAL_ADC_ConfigChannel+0x2a0>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4a15      	ldr	r2, [pc, #84]	; (8002974 <HAL_ADC_ConfigChannel+0x2a0>)
 8002920:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002924:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a10      	ldr	r2, [pc, #64]	; (800296c <HAL_ADC_ConfigChannel+0x298>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d111      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_ADC_ConfigChannel+0x2a4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a11      	ldr	r2, [pc, #68]	; (800297c <HAL_ADC_ConfigChannel+0x2a8>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	0c9a      	lsrs	r2, r3, #18
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002946:	e002      	b.n	800294e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3b01      	subs	r3, #1
 800294c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f9      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	10000012 	.word	0x10000012
 8002970:	40012000 	.word	0x40012000
 8002974:	40012300 	.word	0x40012300
 8002978:	2000000c 	.word	0x2000000c
 800297c:	431bde83 	.word	0x431bde83

08002980 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002988:	4b78      	ldr	r3, [pc, #480]	; (8002b6c <ADC_Init+0x1ec>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a77      	ldr	r2, [pc, #476]	; (8002b6c <ADC_Init+0x1ec>)
 800298e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002992:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002994:	4b75      	ldr	r3, [pc, #468]	; (8002b6c <ADC_Init+0x1ec>)
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4973      	ldr	r1, [pc, #460]	; (8002b6c <ADC_Init+0x1ec>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	021a      	lsls	r2, r3, #8
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6899      	ldr	r1, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	4a58      	ldr	r2, [pc, #352]	; (8002b70 <ADC_Init+0x1f0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d022      	beq.n	8002a5a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6899      	ldr	r1, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6899      	ldr	r1, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	e00f      	b.n	8002a7a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0202 	bic.w	r2, r2, #2
 8002a88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6899      	ldr	r1, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	005a      	lsls	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d01b      	beq.n	8002ae0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ab6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ac6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6859      	ldr	r1, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	035a      	lsls	r2, r3, #13
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	e007      	b.n	8002af0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002afe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	051a      	lsls	r2, r3, #20
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6899      	ldr	r1, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b32:	025a      	lsls	r2, r3, #9
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6899      	ldr	r1, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	029a      	lsls	r2, r3, #10
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	609a      	str	r2, [r3, #8]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	40012300 	.word	0x40012300
 8002b70:	0f000001 	.word	0x0f000001

08002b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b90:	4013      	ands	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ba2:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	60d3      	str	r3, [r2, #12]
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	e000ed00 	.word	0xe000ed00
 8002bb8:	05fa0000 	.word	0x05fa0000

08002bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc0:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	f003 0307 	and.w	r3, r3, #7
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	db0a      	blt.n	8002c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	490c      	ldr	r1, [pc, #48]	; (8002c24 <__NVIC_SetPriority+0x4c>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c00:	e00a      	b.n	8002c18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4908      	ldr	r1, [pc, #32]	; (8002c28 <__NVIC_SetPriority+0x50>)
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	3b04      	subs	r3, #4
 8002c10:	0112      	lsls	r2, r2, #4
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	440b      	add	r3, r1
 8002c16:	761a      	strb	r2, [r3, #24]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000e100 	.word	0xe000e100
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f1c3 0307 	rsb	r3, r3, #7
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	bf28      	it	cs
 8002c4a:	2304      	movcs	r3, #4
 8002c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3304      	adds	r3, #4
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d902      	bls.n	8002c5c <NVIC_EncodePriority+0x30>
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3b03      	subs	r3, #3
 8002c5a:	e000      	b.n	8002c5e <NVIC_EncodePriority+0x32>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	f04f 32ff 	mov.w	r2, #4294967295
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	401a      	ands	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c74:	f04f 31ff 	mov.w	r1, #4294967295
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	43d9      	mvns	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	4313      	orrs	r3, r2
         );
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3724      	adds	r7, #36	; 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca4:	d301      	bcc.n	8002caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00f      	b.n	8002cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002caa:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <SysTick_Config+0x40>)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cb2:	210f      	movs	r1, #15
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb8:	f7ff ff8e 	bl	8002bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <SysTick_Config+0x40>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cc2:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <SysTick_Config+0x40>)
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	e000e010 	.word	0xe000e010

08002cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff ff47 	bl	8002b74 <__NVIC_SetPriorityGrouping>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b086      	sub	sp, #24
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d00:	f7ff ff5c 	bl	8002bbc <__NVIC_GetPriorityGrouping>
 8002d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	6978      	ldr	r0, [r7, #20]
 8002d0c:	f7ff ff8e 	bl	8002c2c <NVIC_EncodePriority>
 8002d10:	4602      	mov	r2, r0
 8002d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff5d 	bl	8002bd8 <__NVIC_SetPriority>
}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff ffb0 	bl	8002c94 <SysTick_Config>
 8002d34:	4603      	mov	r3, r0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	e175      	b.n	800304c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d60:	2201      	movs	r2, #1
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	f040 8164 	bne.w	8003046 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d005      	beq.n	8002d96 <HAL_GPIO_Init+0x56>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d130      	bne.n	8002df8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	2203      	movs	r2, #3
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dcc:	2201      	movs	r2, #1
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 0201 	and.w	r2, r3, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d017      	beq.n	8002e34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	2203      	movs	r2, #3
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d123      	bne.n	8002e88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	08da      	lsrs	r2, r3, #3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3208      	adds	r2, #8
 8002e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	220f      	movs	r2, #15
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	08da      	lsrs	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3208      	adds	r2, #8
 8002e82:	69b9      	ldr	r1, [r7, #24]
 8002e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2203      	movs	r2, #3
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 0203 	and.w	r2, r3, #3
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80be 	beq.w	8003046 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eca:	4b66      	ldr	r3, [pc, #408]	; (8003064 <HAL_GPIO_Init+0x324>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	4a65      	ldr	r2, [pc, #404]	; (8003064 <HAL_GPIO_Init+0x324>)
 8002ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed6:	4b63      	ldr	r3, [pc, #396]	; (8003064 <HAL_GPIO_Init+0x324>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ee2:	4a61      	ldr	r2, [pc, #388]	; (8003068 <HAL_GPIO_Init+0x328>)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	089b      	lsrs	r3, r3, #2
 8002ee8:	3302      	adds	r3, #2
 8002eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	220f      	movs	r2, #15
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a58      	ldr	r2, [pc, #352]	; (800306c <HAL_GPIO_Init+0x32c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d037      	beq.n	8002f7e <HAL_GPIO_Init+0x23e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a57      	ldr	r2, [pc, #348]	; (8003070 <HAL_GPIO_Init+0x330>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d031      	beq.n	8002f7a <HAL_GPIO_Init+0x23a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a56      	ldr	r2, [pc, #344]	; (8003074 <HAL_GPIO_Init+0x334>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d02b      	beq.n	8002f76 <HAL_GPIO_Init+0x236>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a55      	ldr	r2, [pc, #340]	; (8003078 <HAL_GPIO_Init+0x338>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d025      	beq.n	8002f72 <HAL_GPIO_Init+0x232>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a54      	ldr	r2, [pc, #336]	; (800307c <HAL_GPIO_Init+0x33c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d01f      	beq.n	8002f6e <HAL_GPIO_Init+0x22e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a53      	ldr	r2, [pc, #332]	; (8003080 <HAL_GPIO_Init+0x340>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d019      	beq.n	8002f6a <HAL_GPIO_Init+0x22a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a52      	ldr	r2, [pc, #328]	; (8003084 <HAL_GPIO_Init+0x344>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <HAL_GPIO_Init+0x226>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a51      	ldr	r2, [pc, #324]	; (8003088 <HAL_GPIO_Init+0x348>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00d      	beq.n	8002f62 <HAL_GPIO_Init+0x222>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a50      	ldr	r2, [pc, #320]	; (800308c <HAL_GPIO_Init+0x34c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <HAL_GPIO_Init+0x21e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4f      	ldr	r2, [pc, #316]	; (8003090 <HAL_GPIO_Init+0x350>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d101      	bne.n	8002f5a <HAL_GPIO_Init+0x21a>
 8002f56:	2309      	movs	r3, #9
 8002f58:	e012      	b.n	8002f80 <HAL_GPIO_Init+0x240>
 8002f5a:	230a      	movs	r3, #10
 8002f5c:	e010      	b.n	8002f80 <HAL_GPIO_Init+0x240>
 8002f5e:	2308      	movs	r3, #8
 8002f60:	e00e      	b.n	8002f80 <HAL_GPIO_Init+0x240>
 8002f62:	2307      	movs	r3, #7
 8002f64:	e00c      	b.n	8002f80 <HAL_GPIO_Init+0x240>
 8002f66:	2306      	movs	r3, #6
 8002f68:	e00a      	b.n	8002f80 <HAL_GPIO_Init+0x240>
 8002f6a:	2305      	movs	r3, #5
 8002f6c:	e008      	b.n	8002f80 <HAL_GPIO_Init+0x240>
 8002f6e:	2304      	movs	r3, #4
 8002f70:	e006      	b.n	8002f80 <HAL_GPIO_Init+0x240>
 8002f72:	2303      	movs	r3, #3
 8002f74:	e004      	b.n	8002f80 <HAL_GPIO_Init+0x240>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e002      	b.n	8002f80 <HAL_GPIO_Init+0x240>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <HAL_GPIO_Init+0x240>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	69fa      	ldr	r2, [r7, #28]
 8002f82:	f002 0203 	and.w	r2, r2, #3
 8002f86:	0092      	lsls	r2, r2, #2
 8002f88:	4093      	lsls	r3, r2
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f90:	4935      	ldr	r1, [pc, #212]	; (8003068 <HAL_GPIO_Init+0x328>)
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	089b      	lsrs	r3, r3, #2
 8002f96:	3302      	adds	r3, #2
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <HAL_GPIO_Init+0x354>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fc2:	4a34      	ldr	r2, [pc, #208]	; (8003094 <HAL_GPIO_Init+0x354>)
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fc8:	4b32      	ldr	r3, [pc, #200]	; (8003094 <HAL_GPIO_Init+0x354>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fec:	4a29      	ldr	r2, [pc, #164]	; (8003094 <HAL_GPIO_Init+0x354>)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ff2:	4b28      	ldr	r3, [pc, #160]	; (8003094 <HAL_GPIO_Init+0x354>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003016:	4a1f      	ldr	r2, [pc, #124]	; (8003094 <HAL_GPIO_Init+0x354>)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800301c:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_GPIO_Init+0x354>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003040:	4a14      	ldr	r2, [pc, #80]	; (8003094 <HAL_GPIO_Init+0x354>)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3301      	adds	r3, #1
 800304a:	61fb      	str	r3, [r7, #28]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	2b0f      	cmp	r3, #15
 8003050:	f67f ae86 	bls.w	8002d60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003054:	bf00      	nop
 8003056:	bf00      	nop
 8003058:	3724      	adds	r7, #36	; 0x24
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800
 8003068:	40013800 	.word	0x40013800
 800306c:	40020000 	.word	0x40020000
 8003070:	40020400 	.word	0x40020400
 8003074:	40020800 	.word	0x40020800
 8003078:	40020c00 	.word	0x40020c00
 800307c:	40021000 	.word	0x40021000
 8003080:	40021400 	.word	0x40021400
 8003084:	40021800 	.word	0x40021800
 8003088:	40021c00 	.word	0x40021c00
 800308c:	40022000 	.word	0x40022000
 8003090:	40022400 	.word	0x40022400
 8003094:	40013c00 	.word	0x40013c00

08003098 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	887b      	ldrh	r3, [r7, #2]
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	e001      	b.n	80030ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
 80030d4:	4613      	mov	r3, r2
 80030d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d8:	787b      	ldrb	r3, [r7, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030e4:	e003      	b.n	80030ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030e6:	887b      	ldrh	r3, [r7, #2]
 80030e8:	041a      	lsls	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	619a      	str	r2, [r3, #24]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	4b23      	ldr	r3, [pc, #140]	; (8003194 <HAL_PWREx_EnableOverDrive+0x98>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	4a22      	ldr	r2, [pc, #136]	; (8003194 <HAL_PWREx_EnableOverDrive+0x98>)
 800310c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003110:	6413      	str	r3, [r2, #64]	; 0x40
 8003112:	4b20      	ldr	r3, [pc, #128]	; (8003194 <HAL_PWREx_EnableOverDrive+0x98>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800311e:	4b1e      	ldr	r3, [pc, #120]	; (8003198 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003128:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800312a:	f7ff f8c5 	bl	80022b8 <HAL_GetTick>
 800312e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003130:	e009      	b.n	8003146 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003132:	f7ff f8c1 	bl	80022b8 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003140:	d901      	bls.n	8003146 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e022      	b.n	800318c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003152:	d1ee      	bne.n	8003132 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003154:	4b10      	ldr	r3, [pc, #64]	; (8003198 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a0f      	ldr	r2, [pc, #60]	; (8003198 <HAL_PWREx_EnableOverDrive+0x9c>)
 800315a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800315e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003160:	f7ff f8aa 	bl	80022b8 <HAL_GetTick>
 8003164:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003166:	e009      	b.n	800317c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003168:	f7ff f8a6 	bl	80022b8 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003176:	d901      	bls.n	800317c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e007      	b.n	800318c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_PWREx_EnableOverDrive+0x9c>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003188:	d1ee      	bne.n	8003168 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40023800 	.word	0x40023800
 8003198:	40007000 	.word	0x40007000

0800319c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031a4:	2300      	movs	r3, #0
 80031a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e29b      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8087 	beq.w	80032ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031c0:	4b96      	ldr	r3, [pc, #600]	; (800341c <HAL_RCC_OscConfig+0x280>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 030c 	and.w	r3, r3, #12
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d00c      	beq.n	80031e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031cc:	4b93      	ldr	r3, [pc, #588]	; (800341c <HAL_RCC_OscConfig+0x280>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d112      	bne.n	80031fe <HAL_RCC_OscConfig+0x62>
 80031d8:	4b90      	ldr	r3, [pc, #576]	; (800341c <HAL_RCC_OscConfig+0x280>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e4:	d10b      	bne.n	80031fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e6:	4b8d      	ldr	r3, [pc, #564]	; (800341c <HAL_RCC_OscConfig+0x280>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d06c      	beq.n	80032cc <HAL_RCC_OscConfig+0x130>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d168      	bne.n	80032cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e275      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x7a>
 8003208:	4b84      	ldr	r3, [pc, #528]	; (800341c <HAL_RCC_OscConfig+0x280>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a83      	ldr	r2, [pc, #524]	; (800341c <HAL_RCC_OscConfig+0x280>)
 800320e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	e02e      	b.n	8003274 <HAL_RCC_OscConfig+0xd8>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x9c>
 800321e:	4b7f      	ldr	r3, [pc, #508]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a7e      	ldr	r2, [pc, #504]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b7c      	ldr	r3, [pc, #496]	; (800341c <HAL_RCC_OscConfig+0x280>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a7b      	ldr	r2, [pc, #492]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003230:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e01d      	b.n	8003274 <HAL_RCC_OscConfig+0xd8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0xc0>
 8003242:	4b76      	ldr	r3, [pc, #472]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a75      	ldr	r2, [pc, #468]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b73      	ldr	r3, [pc, #460]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a72      	ldr	r2, [pc, #456]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e00b      	b.n	8003274 <HAL_RCC_OscConfig+0xd8>
 800325c:	4b6f      	ldr	r3, [pc, #444]	; (800341c <HAL_RCC_OscConfig+0x280>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a6e      	ldr	r2, [pc, #440]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	4b6c      	ldr	r3, [pc, #432]	; (800341c <HAL_RCC_OscConfig+0x280>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a6b      	ldr	r2, [pc, #428]	; (800341c <HAL_RCC_OscConfig+0x280>)
 800326e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7ff f81c 	bl	80022b8 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003284:	f7ff f818 	bl	80022b8 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	; 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e229      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b61      	ldr	r3, [pc, #388]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0xe8>
 80032a2:	e014      	b.n	80032ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7ff f808 	bl	80022b8 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ac:	f7ff f804 	bl	80022b8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e215      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032be:	4b57      	ldr	r3, [pc, #348]	; (800341c <HAL_RCC_OscConfig+0x280>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x110>
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d069      	beq.n	80033ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032da:	4b50      	ldr	r3, [pc, #320]	; (800341c <HAL_RCC_OscConfig+0x280>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e6:	4b4d      	ldr	r3, [pc, #308]	; (800341c <HAL_RCC_OscConfig+0x280>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d11c      	bne.n	800332c <HAL_RCC_OscConfig+0x190>
 80032f2:	4b4a      	ldr	r3, [pc, #296]	; (800341c <HAL_RCC_OscConfig+0x280>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d116      	bne.n	800332c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fe:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_RCC_OscConfig+0x17a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d001      	beq.n	8003316 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e1e9      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003316:	4b41      	ldr	r3, [pc, #260]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	493d      	ldr	r1, [pc, #244]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	e040      	b.n	80033ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d023      	beq.n	800337c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003334:	4b39      	ldr	r3, [pc, #228]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a38      	ldr	r2, [pc, #224]	; (800341c <HAL_RCC_OscConfig+0x280>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe ffba 	bl	80022b8 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003348:	f7fe ffb6 	bl	80022b8 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e1c7      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335a:	4b30      	ldr	r3, [pc, #192]	; (800341c <HAL_RCC_OscConfig+0x280>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003366:	4b2d      	ldr	r3, [pc, #180]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4929      	ldr	r1, [pc, #164]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]
 800337a:	e018      	b.n	80033ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337c:	4b27      	ldr	r3, [pc, #156]	; (800341c <HAL_RCC_OscConfig+0x280>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a26      	ldr	r2, [pc, #152]	; (800341c <HAL_RCC_OscConfig+0x280>)
 8003382:	f023 0301 	bic.w	r3, r3, #1
 8003386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fe ff96 	bl	80022b8 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003390:	f7fe ff92 	bl	80022b8 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e1a3      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	4b1e      	ldr	r3, [pc, #120]	; (800341c <HAL_RCC_OscConfig+0x280>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d038      	beq.n	800342c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d019      	beq.n	80033f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <HAL_RCC_OscConfig+0x280>)
 80033c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c6:	4a15      	ldr	r2, [pc, #84]	; (800341c <HAL_RCC_OscConfig+0x280>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ce:	f7fe ff73 	bl	80022b8 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d6:	f7fe ff6f 	bl	80022b8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e180      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <HAL_RCC_OscConfig+0x280>)
 80033ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x23a>
 80033f4:	e01a      	b.n	800342c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_OscConfig+0x280>)
 80033f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fa:	4a08      	ldr	r2, [pc, #32]	; (800341c <HAL_RCC_OscConfig+0x280>)
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7fe ff59 	bl	80022b8 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340a:	f7fe ff55 	bl	80022b8 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d903      	bls.n	8003420 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e166      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>
 800341c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003420:	4b92      	ldr	r3, [pc, #584]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 8003422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ee      	bne.n	800340a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a4 	beq.w	8003582 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343a:	4b8c      	ldr	r3, [pc, #560]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10d      	bne.n	8003462 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	4b89      	ldr	r3, [pc, #548]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	4a88      	ldr	r2, [pc, #544]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 800344c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003450:	6413      	str	r3, [r2, #64]	; 0x40
 8003452:	4b86      	ldr	r3, [pc, #536]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345e:	2301      	movs	r3, #1
 8003460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003462:	4b83      	ldr	r3, [pc, #524]	; (8003670 <HAL_RCC_OscConfig+0x4d4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d118      	bne.n	80034a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800346e:	4b80      	ldr	r3, [pc, #512]	; (8003670 <HAL_RCC_OscConfig+0x4d4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a7f      	ldr	r2, [pc, #508]	; (8003670 <HAL_RCC_OscConfig+0x4d4>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347a:	f7fe ff1d 	bl	80022b8 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003482:	f7fe ff19 	bl	80022b8 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b64      	cmp	r3, #100	; 0x64
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e12a      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003494:	4b76      	ldr	r3, [pc, #472]	; (8003670 <HAL_RCC_OscConfig+0x4d4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d106      	bne.n	80034b6 <HAL_RCC_OscConfig+0x31a>
 80034a8:	4b70      	ldr	r3, [pc, #448]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	4a6f      	ldr	r2, [pc, #444]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6713      	str	r3, [r2, #112]	; 0x70
 80034b4:	e02d      	b.n	8003512 <HAL_RCC_OscConfig+0x376>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x33c>
 80034be:	4b6b      	ldr	r3, [pc, #428]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	4a6a      	ldr	r2, [pc, #424]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ca:	4b68      	ldr	r3, [pc, #416]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	4a67      	ldr	r2, [pc, #412]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 80034d0:	f023 0304 	bic.w	r3, r3, #4
 80034d4:	6713      	str	r3, [r2, #112]	; 0x70
 80034d6:	e01c      	b.n	8003512 <HAL_RCC_OscConfig+0x376>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b05      	cmp	r3, #5
 80034de:	d10c      	bne.n	80034fa <HAL_RCC_OscConfig+0x35e>
 80034e0:	4b62      	ldr	r3, [pc, #392]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	4a61      	ldr	r2, [pc, #388]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 80034e6:	f043 0304 	orr.w	r3, r3, #4
 80034ea:	6713      	str	r3, [r2, #112]	; 0x70
 80034ec:	4b5f      	ldr	r3, [pc, #380]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	4a5e      	ldr	r2, [pc, #376]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6713      	str	r3, [r2, #112]	; 0x70
 80034f8:	e00b      	b.n	8003512 <HAL_RCC_OscConfig+0x376>
 80034fa:	4b5c      	ldr	r3, [pc, #368]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a5b      	ldr	r2, [pc, #364]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	6713      	str	r3, [r2, #112]	; 0x70
 8003506:	4b59      	ldr	r3, [pc, #356]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a58      	ldr	r2, [pc, #352]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d015      	beq.n	8003546 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351a:	f7fe fecd 	bl	80022b8 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003520:	e00a      	b.n	8003538 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003522:	f7fe fec9 	bl	80022b8 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003530:	4293      	cmp	r3, r2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e0d8      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003538:	4b4c      	ldr	r3, [pc, #304]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0ee      	beq.n	8003522 <HAL_RCC_OscConfig+0x386>
 8003544:	e014      	b.n	8003570 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fe feb7 	bl	80022b8 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354c:	e00a      	b.n	8003564 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354e:	f7fe feb3 	bl	80022b8 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	f241 3288 	movw	r2, #5000	; 0x1388
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e0c2      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003564:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ee      	bne.n	800354e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003570:	7dfb      	ldrb	r3, [r7, #23]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d105      	bne.n	8003582 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003576:	4b3d      	ldr	r3, [pc, #244]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4a3c      	ldr	r2, [pc, #240]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 800357c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003580:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80ae 	beq.w	80036e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800358c:	4b37      	ldr	r3, [pc, #220]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d06d      	beq.n	8003674 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d14b      	bne.n	8003638 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a0:	4b32      	ldr	r3, [pc, #200]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a31      	ldr	r2, [pc, #196]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 80035a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe fe84 	bl	80022b8 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fe fe80 	bl	80022b8 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e091      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c6:	4b29      	ldr	r3, [pc, #164]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69da      	ldr	r2, [r3, #28]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	019b      	lsls	r3, r3, #6
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	085b      	lsrs	r3, r3, #1
 80035ea:	3b01      	subs	r3, #1
 80035ec:	041b      	lsls	r3, r3, #16
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	061b      	lsls	r3, r3, #24
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	071b      	lsls	r3, r3, #28
 80035fe:	491b      	ldr	r1, [pc, #108]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a18      	ldr	r2, [pc, #96]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 800360a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fe fe52 	bl	80022b8 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003618:	f7fe fe4e 	bl	80022b8 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e05f      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362a:	4b10      	ldr	r3, [pc, #64]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x47c>
 8003636:	e057      	b.n	80036e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0b      	ldr	r2, [pc, #44]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 800363e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fe fe38 	bl	80022b8 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe fe34 	bl	80022b8 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e045      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	4b03      	ldr	r3, [pc, #12]	; (800366c <HAL_RCC_OscConfig+0x4d0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x4b0>
 800366a:	e03d      	b.n	80036e8 <HAL_RCC_OscConfig+0x54c>
 800366c:	40023800 	.word	0x40023800
 8003670:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003674:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <HAL_RCC_OscConfig+0x558>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d030      	beq.n	80036e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d129      	bne.n	80036e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d122      	bne.n	80036e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036a4:	4013      	ands	r3, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d119      	bne.n	80036e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	3b01      	subs	r3, #1
 80036be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d10f      	bne.n	80036e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d107      	bne.n	80036e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800

080036f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0d0      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003710:	4b6a      	ldr	r3, [pc, #424]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d910      	bls.n	8003740 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b67      	ldr	r3, [pc, #412]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 020f 	bic.w	r2, r3, #15
 8003726:	4965      	ldr	r1, [pc, #404]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0b8      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d020      	beq.n	800378e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003758:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a58      	ldr	r2, [pc, #352]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800375e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003762:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003770:	4b53      	ldr	r3, [pc, #332]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800377a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377c:	4b50      	ldr	r3, [pc, #320]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	494d      	ldr	r1, [pc, #308]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d040      	beq.n	800381c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b47      	ldr	r3, [pc, #284]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d115      	bne.n	80037da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ba:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e073      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ca:	4b3d      	ldr	r3, [pc, #244]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e06b      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037da:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4936      	ldr	r1, [pc, #216]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ec:	f7fe fd64 	bl	80022b8 <HAL_GetTick>
 80037f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	e00a      	b.n	800380a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f4:	f7fe fd60 	bl	80022b8 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e053      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 020c 	and.w	r2, r3, #12
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	429a      	cmp	r2, r3
 800381a:	d1eb      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800381c:	4b27      	ldr	r3, [pc, #156]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d210      	bcs.n	800384c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b24      	ldr	r3, [pc, #144]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 020f 	bic.w	r2, r3, #15
 8003832:	4922      	ldr	r1, [pc, #136]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e032      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4916      	ldr	r1, [pc, #88]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	490e      	ldr	r1, [pc, #56]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800388a:	f000 f821 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800388e:	4602      	mov	r2, r0
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	490a      	ldr	r1, [pc, #40]	; (80038c4 <HAL_RCC_ClockConfig+0x1cc>)
 800389c:	5ccb      	ldrb	r3, [r1, r3]
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1d0>)
 80038a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x1d4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fcc0 	bl	8002230 <HAL_InitTick>

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023c00 	.word	0x40023c00
 80038c0:	40023800 	.word	0x40023800
 80038c4:	0800c7cc 	.word	0x0800c7cc
 80038c8:	2000000c 	.word	0x2000000c
 80038cc:	20000010 	.word	0x20000010

080038d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d4:	b094      	sub	sp, #80	; 0x50
 80038d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	647b      	str	r3, [r7, #68]	; 0x44
 80038dc:	2300      	movs	r3, #0
 80038de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e0:	2300      	movs	r3, #0
 80038e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e8:	4b79      	ldr	r3, [pc, #484]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d00d      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x40>
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	f200 80e1 	bhi.w	8003abc <HAL_RCC_GetSysClockFreq+0x1ec>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x34>
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d003      	beq.n	800390a <HAL_RCC_GetSysClockFreq+0x3a>
 8003902:	e0db      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4b73      	ldr	r3, [pc, #460]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003906:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003908:	e0db      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800390a:	4b73      	ldr	r3, [pc, #460]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x208>)
 800390c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800390e:	e0d8      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003910:	4b6f      	ldr	r3, [pc, #444]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003918:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800391a:	4b6d      	ldr	r3, [pc, #436]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d063      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003926:	4b6a      	ldr	r3, [pc, #424]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	099b      	lsrs	r3, r3, #6
 800392c:	2200      	movs	r2, #0
 800392e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003930:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003938:	633b      	str	r3, [r7, #48]	; 0x30
 800393a:	2300      	movs	r3, #0
 800393c:	637b      	str	r3, [r7, #52]	; 0x34
 800393e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003942:	4622      	mov	r2, r4
 8003944:	462b      	mov	r3, r5
 8003946:	f04f 0000 	mov.w	r0, #0
 800394a:	f04f 0100 	mov.w	r1, #0
 800394e:	0159      	lsls	r1, r3, #5
 8003950:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003954:	0150      	lsls	r0, r2, #5
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4621      	mov	r1, r4
 800395c:	1a51      	subs	r1, r2, r1
 800395e:	6139      	str	r1, [r7, #16]
 8003960:	4629      	mov	r1, r5
 8003962:	eb63 0301 	sbc.w	r3, r3, r1
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003974:	4659      	mov	r1, fp
 8003976:	018b      	lsls	r3, r1, #6
 8003978:	4651      	mov	r1, sl
 800397a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800397e:	4651      	mov	r1, sl
 8003980:	018a      	lsls	r2, r1, #6
 8003982:	4651      	mov	r1, sl
 8003984:	ebb2 0801 	subs.w	r8, r2, r1
 8003988:	4659      	mov	r1, fp
 800398a:	eb63 0901 	sbc.w	r9, r3, r1
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800399a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800399e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039a2:	4690      	mov	r8, r2
 80039a4:	4699      	mov	r9, r3
 80039a6:	4623      	mov	r3, r4
 80039a8:	eb18 0303 	adds.w	r3, r8, r3
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	462b      	mov	r3, r5
 80039b0:	eb49 0303 	adc.w	r3, r9, r3
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039c2:	4629      	mov	r1, r5
 80039c4:	024b      	lsls	r3, r1, #9
 80039c6:	4621      	mov	r1, r4
 80039c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039cc:	4621      	mov	r1, r4
 80039ce:	024a      	lsls	r2, r1, #9
 80039d0:	4610      	mov	r0, r2
 80039d2:	4619      	mov	r1, r3
 80039d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d6:	2200      	movs	r2, #0
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039e0:	f7fc fe42 	bl	8000668 <__aeabi_uldivmod>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4613      	mov	r3, r2
 80039ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039ec:	e058      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ee:	4b38      	ldr	r3, [pc, #224]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	099b      	lsrs	r3, r3, #6
 80039f4:	2200      	movs	r2, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	4611      	mov	r1, r2
 80039fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039fe:	623b      	str	r3, [r7, #32]
 8003a00:	2300      	movs	r3, #0
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
 8003a04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a08:	4642      	mov	r2, r8
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	f04f 0000 	mov.w	r0, #0
 8003a10:	f04f 0100 	mov.w	r1, #0
 8003a14:	0159      	lsls	r1, r3, #5
 8003a16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a1a:	0150      	lsls	r0, r2, #5
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4641      	mov	r1, r8
 8003a22:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a26:	4649      	mov	r1, r9
 8003a28:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a40:	ebb2 040a 	subs.w	r4, r2, sl
 8003a44:	eb63 050b 	sbc.w	r5, r3, fp
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	00eb      	lsls	r3, r5, #3
 8003a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a56:	00e2      	lsls	r2, r4, #3
 8003a58:	4614      	mov	r4, r2
 8003a5a:	461d      	mov	r5, r3
 8003a5c:	4643      	mov	r3, r8
 8003a5e:	18e3      	adds	r3, r4, r3
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	464b      	mov	r3, r9
 8003a64:	eb45 0303 	adc.w	r3, r5, r3
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a76:	4629      	mov	r1, r5
 8003a78:	028b      	lsls	r3, r1, #10
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a80:	4621      	mov	r1, r4
 8003a82:	028a      	lsls	r2, r1, #10
 8003a84:	4610      	mov	r0, r2
 8003a86:	4619      	mov	r1, r3
 8003a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	61fa      	str	r2, [r7, #28]
 8003a90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a94:	f7fc fde8 	bl	8000668 <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003ab0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aba:	e002      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003abe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3750      	adds	r7, #80	; 0x50
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	00f42400 	.word	0x00f42400
 8003ad8:	007a1200 	.word	0x007a1200

08003adc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e09d      	b.n	8003c2a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d108      	bne.n	8003b08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afe:	d009      	beq.n	8003b14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	61da      	str	r2, [r3, #28]
 8003b06:	e005      	b.n	8003b14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fe f9ea 	bl	8001f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b54:	d902      	bls.n	8003b5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	e002      	b.n	8003b62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b6a:	d007      	beq.n	8003b7c <HAL_SPI_Init+0xa0>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b74:	d002      	beq.n	8003b7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbe:	ea42 0103 	orr.w	r1, r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	0c1b      	lsrs	r3, r3, #16
 8003bd8:	f003 0204 	and.w	r2, r3, #4
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bf8:	ea42 0103 	orr.w	r1, r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b088      	sub	sp, #32
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_SPI_Transmit+0x22>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e158      	b.n	8003f06 <HAL_SPI_Transmit+0x2d4>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c5c:	f7fe fb2c 	bl	80022b8 <HAL_GetTick>
 8003c60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d002      	beq.n	8003c78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c72:	2302      	movs	r3, #2
 8003c74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c76:	e13d      	b.n	8003ef4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_SPI_Transmit+0x52>
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c88:	e134      	b.n	8003ef4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	88fa      	ldrh	r2, [r7, #6]
 8003ca2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd4:	d10f      	bne.n	8003cf6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d007      	beq.n	8003d14 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d1c:	d94b      	bls.n	8003db6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_SPI_Transmit+0xfa>
 8003d26:	8afb      	ldrh	r3, [r7, #22]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d13e      	bne.n	8003daa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	881a      	ldrh	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	1c9a      	adds	r2, r3, #2
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d50:	e02b      	b.n	8003daa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d112      	bne.n	8003d86 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	881a      	ldrh	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	1c9a      	adds	r2, r3, #2
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d84:	e011      	b.n	8003daa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d86:	f7fe fa97 	bl	80022b8 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d803      	bhi.n	8003d9e <HAL_SPI_Transmit+0x16c>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d102      	bne.n	8003da4 <HAL_SPI_Transmit+0x172>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d102      	bne.n	8003daa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003da8:	e0a4      	b.n	8003ef4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1ce      	bne.n	8003d52 <HAL_SPI_Transmit+0x120>
 8003db4:	e07c      	b.n	8003eb0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_SPI_Transmit+0x192>
 8003dbe:	8afb      	ldrh	r3, [r7, #22]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d170      	bne.n	8003ea6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d912      	bls.n	8003df4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	881a      	ldrh	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	1c9a      	adds	r2, r3, #2
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b02      	subs	r3, #2
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003df2:	e058      	b.n	8003ea6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	7812      	ldrb	r2, [r2, #0]
 8003e00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e1a:	e044      	b.n	8003ea6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d12b      	bne.n	8003e82 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d912      	bls.n	8003e5a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	881a      	ldrh	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b02      	subs	r3, #2
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e58:	e025      	b.n	8003ea6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	7812      	ldrb	r2, [r2, #0]
 8003e66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e80:	e011      	b.n	8003ea6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e82:	f7fe fa19 	bl	80022b8 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d803      	bhi.n	8003e9a <HAL_SPI_Transmit+0x268>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e98:	d102      	bne.n	8003ea0 <HAL_SPI_Transmit+0x26e>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ea4:	e026      	b.n	8003ef4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1b5      	bne.n	8003e1c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	6839      	ldr	r1, [r7, #0]
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fb5b 	bl	8004570 <SPI_EndRxTxTransaction>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e000      	b.n	8003ef4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003ef2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f04:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3720      	adds	r7, #32
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b08a      	sub	sp, #40	; 0x28
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_SPI_TransmitReceive+0x26>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e1fb      	b.n	800432c <HAL_SPI_TransmitReceive+0x41e>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f3c:	f7fe f9bc 	bl	80022b8 <HAL_GetTick>
 8003f40:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f48:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f50:	887b      	ldrh	r3, [r7, #2]
 8003f52:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003f54:	887b      	ldrh	r3, [r7, #2]
 8003f56:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f58:	7efb      	ldrb	r3, [r7, #27]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d00e      	beq.n	8003f7c <HAL_SPI_TransmitReceive+0x6e>
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f64:	d106      	bne.n	8003f74 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <HAL_SPI_TransmitReceive+0x66>
 8003f6e:	7efb      	ldrb	r3, [r7, #27]
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d003      	beq.n	8003f7c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f7a:	e1cd      	b.n	8004318 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_SPI_TransmitReceive+0x80>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_SPI_TransmitReceive+0x80>
 8003f88:	887b      	ldrh	r3, [r7, #2]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d103      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f94:	e1c0      	b.n	8004318 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d003      	beq.n	8003faa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2205      	movs	r2, #5
 8003fa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	887a      	ldrh	r2, [r7, #2]
 8003fba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	887a      	ldrh	r2, [r7, #2]
 8003fc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	887a      	ldrh	r2, [r7, #2]
 8003fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	887a      	ldrh	r2, [r7, #2]
 8003fd6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fec:	d802      	bhi.n	8003ff4 <HAL_SPI_TransmitReceive+0xe6>
 8003fee:	8a3b      	ldrh	r3, [r7, #16]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d908      	bls.n	8004006 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004002:	605a      	str	r2, [r3, #4]
 8004004:	e007      	b.n	8004016 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004014:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b40      	cmp	r3, #64	; 0x40
 8004022:	d007      	beq.n	8004034 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004032:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800403c:	d97c      	bls.n	8004138 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_SPI_TransmitReceive+0x13e>
 8004046:	8a7b      	ldrh	r3, [r7, #18]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d169      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	881a      	ldrh	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	1c9a      	adds	r2, r3, #2
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004070:	e056      	b.n	8004120 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b02      	cmp	r3, #2
 800407e:	d11b      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x1aa>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <HAL_SPI_TransmitReceive+0x1aa>
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	2b01      	cmp	r3, #1
 800408e:	d113      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	881a      	ldrh	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	1c9a      	adds	r2, r3, #2
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d11c      	bne.n	8004100 <HAL_SPI_TransmitReceive+0x1f2>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d016      	beq.n	8004100 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	b292      	uxth	r2, r2
 80040de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	1c9a      	adds	r2, r3, #2
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040fc:	2301      	movs	r3, #1
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004100:	f7fe f8da 	bl	80022b8 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800410c:	429a      	cmp	r2, r3
 800410e:	d807      	bhi.n	8004120 <HAL_SPI_TransmitReceive+0x212>
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d003      	beq.n	8004120 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800411e:	e0fb      	b.n	8004318 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1a3      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x164>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d19d      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x164>
 8004136:	e0df      	b.n	80042f8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_SPI_TransmitReceive+0x23a>
 8004140:	8a7b      	ldrh	r3, [r7, #18]
 8004142:	2b01      	cmp	r3, #1
 8004144:	f040 80cb 	bne.w	80042de <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b01      	cmp	r3, #1
 8004150:	d912      	bls.n	8004178 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004156:	881a      	ldrh	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004162:	1c9a      	adds	r2, r3, #2
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b02      	subs	r3, #2
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004176:	e0b2      	b.n	80042de <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	330c      	adds	r3, #12
 8004182:	7812      	ldrb	r2, [r2, #0]
 8004184:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800419e:	e09e      	b.n	80042de <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d134      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x30a>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d02f      	beq.n	8004218 <HAL_SPI_TransmitReceive+0x30a>
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d12c      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d912      	bls.n	80041ee <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	881a      	ldrh	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	1c9a      	adds	r2, r3, #2
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b02      	subs	r3, #2
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041ec:	e012      	b.n	8004214 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	330c      	adds	r3, #12
 80041f8:	7812      	ldrb	r2, [r2, #0]
 80041fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b01      	cmp	r3, #1
 8004224:	d148      	bne.n	80042b8 <HAL_SPI_TransmitReceive+0x3aa>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d042      	beq.n	80042b8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d923      	bls.n	8004286 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	b292      	uxth	r2, r2
 800424a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	1c9a      	adds	r2, r3, #2
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b02      	subs	r3, #2
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d81f      	bhi.n	80042b4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004282:	605a      	str	r2, [r3, #4]
 8004284:	e016      	b.n	80042b4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f103 020c 	add.w	r2, r3, #12
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	7812      	ldrb	r2, [r2, #0]
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042b4:	2301      	movs	r3, #1
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042b8:	f7fd fffe 	bl	80022b8 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d803      	bhi.n	80042d0 <HAL_SPI_TransmitReceive+0x3c2>
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d102      	bne.n	80042d6 <HAL_SPI_TransmitReceive+0x3c8>
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d103      	bne.n	80042de <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80042dc:	e01c      	b.n	8004318 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f47f af5b 	bne.w	80041a0 <HAL_SPI_TransmitReceive+0x292>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f47f af54 	bne.w	80041a0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f937 	bl	8004570 <SPI_EndRxTxTransaction>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d006      	beq.n	8004316 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	661a      	str	r2, [r3, #96]	; 0x60
 8004314:	e000      	b.n	8004318 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004316:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004328:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800432c:	4618      	mov	r0, r3
 800432e:	3728      	adds	r7, #40	; 0x28
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004344:	f7fd ffb8 	bl	80022b8 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	4413      	add	r3, r2
 8004352:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004354:	f7fd ffb0 	bl	80022b8 <HAL_GetTick>
 8004358:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800435a:	4b39      	ldr	r3, [pc, #228]	; (8004440 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	015b      	lsls	r3, r3, #5
 8004360:	0d1b      	lsrs	r3, r3, #20
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	fb02 f303 	mul.w	r3, r2, r3
 8004368:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800436a:	e054      	b.n	8004416 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004372:	d050      	beq.n	8004416 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004374:	f7fd ffa0 	bl	80022b8 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	429a      	cmp	r2, r3
 8004382:	d902      	bls.n	800438a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d13d      	bne.n	8004406 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004398:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a2:	d111      	bne.n	80043c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ac:	d004      	beq.n	80043b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b6:	d107      	bne.n	80043c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d0:	d10f      	bne.n	80043f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e017      	b.n	8004436 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	3b01      	subs	r3, #1
 8004414:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4013      	ands	r3, r2
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	429a      	cmp	r2, r3
 8004424:	bf0c      	ite	eq
 8004426:	2301      	moveq	r3, #1
 8004428:	2300      	movne	r3, #0
 800442a:	b2db      	uxtb	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	429a      	cmp	r2, r3
 8004432:	d19b      	bne.n	800436c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	2000000c 	.word	0x2000000c

08004444 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08a      	sub	sp, #40	; 0x28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004456:	f7fd ff2f 	bl	80022b8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	4413      	add	r3, r2
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004466:	f7fd ff27 	bl	80022b8 <HAL_GetTick>
 800446a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	330c      	adds	r3, #12
 8004472:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004474:	4b3d      	ldr	r3, [pc, #244]	; (800456c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	00da      	lsls	r2, r3, #3
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	0d1b      	lsrs	r3, r3, #20
 8004484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800448c:	e060      	b.n	8004550 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004494:	d107      	bne.n	80044a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d104      	bne.n	80044a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ac:	d050      	beq.n	8004550 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044ae:	f7fd ff03 	bl	80022b8 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d902      	bls.n	80044c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d13d      	bne.n	8004540 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044dc:	d111      	bne.n	8004502 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e6:	d004      	beq.n	80044f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f0:	d107      	bne.n	8004502 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004500:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800450a:	d10f      	bne.n	800452c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800452a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e010      	b.n	8004562 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	3b01      	subs	r3, #1
 800454e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	4013      	ands	r3, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	429a      	cmp	r2, r3
 800455e:	d196      	bne.n	800448e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3728      	adds	r7, #40	; 0x28
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	2000000c 	.word	0x2000000c

08004570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2200      	movs	r2, #0
 8004584:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f7ff ff5b 	bl	8004444 <SPI_WaitFifoStateUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004598:	f043 0220 	orr.w	r2, r3, #32
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e046      	b.n	8004632 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80045a4:	4b25      	ldr	r3, [pc, #148]	; (800463c <SPI_EndRxTxTransaction+0xcc>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a25      	ldr	r2, [pc, #148]	; (8004640 <SPI_EndRxTxTransaction+0xd0>)
 80045aa:	fba2 2303 	umull	r2, r3, r2, r3
 80045ae:	0d5b      	lsrs	r3, r3, #21
 80045b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045b4:	fb02 f303 	mul.w	r3, r2, r3
 80045b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045c2:	d112      	bne.n	80045ea <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2200      	movs	r2, #0
 80045cc:	2180      	movs	r1, #128	; 0x80
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7ff feb0 	bl	8004334 <SPI_WaitFlagStateUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d016      	beq.n	8004608 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045de:	f043 0220 	orr.w	r2, r3, #32
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e023      	b.n	8004632 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004600:	2b80      	cmp	r3, #128	; 0x80
 8004602:	d0f2      	beq.n	80045ea <SPI_EndRxTxTransaction+0x7a>
 8004604:	e000      	b.n	8004608 <SPI_EndRxTxTransaction+0x98>
        break;
 8004606:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2200      	movs	r2, #0
 8004610:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f7ff ff15 	bl	8004444 <SPI_WaitFifoStateUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d007      	beq.n	8004630 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e000      	b.n	8004632 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	2000000c 	.word	0x2000000c
 8004640:	165e9f81 	.word	0x165e9f81

08004644 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004648:	4904      	ldr	r1, [pc, #16]	; (800465c <MX_FATFS_Init+0x18>)
 800464a:	4805      	ldr	r0, [pc, #20]	; (8004660 <MX_FATFS_Init+0x1c>)
 800464c:	f003 f9c8 	bl	80079e0 <FATFS_LinkDriver>
 8004650:	4603      	mov	r3, r0
 8004652:	461a      	mov	r2, r3
 8004654:	4b03      	ldr	r3, [pc, #12]	; (8004664 <MX_FATFS_Init+0x20>)
 8004656:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004658:	bf00      	nop
 800465a:	bd80      	pop	{r7, pc}
 800465c:	200002d0 	.word	0x200002d0
 8004660:	20000018 	.word	0x20000018
 8004664:	200002cc 	.word	0x200002cc

08004668 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800466c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800466e:	4618      	mov	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	4618      	mov	r0, r3
 8004686:	f7fc fb59 	bl	8000d3c <SD_disk_initialize>
 800468a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fc fc31 	bl	8000f08 <SD_disk_status>
 80046a6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	4603      	mov	r3, r0
 80046be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80046c0:	7bf8      	ldrb	r0, [r7, #15]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	68b9      	ldr	r1, [r7, #8]
 80046c8:	f7fc fc34 	bl	8000f34 <SD_disk_read>
 80046cc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b084      	sub	sp, #16
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
 80046e2:	4603      	mov	r3, r0
 80046e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80046e6:	7bf8      	ldrb	r0, [r7, #15]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	f7fc fc8b 	bl	8001008 <SD_disk_write>
 80046f2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	603a      	str	r2, [r7, #0]
 8004706:	71fb      	strb	r3, [r7, #7]
 8004708:	460b      	mov	r3, r1
 800470a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800470c:	79b9      	ldrb	r1, [r7, #6]
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fc fcfc 	bl	8001110 <SD_disk_ioctl>
 8004718:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	4a08      	ldr	r2, [pc, #32]	; (8004754 <disk_status+0x30>)
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	79fa      	ldrb	r2, [r7, #7]
 800473c:	4905      	ldr	r1, [pc, #20]	; (8004754 <disk_status+0x30>)
 800473e:	440a      	add	r2, r1
 8004740:	7a12      	ldrb	r2, [r2, #8]
 8004742:	4610      	mov	r0, r2
 8004744:	4798      	blx	r3
 8004746:	4603      	mov	r3, r0
 8004748:	73fb      	strb	r3, [r7, #15]
  return stat;
 800474a:	7bfb      	ldrb	r3, [r7, #15]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	200004fc 	.word	0x200004fc

08004758 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	4603      	mov	r3, r0
 8004760:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	4a0d      	ldr	r2, [pc, #52]	; (80047a0 <disk_initialize+0x48>)
 800476a:	5cd3      	ldrb	r3, [r2, r3]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d111      	bne.n	8004794 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004770:	79fb      	ldrb	r3, [r7, #7]
 8004772:	4a0b      	ldr	r2, [pc, #44]	; (80047a0 <disk_initialize+0x48>)
 8004774:	2101      	movs	r1, #1
 8004776:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004778:	79fb      	ldrb	r3, [r7, #7]
 800477a:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <disk_initialize+0x48>)
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	79fa      	ldrb	r2, [r7, #7]
 8004786:	4906      	ldr	r1, [pc, #24]	; (80047a0 <disk_initialize+0x48>)
 8004788:	440a      	add	r2, r1
 800478a:	7a12      	ldrb	r2, [r2, #8]
 800478c:	4610      	mov	r0, r2
 800478e:	4798      	blx	r3
 8004790:	4603      	mov	r3, r0
 8004792:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004794:	7bfb      	ldrb	r3, [r7, #15]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	200004fc 	.word	0x200004fc

080047a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80047a4:	b590      	push	{r4, r7, lr}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	4603      	mov	r3, r0
 80047b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	4a0a      	ldr	r2, [pc, #40]	; (80047e0 <disk_read+0x3c>)
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	689c      	ldr	r4, [r3, #8]
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	4a07      	ldr	r2, [pc, #28]	; (80047e0 <disk_read+0x3c>)
 80047c4:	4413      	add	r3, r2
 80047c6:	7a18      	ldrb	r0, [r3, #8]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	68b9      	ldr	r1, [r7, #8]
 80047ce:	47a0      	blx	r4
 80047d0:	4603      	mov	r3, r0
 80047d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd90      	pop	{r4, r7, pc}
 80047de:	bf00      	nop
 80047e0:	200004fc 	.word	0x200004fc

080047e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80047e4:	b590      	push	{r4, r7, lr}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	4603      	mov	r3, r0
 80047f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	4a0a      	ldr	r2, [pc, #40]	; (8004820 <disk_write+0x3c>)
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	68dc      	ldr	r4, [r3, #12]
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	4a07      	ldr	r2, [pc, #28]	; (8004820 <disk_write+0x3c>)
 8004804:	4413      	add	r3, r2
 8004806:	7a18      	ldrb	r0, [r3, #8]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	47a0      	blx	r4
 8004810:	4603      	mov	r3, r0
 8004812:	75fb      	strb	r3, [r7, #23]
  return res;
 8004814:	7dfb      	ldrb	r3, [r7, #23]
}
 8004816:	4618      	mov	r0, r3
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	bd90      	pop	{r4, r7, pc}
 800481e:	bf00      	nop
 8004820:	200004fc 	.word	0x200004fc

08004824 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	603a      	str	r2, [r7, #0]
 800482e:	71fb      	strb	r3, [r7, #7]
 8004830:	460b      	mov	r3, r1
 8004832:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <disk_ioctl+0x38>)
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	79fa      	ldrb	r2, [r7, #7]
 8004842:	4906      	ldr	r1, [pc, #24]	; (800485c <disk_ioctl+0x38>)
 8004844:	440a      	add	r2, r1
 8004846:	7a10      	ldrb	r0, [r2, #8]
 8004848:	79b9      	ldrb	r1, [r7, #6]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	4798      	blx	r3
 800484e:	4603      	mov	r3, r0
 8004850:	73fb      	strb	r3, [r7, #15]
  return res;
 8004852:	7bfb      	ldrb	r3, [r7, #15]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	200004fc 	.word	0x200004fc

08004860 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3301      	adds	r3, #1
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004870:	89fb      	ldrh	r3, [r7, #14]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	b21a      	sxth	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	b21b      	sxth	r3, r3
 800487c:	4313      	orrs	r3, r2
 800487e:	b21b      	sxth	r3, r3
 8004880:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004882:	89fb      	ldrh	r3, [r7, #14]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3303      	adds	r3, #3
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	3202      	adds	r2, #2
 80048a8:	7812      	ldrb	r2, [r2, #0]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	3201      	adds	r2, #1
 80048b6:	7812      	ldrb	r2, [r2, #0]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	021b      	lsls	r3, r3, #8
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	7812      	ldrb	r2, [r2, #0]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80048c8:	68fb      	ldr	r3, [r7, #12]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	460b      	mov	r3, r1
 80048e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	887a      	ldrh	r2, [r7, #2]
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	887b      	ldrh	r3, [r7, #2]
 80048f0:	0a1b      	lsrs	r3, r3, #8
 80048f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	887a      	ldrh	r2, [r7, #2]
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	0a1b      	lsrs	r3, r3, #8
 8004926:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	701a      	strb	r2, [r3, #0]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	0a1b      	lsrs	r3, r3, #8
 8004938:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	0a1b      	lsrs	r3, r3, #8
 800494a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00d      	beq.n	800499a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	1c53      	adds	r3, r2, #1
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	1c59      	adds	r1, r3, #1
 8004988:	6179      	str	r1, [r7, #20]
 800498a:	7812      	ldrb	r2, [r2, #0]
 800498c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	3b01      	subs	r3, #1
 8004992:	607b      	str	r3, [r7, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f1      	bne.n	800497e <mem_cpy+0x1a>
	}
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80049a6:	b480      	push	{r7}
 80049a8:	b087      	sub	sp, #28
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	617a      	str	r2, [r7, #20]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	607b      	str	r3, [r7, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f3      	bne.n	80049b6 <mem_set+0x10>
}
 80049ce:	bf00      	nop
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80049dc:	b480      	push	{r7}
 80049de:	b089      	sub	sp, #36	; 0x24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	61fa      	str	r2, [r7, #28]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	4619      	mov	r1, r3
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	61ba      	str	r2, [r7, #24]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	1acb      	subs	r3, r1, r3
 8004a08:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	607b      	str	r3, [r7, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <mem_cmp+0x40>
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0eb      	beq.n	80049f4 <mem_cmp+0x18>

	return r;
 8004a1c:	697b      	ldr	r3, [r7, #20]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3724      	adds	r7, #36	; 0x24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004a34:	e002      	b.n	8004a3c <chk_chr+0x12>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	607b      	str	r3, [r7, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <chk_chr+0x26>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d1f2      	bne.n	8004a36 <chk_chr+0xc>
	return *str;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	781b      	ldrb	r3, [r3, #0]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	e029      	b.n	8004ac8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004a74:	4a27      	ldr	r2, [pc, #156]	; (8004b14 <chk_lock+0xb4>)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	4413      	add	r3, r2
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01d      	beq.n	8004abe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004a82:	4a24      	ldr	r2, [pc, #144]	; (8004b14 <chk_lock+0xb4>)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	4413      	add	r3, r2
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d116      	bne.n	8004ac2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004a94:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <chk_lock+0xb4>)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d10c      	bne.n	8004ac2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004aa8:	4a1a      	ldr	r2, [pc, #104]	; (8004b14 <chk_lock+0xb4>)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	4413      	add	r3, r2
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d102      	bne.n	8004ac2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004abc:	e007      	b.n	8004ace <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d9d2      	bls.n	8004a74 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d109      	bne.n	8004ae8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d102      	bne.n	8004ae0 <chk_lock+0x80>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d101      	bne.n	8004ae4 <chk_lock+0x84>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e010      	b.n	8004b06 <chk_lock+0xa6>
 8004ae4:	2312      	movs	r3, #18
 8004ae6:	e00e      	b.n	8004b06 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d108      	bne.n	8004b00 <chk_lock+0xa0>
 8004aee:	4a09      	ldr	r2, [pc, #36]	; (8004b14 <chk_lock+0xb4>)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	4413      	add	r3, r2
 8004af6:	330c      	adds	r3, #12
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004afe:	d101      	bne.n	8004b04 <chk_lock+0xa4>
 8004b00:	2310      	movs	r3, #16
 8004b02:	e000      	b.n	8004b06 <chk_lock+0xa6>
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	200002dc 	.word	0x200002dc

08004b18 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	607b      	str	r3, [r7, #4]
 8004b22:	e002      	b.n	8004b2a <enq_lock+0x12>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3301      	adds	r3, #1
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d806      	bhi.n	8004b3e <enq_lock+0x26>
 8004b30:	4a09      	ldr	r2, [pc, #36]	; (8004b58 <enq_lock+0x40>)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	4413      	add	r3, r2
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f2      	bne.n	8004b24 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	bf14      	ite	ne
 8004b44:	2301      	movne	r3, #1
 8004b46:	2300      	moveq	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	200002dc 	.word	0x200002dc

08004b5c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	e01f      	b.n	8004bac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004b6c:	4a41      	ldr	r2, [pc, #260]	; (8004c74 <inc_lock+0x118>)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	4413      	add	r3, r2
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d113      	bne.n	8004ba6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004b7e:	4a3d      	ldr	r2, [pc, #244]	; (8004c74 <inc_lock+0x118>)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	4413      	add	r3, r2
 8004b86:	3304      	adds	r3, #4
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d109      	bne.n	8004ba6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004b92:	4a38      	ldr	r2, [pc, #224]	; (8004c74 <inc_lock+0x118>)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	4413      	add	r3, r2
 8004b9a:	3308      	adds	r3, #8
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d006      	beq.n	8004bb4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d9dc      	bls.n	8004b6c <inc_lock+0x10>
 8004bb2:	e000      	b.n	8004bb6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004bb4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d132      	bne.n	8004c22 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	e002      	b.n	8004bc8 <inc_lock+0x6c>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d806      	bhi.n	8004bdc <inc_lock+0x80>
 8004bce:	4a29      	ldr	r2, [pc, #164]	; (8004c74 <inc_lock+0x118>)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	4413      	add	r3, r2
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f2      	bne.n	8004bc2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d101      	bne.n	8004be6 <inc_lock+0x8a>
 8004be2:	2300      	movs	r3, #0
 8004be4:	e040      	b.n	8004c68 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4922      	ldr	r1, [pc, #136]	; (8004c74 <inc_lock+0x118>)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	440b      	add	r3, r1
 8004bf2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	491e      	ldr	r1, [pc, #120]	; (8004c74 <inc_lock+0x118>)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	440b      	add	r3, r1
 8004c00:	3304      	adds	r3, #4
 8004c02:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	491a      	ldr	r1, [pc, #104]	; (8004c74 <inc_lock+0x118>)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	440b      	add	r3, r1
 8004c10:	3308      	adds	r3, #8
 8004c12:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004c14:	4a17      	ldr	r2, [pc, #92]	; (8004c74 <inc_lock+0x118>)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	4413      	add	r3, r2
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	2200      	movs	r2, #0
 8004c20:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d009      	beq.n	8004c3c <inc_lock+0xe0>
 8004c28:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <inc_lock+0x118>)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	4413      	add	r3, r2
 8004c30:	330c      	adds	r3, #12
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <inc_lock+0xe0>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e015      	b.n	8004c68 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d108      	bne.n	8004c54 <inc_lock+0xf8>
 8004c42:	4a0c      	ldr	r2, [pc, #48]	; (8004c74 <inc_lock+0x118>)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	4413      	add	r3, r2
 8004c4a:	330c      	adds	r3, #12
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	e001      	b.n	8004c58 <inc_lock+0xfc>
 8004c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c58:	4906      	ldr	r1, [pc, #24]	; (8004c74 <inc_lock+0x118>)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	440b      	add	r3, r1
 8004c60:	330c      	adds	r3, #12
 8004c62:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3301      	adds	r3, #1
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	200002dc 	.word	0x200002dc

08004c78 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d825      	bhi.n	8004cd8 <dec_lock+0x60>
		n = Files[i].ctr;
 8004c8c:	4a17      	ldr	r2, [pc, #92]	; (8004cec <dec_lock+0x74>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	4413      	add	r3, r2
 8004c94:	330c      	adds	r3, #12
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004c9a:	89fb      	ldrh	r3, [r7, #14]
 8004c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca0:	d101      	bne.n	8004ca6 <dec_lock+0x2e>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004ca6:	89fb      	ldrh	r3, [r7, #14]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <dec_lock+0x3a>
 8004cac:	89fb      	ldrh	r3, [r7, #14]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004cb2:	4a0e      	ldr	r2, [pc, #56]	; (8004cec <dec_lock+0x74>)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	4413      	add	r3, r2
 8004cba:	330c      	adds	r3, #12
 8004cbc:	89fa      	ldrh	r2, [r7, #14]
 8004cbe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004cc0:	89fb      	ldrh	r3, [r7, #14]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d105      	bne.n	8004cd2 <dec_lock+0x5a>
 8004cc6:	4a09      	ldr	r2, [pc, #36]	; (8004cec <dec_lock+0x74>)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	4413      	add	r3, r2
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	737b      	strb	r3, [r7, #13]
 8004cd6:	e001      	b.n	8004cdc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004cd8:	2302      	movs	r3, #2
 8004cda:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004cdc:	7b7b      	ldrb	r3, [r7, #13]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	200002dc 	.word	0x200002dc

08004cf0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e010      	b.n	8004d20 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004cfe:	4a0d      	ldr	r2, [pc, #52]	; (8004d34 <clear_lock+0x44>)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	4413      	add	r3, r2
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d105      	bne.n	8004d1a <clear_lock+0x2a>
 8004d0e:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <clear_lock+0x44>)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	4413      	add	r3, r2
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d9eb      	bls.n	8004cfe <clear_lock+0xe>
	}
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	200002dc 	.word	0x200002dc

08004d38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	78db      	ldrb	r3, [r3, #3]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d034      	beq.n	8004db6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	7858      	ldrb	r0, [r3, #1]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	f7ff fd40 	bl	80047e4 <disk_write>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	73fb      	strb	r3, [r7, #15]
 8004d6e:	e022      	b.n	8004db6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	1ad2      	subs	r2, r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d217      	bcs.n	8004db6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	789b      	ldrb	r3, [r3, #2]
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	e010      	b.n	8004db0 <sync_window+0x78>
					wsect += fs->fsize;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4413      	add	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	7858      	ldrb	r0, [r3, #1]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004da2:	2301      	movs	r3, #1
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	f7ff fd1d 	bl	80047e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d8eb      	bhi.n	8004d8e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d01b      	beq.n	8004e10 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7ff ffad 	bl	8004d38 <sync_window>
 8004dde:	4603      	mov	r3, r0
 8004de0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d113      	bne.n	8004e10 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	7858      	ldrb	r0, [r3, #1]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004df2:	2301      	movs	r3, #1
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	f7ff fcd5 	bl	80047a4 <disk_read>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d004      	beq.n	8004e0a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004e00:	f04f 33ff 	mov.w	r3, #4294967295
 8004e04:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ff87 	bl	8004d38 <sync_window>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d159      	bne.n	8004ee8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d149      	bne.n	8004ed0 <sync_fs+0xb4>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	791b      	ldrb	r3, [r3, #4]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d145      	bne.n	8004ed0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	899b      	ldrh	r3, [r3, #12]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	2100      	movs	r1, #0
 8004e52:	f7ff fda8 	bl	80049a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3338      	adds	r3, #56	; 0x38
 8004e5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004e5e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff fd37 	bl	80048d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3338      	adds	r3, #56	; 0x38
 8004e6c:	4921      	ldr	r1, [pc, #132]	; (8004ef4 <sync_fs+0xd8>)
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff fd4c 	bl	800490c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3338      	adds	r3, #56	; 0x38
 8004e78:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004e7c:	491e      	ldr	r1, [pc, #120]	; (8004ef8 <sync_fs+0xdc>)
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fd44 	bl	800490c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3338      	adds	r3, #56	; 0x38
 8004e88:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f7ff fd3a 	bl	800490c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3338      	adds	r3, #56	; 0x38
 8004e9c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	f7ff fd30 	bl	800490c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	7858      	ldrb	r0, [r3, #1]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f7ff fc8d 	bl	80047e4 <disk_write>
			fs->fsi_flag = 0;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	785b      	ldrb	r3, [r3, #1]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fca3 	bl	8004824 <disk_ioctl>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <sync_fs+0xcc>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	41615252 	.word	0x41615252
 8004ef8:	61417272 	.word	0x61417272

08004efc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	3b02      	subs	r3, #2
 8004f0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	3b02      	subs	r3, #2
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d301      	bcc.n	8004f1c <clust2sect+0x20>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e008      	b.n	8004f2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	895b      	ldrh	r3, [r3, #10]
 8004f20:	461a      	mov	r2, r3
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	fb03 f202 	mul.w	r2, r3, r2
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	4413      	add	r3, r2
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b086      	sub	sp, #24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d904      	bls.n	8004f5a <get_fat+0x20>
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d302      	bcc.n	8004f60 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	e0bb      	b.n	80050d8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004f60:	f04f 33ff 	mov.w	r3, #4294967295
 8004f64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	f000 8083 	beq.w	8005076 <get_fat+0x13c>
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	f300 80a7 	bgt.w	80050c4 <get_fat+0x18a>
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d002      	beq.n	8004f80 <get_fat+0x46>
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d056      	beq.n	800502c <get_fat+0xf2>
 8004f7e:	e0a1      	b.n	80050c4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	085b      	lsrs	r3, r3, #1
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	899b      	ldrh	r3, [r3, #12]
 8004f96:	4619      	mov	r1, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f9e:	4413      	add	r3, r2
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	6938      	ldr	r0, [r7, #16]
 8004fa4:	f7ff ff0c 	bl	8004dc0 <move_window>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f040 808d 	bne.w	80050ca <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	60fa      	str	r2, [r7, #12]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	8992      	ldrh	r2, [r2, #12]
 8004fba:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fbe:	fb01 f202 	mul.w	r2, r1, r2
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fcc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	899b      	ldrh	r3, [r3, #12]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fde:	4413      	add	r3, r2
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	6938      	ldr	r0, [r7, #16]
 8004fe4:	f7ff feec 	bl	8004dc0 <move_window>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d16f      	bne.n	80050ce <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	899b      	ldrh	r3, [r3, #12]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ffa:	fb01 f202 	mul.w	r2, r1, r2
 8004ffe:	1a9b      	subs	r3, r3, r2
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4413      	add	r3, r2
 8005004:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005008:	021b      	lsls	r3, r3, #8
 800500a:	461a      	mov	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4313      	orrs	r3, r2
 8005010:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <get_fat+0xe8>
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	091b      	lsrs	r3, r3, #4
 8005020:	e002      	b.n	8005028 <get_fat+0xee>
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005028:	617b      	str	r3, [r7, #20]
			break;
 800502a:	e055      	b.n	80050d8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	899b      	ldrh	r3, [r3, #12]
 8005034:	085b      	lsrs	r3, r3, #1
 8005036:	b29b      	uxth	r3, r3
 8005038:	4619      	mov	r1, r3
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005040:	4413      	add	r3, r2
 8005042:	4619      	mov	r1, r3
 8005044:	6938      	ldr	r0, [r7, #16]
 8005046:	f7ff febb 	bl	8004dc0 <move_window>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d140      	bne.n	80050d2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	8992      	ldrh	r2, [r2, #12]
 800505e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005062:	fb00 f202 	mul.w	r2, r0, r2
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	440b      	add	r3, r1
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff fbf8 	bl	8004860 <ld_word>
 8005070:	4603      	mov	r3, r0
 8005072:	617b      	str	r3, [r7, #20]
			break;
 8005074:	e030      	b.n	80050d8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	899b      	ldrh	r3, [r3, #12]
 800507e:	089b      	lsrs	r3, r3, #2
 8005080:	b29b      	uxth	r3, r3
 8005082:	4619      	mov	r1, r3
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	fbb3 f3f1 	udiv	r3, r3, r1
 800508a:	4413      	add	r3, r2
 800508c:	4619      	mov	r1, r3
 800508e:	6938      	ldr	r0, [r7, #16]
 8005090:	f7ff fe96 	bl	8004dc0 <move_window>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d11d      	bne.n	80050d6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	8992      	ldrh	r2, [r2, #12]
 80050a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80050ac:	fb00 f202 	mul.w	r2, r0, r2
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	440b      	add	r3, r1
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff fbeb 	bl	8004890 <ld_dword>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050c0:	617b      	str	r3, [r7, #20]
			break;
 80050c2:	e009      	b.n	80050d8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80050c4:	2301      	movs	r3, #1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	e006      	b.n	80050d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050ca:	bf00      	nop
 80050cc:	e004      	b.n	80050d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050ce:	bf00      	nop
 80050d0:	e002      	b.n	80050d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80050d2:	bf00      	nop
 80050d4:	e000      	b.n	80050d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80050d6:	bf00      	nop
		}
	}

	return val;
 80050d8:	697b      	ldr	r3, [r7, #20]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80050e2:	b590      	push	{r4, r7, lr}
 80050e4:	b089      	sub	sp, #36	; 0x24
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80050ee:	2302      	movs	r3, #2
 80050f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	f240 8109 	bls.w	800530c <put_fat+0x22a>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	429a      	cmp	r2, r3
 8005102:	f080 8103 	bcs.w	800530c <put_fat+0x22a>
		switch (fs->fs_type) {
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b03      	cmp	r3, #3
 800510c:	f000 80b6 	beq.w	800527c <put_fat+0x19a>
 8005110:	2b03      	cmp	r3, #3
 8005112:	f300 80fb 	bgt.w	800530c <put_fat+0x22a>
 8005116:	2b01      	cmp	r3, #1
 8005118:	d003      	beq.n	8005122 <put_fat+0x40>
 800511a:	2b02      	cmp	r3, #2
 800511c:	f000 8083 	beq.w	8005226 <put_fat+0x144>
 8005120:	e0f4      	b.n	800530c <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	61bb      	str	r3, [r7, #24]
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	4413      	add	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	899b      	ldrh	r3, [r3, #12]
 8005138:	4619      	mov	r1, r3
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005140:	4413      	add	r3, r2
 8005142:	4619      	mov	r1, r3
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff fe3b 	bl	8004dc0 <move_window>
 800514a:	4603      	mov	r3, r0
 800514c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800514e:	7ffb      	ldrb	r3, [r7, #31]
 8005150:	2b00      	cmp	r3, #0
 8005152:	f040 80d4 	bne.w	80052fe <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	61ba      	str	r2, [r7, #24]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	8992      	ldrh	r2, [r2, #12]
 8005166:	fbb3 f0f2 	udiv	r0, r3, r2
 800516a:	fb00 f202 	mul.w	r2, r0, r2
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	440b      	add	r3, r1
 8005172:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00d      	beq.n	800519a <put_fat+0xb8>
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	b25b      	sxtb	r3, r3
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	b25a      	sxtb	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	b25b      	sxtb	r3, r3
 8005192:	4313      	orrs	r3, r2
 8005194:	b25b      	sxtb	r3, r3
 8005196:	b2db      	uxtb	r3, r3
 8005198:	e001      	b.n	800519e <put_fat+0xbc>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	899b      	ldrh	r3, [r3, #12]
 80051b0:	4619      	mov	r1, r3
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80051b8:	4413      	add	r3, r2
 80051ba:	4619      	mov	r1, r3
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff fdff 	bl	8004dc0 <move_window>
 80051c2:	4603      	mov	r3, r0
 80051c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051c6:	7ffb      	ldrb	r3, [r7, #31]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f040 809a 	bne.w	8005302 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	899b      	ldrh	r3, [r3, #12]
 80051d8:	461a      	mov	r2, r3
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80051e0:	fb00 f202 	mul.w	r2, r0, r2
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	440b      	add	r3, r1
 80051e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <put_fat+0x11a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	091b      	lsrs	r3, r3, #4
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	e00e      	b.n	800521a <put_fat+0x138>
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	b25b      	sxtb	r3, r3
 8005202:	f023 030f 	bic.w	r3, r3, #15
 8005206:	b25a      	sxtb	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	0a1b      	lsrs	r3, r3, #8
 800520c:	b25b      	sxtb	r3, r3
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	b25b      	sxtb	r3, r3
 8005214:	4313      	orrs	r3, r2
 8005216:	b25b      	sxtb	r3, r3
 8005218:	b2db      	uxtb	r3, r3
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	70da      	strb	r2, [r3, #3]
			break;
 8005224:	e072      	b.n	800530c <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	899b      	ldrh	r3, [r3, #12]
 800522e:	085b      	lsrs	r3, r3, #1
 8005230:	b29b      	uxth	r3, r3
 8005232:	4619      	mov	r1, r3
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	fbb3 f3f1 	udiv	r3, r3, r1
 800523a:	4413      	add	r3, r2
 800523c:	4619      	mov	r1, r3
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f7ff fdbe 	bl	8004dc0 <move_window>
 8005244:	4603      	mov	r3, r0
 8005246:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005248:	7ffb      	ldrb	r3, [r7, #31]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d15b      	bne.n	8005306 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	8992      	ldrh	r2, [r2, #12]
 800525c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005260:	fb00 f202 	mul.w	r2, r0, r2
 8005264:	1a9b      	subs	r3, r3, r2
 8005266:	440b      	add	r3, r1
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	b292      	uxth	r2, r2
 800526c:	4611      	mov	r1, r2
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff fb31 	bl	80048d6 <st_word>
			fs->wflag = 1;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2201      	movs	r2, #1
 8005278:	70da      	strb	r2, [r3, #3]
			break;
 800527a:	e047      	b.n	800530c <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	899b      	ldrh	r3, [r3, #12]
 8005284:	089b      	lsrs	r3, r3, #2
 8005286:	b29b      	uxth	r3, r3
 8005288:	4619      	mov	r1, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005290:	4413      	add	r3, r2
 8005292:	4619      	mov	r1, r3
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff fd93 	bl	8004dc0 <move_window>
 800529a:	4603      	mov	r3, r0
 800529c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800529e:	7ffb      	ldrb	r3, [r7, #31]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d132      	bne.n	800530a <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	8992      	ldrh	r2, [r2, #12]
 80052b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80052bc:	fb00 f202 	mul.w	r2, r0, r2
 80052c0:	1a9b      	subs	r3, r3, r2
 80052c2:	440b      	add	r3, r1
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fae3 	bl	8004890 <ld_dword>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80052d0:	4323      	orrs	r3, r4
 80052d2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	8992      	ldrh	r2, [r2, #12]
 80052e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80052e6:	fb00 f202 	mul.w	r2, r0, r2
 80052ea:	1a9b      	subs	r3, r3, r2
 80052ec:	440b      	add	r3, r1
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff fb0b 	bl	800490c <st_dword>
			fs->wflag = 1;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	70da      	strb	r2, [r3, #3]
			break;
 80052fc:	e006      	b.n	800530c <put_fat+0x22a>
			if (res != FR_OK) break;
 80052fe:	bf00      	nop
 8005300:	e004      	b.n	800530c <put_fat+0x22a>
			if (res != FR_OK) break;
 8005302:	bf00      	nop
 8005304:	e002      	b.n	800530c <put_fat+0x22a>
			if (res != FR_OK) break;
 8005306:	bf00      	nop
 8005308:	e000      	b.n	800530c <put_fat+0x22a>
			if (res != FR_OK) break;
 800530a:	bf00      	nop
		}
	}
	return res;
 800530c:	7ffb      	ldrb	r3, [r7, #31]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3724      	adds	r7, #36	; 0x24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd90      	pop	{r4, r7, pc}

08005316 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b088      	sub	sp, #32
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d904      	bls.n	800533c <remove_chain+0x26>
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	429a      	cmp	r2, r3
 800533a:	d301      	bcc.n	8005340 <remove_chain+0x2a>
 800533c:	2302      	movs	r3, #2
 800533e:	e04b      	b.n	80053d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00c      	beq.n	8005360 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005346:	f04f 32ff 	mov.w	r2, #4294967295
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	69b8      	ldr	r0, [r7, #24]
 800534e:	f7ff fec8 	bl	80050e2 <put_fat>
 8005352:	4603      	mov	r3, r0
 8005354:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005356:	7ffb      	ldrb	r3, [r7, #31]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <remove_chain+0x4a>
 800535c:	7ffb      	ldrb	r3, [r7, #31]
 800535e:	e03b      	b.n	80053d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f7ff fde9 	bl	8004f3a <get_fat>
 8005368:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d031      	beq.n	80053d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <remove_chain+0x64>
 8005376:	2302      	movs	r3, #2
 8005378:	e02e      	b.n	80053d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d101      	bne.n	8005386 <remove_chain+0x70>
 8005382:	2301      	movs	r3, #1
 8005384:	e028      	b.n	80053d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005386:	2200      	movs	r2, #0
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	69b8      	ldr	r0, [r7, #24]
 800538c:	f7ff fea9 	bl	80050e2 <put_fat>
 8005390:	4603      	mov	r3, r0
 8005392:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005394:	7ffb      	ldrb	r3, [r7, #31]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <remove_chain+0x88>
 800539a:	7ffb      	ldrb	r3, [r7, #31]
 800539c:	e01c      	b.n	80053d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	3b02      	subs	r3, #2
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d20b      	bcs.n	80053c4 <remove_chain+0xae>
			fs->free_clst++;
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	791b      	ldrb	r3, [r3, #4]
 80053ba:	f043 0301 	orr.w	r3, r3, #1
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d3c6      	bcc.n	8005360 <remove_chain+0x4a>
 80053d2:	e000      	b.n	80053d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80053d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3720      	adds	r7, #32
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10d      	bne.n	8005412 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <create_chain+0x2c>
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	429a      	cmp	r2, r3
 800540a:	d31b      	bcc.n	8005444 <create_chain+0x64>
 800540c:	2301      	movs	r3, #1
 800540e:	61bb      	str	r3, [r7, #24]
 8005410:	e018      	b.n	8005444 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005412:	6839      	ldr	r1, [r7, #0]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff fd90 	bl	8004f3a <get_fat>
 800541a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d801      	bhi.n	8005426 <create_chain+0x46>
 8005422:	2301      	movs	r3, #1
 8005424:	e070      	b.n	8005508 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542c:	d101      	bne.n	8005432 <create_chain+0x52>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	e06a      	b.n	8005508 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	429a      	cmp	r2, r3
 800543a:	d201      	bcs.n	8005440 <create_chain+0x60>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	e063      	b.n	8005508 <create_chain+0x128>
		scl = clst;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	3301      	adds	r3, #1
 800544c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	429a      	cmp	r2, r3
 8005456:	d307      	bcc.n	8005468 <create_chain+0x88>
				ncl = 2;
 8005458:	2302      	movs	r3, #2
 800545a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	429a      	cmp	r2, r3
 8005462:	d901      	bls.n	8005468 <create_chain+0x88>
 8005464:	2300      	movs	r3, #0
 8005466:	e04f      	b.n	8005508 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005468:	69f9      	ldr	r1, [r7, #28]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff fd65 	bl	8004f3a <get_fat>
 8005470:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00e      	beq.n	8005496 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d003      	beq.n	8005486 <create_chain+0xa6>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005484:	d101      	bne.n	800548a <create_chain+0xaa>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	e03e      	b.n	8005508 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	429a      	cmp	r2, r3
 8005490:	d1da      	bne.n	8005448 <create_chain+0x68>
 8005492:	2300      	movs	r3, #0
 8005494:	e038      	b.n	8005508 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005496:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005498:	f04f 32ff 	mov.w	r2, #4294967295
 800549c:	69f9      	ldr	r1, [r7, #28]
 800549e:	6938      	ldr	r0, [r7, #16]
 80054a0:	f7ff fe1f 	bl	80050e2 <put_fat>
 80054a4:	4603      	mov	r3, r0
 80054a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <create_chain+0xe2>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d006      	beq.n	80054c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	6839      	ldr	r1, [r7, #0]
 80054b8:	6938      	ldr	r0, [r7, #16]
 80054ba:	f7ff fe12 	bl	80050e2 <put_fat>
 80054be:	4603      	mov	r3, r0
 80054c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d116      	bne.n	80054f6 <create_chain+0x116>
		fs->last_clst = ncl;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	3b02      	subs	r3, #2
 80054d8:	429a      	cmp	r2, r3
 80054da:	d804      	bhi.n	80054e6 <create_chain+0x106>
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	1e5a      	subs	r2, r3, #1
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	791b      	ldrb	r3, [r3, #4]
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	711a      	strb	r2, [r3, #4]
 80054f4:	e007      	b.n	8005506 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d102      	bne.n	8005502 <create_chain+0x122>
 80054fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005500:	e000      	b.n	8005504 <create_chain+0x124>
 8005502:	2301      	movs	r3, #1
 8005504:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005506:	69fb      	ldr	r3, [r7, #28]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3720      	adds	r7, #32
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	3304      	adds	r3, #4
 8005526:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	899b      	ldrh	r3, [r3, #12]
 800552c:	461a      	mov	r2, r3
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	fbb3 f3f2 	udiv	r3, r3, r2
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	8952      	ldrh	r2, [r2, #10]
 8005538:	fbb3 f3f2 	udiv	r3, r3, r2
 800553c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1d1a      	adds	r2, r3, #4
 8005542:	613a      	str	r2, [r7, #16]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <clmt_clust+0x42>
 800554e:	2300      	movs	r3, #0
 8005550:	e010      	b.n	8005574 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	429a      	cmp	r2, r3
 8005558:	d307      	bcc.n	800556a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	3304      	adds	r3, #4
 8005566:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005568:	e7e9      	b.n	800553e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800556a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	4413      	add	r3, r2
}
 8005574:	4618      	mov	r0, r3
 8005576:	371c      	adds	r7, #28
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005596:	d204      	bcs.n	80055a2 <dir_sdi+0x22>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	f003 031f 	and.w	r3, r3, #31
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80055a2:	2302      	movs	r3, #2
 80055a4:	e071      	b.n	800568a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d106      	bne.n	80055c6 <dir_sdi+0x46>
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d902      	bls.n	80055c6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10c      	bne.n	80055e6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	8912      	ldrh	r2, [r2, #8]
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d301      	bcc.n	80055dc <dir_sdi+0x5c>
 80055d8:	2302      	movs	r3, #2
 80055da:	e056      	b.n	800568a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	61da      	str	r2, [r3, #28]
 80055e4:	e02d      	b.n	8005642 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	895b      	ldrh	r3, [r3, #10]
 80055ea:	461a      	mov	r2, r3
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	899b      	ldrh	r3, [r3, #12]
 80055f0:	fb02 f303 	mul.w	r3, r2, r3
 80055f4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80055f6:	e019      	b.n	800562c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6979      	ldr	r1, [r7, #20]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff fc9c 	bl	8004f3a <get_fat>
 8005602:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d101      	bne.n	8005610 <dir_sdi+0x90>
 800560c:	2301      	movs	r3, #1
 800560e:	e03c      	b.n	800568a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d904      	bls.n	8005620 <dir_sdi+0xa0>
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	429a      	cmp	r2, r3
 800561e:	d301      	bcc.n	8005624 <dir_sdi+0xa4>
 8005620:	2302      	movs	r3, #2
 8005622:	e032      	b.n	800568a <dir_sdi+0x10a>
			ofs -= csz;
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	429a      	cmp	r2, r3
 8005632:	d2e1      	bcs.n	80055f8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005634:	6979      	ldr	r1, [r7, #20]
 8005636:	6938      	ldr	r0, [r7, #16]
 8005638:	f7ff fc60 	bl	8004efc <clust2sect>
 800563c:	4602      	mov	r2, r0
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <dir_sdi+0xd4>
 8005650:	2302      	movs	r3, #2
 8005652:	e01a      	b.n	800568a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	899b      	ldrh	r3, [r3, #12]
 800565c:	4619      	mov	r1, r3
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	fbb3 f3f1 	udiv	r3, r3, r1
 8005664:	441a      	add	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	899b      	ldrh	r3, [r3, #12]
 8005674:	461a      	mov	r2, r3
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	fbb3 f0f2 	udiv	r0, r3, r2
 800567c:	fb00 f202 	mul.w	r2, r0, r2
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	18ca      	adds	r2, r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b086      	sub	sp, #24
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	3320      	adds	r3, #32
 80056a8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <dir_next+0x28>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056b8:	d301      	bcc.n	80056be <dir_next+0x2c>
 80056ba:	2304      	movs	r3, #4
 80056bc:	e0bb      	b.n	8005836 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	899b      	ldrh	r3, [r3, #12]
 80056c2:	461a      	mov	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80056ca:	fb01 f202 	mul.w	r2, r1, r2
 80056ce:	1a9b      	subs	r3, r3, r2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f040 809d 	bne.w	8005810 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10b      	bne.n	8005700 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	8912      	ldrh	r2, [r2, #8]
 80056f0:	4293      	cmp	r3, r2
 80056f2:	f0c0 808d 	bcc.w	8005810 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	61da      	str	r2, [r3, #28]
 80056fc:	2304      	movs	r3, #4
 80056fe:	e09a      	b.n	8005836 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	899b      	ldrh	r3, [r3, #12]
 8005704:	461a      	mov	r2, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	fbb3 f3f2 	udiv	r3, r3, r2
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	8952      	ldrh	r2, [r2, #10]
 8005710:	3a01      	subs	r2, #1
 8005712:	4013      	ands	r3, r2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d17b      	bne.n	8005810 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	4619      	mov	r1, r3
 8005720:	4610      	mov	r0, r2
 8005722:	f7ff fc0a 	bl	8004f3a <get_fat>
 8005726:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d801      	bhi.n	8005732 <dir_next+0xa0>
 800572e:	2302      	movs	r3, #2
 8005730:	e081      	b.n	8005836 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005738:	d101      	bne.n	800573e <dir_next+0xac>
 800573a:	2301      	movs	r3, #1
 800573c:	e07b      	b.n	8005836 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	429a      	cmp	r2, r3
 8005746:	d359      	bcc.n	80057fc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d104      	bne.n	8005758 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	61da      	str	r2, [r3, #28]
 8005754:	2304      	movs	r3, #4
 8005756:	e06e      	b.n	8005836 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f7ff fe3d 	bl	80053e0 <create_chain>
 8005766:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <dir_next+0xe0>
 800576e:	2307      	movs	r3, #7
 8005770:	e061      	b.n	8005836 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <dir_next+0xea>
 8005778:	2302      	movs	r3, #2
 800577a:	e05c      	b.n	8005836 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d101      	bne.n	8005788 <dir_next+0xf6>
 8005784:	2301      	movs	r3, #1
 8005786:	e056      	b.n	8005836 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f7ff fad5 	bl	8004d38 <sync_window>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <dir_next+0x106>
 8005794:	2301      	movs	r3, #1
 8005796:	e04e      	b.n	8005836 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	899b      	ldrh	r3, [r3, #12]
 80057a2:	461a      	mov	r2, r3
 80057a4:	2100      	movs	r1, #0
 80057a6:	f7ff f8fe 	bl	80049a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80057aa:	2300      	movs	r3, #0
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	6979      	ldr	r1, [r7, #20]
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7ff fba3 	bl	8004efc <clust2sect>
 80057b6:	4602      	mov	r2, r0
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	635a      	str	r2, [r3, #52]	; 0x34
 80057bc:	e012      	b.n	80057e4 <dir_next+0x152>
						fs->wflag = 1;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f7ff fab7 	bl	8004d38 <sync_window>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <dir_next+0x142>
 80057d0:	2301      	movs	r3, #1
 80057d2:	e030      	b.n	8005836 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	3301      	adds	r3, #1
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	635a      	str	r2, [r3, #52]	; 0x34
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	895b      	ldrh	r3, [r3, #10]
 80057e8:	461a      	mov	r2, r3
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d3e6      	bcc.n	80057be <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad2      	subs	r2, r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005802:	6979      	ldr	r1, [r7, #20]
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f7ff fb79 	bl	8004efc <clust2sect>
 800580a:	4602      	mov	r2, r0
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	899b      	ldrh	r3, [r3, #12]
 8005820:	461a      	mov	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	fbb3 f0f2 	udiv	r0, r3, r2
 8005828:	fb00 f202 	mul.w	r2, r0, r2
 800582c:	1a9b      	subs	r3, r3, r2
 800582e:	18ca      	adds	r2, r1, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b086      	sub	sp, #24
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800584e:	2100      	movs	r1, #0
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff fe95 	bl	8005580 <dir_sdi>
 8005856:	4603      	mov	r3, r0
 8005858:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800585a:	7dfb      	ldrb	r3, [r7, #23]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d12b      	bne.n	80058b8 <dir_alloc+0x7a>
		n = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	4619      	mov	r1, r3
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f7ff faa8 	bl	8004dc0 <move_window>
 8005870:	4603      	mov	r3, r0
 8005872:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005874:	7dfb      	ldrb	r3, [r7, #23]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d11d      	bne.n	80058b6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2be5      	cmp	r3, #229	; 0xe5
 8005882:	d004      	beq.n	800588e <dir_alloc+0x50>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d107      	bne.n	800589e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	3301      	adds	r3, #1
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d102      	bne.n	80058a2 <dir_alloc+0x64>
 800589c:	e00c      	b.n	80058b8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800589e:	2300      	movs	r3, #0
 80058a0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80058a2:	2101      	movs	r1, #1
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff fef4 	bl	8005692 <dir_next>
 80058aa:	4603      	mov	r3, r0
 80058ac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0d7      	beq.n	8005864 <dir_alloc+0x26>
 80058b4:	e000      	b.n	80058b8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80058b6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d101      	bne.n	80058c2 <dir_alloc+0x84>
 80058be:	2307      	movs	r3, #7
 80058c0:	75fb      	strb	r3, [r7, #23]
	return res;
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	331a      	adds	r3, #26
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fe ffc0 	bl	8004860 <ld_word>
 80058e0:	4603      	mov	r3, r0
 80058e2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d109      	bne.n	8005900 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	3314      	adds	r3, #20
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fe ffb5 	bl	8004860 <ld_word>
 80058f6:	4603      	mov	r3, r0
 80058f8:	041b      	lsls	r3, r3, #16
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005900:	68fb      	ldr	r3, [r7, #12]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	331a      	adds	r3, #26
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	b292      	uxth	r2, r2
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f7fe ffd8 	bl	80048d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b03      	cmp	r3, #3
 800592c:	d109      	bne.n	8005942 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f103 0214 	add.w	r2, r3, #20
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	b29b      	uxth	r3, r3
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f7fe ffca 	bl	80048d6 <st_word>
	}
}
 8005942:	bf00      	nop
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800594c:	b590      	push	{r4, r7, lr}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	331a      	adds	r3, #26
 800595a:	4618      	mov	r0, r3
 800595c:	f7fe ff80 	bl	8004860 <ld_word>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <cmp_lfn+0x1e>
 8005966:	2300      	movs	r3, #0
 8005968:	e059      	b.n	8005a1e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005972:	1e5a      	subs	r2, r3, #1
 8005974:	4613      	mov	r3, r2
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005980:	2301      	movs	r3, #1
 8005982:	81fb      	strh	r3, [r7, #14]
 8005984:	2300      	movs	r3, #0
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	e033      	b.n	80059f2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800598a:	4a27      	ldr	r2, [pc, #156]	; (8005a28 <cmp_lfn+0xdc>)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	4413      	add	r3, r2
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	4413      	add	r3, r2
 8005998:	4618      	mov	r0, r3
 800599a:	f7fe ff61 	bl	8004860 <ld_word>
 800599e:	4603      	mov	r3, r0
 80059a0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80059a2:	89fb      	ldrh	r3, [r7, #14]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01a      	beq.n	80059de <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2bfe      	cmp	r3, #254	; 0xfe
 80059ac:	d812      	bhi.n	80059d4 <cmp_lfn+0x88>
 80059ae:	89bb      	ldrh	r3, [r7, #12]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f002 f861 	bl	8007a78 <ff_wtoupper>
 80059b6:	4603      	mov	r3, r0
 80059b8:	461c      	mov	r4, r3
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	617a      	str	r2, [r7, #20]
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	4413      	add	r3, r2
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f002 f855 	bl	8007a78 <ff_wtoupper>
 80059ce:	4603      	mov	r3, r0
 80059d0:	429c      	cmp	r4, r3
 80059d2:	d001      	beq.n	80059d8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80059d4:	2300      	movs	r3, #0
 80059d6:	e022      	b.n	8005a1e <cmp_lfn+0xd2>
			}
			wc = uc;
 80059d8:	89bb      	ldrh	r3, [r7, #12]
 80059da:	81fb      	strh	r3, [r7, #14]
 80059dc:	e006      	b.n	80059ec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80059de:	89bb      	ldrh	r3, [r7, #12]
 80059e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d001      	beq.n	80059ec <cmp_lfn+0xa0>
 80059e8:	2300      	movs	r3, #0
 80059ea:	e018      	b.n	8005a1e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	3301      	adds	r3, #1
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b0c      	cmp	r3, #12
 80059f6:	d9c8      	bls.n	800598a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00b      	beq.n	8005a1c <cmp_lfn+0xd0>
 8005a04:	89fb      	ldrh	r3, [r7, #14]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d008      	beq.n	8005a1c <cmp_lfn+0xd0>
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	4413      	add	r3, r2
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <cmp_lfn+0xd0>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e000      	b.n	8005a1e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005a1c:	2301      	movs	r3, #1
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd90      	pop	{r4, r7, pc}
 8005a26:	bf00      	nop
 8005a28:	0800c85c 	.word	0x0800c85c

08005a2c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	4611      	mov	r1, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	71fb      	strb	r3, [r7, #7]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	330d      	adds	r3, #13
 8005a46:	79ba      	ldrb	r2, [r7, #6]
 8005a48:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	330b      	adds	r3, #11
 8005a4e:	220f      	movs	r2, #15
 8005a50:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	330c      	adds	r3, #12
 8005a56:	2200      	movs	r2, #0
 8005a58:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	331a      	adds	r3, #26
 8005a5e:	2100      	movs	r1, #0
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fe ff38 	bl	80048d6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	1e5a      	subs	r2, r3, #1
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	82fb      	strh	r3, [r7, #22]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005a7e:	8afb      	ldrh	r3, [r7, #22]
 8005a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d007      	beq.n	8005a98 <put_lfn+0x6c>
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	61fa      	str	r2, [r7, #28]
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005a98:	4a17      	ldr	r2, [pc, #92]	; (8005af8 <put_lfn+0xcc>)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	8afa      	ldrh	r2, [r7, #22]
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fe ff13 	bl	80048d6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005ab0:	8afb      	ldrh	r3, [r7, #22]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d102      	bne.n	8005abc <put_lfn+0x90>
 8005ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005aba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	61bb      	str	r3, [r7, #24]
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	2b0c      	cmp	r3, #12
 8005ac6:	d9da      	bls.n	8005a7e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005ac8:	8afb      	ldrh	r3, [r7, #22]
 8005aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d006      	beq.n	8005ae0 <put_lfn+0xb4>
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4413      	add	r3, r2
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d103      	bne.n	8005ae8 <put_lfn+0xbc>
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	79fa      	ldrb	r2, [r7, #7]
 8005aec:	701a      	strb	r2, [r3, #0]
}
 8005aee:	bf00      	nop
 8005af0:	3720      	adds	r7, #32
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	0800c85c 	.word	0x0800c85c

08005afc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08c      	sub	sp, #48	; 0x30
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005b0a:	220b      	movs	r2, #11
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7fe ff28 	bl	8004964 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b05      	cmp	r3, #5
 8005b18:	d929      	bls.n	8005b6e <gen_numname+0x72>
		sr = seq;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005b1e:	e020      	b.n	8005b62 <gen_numname+0x66>
			wc = *lfn++;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	1c9a      	adds	r2, r3, #2
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b2e:	e015      	b.n	8005b5c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	005a      	lsls	r2, r3, #1
 8005b34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	4413      	add	r3, r2
 8005b3c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005b3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b40:	085b      	lsrs	r3, r3, #1
 8005b42:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <gen_numname+0x5a>
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	4b30      	ldr	r3, [pc, #192]	; (8005c14 <gen_numname+0x118>)
 8005b52:	4053      	eors	r3, r2
 8005b54:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	3301      	adds	r3, #1
 8005b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5e:	2b0f      	cmp	r3, #15
 8005b60:	d9e6      	bls.n	8005b30 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1da      	bne.n	8005b20 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005b6e:	2307      	movs	r3, #7
 8005b70:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	3330      	adds	r3, #48	; 0x30
 8005b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b86:	2b39      	cmp	r3, #57	; 0x39
 8005b88:	d904      	bls.n	8005b94 <gen_numname+0x98>
 8005b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b8e:	3307      	adds	r3, #7
 8005b90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	1e5a      	subs	r2, r3, #1
 8005b98:	62ba      	str	r2, [r7, #40]	; 0x28
 8005b9a:	3330      	adds	r3, #48	; 0x30
 8005b9c:	443b      	add	r3, r7
 8005b9e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005ba2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	091b      	lsrs	r3, r3, #4
 8005baa:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1df      	bne.n	8005b72 <gen_numname+0x76>
	ns[i] = '~';
 8005bb2:	f107 0214 	add.w	r2, r7, #20
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	4413      	add	r3, r2
 8005bba:	227e      	movs	r2, #126	; 0x7e
 8005bbc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc2:	e002      	b.n	8005bca <gen_numname+0xce>
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d205      	bcs.n	8005bde <gen_numname+0xe2>
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	4413      	add	r3, r2
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d1f2      	bne.n	8005bc4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	2b07      	cmp	r3, #7
 8005be2:	d807      	bhi.n	8005bf4 <gen_numname+0xf8>
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	62ba      	str	r2, [r7, #40]	; 0x28
 8005bea:	3330      	adds	r3, #48	; 0x30
 8005bec:	443b      	add	r3, r7
 8005bee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005bf2:	e000      	b.n	8005bf6 <gen_numname+0xfa>
 8005bf4:	2120      	movs	r1, #32
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	627a      	str	r2, [r7, #36]	; 0x24
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	460a      	mov	r2, r1
 8005c02:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	2b07      	cmp	r3, #7
 8005c08:	d9e9      	bls.n	8005bde <gen_numname+0xe2>
}
 8005c0a:	bf00      	nop
 8005c0c:	bf00      	nop
 8005c0e:	3730      	adds	r7, #48	; 0x30
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	00011021 	.word	0x00011021

08005c18 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005c24:	230b      	movs	r3, #11
 8005c26:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	0852      	lsrs	r2, r2, #1
 8005c2e:	01db      	lsls	r3, r3, #7
 8005c30:	4313      	orrs	r3, r2
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	1c59      	adds	r1, r3, #1
 8005c38:	6079      	str	r1, [r7, #4]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1ed      	bne.n	8005c28 <sum_sfn+0x10>
	return sum;
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b086      	sub	sp, #24
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005c68:	2100      	movs	r1, #0
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff fc88 	bl	8005580 <dir_sdi>
 8005c70:	4603      	mov	r3, r0
 8005c72:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <dir_find+0x24>
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
 8005c7c:	e0a9      	b.n	8005dd2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005c7e:	23ff      	movs	r3, #255	; 0xff
 8005c80:	753b      	strb	r3, [r7, #20]
 8005c82:	7d3b      	ldrb	r3, [r7, #20]
 8005c84:	757b      	strb	r3, [r7, #21]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	4619      	mov	r1, r3
 8005c94:	6938      	ldr	r0, [r7, #16]
 8005c96:	f7ff f893 	bl	8004dc0 <move_window>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f040 8090 	bne.w	8005dc6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005cae:	7dbb      	ldrb	r3, [r7, #22]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d102      	bne.n	8005cba <dir_find+0x60>
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	75fb      	strb	r3, [r7, #23]
 8005cb8:	e08a      	b.n	8005dd0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	330b      	adds	r3, #11
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cc6:	73fb      	strb	r3, [r7, #15]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	7bfa      	ldrb	r2, [r7, #15]
 8005ccc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005cce:	7dbb      	ldrb	r3, [r7, #22]
 8005cd0:	2be5      	cmp	r3, #229	; 0xe5
 8005cd2:	d007      	beq.n	8005ce4 <dir_find+0x8a>
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d009      	beq.n	8005cf2 <dir_find+0x98>
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	2b0f      	cmp	r3, #15
 8005ce2:	d006      	beq.n	8005cf2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005ce4:	23ff      	movs	r3, #255	; 0xff
 8005ce6:	757b      	strb	r3, [r7, #21]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f04f 32ff 	mov.w	r2, #4294967295
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30
 8005cf0:	e05e      	b.n	8005db0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	2b0f      	cmp	r3, #15
 8005cf6:	d136      	bne.n	8005d66 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d154      	bne.n	8005db0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005d06:	7dbb      	ldrb	r3, [r7, #22]
 8005d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00d      	beq.n	8005d2c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	7b5b      	ldrb	r3, [r3, #13]
 8005d16:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005d18:	7dbb      	ldrb	r3, [r7, #22]
 8005d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d1e:	75bb      	strb	r3, [r7, #22]
 8005d20:	7dbb      	ldrb	r3, [r7, #22]
 8005d22:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005d2c:	7dba      	ldrb	r2, [r7, #22]
 8005d2e:	7d7b      	ldrb	r3, [r7, #21]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d115      	bne.n	8005d60 <dir_find+0x106>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	330d      	adds	r3, #13
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	7d3a      	ldrb	r2, [r7, #20]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d10e      	bne.n	8005d60 <dir_find+0x106>
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	f7ff fdfd 	bl	800594c <cmp_lfn>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <dir_find+0x106>
 8005d58:	7d7b      	ldrb	r3, [r7, #21]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	e000      	b.n	8005d62 <dir_find+0x108>
 8005d60:	23ff      	movs	r3, #255	; 0xff
 8005d62:	757b      	strb	r3, [r7, #21]
 8005d64:	e024      	b.n	8005db0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005d66:	7d7b      	ldrb	r3, [r7, #21]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <dir_find+0x126>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff ff51 	bl	8005c18 <sum_sfn>
 8005d76:	4603      	mov	r3, r0
 8005d78:	461a      	mov	r2, r3
 8005d7a:	7d3b      	ldrb	r3, [r7, #20]
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d024      	beq.n	8005dca <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <dir_find+0x14a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a18      	ldr	r0, [r3, #32]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3324      	adds	r3, #36	; 0x24
 8005d96:	220b      	movs	r2, #11
 8005d98:	4619      	mov	r1, r3
 8005d9a:	f7fe fe1f 	bl	80049dc <mem_cmp>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d014      	beq.n	8005dce <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005da4:	23ff      	movs	r3, #255	; 0xff
 8005da6:	757b      	strb	r3, [r7, #21]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005db0:	2100      	movs	r1, #0
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff fc6d 	bl	8005692 <dir_next>
 8005db8:	4603      	mov	r3, r0
 8005dba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f43f af65 	beq.w	8005c8e <dir_find+0x34>
 8005dc4:	e004      	b.n	8005dd0 <dir_find+0x176>
		if (res != FR_OK) break;
 8005dc6:	bf00      	nop
 8005dc8:	e002      	b.n	8005dd0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005dce:	bf00      	nop

	return res;
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08c      	sub	sp, #48	; 0x30
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005df0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <dir_register+0x20>
 8005df8:	2306      	movs	r3, #6
 8005dfa:	e0e0      	b.n	8005fbe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8005e00:	e002      	b.n	8005e08 <dir_register+0x2c>
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	3301      	adds	r3, #1
 8005e06:	627b      	str	r3, [r7, #36]	; 0x24
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1f4      	bne.n	8005e02 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005e1e:	f107 030c 	add.w	r3, r7, #12
 8005e22:	220c      	movs	r2, #12
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fe fd9d 	bl	8004964 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d032      	beq.n	8005e9a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2240      	movs	r2, #64	; 0x40
 8005e38:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e40:	e016      	b.n	8005e70 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	f107 010c 	add.w	r1, r7, #12
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	f7ff fe53 	bl	8005afc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff feff 	bl	8005c5a <dir_find>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005e62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e72:	2b63      	cmp	r3, #99	; 0x63
 8005e74:	d9e5      	bls.n	8005e42 <dir_register+0x66>
 8005e76:	e000      	b.n	8005e7a <dir_register+0x9e>
			if (res != FR_OK) break;
 8005e78:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	2b64      	cmp	r3, #100	; 0x64
 8005e7e:	d101      	bne.n	8005e84 <dir_register+0xa8>
 8005e80:	2307      	movs	r3, #7
 8005e82:	e09c      	b.n	8005fbe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005e84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e88:	2b04      	cmp	r3, #4
 8005e8a:	d002      	beq.n	8005e92 <dir_register+0xb6>
 8005e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e90:	e095      	b.n	8005fbe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005e92:	7dfa      	ldrb	r2, [r7, #23]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <dir_register+0xd8>
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	330c      	adds	r3, #12
 8005ea8:	4a47      	ldr	r2, [pc, #284]	; (8005fc8 <dir_register+0x1ec>)
 8005eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005eae:	089b      	lsrs	r3, r3, #2
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	e000      	b.n	8005eb6 <dir_register+0xda>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005eb8:	6a39      	ldr	r1, [r7, #32]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff fcbf 	bl	800583e <dir_alloc>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d148      	bne.n	8005f60 <dir_register+0x184>
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	623b      	str	r3, [r7, #32]
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d042      	beq.n	8005f60 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	695a      	ldr	r2, [r3, #20]
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	015b      	lsls	r3, r3, #5
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff fb4a 	bl	8005580 <dir_sdi>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005ef2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d132      	bne.n	8005f60 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	3324      	adds	r3, #36	; 0x24
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff fe8a 	bl	8005c18 <sum_sfn>
 8005f04:	4603      	mov	r3, r0
 8005f06:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	69f8      	ldr	r0, [r7, #28]
 8005f10:	f7fe ff56 	bl	8004dc0 <move_window>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d11d      	bne.n	8005f5e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	6918      	ldr	r0, [r3, #16]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a19      	ldr	r1, [r3, #32]
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	7efb      	ldrb	r3, [r7, #27]
 8005f30:	f7ff fd7c 	bl	8005a2c <put_lfn>
				fs->wflag = 1;
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2201      	movs	r2, #1
 8005f38:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff fba8 	bl	8005692 <dir_next>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005f48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d107      	bne.n	8005f60 <dir_register+0x184>
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	623b      	str	r3, [r7, #32]
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1d5      	bne.n	8005f08 <dir_register+0x12c>
 8005f5c:	e000      	b.n	8005f60 <dir_register+0x184>
				if (res != FR_OK) break;
 8005f5e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005f60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d128      	bne.n	8005fba <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	69f8      	ldr	r0, [r7, #28]
 8005f70:	f7fe ff26 	bl	8004dc0 <move_window>
 8005f74:	4603      	mov	r3, r0
 8005f76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005f7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d11b      	bne.n	8005fba <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	2220      	movs	r2, #32
 8005f88:	2100      	movs	r1, #0
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fe fd0b 	bl	80049a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a18      	ldr	r0, [r3, #32]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3324      	adds	r3, #36	; 0x24
 8005f98:	220b      	movs	r2, #11
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	f7fe fce2 	bl	8004964 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	330c      	adds	r3, #12
 8005fac:	f002 0218 	and.w	r2, r2, #24
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005fba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3730      	adds	r7, #48	; 0x30
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	4ec4ec4f 	.word	0x4ec4ec4f

08005fcc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	; 0x28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	61ba      	str	r2, [r7, #24]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ffc:	2b1f      	cmp	r3, #31
 8005ffe:	d940      	bls.n	8006082 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006002:	2b2f      	cmp	r3, #47	; 0x2f
 8006004:	d006      	beq.n	8006014 <create_name+0x48>
 8006006:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006008:	2b5c      	cmp	r3, #92	; 0x5c
 800600a:	d110      	bne.n	800602e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800600c:	e002      	b.n	8006014 <create_name+0x48>
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	3301      	adds	r3, #1
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	4413      	add	r3, r2
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b2f      	cmp	r3, #47	; 0x2f
 800601e:	d0f6      	beq.n	800600e <create_name+0x42>
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	4413      	add	r3, r2
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b5c      	cmp	r3, #92	; 0x5c
 800602a:	d0f0      	beq.n	800600e <create_name+0x42>
			break;
 800602c:	e02a      	b.n	8006084 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2bfe      	cmp	r3, #254	; 0xfe
 8006032:	d901      	bls.n	8006038 <create_name+0x6c>
 8006034:	2306      	movs	r3, #6
 8006036:	e17d      	b.n	8006334 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800603a:	b2db      	uxtb	r3, r3
 800603c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800603e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006040:	2101      	movs	r1, #1
 8006042:	4618      	mov	r0, r3
 8006044:	f001 fcdc 	bl	8007a00 <ff_convert>
 8006048:	4603      	mov	r3, r0
 800604a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800604c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <create_name+0x8a>
 8006052:	2306      	movs	r3, #6
 8006054:	e16e      	b.n	8006334 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006058:	2b7f      	cmp	r3, #127	; 0x7f
 800605a:	d809      	bhi.n	8006070 <create_name+0xa4>
 800605c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800605e:	4619      	mov	r1, r3
 8006060:	488d      	ldr	r0, [pc, #564]	; (8006298 <create_name+0x2cc>)
 8006062:	f7fe fce2 	bl	8004a2a <chk_chr>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <create_name+0xa4>
 800606c:	2306      	movs	r3, #6
 800606e:	e161      	b.n	8006334 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	617a      	str	r2, [r7, #20]
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4413      	add	r3, r2
 800607c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800607e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006080:	e7b4      	b.n	8005fec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006082:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	441a      	add	r2, r3
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800608e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006090:	2b1f      	cmp	r3, #31
 8006092:	d801      	bhi.n	8006098 <create_name+0xcc>
 8006094:	2304      	movs	r3, #4
 8006096:	e000      	b.n	800609a <create_name+0xce>
 8006098:	2300      	movs	r3, #0
 800609a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800609e:	e011      	b.n	80060c4 <create_name+0xf8>
		w = lfn[di - 1];
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80060a6:	4413      	add	r3, r2
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80060b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d002      	beq.n	80060be <create_name+0xf2>
 80060b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060ba:	2b2e      	cmp	r3, #46	; 0x2e
 80060bc:	d106      	bne.n	80060cc <create_name+0x100>
		di--;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1ea      	bne.n	80060a0 <create_name+0xd4>
 80060ca:	e000      	b.n	80060ce <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80060cc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4413      	add	r3, r2
 80060d6:	2200      	movs	r2, #0
 80060d8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <create_name+0x118>
 80060e0:	2306      	movs	r3, #6
 80060e2:	e127      	b.n	8006334 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3324      	adds	r3, #36	; 0x24
 80060e8:	220b      	movs	r2, #11
 80060ea:	2120      	movs	r1, #32
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fe fc5a 	bl	80049a6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80060f2:	2300      	movs	r3, #0
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	e002      	b.n	80060fe <create_name+0x132>
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	3301      	adds	r3, #1
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4413      	add	r3, r2
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	2b20      	cmp	r3, #32
 800610a:	d0f5      	beq.n	80060f8 <create_name+0x12c>
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4413      	add	r3, r2
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	2b2e      	cmp	r3, #46	; 0x2e
 8006118:	d0ee      	beq.n	80060f8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d009      	beq.n	8006134 <create_name+0x168>
 8006120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006124:	f043 0303 	orr.w	r3, r3, #3
 8006128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800612c:	e002      	b.n	8006134 <create_name+0x168>
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	3b01      	subs	r3, #1
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d009      	beq.n	800614e <create_name+0x182>
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006140:	4413      	add	r3, r2
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	2b2e      	cmp	r3, #46	; 0x2e
 800614c:	d1ef      	bne.n	800612e <create_name+0x162>

	i = b = 0; ni = 8;
 800614e:	2300      	movs	r3, #0
 8006150:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006154:	2300      	movs	r3, #0
 8006156:	623b      	str	r3, [r7, #32]
 8006158:	2308      	movs	r3, #8
 800615a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	61ba      	str	r2, [r7, #24]
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800616c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 8090 	beq.w	8006294 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006176:	2b20      	cmp	r3, #32
 8006178:	d006      	beq.n	8006188 <create_name+0x1bc>
 800617a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800617c:	2b2e      	cmp	r3, #46	; 0x2e
 800617e:	d10a      	bne.n	8006196 <create_name+0x1ca>
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	429a      	cmp	r2, r3
 8006186:	d006      	beq.n	8006196 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800618c:	f043 0303 	orr.w	r3, r3, #3
 8006190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006194:	e07d      	b.n	8006292 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006196:	6a3a      	ldr	r2, [r7, #32]
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	429a      	cmp	r2, r3
 800619c:	d203      	bcs.n	80061a6 <create_name+0x1da>
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d123      	bne.n	80061ee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	2b0b      	cmp	r3, #11
 80061aa:	d106      	bne.n	80061ba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80061ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061b0:	f043 0303 	orr.w	r3, r3, #3
 80061b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061b8:	e075      	b.n	80062a6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d005      	beq.n	80061ce <create_name+0x202>
 80061c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061c6:	f043 0303 	orr.w	r3, r3, #3
 80061ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d866      	bhi.n	80062a4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	2308      	movs	r3, #8
 80061dc:	623b      	str	r3, [r7, #32]
 80061de:	230b      	movs	r3, #11
 80061e0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80061e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80061ec:	e051      	b.n	8006292 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80061ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061f0:	2b7f      	cmp	r3, #127	; 0x7f
 80061f2:	d914      	bls.n	800621e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80061f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061f6:	2100      	movs	r1, #0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 fc01 	bl	8007a00 <ff_convert>
 80061fe:	4603      	mov	r3, r0
 8006200:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006202:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006204:	2b00      	cmp	r3, #0
 8006206:	d004      	beq.n	8006212 <create_name+0x246>
 8006208:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800620a:	3b80      	subs	r3, #128	; 0x80
 800620c:	4a23      	ldr	r2, [pc, #140]	; (800629c <create_name+0x2d0>)
 800620e:	5cd3      	ldrb	r3, [r2, r3]
 8006210:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006216:	f043 0302 	orr.w	r3, r3, #2
 800621a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800621e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <create_name+0x268>
 8006224:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006226:	4619      	mov	r1, r3
 8006228:	481d      	ldr	r0, [pc, #116]	; (80062a0 <create_name+0x2d4>)
 800622a:	f7fe fbfe 	bl	8004a2a <chk_chr>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d008      	beq.n	8006246 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006234:	235f      	movs	r3, #95	; 0x5f
 8006236:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800623c:	f043 0303 	orr.w	r3, r3, #3
 8006240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006244:	e01b      	b.n	800627e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006248:	2b40      	cmp	r3, #64	; 0x40
 800624a:	d909      	bls.n	8006260 <create_name+0x294>
 800624c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800624e:	2b5a      	cmp	r3, #90	; 0x5a
 8006250:	d806      	bhi.n	8006260 <create_name+0x294>
					b |= 2;
 8006252:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006256:	f043 0302 	orr.w	r3, r3, #2
 800625a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800625e:	e00e      	b.n	800627e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006262:	2b60      	cmp	r3, #96	; 0x60
 8006264:	d90b      	bls.n	800627e <create_name+0x2b2>
 8006266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006268:	2b7a      	cmp	r3, #122	; 0x7a
 800626a:	d808      	bhi.n	800627e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800626c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006270:	f043 0301 	orr.w	r3, r3, #1
 8006274:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800627a:	3b20      	subs	r3, #32
 800627c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	623a      	str	r2, [r7, #32]
 8006284:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006286:	b2d1      	uxtb	r1, r2
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	4413      	add	r3, r2
 800628c:	460a      	mov	r2, r1
 800628e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006292:	e763      	b.n	800615c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006294:	bf00      	nop
 8006296:	e006      	b.n	80062a6 <create_name+0x2da>
 8006298:	0800c784 	.word	0x0800c784
 800629c:	0800c7dc 	.word	0x0800c7dc
 80062a0:	0800c790 	.word	0x0800c790
			if (si > di) break;			/* No extension */
 80062a4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062ac:	2be5      	cmp	r3, #229	; 0xe5
 80062ae:	d103      	bne.n	80062b8 <create_name+0x2ec>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2205      	movs	r2, #5
 80062b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d104      	bne.n	80062c8 <create_name+0x2fc>
 80062be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80062c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062cc:	f003 030c 	and.w	r3, r3, #12
 80062d0:	2b0c      	cmp	r3, #12
 80062d2:	d005      	beq.n	80062e0 <create_name+0x314>
 80062d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062d8:	f003 0303 	and.w	r3, r3, #3
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d105      	bne.n	80062ec <create_name+0x320>
 80062e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062e4:	f043 0302 	orr.w	r3, r3, #2
 80062e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80062ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d117      	bne.n	8006328 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80062f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	2b01      	cmp	r3, #1
 8006302:	d105      	bne.n	8006310 <create_name+0x344>
 8006304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006308:	f043 0310 	orr.w	r3, r3, #16
 800630c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006310:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006314:	f003 030c 	and.w	r3, r3, #12
 8006318:	2b04      	cmp	r3, #4
 800631a:	d105      	bne.n	8006328 <create_name+0x35c>
 800631c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006320:	f043 0308 	orr.w	r3, r3, #8
 8006324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800632e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006332:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006334:	4618      	mov	r0, r3
 8006336:	3728      	adds	r7, #40	; 0x28
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006350:	e002      	b.n	8006358 <follow_path+0x1c>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	3301      	adds	r3, #1
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b2f      	cmp	r3, #47	; 0x2f
 800635e:	d0f8      	beq.n	8006352 <follow_path+0x16>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b5c      	cmp	r3, #92	; 0x5c
 8006366:	d0f4      	beq.n	8006352 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2200      	movs	r2, #0
 800636c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b1f      	cmp	r3, #31
 8006374:	d80a      	bhi.n	800638c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2280      	movs	r2, #128	; 0x80
 800637a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800637e:	2100      	movs	r1, #0
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff f8fd 	bl	8005580 <dir_sdi>
 8006386:	4603      	mov	r3, r0
 8006388:	75fb      	strb	r3, [r7, #23]
 800638a:	e048      	b.n	800641e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800638c:	463b      	mov	r3, r7
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff fe1b 	bl	8005fcc <create_name>
 8006396:	4603      	mov	r3, r0
 8006398:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d139      	bne.n	8006414 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff fc5a 	bl	8005c5a <dir_find>
 80063a6:	4603      	mov	r3, r0
 80063a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80063b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d12c      	bne.n	8006418 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80063be:	7afb      	ldrb	r3, [r7, #11]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d127      	bne.n	8006418 <follow_path+0xdc>
 80063c8:	2305      	movs	r3, #5
 80063ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80063cc:	e024      	b.n	8006418 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80063ce:	7afb      	ldrb	r3, [r7, #11]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d121      	bne.n	800641c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	799b      	ldrb	r3, [r3, #6]
 80063dc:	f003 0310 	and.w	r3, r3, #16
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 80063e4:	2305      	movs	r3, #5
 80063e6:	75fb      	strb	r3, [r7, #23]
 80063e8:	e019      	b.n	800641e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	8992      	ldrh	r2, [r2, #12]
 80063f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80063fc:	fb00 f202 	mul.w	r2, r0, r2
 8006400:	1a9b      	subs	r3, r3, r2
 8006402:	440b      	add	r3, r1
 8006404:	4619      	mov	r1, r3
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f7ff fa60 	bl	80058cc <ld_clust>
 800640c:	4602      	mov	r2, r0
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006412:	e7bb      	b.n	800638c <follow_path+0x50>
			if (res != FR_OK) break;
 8006414:	bf00      	nop
 8006416:	e002      	b.n	800641e <follow_path+0xe2>
				break;
 8006418:	bf00      	nop
 800641a:	e000      	b.n	800641e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800641c:	bf00      	nop
			}
		}
	}

	return res;
 800641e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006430:	f04f 33ff 	mov.w	r3, #4294967295
 8006434:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d031      	beq.n	80064a2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	e002      	b.n	800644c <get_ldnumber+0x24>
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	3301      	adds	r3, #1
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b1f      	cmp	r3, #31
 8006452:	d903      	bls.n	800645c <get_ldnumber+0x34>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b3a      	cmp	r3, #58	; 0x3a
 800645a:	d1f4      	bne.n	8006446 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b3a      	cmp	r3, #58	; 0x3a
 8006462:	d11c      	bne.n	800649e <get_ldnumber+0x76>
			tp = *path;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	60fa      	str	r2, [r7, #12]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	3b30      	subs	r3, #48	; 0x30
 8006474:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2b09      	cmp	r3, #9
 800647a:	d80e      	bhi.n	800649a <get_ldnumber+0x72>
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	429a      	cmp	r2, r3
 8006482:	d10a      	bne.n	800649a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d107      	bne.n	800649a <get_ldnumber+0x72>
					vol = (int)i;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	3301      	adds	r3, #1
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	e002      	b.n	80064a4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800649e:	2300      	movs	r3, #0
 80064a0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80064a2:	693b      	ldr	r3, [r7, #16]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	371c      	adds	r7, #28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	70da      	strb	r2, [r3, #3]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f04f 32ff 	mov.w	r2, #4294967295
 80064c6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80064c8:	6839      	ldr	r1, [r7, #0]
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fe fc78 	bl	8004dc0 <move_window>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <check_fs+0x2a>
 80064d6:	2304      	movs	r3, #4
 80064d8:	e038      	b.n	800654c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3338      	adds	r3, #56	; 0x38
 80064de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe f9bc 	bl	8004860 <ld_word>
 80064e8:	4603      	mov	r3, r0
 80064ea:	461a      	mov	r2, r3
 80064ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d001      	beq.n	80064f8 <check_fs+0x48>
 80064f4:	2303      	movs	r3, #3
 80064f6:	e029      	b.n	800654c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064fe:	2be9      	cmp	r3, #233	; 0xe9
 8006500:	d009      	beq.n	8006516 <check_fs+0x66>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006508:	2beb      	cmp	r3, #235	; 0xeb
 800650a:	d11e      	bne.n	800654a <check_fs+0x9a>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006512:	2b90      	cmp	r3, #144	; 0x90
 8006514:	d119      	bne.n	800654a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3338      	adds	r3, #56	; 0x38
 800651a:	3336      	adds	r3, #54	; 0x36
 800651c:	4618      	mov	r0, r3
 800651e:	f7fe f9b7 	bl	8004890 <ld_dword>
 8006522:	4603      	mov	r3, r0
 8006524:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006528:	4a0a      	ldr	r2, [pc, #40]	; (8006554 <check_fs+0xa4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d101      	bne.n	8006532 <check_fs+0x82>
 800652e:	2300      	movs	r3, #0
 8006530:	e00c      	b.n	800654c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3338      	adds	r3, #56	; 0x38
 8006536:	3352      	adds	r3, #82	; 0x52
 8006538:	4618      	mov	r0, r3
 800653a:	f7fe f9a9 	bl	8004890 <ld_dword>
 800653e:	4603      	mov	r3, r0
 8006540:	4a05      	ldr	r2, [pc, #20]	; (8006558 <check_fs+0xa8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d101      	bne.n	800654a <check_fs+0x9a>
 8006546:	2300      	movs	r3, #0
 8006548:	e000      	b.n	800654c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800654a:	2302      	movs	r3, #2
}
 800654c:	4618      	mov	r0, r3
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	00544146 	.word	0x00544146
 8006558:	33544146 	.word	0x33544146

0800655c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b096      	sub	sp, #88	; 0x58
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	4613      	mov	r3, r2
 8006568:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7ff ff59 	bl	8006428 <get_ldnumber>
 8006576:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800657a:	2b00      	cmp	r3, #0
 800657c:	da01      	bge.n	8006582 <find_volume+0x26>
 800657e:	230b      	movs	r3, #11
 8006580:	e265      	b.n	8006a4e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006582:	4a9f      	ldr	r2, [pc, #636]	; (8006800 <find_volume+0x2a4>)
 8006584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800658a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <find_volume+0x3a>
 8006592:	230c      	movs	r3, #12
 8006594:	e25b      	b.n	8006a4e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800659a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800659c:	79fb      	ldrb	r3, [r7, #7]
 800659e:	f023 0301 	bic.w	r3, r3, #1
 80065a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01a      	beq.n	80065e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ae:	785b      	ldrb	r3, [r3, #1]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fe f8b7 	bl	8004724 <disk_status>
 80065b6:	4603      	mov	r3, r0
 80065b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80065bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10c      	bne.n	80065e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80065c8:	79fb      	ldrb	r3, [r7, #7]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d007      	beq.n	80065de <find_volume+0x82>
 80065ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065d2:	f003 0304 	and.w	r3, r3, #4
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80065da:	230a      	movs	r3, #10
 80065dc:	e237      	b.n	8006a4e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80065de:	2300      	movs	r3, #0
 80065e0:	e235      	b.n	8006a4e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	2200      	movs	r2, #0
 80065e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80065e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	785b      	ldrb	r3, [r3, #1]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fe f8af 	bl	8004758 <disk_initialize>
 80065fa:	4603      	mov	r3, r0
 80065fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006600:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800660c:	2303      	movs	r3, #3
 800660e:	e21e      	b.n	8006a4e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006610:	79fb      	ldrb	r3, [r7, #7]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d007      	beq.n	8006626 <find_volume+0xca>
 8006616:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006622:	230a      	movs	r3, #10
 8006624:	e213      	b.n	8006a4e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006628:	7858      	ldrb	r0, [r3, #1]
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	330c      	adds	r3, #12
 800662e:	461a      	mov	r2, r3
 8006630:	2102      	movs	r1, #2
 8006632:	f7fe f8f7 	bl	8004824 <disk_ioctl>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <find_volume+0xe4>
 800663c:	2301      	movs	r3, #1
 800663e:	e206      	b.n	8006a4e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006642:	899b      	ldrh	r3, [r3, #12]
 8006644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006648:	d80d      	bhi.n	8006666 <find_volume+0x10a>
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	899b      	ldrh	r3, [r3, #12]
 800664e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006652:	d308      	bcc.n	8006666 <find_volume+0x10a>
 8006654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006656:	899b      	ldrh	r3, [r3, #12]
 8006658:	461a      	mov	r2, r3
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	899b      	ldrh	r3, [r3, #12]
 800665e:	3b01      	subs	r3, #1
 8006660:	4013      	ands	r3, r2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <find_volume+0x10e>
 8006666:	2301      	movs	r3, #1
 8006668:	e1f1      	b.n	8006a4e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800666e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006670:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006672:	f7ff ff1d 	bl	80064b0 <check_fs>
 8006676:	4603      	mov	r3, r0
 8006678:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800667c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006680:	2b02      	cmp	r3, #2
 8006682:	d149      	bne.n	8006718 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006684:	2300      	movs	r3, #0
 8006686:	643b      	str	r3, [r7, #64]	; 0x40
 8006688:	e01e      	b.n	80066c8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006698:	4413      	add	r3, r2
 800669a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	3304      	adds	r3, #4
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d006      	beq.n	80066b4 <find_volume+0x158>
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	3308      	adds	r3, #8
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fe f8f0 	bl	8004890 <ld_dword>
 80066b0:	4602      	mov	r2, r0
 80066b2:	e000      	b.n	80066b6 <find_volume+0x15a>
 80066b4:	2200      	movs	r2, #0
 80066b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	3358      	adds	r3, #88	; 0x58
 80066bc:	443b      	add	r3, r7
 80066be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80066c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c4:	3301      	adds	r3, #1
 80066c6:	643b      	str	r3, [r7, #64]	; 0x40
 80066c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d9dd      	bls.n	800668a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80066ce:	2300      	movs	r3, #0
 80066d0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80066d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <find_volume+0x182>
 80066d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066da:	3b01      	subs	r3, #1
 80066dc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80066de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	3358      	adds	r3, #88	; 0x58
 80066e4:	443b      	add	r3, r7
 80066e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80066ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80066ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <find_volume+0x1a2>
 80066f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066f6:	f7ff fedb 	bl	80064b0 <check_fs>
 80066fa:	4603      	mov	r3, r0
 80066fc:	e000      	b.n	8006700 <find_volume+0x1a4>
 80066fe:	2303      	movs	r3, #3
 8006700:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006704:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006708:	2b01      	cmp	r3, #1
 800670a:	d905      	bls.n	8006718 <find_volume+0x1bc>
 800670c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800670e:	3301      	adds	r3, #1
 8006710:	643b      	str	r3, [r7, #64]	; 0x40
 8006712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006714:	2b03      	cmp	r3, #3
 8006716:	d9e2      	bls.n	80066de <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006718:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800671c:	2b04      	cmp	r3, #4
 800671e:	d101      	bne.n	8006724 <find_volume+0x1c8>
 8006720:	2301      	movs	r3, #1
 8006722:	e194      	b.n	8006a4e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006724:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006728:	2b01      	cmp	r3, #1
 800672a:	d901      	bls.n	8006730 <find_volume+0x1d4>
 800672c:	230d      	movs	r3, #13
 800672e:	e18e      	b.n	8006a4e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	3338      	adds	r3, #56	; 0x38
 8006734:	330b      	adds	r3, #11
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe f892 	bl	8004860 <ld_word>
 800673c:	4603      	mov	r3, r0
 800673e:	461a      	mov	r2, r3
 8006740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006742:	899b      	ldrh	r3, [r3, #12]
 8006744:	429a      	cmp	r2, r3
 8006746:	d001      	beq.n	800674c <find_volume+0x1f0>
 8006748:	230d      	movs	r3, #13
 800674a:	e180      	b.n	8006a4e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800674c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674e:	3338      	adds	r3, #56	; 0x38
 8006750:	3316      	adds	r3, #22
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe f884 	bl	8004860 <ld_word>
 8006758:	4603      	mov	r3, r0
 800675a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800675c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d106      	bne.n	8006770 <find_volume+0x214>
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	3338      	adds	r3, #56	; 0x38
 8006766:	3324      	adds	r3, #36	; 0x24
 8006768:	4618      	mov	r0, r3
 800676a:	f7fe f891 	bl	8004890 <ld_dword>
 800676e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006772:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006774:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	789b      	ldrb	r3, [r3, #2]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d005      	beq.n	8006794 <find_volume+0x238>
 8006788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678a:	789b      	ldrb	r3, [r3, #2]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d001      	beq.n	8006794 <find_volume+0x238>
 8006790:	230d      	movs	r3, #13
 8006792:	e15c      	b.n	8006a4e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006796:	789b      	ldrb	r3, [r3, #2]
 8006798:	461a      	mov	r2, r3
 800679a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679c:	fb02 f303 	mul.w	r3, r2, r3
 80067a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80067a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80067ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b0:	895b      	ldrh	r3, [r3, #10]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d008      	beq.n	80067c8 <find_volume+0x26c>
 80067b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b8:	895b      	ldrh	r3, [r3, #10]
 80067ba:	461a      	mov	r2, r3
 80067bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067be:	895b      	ldrh	r3, [r3, #10]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	4013      	ands	r3, r2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <find_volume+0x270>
 80067c8:	230d      	movs	r3, #13
 80067ca:	e140      	b.n	8006a4e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	3338      	adds	r3, #56	; 0x38
 80067d0:	3311      	adds	r3, #17
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe f844 	bl	8004860 <ld_word>
 80067d8:	4603      	mov	r3, r0
 80067da:	461a      	mov	r2, r3
 80067dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80067e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e2:	891b      	ldrh	r3, [r3, #8]
 80067e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067e6:	8992      	ldrh	r2, [r2, #12]
 80067e8:	0952      	lsrs	r2, r2, #5
 80067ea:	b292      	uxth	r2, r2
 80067ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80067f0:	fb01 f202 	mul.w	r2, r1, r2
 80067f4:	1a9b      	subs	r3, r3, r2
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <find_volume+0x2a8>
 80067fc:	230d      	movs	r3, #13
 80067fe:	e126      	b.n	8006a4e <find_volume+0x4f2>
 8006800:	200002d4 	.word	0x200002d4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	3338      	adds	r3, #56	; 0x38
 8006808:	3313      	adds	r3, #19
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe f828 	bl	8004860 <ld_word>
 8006810:	4603      	mov	r3, r0
 8006812:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <find_volume+0x2cc>
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	3338      	adds	r3, #56	; 0x38
 800681e:	3320      	adds	r3, #32
 8006820:	4618      	mov	r0, r3
 8006822:	f7fe f835 	bl	8004890 <ld_dword>
 8006826:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682a:	3338      	adds	r3, #56	; 0x38
 800682c:	330e      	adds	r3, #14
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe f816 	bl	8004860 <ld_word>
 8006834:	4603      	mov	r3, r0
 8006836:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006838:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <find_volume+0x2e6>
 800683e:	230d      	movs	r3, #13
 8006840:	e105      	b.n	8006a4e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006842:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006846:	4413      	add	r3, r2
 8006848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800684a:	8911      	ldrh	r1, [r2, #8]
 800684c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800684e:	8992      	ldrh	r2, [r2, #12]
 8006850:	0952      	lsrs	r2, r2, #5
 8006852:	b292      	uxth	r2, r2
 8006854:	fbb1 f2f2 	udiv	r2, r1, r2
 8006858:	b292      	uxth	r2, r2
 800685a:	4413      	add	r3, r2
 800685c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800685e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	429a      	cmp	r2, r3
 8006864:	d201      	bcs.n	800686a <find_volume+0x30e>
 8006866:	230d      	movs	r3, #13
 8006868:	e0f1      	b.n	8006a4e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800686a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006872:	8952      	ldrh	r2, [r2, #10]
 8006874:	fbb3 f3f2 	udiv	r3, r3, r2
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <find_volume+0x328>
 8006880:	230d      	movs	r3, #13
 8006882:	e0e4      	b.n	8006a4e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006884:	2303      	movs	r3, #3
 8006886:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006890:	4293      	cmp	r3, r2
 8006892:	d802      	bhi.n	800689a <find_volume+0x33e>
 8006894:	2302      	movs	r3, #2
 8006896:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	f640 72f5 	movw	r2, #4085	; 0xff5
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d802      	bhi.n	80068aa <find_volume+0x34e>
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	1c9a      	adds	r2, r3, #2
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80068b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068b6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80068b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80068ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068bc:	441a      	add	r2, r3
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80068c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	441a      	add	r2, r3
 80068c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ca:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80068cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d11e      	bne.n	8006912 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	3338      	adds	r3, #56	; 0x38
 80068d8:	332a      	adds	r3, #42	; 0x2a
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fd ffc0 	bl	8004860 <ld_word>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <find_volume+0x38e>
 80068e6:	230d      	movs	r3, #13
 80068e8:	e0b1      	b.n	8006a4e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80068ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ec:	891b      	ldrh	r3, [r3, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <find_volume+0x39a>
 80068f2:	230d      	movs	r3, #13
 80068f4:	e0ab      	b.n	8006a4e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	3338      	adds	r3, #56	; 0x38
 80068fa:	332c      	adds	r3, #44	; 0x2c
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fd ffc7 	bl	8004890 <ld_dword>
 8006902:	4602      	mov	r2, r0
 8006904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006906:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	647b      	str	r3, [r7, #68]	; 0x44
 8006910:	e01f      	b.n	8006952 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	891b      	ldrh	r3, [r3, #8]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <find_volume+0x3c2>
 800691a:	230d      	movs	r3, #13
 800691c:	e097      	b.n	8006a4e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006924:	441a      	add	r2, r3
 8006926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006928:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800692a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800692e:	2b02      	cmp	r3, #2
 8006930:	d103      	bne.n	800693a <find_volume+0x3de>
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	005b      	lsls	r3, r3, #1
 8006938:	e00a      	b.n	8006950 <find_volume+0x3f4>
 800693a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693c:	69da      	ldr	r2, [r3, #28]
 800693e:	4613      	mov	r3, r2
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	4413      	add	r3, r2
 8006944:	085a      	lsrs	r2, r3, #1
 8006946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006950:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006954:	6a1a      	ldr	r2, [r3, #32]
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	899b      	ldrh	r3, [r3, #12]
 800695a:	4619      	mov	r1, r3
 800695c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800695e:	440b      	add	r3, r1
 8006960:	3b01      	subs	r3, #1
 8006962:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006964:	8989      	ldrh	r1, [r1, #12]
 8006966:	fbb3 f3f1 	udiv	r3, r3, r1
 800696a:	429a      	cmp	r2, r3
 800696c:	d201      	bcs.n	8006972 <find_volume+0x416>
 800696e:	230d      	movs	r3, #13
 8006970:	e06d      	b.n	8006a4e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	f04f 32ff 	mov.w	r2, #4294967295
 8006978:	619a      	str	r2, [r3, #24]
 800697a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	2280      	movs	r2, #128	; 0x80
 8006986:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006988:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800698c:	2b03      	cmp	r3, #3
 800698e:	d149      	bne.n	8006a24 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	3338      	adds	r3, #56	; 0x38
 8006994:	3330      	adds	r3, #48	; 0x30
 8006996:	4618      	mov	r0, r3
 8006998:	f7fd ff62 	bl	8004860 <ld_word>
 800699c:	4603      	mov	r3, r0
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d140      	bne.n	8006a24 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80069a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a4:	3301      	adds	r3, #1
 80069a6:	4619      	mov	r1, r3
 80069a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069aa:	f7fe fa09 	bl	8004dc0 <move_window>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d137      	bne.n	8006a24 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	2200      	movs	r2, #0
 80069b8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	3338      	adds	r3, #56	; 0x38
 80069be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fd ff4c 	bl	8004860 <ld_word>
 80069c8:	4603      	mov	r3, r0
 80069ca:	461a      	mov	r2, r3
 80069cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d127      	bne.n	8006a24 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	3338      	adds	r3, #56	; 0x38
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fd ff59 	bl	8004890 <ld_dword>
 80069de:	4603      	mov	r3, r0
 80069e0:	4a1d      	ldr	r2, [pc, #116]	; (8006a58 <find_volume+0x4fc>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d11e      	bne.n	8006a24 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	3338      	adds	r3, #56	; 0x38
 80069ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fd ff4e 	bl	8004890 <ld_dword>
 80069f4:	4603      	mov	r3, r0
 80069f6:	4a19      	ldr	r2, [pc, #100]	; (8006a5c <find_volume+0x500>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d113      	bne.n	8006a24 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	3338      	adds	r3, #56	; 0x38
 8006a00:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fd ff43 	bl	8004890 <ld_dword>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	3338      	adds	r3, #56	; 0x38
 8006a14:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fd ff39 	bl	8004890 <ld_dword>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a22:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006a2a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006a2c:	4b0c      	ldr	r3, [pc, #48]	; (8006a60 <find_volume+0x504>)
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	3301      	adds	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	4b0a      	ldr	r3, [pc, #40]	; (8006a60 <find_volume+0x504>)
 8006a36:	801a      	strh	r2, [r3, #0]
 8006a38:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <find_volume+0x504>)
 8006a3a:	881a      	ldrh	r2, [r3, #0]
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	4a08      	ldr	r2, [pc, #32]	; (8006a64 <find_volume+0x508>)
 8006a44:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006a46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a48:	f7fe f952 	bl	8004cf0 <clear_lock>
#endif
	return FR_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3758      	adds	r7, #88	; 0x58
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	41615252 	.word	0x41615252
 8006a5c:	61417272 	.word	0x61417272
 8006a60:	200002d8 	.word	0x200002d8
 8006a64:	200002fc 	.word	0x200002fc

08006a68 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006a72:	2309      	movs	r3, #9
 8006a74:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01c      	beq.n	8006ab6 <validate+0x4e>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d018      	beq.n	8006ab6 <validate+0x4e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d013      	beq.n	8006ab6 <validate+0x4e>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	889a      	ldrh	r2, [r3, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	88db      	ldrh	r3, [r3, #6]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d10c      	bne.n	8006ab6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fd fe3e 	bl	8004724 <disk_status>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <validate+0x4e>
			res = FR_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d102      	bne.n	8006ac2 <validate+0x5a>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	e000      	b.n	8006ac4 <validate+0x5c>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	6013      	str	r3, [r2, #0]
	return res;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b088      	sub	sp, #32
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006ae6:	f107 0310 	add.w	r3, r7, #16
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff fc9c 	bl	8006428 <get_ldnumber>
 8006af0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	da01      	bge.n	8006afc <f_mount+0x28>
 8006af8:	230b      	movs	r3, #11
 8006afa:	e02b      	b.n	8006b54 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006afc:	4a17      	ldr	r2, [pc, #92]	; (8006b5c <f_mount+0x88>)
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b04:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d005      	beq.n	8006b18 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006b0c:	69b8      	ldr	r0, [r7, #24]
 8006b0e:	f7fe f8ef 	bl	8004cf0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2200      	movs	r2, #0
 8006b16:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	490d      	ldr	r1, [pc, #52]	; (8006b5c <f_mount+0x88>)
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <f_mount+0x66>
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d001      	beq.n	8006b3e <f_mount+0x6a>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e00a      	b.n	8006b54 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006b3e:	f107 010c 	add.w	r1, r7, #12
 8006b42:	f107 0308 	add.w	r3, r7, #8
 8006b46:	2200      	movs	r2, #0
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7ff fd07 	bl	800655c <find_volume>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3720      	adds	r7, #32
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	200002d4 	.word	0x200002d4

08006b60 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b09a      	sub	sp, #104	; 0x68
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <f_open+0x18>
 8006b74:	2309      	movs	r3, #9
 8006b76:	e1bb      	b.n	8006ef0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b7e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006b80:	79fa      	ldrb	r2, [r7, #7]
 8006b82:	f107 0114 	add.w	r1, r7, #20
 8006b86:	f107 0308 	add.w	r3, r7, #8
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff fce6 	bl	800655c <find_volume>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8006b96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f040 819f 	bne.w	8006ede <f_open+0x37e>
		dj.obj.fs = fs;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	f107 0318 	add.w	r3, r7, #24
 8006baa:	4611      	mov	r1, r2
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff fbc5 	bl	800633c <follow_path>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006bb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d11a      	bne.n	8006bf6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006bc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006bc4:	b25b      	sxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	da03      	bge.n	8006bd2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006bca:	2306      	movs	r3, #6
 8006bcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006bd0:	e011      	b.n	8006bf6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	f023 0301 	bic.w	r3, r3, #1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	bf14      	ite	ne
 8006bdc:	2301      	movne	r3, #1
 8006bde:	2300      	moveq	r3, #0
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	461a      	mov	r2, r3
 8006be4:	f107 0318 	add.w	r3, r7, #24
 8006be8:	4611      	mov	r1, r2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fd ff38 	bl	8004a60 <chk_lock>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	f003 031c 	and.w	r3, r3, #28
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d07f      	beq.n	8006d00 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006c00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d017      	beq.n	8006c38 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006c08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d10e      	bne.n	8006c2e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006c10:	f7fd ff82 	bl	8004b18 <enq_lock>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d006      	beq.n	8006c28 <f_open+0xc8>
 8006c1a:	f107 0318 	add.w	r3, r7, #24
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff f8dc 	bl	8005ddc <dir_register>
 8006c24:	4603      	mov	r3, r0
 8006c26:	e000      	b.n	8006c2a <f_open+0xca>
 8006c28:	2312      	movs	r3, #18
 8006c2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006c2e:	79fb      	ldrb	r3, [r7, #7]
 8006c30:	f043 0308 	orr.w	r3, r3, #8
 8006c34:	71fb      	strb	r3, [r7, #7]
 8006c36:	e010      	b.n	8006c5a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006c38:	7fbb      	ldrb	r3, [r7, #30]
 8006c3a:	f003 0311 	and.w	r3, r3, #17
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <f_open+0xea>
					res = FR_DENIED;
 8006c42:	2307      	movs	r3, #7
 8006c44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006c48:	e007      	b.n	8006c5a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <f_open+0xfa>
 8006c54:	2308      	movs	r3, #8
 8006c56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006c5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d168      	bne.n	8006d34 <f_open+0x1d4>
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d063      	beq.n	8006d34 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006c6c:	f7fd fcfc 	bl	8004668 <get_fattime>
 8006c70:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c74:	330e      	adds	r3, #14
 8006c76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fd fe47 	bl	800490c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	3316      	adds	r3, #22
 8006c82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fd fe41 	bl	800490c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8c:	330b      	adds	r3, #11
 8006c8e:	2220      	movs	r2, #32
 8006c90:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c96:	4611      	mov	r1, r2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fe fe17 	bl	80058cc <ld_clust>
 8006c9e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe fe2f 	bl	800590a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	331c      	adds	r3, #28
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fd fe2a 	bl	800490c <st_dword>
					fs->wflag = 1;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d037      	beq.n	8006d34 <f_open+0x1d4>
						dw = fs->winsect;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006cca:	f107 0318 	add.w	r3, r7, #24
 8006cce:	2200      	movs	r2, #0
 8006cd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fe fb1f 	bl	8005316 <remove_chain>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006cde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d126      	bne.n	8006d34 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fe f868 	bl	8004dc0 <move_window>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cfa:	3a01      	subs	r2, #1
 8006cfc:	615a      	str	r2, [r3, #20]
 8006cfe:	e019      	b.n	8006d34 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006d00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d115      	bne.n	8006d34 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006d08:	7fbb      	ldrb	r3, [r7, #30]
 8006d0a:	f003 0310 	and.w	r3, r3, #16
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <f_open+0x1ba>
					res = FR_NO_FILE;
 8006d12:	2304      	movs	r3, #4
 8006d14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006d18:	e00c      	b.n	8006d34 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d007      	beq.n	8006d34 <f_open+0x1d4>
 8006d24:	7fbb      	ldrb	r3, [r7, #30]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <f_open+0x1d4>
						res = FR_DENIED;
 8006d2e:	2307      	movs	r3, #7
 8006d30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006d34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d128      	bne.n	8006d8e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	f003 0308 	and.w	r3, r3, #8
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006d46:	79fb      	ldrb	r3, [r7, #7]
 8006d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d4c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d5c:	79fb      	ldrb	r3, [r7, #7]
 8006d5e:	f023 0301 	bic.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	bf14      	ite	ne
 8006d66:	2301      	movne	r3, #1
 8006d68:	2300      	moveq	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f107 0318 	add.w	r3, r7, #24
 8006d72:	4611      	mov	r1, r2
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7fd fef1 	bl	8004b5c <inc_lock>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d102      	bne.n	8006d8e <f_open+0x22e>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006d8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f040 80a3 	bne.w	8006ede <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fe fd94 	bl	80058cc <ld_clust>
 8006da4:	4602      	mov	r2, r0
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dac:	331c      	adds	r3, #28
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fd fd6e 	bl	8004890 <ld_dword>
 8006db4:	4602      	mov	r2, r0
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	88da      	ldrh	r2, [r3, #6]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	79fa      	ldrb	r2, [r7, #7]
 8006dd2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3330      	adds	r3, #48	; 0x30
 8006dea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006dee:	2100      	movs	r1, #0
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fd fdd8 	bl	80049a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006df6:	79fb      	ldrb	r3, [r7, #7]
 8006df8:	f003 0320 	and.w	r3, r3, #32
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d06e      	beq.n	8006ede <f_open+0x37e>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d06a      	beq.n	8006ede <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	895b      	ldrh	r3, [r3, #10]
 8006e14:	461a      	mov	r2, r3
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	899b      	ldrh	r3, [r3, #12]
 8006e1a:	fb02 f303 	mul.w	r3, r2, r3
 8006e1e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e2c:	e016      	b.n	8006e5c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fe f881 	bl	8004f3a <get_fat>
 8006e38:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d802      	bhi.n	8006e46 <f_open+0x2e6>
 8006e40:	2302      	movs	r3, #2
 8006e42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4c:	d102      	bne.n	8006e54 <f_open+0x2f4>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006e54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d103      	bne.n	8006e6c <f_open+0x30c>
 8006e64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d8e0      	bhi.n	8006e2e <f_open+0x2ce>
				}
				fp->clust = clst;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e70:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006e72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d131      	bne.n	8006ede <f_open+0x37e>
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	899b      	ldrh	r3, [r3, #12]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e82:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e86:	fb01 f202 	mul.w	r2, r1, r2
 8006e8a:	1a9b      	subs	r3, r3, r2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d026      	beq.n	8006ede <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe f831 	bl	8004efc <clust2sect>
 8006e9a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d103      	bne.n	8006eaa <f_open+0x34a>
						res = FR_INT_ERR;
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006ea8:	e019      	b.n	8006ede <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	899b      	ldrh	r3, [r3, #12]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb8:	441a      	add	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	7858      	ldrb	r0, [r3, #1]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a1a      	ldr	r2, [r3, #32]
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f7fd fc69 	bl	80047a4 <disk_read>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <f_open+0x37e>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006ede:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <f_open+0x38c>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006eec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3768      	adds	r7, #104	; 0x68
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08e      	sub	sp, #56	; 0x38
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f107 0214 	add.w	r2, r7, #20
 8006f16:	4611      	mov	r1, r2
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff fda5 	bl	8006a68 <validate>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006f24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d107      	bne.n	8006f3c <f_read+0x44>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	7d5b      	ldrb	r3, [r3, #21]
 8006f30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006f34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <f_read+0x4a>
 8006f3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f40:	e135      	b.n	80071ae <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	7d1b      	ldrb	r3, [r3, #20]
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <f_read+0x5a>
 8006f4e:	2307      	movs	r3, #7
 8006f50:	e12d      	b.n	80071ae <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	f240 811e 	bls.w	80071a4 <f_read+0x2ac>
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006f6c:	e11a      	b.n	80071a4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	8992      	ldrh	r2, [r2, #12]
 8006f76:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f7a:	fb01 f202 	mul.w	r2, r1, r2
 8006f7e:	1a9b      	subs	r3, r3, r2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f040 80d5 	bne.w	8007130 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	8992      	ldrh	r2, [r2, #12]
 8006f8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	8952      	ldrh	r2, [r2, #10]
 8006f96:	3a01      	subs	r2, #1
 8006f98:	4013      	ands	r3, r2
 8006f9a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d12f      	bne.n	8007002 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d103      	bne.n	8006fb2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	633b      	str	r3, [r7, #48]	; 0x30
 8006fb0:	e013      	b.n	8006fda <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d007      	beq.n	8006fca <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f7fe faa5 	bl	8005510 <clmt_clust>
 8006fc6:	6338      	str	r0, [r7, #48]	; 0x30
 8006fc8:	e007      	b.n	8006fda <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	f7fd ffb1 	bl	8004f3a <get_fat>
 8006fd8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d804      	bhi.n	8006fea <f_read+0xf2>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	755a      	strb	r2, [r3, #21]
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	e0e1      	b.n	80071ae <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff0:	d104      	bne.n	8006ffc <f_read+0x104>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	755a      	strb	r2, [r3, #21]
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e0d8      	b.n	80071ae <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007000:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	4619      	mov	r1, r3
 800700a:	4610      	mov	r0, r2
 800700c:	f7fd ff76 	bl	8004efc <clust2sect>
 8007010:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d104      	bne.n	8007022 <f_read+0x12a>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2202      	movs	r2, #2
 800701c:	755a      	strb	r2, [r3, #21]
 800701e:	2302      	movs	r3, #2
 8007020:	e0c5      	b.n	80071ae <f_read+0x2b6>
			sect += csect;
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	4413      	add	r3, r2
 8007028:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	899b      	ldrh	r3, [r3, #12]
 800702e:	461a      	mov	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	fbb3 f3f2 	udiv	r3, r3, r2
 8007036:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	2b00      	cmp	r3, #0
 800703c:	d041      	beq.n	80070c2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	4413      	add	r3, r2
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	8952      	ldrh	r2, [r2, #10]
 8007048:	4293      	cmp	r3, r2
 800704a:	d905      	bls.n	8007058 <f_read+0x160>
					cc = fs->csize - csect;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	895b      	ldrh	r3, [r3, #10]
 8007050:	461a      	mov	r2, r3
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	7858      	ldrb	r0, [r3, #1]
 800705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007062:	f7fd fb9f 	bl	80047a4 <disk_read>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d004      	beq.n	8007076 <f_read+0x17e>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2201      	movs	r2, #1
 8007070:	755a      	strb	r2, [r3, #21]
 8007072:	2301      	movs	r3, #1
 8007074:	e09b      	b.n	80071ae <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	7d1b      	ldrb	r3, [r3, #20]
 800707a:	b25b      	sxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	da18      	bge.n	80070b2 <f_read+0x1ba>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a1a      	ldr	r2, [r3, #32]
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800708a:	429a      	cmp	r2, r3
 800708c:	d911      	bls.n	80070b2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a1a      	ldr	r2, [r3, #32]
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	8992      	ldrh	r2, [r2, #12]
 800709a:	fb02 f303 	mul.w	r3, r2, r3
 800709e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a0:	18d0      	adds	r0, r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	899b      	ldrh	r3, [r3, #12]
 80070ac:	461a      	mov	r2, r3
 80070ae:	f7fd fc59 	bl	8004964 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	899b      	ldrh	r3, [r3, #12]
 80070b6:	461a      	mov	r2, r3
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	fb02 f303 	mul.w	r3, r2, r3
 80070be:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80070c0:	e05c      	b.n	800717c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d02e      	beq.n	800712a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	7d1b      	ldrb	r3, [r3, #20]
 80070d0:	b25b      	sxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	da18      	bge.n	8007108 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	7858      	ldrb	r0, [r3, #1]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a1a      	ldr	r2, [r3, #32]
 80070e4:	2301      	movs	r3, #1
 80070e6:	f7fd fb7d 	bl	80047e4 <disk_write>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d004      	beq.n	80070fa <f_read+0x202>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2201      	movs	r2, #1
 80070f4:	755a      	strb	r2, [r3, #21]
 80070f6:	2301      	movs	r3, #1
 80070f8:	e059      	b.n	80071ae <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	7d1b      	ldrb	r3, [r3, #20]
 80070fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007102:	b2da      	uxtb	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	7858      	ldrb	r0, [r3, #1]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007112:	2301      	movs	r3, #1
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	f7fd fb45 	bl	80047a4 <disk_read>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d004      	beq.n	800712a <f_read+0x232>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2201      	movs	r2, #1
 8007124:	755a      	strb	r2, [r3, #21]
 8007126:	2301      	movs	r3, #1
 8007128:	e041      	b.n	80071ae <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	899b      	ldrh	r3, [r3, #12]
 8007134:	4618      	mov	r0, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	8992      	ldrh	r2, [r2, #12]
 800713e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007142:	fb01 f202 	mul.w	r2, r1, r2
 8007146:	1a9b      	subs	r3, r3, r2
 8007148:	1ac3      	subs	r3, r0, r3
 800714a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800714c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	d901      	bls.n	8007158 <f_read+0x260>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	8992      	ldrh	r2, [r2, #12]
 8007166:	fbb3 f0f2 	udiv	r0, r3, r2
 800716a:	fb00 f202 	mul.w	r2, r0, r2
 800716e:	1a9b      	subs	r3, r3, r2
 8007170:	440b      	add	r3, r1
 8007172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007174:	4619      	mov	r1, r3
 8007176:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007178:	f7fd fbf4 	bl	8004964 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800717c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	4413      	add	r3, r2
 8007182:	627b      	str	r3, [r7, #36]	; 0x24
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	699a      	ldr	r2, [r3, #24]
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	441a      	add	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	619a      	str	r2, [r3, #24]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	441a      	add	r2, r3
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f47f aee1 	bne.w	8006f6e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3738      	adds	r7, #56	; 0x38
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b08c      	sub	sp, #48	; 0x30
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	607a      	str	r2, [r7, #4]
 80071c2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f107 0210 	add.w	r2, r7, #16
 80071d4:	4611      	mov	r1, r2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7ff fc46 	bl	8006a68 <validate>
 80071dc:	4603      	mov	r3, r0
 80071de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80071e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d107      	bne.n	80071fa <f_write+0x44>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	7d5b      	ldrb	r3, [r3, #21]
 80071ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80071f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <f_write+0x4a>
 80071fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071fe:	e16a      	b.n	80074d6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	7d1b      	ldrb	r3, [r3, #20]
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <f_write+0x5a>
 800720c:	2307      	movs	r3, #7
 800720e:	e162      	b.n	80074d6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	699a      	ldr	r2, [r3, #24]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	441a      	add	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	429a      	cmp	r2, r3
 800721e:	f080 814c 	bcs.w	80074ba <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	43db      	mvns	r3, r3
 8007228:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800722a:	e146      	b.n	80074ba <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	8992      	ldrh	r2, [r2, #12]
 8007234:	fbb3 f1f2 	udiv	r1, r3, r2
 8007238:	fb01 f202 	mul.w	r2, r1, r2
 800723c:	1a9b      	subs	r3, r3, r2
 800723e:	2b00      	cmp	r3, #0
 8007240:	f040 80f1 	bne.w	8007426 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	8992      	ldrh	r2, [r2, #12]
 800724c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	8952      	ldrh	r2, [r2, #10]
 8007254:	3a01      	subs	r2, #1
 8007256:	4013      	ands	r3, r2
 8007258:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d143      	bne.n	80072e8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10c      	bne.n	8007282 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	2b00      	cmp	r3, #0
 8007272:	d11a      	bne.n	80072aa <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2100      	movs	r1, #0
 8007278:	4618      	mov	r0, r3
 800727a:	f7fe f8b1 	bl	80053e0 <create_chain>
 800727e:	62b8      	str	r0, [r7, #40]	; 0x28
 8007280:	e013      	b.n	80072aa <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d007      	beq.n	800729a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	4619      	mov	r1, r3
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f7fe f93d 	bl	8005510 <clmt_clust>
 8007296:	62b8      	str	r0, [r7, #40]	; 0x28
 8007298:	e007      	b.n	80072aa <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	4619      	mov	r1, r3
 80072a2:	4610      	mov	r0, r2
 80072a4:	f7fe f89c 	bl	80053e0 <create_chain>
 80072a8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 8109 	beq.w	80074c4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d104      	bne.n	80072c2 <f_write+0x10c>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2202      	movs	r2, #2
 80072bc:	755a      	strb	r2, [r3, #21]
 80072be:	2302      	movs	r3, #2
 80072c0:	e109      	b.n	80074d6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c8:	d104      	bne.n	80072d4 <f_write+0x11e>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2201      	movs	r2, #1
 80072ce:	755a      	strb	r2, [r3, #21]
 80072d0:	2301      	movs	r3, #1
 80072d2:	e100      	b.n	80074d6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072d8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d102      	bne.n	80072e8 <f_write+0x132>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072e6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	7d1b      	ldrb	r3, [r3, #20]
 80072ec:	b25b      	sxtb	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	da18      	bge.n	8007324 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	7858      	ldrb	r0, [r3, #1]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6a1a      	ldr	r2, [r3, #32]
 8007300:	2301      	movs	r3, #1
 8007302:	f7fd fa6f 	bl	80047e4 <disk_write>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d004      	beq.n	8007316 <f_write+0x160>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	755a      	strb	r2, [r3, #21]
 8007312:	2301      	movs	r3, #1
 8007314:	e0df      	b.n	80074d6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	7d1b      	ldrb	r3, [r3, #20]
 800731a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731e:	b2da      	uxtb	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	4619      	mov	r1, r3
 800732c:	4610      	mov	r0, r2
 800732e:	f7fd fde5 	bl	8004efc <clust2sect>
 8007332:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d104      	bne.n	8007344 <f_write+0x18e>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2202      	movs	r2, #2
 800733e:	755a      	strb	r2, [r3, #21]
 8007340:	2302      	movs	r3, #2
 8007342:	e0c8      	b.n	80074d6 <f_write+0x320>
			sect += csect;
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	4413      	add	r3, r2
 800734a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	899b      	ldrh	r3, [r3, #12]
 8007350:	461a      	mov	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	fbb3 f3f2 	udiv	r3, r3, r2
 8007358:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d043      	beq.n	80073e8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	4413      	add	r3, r2
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	8952      	ldrh	r2, [r2, #10]
 800736a:	4293      	cmp	r3, r2
 800736c:	d905      	bls.n	800737a <f_write+0x1c4>
					cc = fs->csize - csect;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	895b      	ldrh	r3, [r3, #10]
 8007372:	461a      	mov	r2, r3
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	7858      	ldrb	r0, [r3, #1]
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	69f9      	ldr	r1, [r7, #28]
 8007384:	f7fd fa2e 	bl	80047e4 <disk_write>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d004      	beq.n	8007398 <f_write+0x1e2>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2201      	movs	r2, #1
 8007392:	755a      	strb	r2, [r3, #21]
 8007394:	2301      	movs	r3, #1
 8007396:	e09e      	b.n	80074d6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a1a      	ldr	r2, [r3, #32]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	6a3a      	ldr	r2, [r7, #32]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d918      	bls.n	80073d8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6a1a      	ldr	r2, [r3, #32]
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	8992      	ldrh	r2, [r2, #12]
 80073b8:	fb02 f303 	mul.w	r3, r2, r3
 80073bc:	69fa      	ldr	r2, [r7, #28]
 80073be:	18d1      	adds	r1, r2, r3
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	899b      	ldrh	r3, [r3, #12]
 80073c4:	461a      	mov	r2, r3
 80073c6:	f7fd facd 	bl	8004964 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	7d1b      	ldrb	r3, [r3, #20]
 80073ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	899b      	ldrh	r3, [r3, #12]
 80073dc:	461a      	mov	r2, r3
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	fb02 f303 	mul.w	r3, r2, r3
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80073e6:	e04b      	b.n	8007480 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d016      	beq.n	8007420 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	699a      	ldr	r2, [r3, #24]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d210      	bcs.n	8007420 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	7858      	ldrb	r0, [r3, #1]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007408:	2301      	movs	r3, #1
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	f7fd f9ca 	bl	80047a4 <disk_read>
 8007410:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007412:	2b00      	cmp	r3, #0
 8007414:	d004      	beq.n	8007420 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	755a      	strb	r2, [r3, #21]
 800741c:	2301      	movs	r3, #1
 800741e:	e05a      	b.n	80074d6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	899b      	ldrh	r3, [r3, #12]
 800742a:	4618      	mov	r0, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	8992      	ldrh	r2, [r2, #12]
 8007434:	fbb3 f1f2 	udiv	r1, r3, r2
 8007438:	fb01 f202 	mul.w	r2, r1, r2
 800743c:	1a9b      	subs	r3, r3, r2
 800743e:	1ac3      	subs	r3, r0, r3
 8007440:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	429a      	cmp	r2, r3
 8007448:	d901      	bls.n	800744e <f_write+0x298>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	8992      	ldrh	r2, [r2, #12]
 800745c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007460:	fb00 f202 	mul.w	r2, r0, r2
 8007464:	1a9b      	subs	r3, r3, r2
 8007466:	440b      	add	r3, r1
 8007468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746a:	69f9      	ldr	r1, [r7, #28]
 800746c:	4618      	mov	r0, r3
 800746e:	f7fd fa79 	bl	8004964 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	7d1b      	ldrb	r3, [r3, #20]
 8007476:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800747a:	b2da      	uxtb	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	4413      	add	r3, r2
 8007486:	61fb      	str	r3, [r7, #28]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	699a      	ldr	r2, [r3, #24]
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	441a      	add	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	619a      	str	r2, [r3, #24]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	429a      	cmp	r2, r3
 800749e:	bf38      	it	cc
 80074a0:	461a      	movcc	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	60da      	str	r2, [r3, #12]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	441a      	add	r2, r3
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f47f aeb5 	bne.w	800722c <f_write+0x76>
 80074c2:	e000      	b.n	80074c6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80074c4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	7d1b      	ldrb	r3, [r3, #20]
 80074ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3730      	adds	r7, #48	; 0x30
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b086      	sub	sp, #24
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f107 0208 	add.w	r2, r7, #8
 80074ec:	4611      	mov	r1, r2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7ff faba 	bl	8006a68 <validate>
 80074f4:	4603      	mov	r3, r0
 80074f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80074f8:	7dfb      	ldrb	r3, [r7, #23]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d168      	bne.n	80075d0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	7d1b      	ldrb	r3, [r3, #20]
 8007502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007506:	2b00      	cmp	r3, #0
 8007508:	d062      	beq.n	80075d0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	7d1b      	ldrb	r3, [r3, #20]
 800750e:	b25b      	sxtb	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	da15      	bge.n	8007540 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	7858      	ldrb	r0, [r3, #1]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1a      	ldr	r2, [r3, #32]
 8007522:	2301      	movs	r3, #1
 8007524:	f7fd f95e 	bl	80047e4 <disk_write>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <f_sync+0x54>
 800752e:	2301      	movs	r3, #1
 8007530:	e04f      	b.n	80075d2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	7d1b      	ldrb	r3, [r3, #20]
 8007536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800753a:	b2da      	uxtb	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007540:	f7fd f892 	bl	8004668 <get_fattime>
 8007544:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	4619      	mov	r1, r3
 800754e:	4610      	mov	r0, r2
 8007550:	f7fd fc36 	bl	8004dc0 <move_window>
 8007554:	4603      	mov	r3, r0
 8007556:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d138      	bne.n	80075d0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007562:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	330b      	adds	r3, #11
 8007568:	781a      	ldrb	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	330b      	adds	r3, #11
 800756e:	f042 0220 	orr.w	r2, r2, #32
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6818      	ldr	r0, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	461a      	mov	r2, r3
 8007580:	68f9      	ldr	r1, [r7, #12]
 8007582:	f7fe f9c2 	bl	800590a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f103 021c 	add.w	r2, r3, #28
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	4619      	mov	r1, r3
 8007592:	4610      	mov	r0, r2
 8007594:	f7fd f9ba 	bl	800490c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3316      	adds	r3, #22
 800759c:	6939      	ldr	r1, [r7, #16]
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fd f9b4 	bl	800490c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3312      	adds	r3, #18
 80075a8:	2100      	movs	r1, #0
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fd f993 	bl	80048d6 <st_word>
					fs->wflag = 1;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2201      	movs	r2, #1
 80075b4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fd fc2f 	bl	8004e1c <sync_fs>
 80075be:	4603      	mov	r3, r0
 80075c0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	7d1b      	ldrb	r3, [r3, #20]
 80075c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7ff ff7b 	bl	80074de <f_sync>
 80075e8:	4603      	mov	r3, r0
 80075ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d118      	bne.n	8007624 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f107 0208 	add.w	r2, r7, #8
 80075f8:	4611      	mov	r1, r2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff fa34 	bl	8006a68 <validate>
 8007600:	4603      	mov	r3, r0
 8007602:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10c      	bne.n	8007624 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	4618      	mov	r0, r3
 8007610:	f7fd fb32 	bl	8004c78 <dec_lock>
 8007614:	4603      	mov	r3, r0
 8007616:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d102      	bne.n	8007624 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007624:	7bfb      	ldrb	r3, [r7, #15]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b092      	sub	sp, #72	; 0x48
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800763a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800763e:	f107 030c 	add.w	r3, r7, #12
 8007642:	2200      	movs	r2, #0
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe ff89 	bl	800655c <find_volume>
 800764a:	4603      	mov	r3, r0
 800764c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8007650:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007654:	2b00      	cmp	r3, #0
 8007656:	f040 8099 	bne.w	800778c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800765a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007662:	699a      	ldr	r2, [r3, #24]
 8007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	3b02      	subs	r3, #2
 800766a:	429a      	cmp	r2, r3
 800766c:	d804      	bhi.n	8007678 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	699a      	ldr	r2, [r3, #24]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	e089      	b.n	800778c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d128      	bne.n	80076d6 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007684:	2302      	movs	r3, #2
 8007686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800768c:	f107 0314 	add.w	r3, r7, #20
 8007690:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007692:	4618      	mov	r0, r3
 8007694:	f7fd fc51 	bl	8004f3a <get_fat>
 8007698:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a0:	d103      	bne.n	80076aa <f_getfree+0x7c>
 80076a2:	2301      	movs	r3, #1
 80076a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80076a8:	e063      	b.n	8007772 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80076aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d103      	bne.n	80076b8 <f_getfree+0x8a>
 80076b0:	2302      	movs	r3, #2
 80076b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80076b6:	e05c      	b.n	8007772 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80076b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <f_getfree+0x96>
 80076be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c0:	3301      	adds	r3, #1
 80076c2:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80076c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c6:	3301      	adds	r3, #1
 80076c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d3db      	bcc.n	800768c <f_getfree+0x5e>
 80076d4:	e04d      	b.n	8007772 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80076d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e0:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	637b      	str	r3, [r7, #52]	; 0x34
 80076e6:	2300      	movs	r3, #0
 80076e8:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80076ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d113      	bne.n	8007718 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80076f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	63ba      	str	r2, [r7, #56]	; 0x38
 80076f8:	4619      	mov	r1, r3
 80076fa:	f7fd fb61 	bl	8004dc0 <move_window>
 80076fe:	4603      	mov	r3, r0
 8007700:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8007704:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007708:	2b00      	cmp	r3, #0
 800770a:	d131      	bne.n	8007770 <f_getfree+0x142>
							p = fs->win;
 800770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770e:	3338      	adds	r3, #56	; 0x38
 8007710:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007714:	899b      	ldrh	r3, [r3, #12]
 8007716:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b02      	cmp	r3, #2
 800771e:	d10f      	bne.n	8007740 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007722:	f7fd f89d 	bl	8004860 <ld_word>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d102      	bne.n	8007732 <f_getfree+0x104>
 800772c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800772e:	3301      	adds	r3, #1
 8007730:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	3302      	adds	r3, #2
 8007736:	633b      	str	r3, [r7, #48]	; 0x30
 8007738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773a:	3b02      	subs	r3, #2
 800773c:	637b      	str	r3, [r7, #52]	; 0x34
 800773e:	e010      	b.n	8007762 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007742:	f7fd f8a5 	bl	8004890 <ld_dword>
 8007746:	4603      	mov	r3, r0
 8007748:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d102      	bne.n	8007756 <f_getfree+0x128>
 8007750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007752:	3301      	adds	r3, #1
 8007754:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	3304      	adds	r3, #4
 800775a:	633b      	str	r3, [r7, #48]	; 0x30
 800775c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775e:	3b04      	subs	r3, #4
 8007760:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8007762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007764:	3b01      	subs	r3, #1
 8007766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1bd      	bne.n	80076ea <f_getfree+0xbc>
 800776e:	e000      	b.n	8007772 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007770:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007776:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800777c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	791a      	ldrb	r2, [r3, #4]
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	f042 0201 	orr.w	r2, r2, #1
 8007788:	b2d2      	uxtb	r2, r2
 800778a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800778c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007790:	4618      	mov	r0, r3
 8007792:	3748      	adds	r7, #72	; 0x48
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80077a4:	2300      	movs	r3, #0
 80077a6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80077ac:	e01b      	b.n	80077e6 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80077ae:	f107 0310 	add.w	r3, r7, #16
 80077b2:	f107 0114 	add.w	r1, r7, #20
 80077b6:	2201      	movs	r2, #1
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff fb9d 	bl	8006ef8 <f_read>
		if (rc != 1) break;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d116      	bne.n	80077f2 <f_gets+0x5a>
		c = s[0];
 80077c4:	7d3b      	ldrb	r3, [r7, #20]
 80077c6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
 80077ca:	2b0d      	cmp	r3, #13
 80077cc:	d100      	bne.n	80077d0 <f_gets+0x38>
 80077ce:	e00a      	b.n	80077e6 <f_gets+0x4e>
		*p++ = c;
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	1c5a      	adds	r2, r3, #1
 80077d4:	61ba      	str	r2, [r7, #24]
 80077d6:	7dfa      	ldrb	r2, [r7, #23]
 80077d8:	701a      	strb	r2, [r3, #0]
		n++;
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	3301      	adds	r3, #1
 80077de:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80077e0:	7dfb      	ldrb	r3, [r7, #23]
 80077e2:	2b0a      	cmp	r3, #10
 80077e4:	d007      	beq.n	80077f6 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	dbde      	blt.n	80077ae <f_gets+0x16>
 80077f0:	e002      	b.n	80077f8 <f_gets+0x60>
		if (rc != 1) break;
 80077f2:	bf00      	nop
 80077f4:	e000      	b.n	80077f8 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80077f6:	bf00      	nop
	}
	*p = 0;
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2200      	movs	r2, #0
 80077fc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <f_gets+0x70>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	e000      	b.n	800780a <f_gets+0x72>
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3720      	adds	r7, #32
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	460b      	mov	r3, r1
 800781c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	2b0a      	cmp	r3, #10
 8007822:	d103      	bne.n	800782c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007824:	210d      	movs	r1, #13
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff fff3 	bl	8007812 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	db25      	blt.n	8007884 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	60fa      	str	r2, [r7, #12]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	78fa      	ldrb	r2, [r7, #3]
 8007844:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b3c      	cmp	r3, #60	; 0x3c
 800784a:	dd12      	ble.n	8007872 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6818      	ldr	r0, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f103 010c 	add.w	r1, r3, #12
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	f107 0308 	add.w	r3, r7, #8
 800785c:	f7ff fcab 	bl	80071b6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	429a      	cmp	r2, r3
 8007866:	d101      	bne.n	800786c <putc_bfd+0x5a>
 8007868:	2300      	movs	r3, #0
 800786a:	e001      	b.n	8007870 <putc_bfd+0x5e>
 800786c:	f04f 33ff 	mov.w	r3, #4294967295
 8007870:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	609a      	str	r2, [r3, #8]
 8007882:	e000      	b.n	8007886 <putc_bfd+0x74>
	if (i < 0) return;
 8007884:	bf00      	nop
}
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	db16      	blt.n	80078ca <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6818      	ldr	r0, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f103 010c 	add.w	r1, r3, #12
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	461a      	mov	r2, r3
 80078ac:	f107 030c 	add.w	r3, r7, #12
 80078b0:	f7ff fc81 	bl	80071b6 <f_write>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d107      	bne.n	80078ca <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d102      	bne.n	80078ca <putc_flush+0x3e>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	e001      	b.n	80078ce <putc_flush+0x42>
	return EOF;
 80078ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	605a      	str	r2, [r3, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	609a      	str	r2, [r3, #8]
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b096      	sub	sp, #88	; 0x58
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800790a:	f107 030c 	add.w	r3, r7, #12
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	4618      	mov	r0, r3
 8007912:	f7ff ffe0 	bl	80078d6 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007916:	e009      	b.n	800792c <f_puts+0x2c>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	607a      	str	r2, [r7, #4]
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	f107 030c 	add.w	r3, r7, #12
 8007924:	4611      	mov	r1, r2
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff ff73 	bl	8007812 <putc_bfd>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1f1      	bne.n	8007918 <f_puts+0x18>
	return putc_flush(&pb);
 8007934:	f107 030c 	add.w	r3, r7, #12
 8007938:	4618      	mov	r0, r3
 800793a:	f7ff ffa7 	bl	800788c <putc_flush>
 800793e:	4603      	mov	r3, r0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3758      	adds	r7, #88	; 0x58
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	4613      	mov	r3, r2
 8007954:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007956:	2301      	movs	r3, #1
 8007958:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800795e:	4b1f      	ldr	r3, [pc, #124]	; (80079dc <FATFS_LinkDriverEx+0x94>)
 8007960:	7a5b      	ldrb	r3, [r3, #9]
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d131      	bne.n	80079cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007968:	4b1c      	ldr	r3, [pc, #112]	; (80079dc <FATFS_LinkDriverEx+0x94>)
 800796a:	7a5b      	ldrb	r3, [r3, #9]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	461a      	mov	r2, r3
 8007970:	4b1a      	ldr	r3, [pc, #104]	; (80079dc <FATFS_LinkDriverEx+0x94>)
 8007972:	2100      	movs	r1, #0
 8007974:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007976:	4b19      	ldr	r3, [pc, #100]	; (80079dc <FATFS_LinkDriverEx+0x94>)
 8007978:	7a5b      	ldrb	r3, [r3, #9]
 800797a:	b2db      	uxtb	r3, r3
 800797c:	4a17      	ldr	r2, [pc, #92]	; (80079dc <FATFS_LinkDriverEx+0x94>)
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007986:	4b15      	ldr	r3, [pc, #84]	; (80079dc <FATFS_LinkDriverEx+0x94>)
 8007988:	7a5b      	ldrb	r3, [r3, #9]
 800798a:	b2db      	uxtb	r3, r3
 800798c:	461a      	mov	r2, r3
 800798e:	4b13      	ldr	r3, [pc, #76]	; (80079dc <FATFS_LinkDriverEx+0x94>)
 8007990:	4413      	add	r3, r2
 8007992:	79fa      	ldrb	r2, [r7, #7]
 8007994:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007996:	4b11      	ldr	r3, [pc, #68]	; (80079dc <FATFS_LinkDriverEx+0x94>)
 8007998:	7a5b      	ldrb	r3, [r3, #9]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	b2d1      	uxtb	r1, r2
 80079a0:	4a0e      	ldr	r2, [pc, #56]	; (80079dc <FATFS_LinkDriverEx+0x94>)
 80079a2:	7251      	strb	r1, [r2, #9]
 80079a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80079a6:	7dbb      	ldrb	r3, [r7, #22]
 80079a8:	3330      	adds	r3, #48	; 0x30
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	3301      	adds	r3, #1
 80079b4:	223a      	movs	r2, #58	; 0x3a
 80079b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	3302      	adds	r3, #2
 80079bc:	222f      	movs	r2, #47	; 0x2f
 80079be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	3303      	adds	r3, #3
 80079c4:	2200      	movs	r2, #0
 80079c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	200004fc 	.word	0x200004fc

080079e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80079ea:	2200      	movs	r2, #0
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7ff ffaa 	bl	8007948 <FATFS_LinkDriverEx>
 80079f4:	4603      	mov	r3, r0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	6039      	str	r1, [r7, #0]
 8007a0a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007a0c:	88fb      	ldrh	r3, [r7, #6]
 8007a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8007a10:	d802      	bhi.n	8007a18 <ff_convert+0x18>
		c = chr;
 8007a12:	88fb      	ldrh	r3, [r7, #6]
 8007a14:	81fb      	strh	r3, [r7, #14]
 8007a16:	e025      	b.n	8007a64 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00b      	beq.n	8007a36 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007a1e:	88fb      	ldrh	r3, [r7, #6]
 8007a20:	2bff      	cmp	r3, #255	; 0xff
 8007a22:	d805      	bhi.n	8007a30 <ff_convert+0x30>
 8007a24:	88fb      	ldrh	r3, [r7, #6]
 8007a26:	3b80      	subs	r3, #128	; 0x80
 8007a28:	4a12      	ldr	r2, [pc, #72]	; (8007a74 <ff_convert+0x74>)
 8007a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a2e:	e000      	b.n	8007a32 <ff_convert+0x32>
 8007a30:	2300      	movs	r3, #0
 8007a32:	81fb      	strh	r3, [r7, #14]
 8007a34:	e016      	b.n	8007a64 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007a36:	2300      	movs	r3, #0
 8007a38:	81fb      	strh	r3, [r7, #14]
 8007a3a:	e009      	b.n	8007a50 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007a3c:	89fb      	ldrh	r3, [r7, #14]
 8007a3e:	4a0d      	ldr	r2, [pc, #52]	; (8007a74 <ff_convert+0x74>)
 8007a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a44:	88fa      	ldrh	r2, [r7, #6]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d006      	beq.n	8007a58 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007a4a:	89fb      	ldrh	r3, [r7, #14]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	81fb      	strh	r3, [r7, #14]
 8007a50:	89fb      	ldrh	r3, [r7, #14]
 8007a52:	2b7f      	cmp	r3, #127	; 0x7f
 8007a54:	d9f2      	bls.n	8007a3c <ff_convert+0x3c>
 8007a56:	e000      	b.n	8007a5a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007a58:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007a5a:	89fb      	ldrh	r3, [r7, #14]
 8007a5c:	3380      	adds	r3, #128	; 0x80
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007a64:	89fb      	ldrh	r3, [r7, #14]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	0800c86c 	.word	0x0800c86c

08007a78 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007a82:	88fb      	ldrh	r3, [r7, #6]
 8007a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a88:	d201      	bcs.n	8007a8e <ff_wtoupper+0x16>
 8007a8a:	4b3e      	ldr	r3, [pc, #248]	; (8007b84 <ff_wtoupper+0x10c>)
 8007a8c:	e000      	b.n	8007a90 <ff_wtoupper+0x18>
 8007a8e:	4b3e      	ldr	r3, [pc, #248]	; (8007b88 <ff_wtoupper+0x110>)
 8007a90:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	1c9a      	adds	r2, r3, #2
 8007a96:	617a      	str	r2, [r7, #20]
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007a9c:	8a7b      	ldrh	r3, [r7, #18]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d068      	beq.n	8007b74 <ff_wtoupper+0xfc>
 8007aa2:	88fa      	ldrh	r2, [r7, #6]
 8007aa4:	8a7b      	ldrh	r3, [r7, #18]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d364      	bcc.n	8007b74 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	1c9a      	adds	r2, r3, #2
 8007aae:	617a      	str	r2, [r7, #20]
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	823b      	strh	r3, [r7, #16]
 8007ab4:	8a3b      	ldrh	r3, [r7, #16]
 8007ab6:	0a1b      	lsrs	r3, r3, #8
 8007ab8:	81fb      	strh	r3, [r7, #14]
 8007aba:	8a3b      	ldrh	r3, [r7, #16]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007ac0:	88fa      	ldrh	r2, [r7, #6]
 8007ac2:	8a79      	ldrh	r1, [r7, #18]
 8007ac4:	8a3b      	ldrh	r3, [r7, #16]
 8007ac6:	440b      	add	r3, r1
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	da49      	bge.n	8007b60 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007acc:	89fb      	ldrh	r3, [r7, #14]
 8007ace:	2b08      	cmp	r3, #8
 8007ad0:	d84f      	bhi.n	8007b72 <ff_wtoupper+0xfa>
 8007ad2:	a201      	add	r2, pc, #4	; (adr r2, 8007ad8 <ff_wtoupper+0x60>)
 8007ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad8:	08007afd 	.word	0x08007afd
 8007adc:	08007b0f 	.word	0x08007b0f
 8007ae0:	08007b25 	.word	0x08007b25
 8007ae4:	08007b2d 	.word	0x08007b2d
 8007ae8:	08007b35 	.word	0x08007b35
 8007aec:	08007b3d 	.word	0x08007b3d
 8007af0:	08007b45 	.word	0x08007b45
 8007af4:	08007b4d 	.word	0x08007b4d
 8007af8:	08007b55 	.word	0x08007b55
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007afc:	88fa      	ldrh	r2, [r7, #6]
 8007afe:	8a7b      	ldrh	r3, [r7, #18]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	4413      	add	r3, r2
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	80fb      	strh	r3, [r7, #6]
 8007b0c:	e027      	b.n	8007b5e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007b0e:	88fa      	ldrh	r2, [r7, #6]
 8007b10:	8a7b      	ldrh	r3, [r7, #18]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	88fa      	ldrh	r2, [r7, #6]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	80fb      	strh	r3, [r7, #6]
 8007b22:	e01c      	b.n	8007b5e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007b24:	88fb      	ldrh	r3, [r7, #6]
 8007b26:	3b10      	subs	r3, #16
 8007b28:	80fb      	strh	r3, [r7, #6]
 8007b2a:	e018      	b.n	8007b5e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
 8007b2e:	3b20      	subs	r3, #32
 8007b30:	80fb      	strh	r3, [r7, #6]
 8007b32:	e014      	b.n	8007b5e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007b34:	88fb      	ldrh	r3, [r7, #6]
 8007b36:	3b30      	subs	r3, #48	; 0x30
 8007b38:	80fb      	strh	r3, [r7, #6]
 8007b3a:	e010      	b.n	8007b5e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007b3c:	88fb      	ldrh	r3, [r7, #6]
 8007b3e:	3b1a      	subs	r3, #26
 8007b40:	80fb      	strh	r3, [r7, #6]
 8007b42:	e00c      	b.n	8007b5e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007b44:	88fb      	ldrh	r3, [r7, #6]
 8007b46:	3308      	adds	r3, #8
 8007b48:	80fb      	strh	r3, [r7, #6]
 8007b4a:	e008      	b.n	8007b5e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007b4c:	88fb      	ldrh	r3, [r7, #6]
 8007b4e:	3b50      	subs	r3, #80	; 0x50
 8007b50:	80fb      	strh	r3, [r7, #6]
 8007b52:	e004      	b.n	8007b5e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007b54:	88fb      	ldrh	r3, [r7, #6]
 8007b56:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007b5a:	80fb      	strh	r3, [r7, #6]
 8007b5c:	bf00      	nop
			}
			break;
 8007b5e:	e008      	b.n	8007b72 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007b60:	89fb      	ldrh	r3, [r7, #14]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d195      	bne.n	8007a92 <ff_wtoupper+0x1a>
 8007b66:	8a3b      	ldrh	r3, [r7, #16]
 8007b68:	005b      	lsls	r3, r3, #1
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007b70:	e78f      	b.n	8007a92 <ff_wtoupper+0x1a>
			break;
 8007b72:	bf00      	nop
	}

	return chr;
 8007b74:	88fb      	ldrh	r3, [r7, #6]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	371c      	adds	r7, #28
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	0800c96c 	.word	0x0800c96c
 8007b88:	0800cb60 	.word	0x0800cb60

08007b8c <__cvt>:
 8007b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b8e:	ed2d 8b02 	vpush	{d8}
 8007b92:	eeb0 8b40 	vmov.f64	d8, d0
 8007b96:	b085      	sub	sp, #20
 8007b98:	4617      	mov	r7, r2
 8007b9a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007b9c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b9e:	ee18 2a90 	vmov	r2, s17
 8007ba2:	f025 0520 	bic.w	r5, r5, #32
 8007ba6:	2a00      	cmp	r2, #0
 8007ba8:	bfb6      	itet	lt
 8007baa:	222d      	movlt	r2, #45	; 0x2d
 8007bac:	2200      	movge	r2, #0
 8007bae:	eeb1 8b40 	vneglt.f64	d8, d0
 8007bb2:	2d46      	cmp	r5, #70	; 0x46
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	701a      	strb	r2, [r3, #0]
 8007bb8:	d004      	beq.n	8007bc4 <__cvt+0x38>
 8007bba:	2d45      	cmp	r5, #69	; 0x45
 8007bbc:	d100      	bne.n	8007bc0 <__cvt+0x34>
 8007bbe:	3401      	adds	r4, #1
 8007bc0:	2102      	movs	r1, #2
 8007bc2:	e000      	b.n	8007bc6 <__cvt+0x3a>
 8007bc4:	2103      	movs	r1, #3
 8007bc6:	ab03      	add	r3, sp, #12
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	ab02      	add	r3, sp, #8
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	4622      	mov	r2, r4
 8007bd0:	4633      	mov	r3, r6
 8007bd2:	eeb0 0b48 	vmov.f64	d0, d8
 8007bd6:	f001 f84f 	bl	8008c78 <_dtoa_r>
 8007bda:	2d47      	cmp	r5, #71	; 0x47
 8007bdc:	d101      	bne.n	8007be2 <__cvt+0x56>
 8007bde:	07fb      	lsls	r3, r7, #31
 8007be0:	d51a      	bpl.n	8007c18 <__cvt+0x8c>
 8007be2:	2d46      	cmp	r5, #70	; 0x46
 8007be4:	eb00 0204 	add.w	r2, r0, r4
 8007be8:	d10c      	bne.n	8007c04 <__cvt+0x78>
 8007bea:	7803      	ldrb	r3, [r0, #0]
 8007bec:	2b30      	cmp	r3, #48	; 0x30
 8007bee:	d107      	bne.n	8007c00 <__cvt+0x74>
 8007bf0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf8:	bf1c      	itt	ne
 8007bfa:	f1c4 0401 	rsbne	r4, r4, #1
 8007bfe:	6034      	strne	r4, [r6, #0]
 8007c00:	6833      	ldr	r3, [r6, #0]
 8007c02:	441a      	add	r2, r3
 8007c04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c0c:	bf08      	it	eq
 8007c0e:	9203      	streq	r2, [sp, #12]
 8007c10:	2130      	movs	r1, #48	; 0x30
 8007c12:	9b03      	ldr	r3, [sp, #12]
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d307      	bcc.n	8007c28 <__cvt+0x9c>
 8007c18:	9b03      	ldr	r3, [sp, #12]
 8007c1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c1c:	1a1b      	subs	r3, r3, r0
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	b005      	add	sp, #20
 8007c22:	ecbd 8b02 	vpop	{d8}
 8007c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c28:	1c5c      	adds	r4, r3, #1
 8007c2a:	9403      	str	r4, [sp, #12]
 8007c2c:	7019      	strb	r1, [r3, #0]
 8007c2e:	e7f0      	b.n	8007c12 <__cvt+0x86>

08007c30 <__exponent>:
 8007c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c32:	4603      	mov	r3, r0
 8007c34:	2900      	cmp	r1, #0
 8007c36:	bfb8      	it	lt
 8007c38:	4249      	neglt	r1, r1
 8007c3a:	f803 2b02 	strb.w	r2, [r3], #2
 8007c3e:	bfb4      	ite	lt
 8007c40:	222d      	movlt	r2, #45	; 0x2d
 8007c42:	222b      	movge	r2, #43	; 0x2b
 8007c44:	2909      	cmp	r1, #9
 8007c46:	7042      	strb	r2, [r0, #1]
 8007c48:	dd2a      	ble.n	8007ca0 <__exponent+0x70>
 8007c4a:	f10d 0207 	add.w	r2, sp, #7
 8007c4e:	4617      	mov	r7, r2
 8007c50:	260a      	movs	r6, #10
 8007c52:	4694      	mov	ip, r2
 8007c54:	fb91 f5f6 	sdiv	r5, r1, r6
 8007c58:	fb06 1415 	mls	r4, r6, r5, r1
 8007c5c:	3430      	adds	r4, #48	; 0x30
 8007c5e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007c62:	460c      	mov	r4, r1
 8007c64:	2c63      	cmp	r4, #99	; 0x63
 8007c66:	f102 32ff 	add.w	r2, r2, #4294967295
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	dcf1      	bgt.n	8007c52 <__exponent+0x22>
 8007c6e:	3130      	adds	r1, #48	; 0x30
 8007c70:	f1ac 0402 	sub.w	r4, ip, #2
 8007c74:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007c78:	1c41      	adds	r1, r0, #1
 8007c7a:	4622      	mov	r2, r4
 8007c7c:	42ba      	cmp	r2, r7
 8007c7e:	d30a      	bcc.n	8007c96 <__exponent+0x66>
 8007c80:	f10d 0209 	add.w	r2, sp, #9
 8007c84:	eba2 020c 	sub.w	r2, r2, ip
 8007c88:	42bc      	cmp	r4, r7
 8007c8a:	bf88      	it	hi
 8007c8c:	2200      	movhi	r2, #0
 8007c8e:	4413      	add	r3, r2
 8007c90:	1a18      	subs	r0, r3, r0
 8007c92:	b003      	add	sp, #12
 8007c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c96:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007c9a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007c9e:	e7ed      	b.n	8007c7c <__exponent+0x4c>
 8007ca0:	2330      	movs	r3, #48	; 0x30
 8007ca2:	3130      	adds	r1, #48	; 0x30
 8007ca4:	7083      	strb	r3, [r0, #2]
 8007ca6:	70c1      	strb	r1, [r0, #3]
 8007ca8:	1d03      	adds	r3, r0, #4
 8007caa:	e7f1      	b.n	8007c90 <__exponent+0x60>
 8007cac:	0000      	movs	r0, r0
	...

08007cb0 <_printf_float>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	b08b      	sub	sp, #44	; 0x2c
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007cbc:	4616      	mov	r6, r2
 8007cbe:	461f      	mov	r7, r3
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	f000 fed1 	bl	8008a68 <_localeconv_r>
 8007cc6:	f8d0 b000 	ldr.w	fp, [r0]
 8007cca:	4658      	mov	r0, fp
 8007ccc:	f7f8 fb08 	bl	80002e0 <strlen>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	9308      	str	r3, [sp, #32]
 8007cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8007cd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007cdc:	6822      	ldr	r2, [r4, #0]
 8007cde:	3307      	adds	r3, #7
 8007ce0:	f023 0307 	bic.w	r3, r3, #7
 8007ce4:	f103 0108 	add.w	r1, r3, #8
 8007ce8:	f8c8 1000 	str.w	r1, [r8]
 8007cec:	ed93 0b00 	vldr	d0, [r3]
 8007cf0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8007f50 <_printf_float+0x2a0>
 8007cf4:	eeb0 7bc0 	vabs.f64	d7, d0
 8007cf8:	eeb4 7b46 	vcmp.f64	d7, d6
 8007cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d00:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8007d04:	4682      	mov	sl, r0
 8007d06:	dd24      	ble.n	8007d52 <_printf_float+0xa2>
 8007d08:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d10:	d502      	bpl.n	8007d18 <_printf_float+0x68>
 8007d12:	232d      	movs	r3, #45	; 0x2d
 8007d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d18:	498f      	ldr	r1, [pc, #572]	; (8007f58 <_printf_float+0x2a8>)
 8007d1a:	4b90      	ldr	r3, [pc, #576]	; (8007f5c <_printf_float+0x2ac>)
 8007d1c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007d20:	bf94      	ite	ls
 8007d22:	4688      	movls	r8, r1
 8007d24:	4698      	movhi	r8, r3
 8007d26:	2303      	movs	r3, #3
 8007d28:	6123      	str	r3, [r4, #16]
 8007d2a:	f022 0204 	bic.w	r2, r2, #4
 8007d2e:	2300      	movs	r3, #0
 8007d30:	6022      	str	r2, [r4, #0]
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	9700      	str	r7, [sp, #0]
 8007d36:	4633      	mov	r3, r6
 8007d38:	aa09      	add	r2, sp, #36	; 0x24
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f000 f9d1 	bl	80080e4 <_printf_common>
 8007d42:	3001      	adds	r0, #1
 8007d44:	f040 808a 	bne.w	8007e5c <_printf_float+0x1ac>
 8007d48:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4c:	b00b      	add	sp, #44	; 0x2c
 8007d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d52:	eeb4 0b40 	vcmp.f64	d0, d0
 8007d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d5a:	d709      	bvc.n	8007d70 <_printf_float+0xc0>
 8007d5c:	ee10 3a90 	vmov	r3, s1
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bfbc      	itt	lt
 8007d64:	232d      	movlt	r3, #45	; 0x2d
 8007d66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d6a:	497d      	ldr	r1, [pc, #500]	; (8007f60 <_printf_float+0x2b0>)
 8007d6c:	4b7d      	ldr	r3, [pc, #500]	; (8007f64 <_printf_float+0x2b4>)
 8007d6e:	e7d5      	b.n	8007d1c <_printf_float+0x6c>
 8007d70:	6863      	ldr	r3, [r4, #4]
 8007d72:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007d76:	9104      	str	r1, [sp, #16]
 8007d78:	1c59      	adds	r1, r3, #1
 8007d7a:	d13c      	bne.n	8007df6 <_printf_float+0x146>
 8007d7c:	2306      	movs	r3, #6
 8007d7e:	6063      	str	r3, [r4, #4]
 8007d80:	2300      	movs	r3, #0
 8007d82:	9303      	str	r3, [sp, #12]
 8007d84:	ab08      	add	r3, sp, #32
 8007d86:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007d8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d8e:	ab07      	add	r3, sp, #28
 8007d90:	6861      	ldr	r1, [r4, #4]
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	6022      	str	r2, [r4, #0]
 8007d96:	f10d 031b 	add.w	r3, sp, #27
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f7ff fef6 	bl	8007b8c <__cvt>
 8007da0:	9b04      	ldr	r3, [sp, #16]
 8007da2:	9907      	ldr	r1, [sp, #28]
 8007da4:	2b47      	cmp	r3, #71	; 0x47
 8007da6:	4680      	mov	r8, r0
 8007da8:	d108      	bne.n	8007dbc <_printf_float+0x10c>
 8007daa:	1cc8      	adds	r0, r1, #3
 8007dac:	db02      	blt.n	8007db4 <_printf_float+0x104>
 8007dae:	6863      	ldr	r3, [r4, #4]
 8007db0:	4299      	cmp	r1, r3
 8007db2:	dd41      	ble.n	8007e38 <_printf_float+0x188>
 8007db4:	f1a9 0902 	sub.w	r9, r9, #2
 8007db8:	fa5f f989 	uxtb.w	r9, r9
 8007dbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007dc0:	d820      	bhi.n	8007e04 <_printf_float+0x154>
 8007dc2:	3901      	subs	r1, #1
 8007dc4:	464a      	mov	r2, r9
 8007dc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007dca:	9107      	str	r1, [sp, #28]
 8007dcc:	f7ff ff30 	bl	8007c30 <__exponent>
 8007dd0:	9a08      	ldr	r2, [sp, #32]
 8007dd2:	9004      	str	r0, [sp, #16]
 8007dd4:	1813      	adds	r3, r2, r0
 8007dd6:	2a01      	cmp	r2, #1
 8007dd8:	6123      	str	r3, [r4, #16]
 8007dda:	dc02      	bgt.n	8007de2 <_printf_float+0x132>
 8007ddc:	6822      	ldr	r2, [r4, #0]
 8007dde:	07d2      	lsls	r2, r2, #31
 8007de0:	d501      	bpl.n	8007de6 <_printf_float+0x136>
 8007de2:	3301      	adds	r3, #1
 8007de4:	6123      	str	r3, [r4, #16]
 8007de6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0a2      	beq.n	8007d34 <_printf_float+0x84>
 8007dee:	232d      	movs	r3, #45	; 0x2d
 8007df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007df4:	e79e      	b.n	8007d34 <_printf_float+0x84>
 8007df6:	9904      	ldr	r1, [sp, #16]
 8007df8:	2947      	cmp	r1, #71	; 0x47
 8007dfa:	d1c1      	bne.n	8007d80 <_printf_float+0xd0>
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1bf      	bne.n	8007d80 <_printf_float+0xd0>
 8007e00:	2301      	movs	r3, #1
 8007e02:	e7bc      	b.n	8007d7e <_printf_float+0xce>
 8007e04:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007e08:	d118      	bne.n	8007e3c <_printf_float+0x18c>
 8007e0a:	2900      	cmp	r1, #0
 8007e0c:	6863      	ldr	r3, [r4, #4]
 8007e0e:	dd0b      	ble.n	8007e28 <_printf_float+0x178>
 8007e10:	6121      	str	r1, [r4, #16]
 8007e12:	b913      	cbnz	r3, 8007e1a <_printf_float+0x16a>
 8007e14:	6822      	ldr	r2, [r4, #0]
 8007e16:	07d0      	lsls	r0, r2, #31
 8007e18:	d502      	bpl.n	8007e20 <_printf_float+0x170>
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	440b      	add	r3, r1
 8007e1e:	6123      	str	r3, [r4, #16]
 8007e20:	2300      	movs	r3, #0
 8007e22:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e24:	9304      	str	r3, [sp, #16]
 8007e26:	e7de      	b.n	8007de6 <_printf_float+0x136>
 8007e28:	b913      	cbnz	r3, 8007e30 <_printf_float+0x180>
 8007e2a:	6822      	ldr	r2, [r4, #0]
 8007e2c:	07d2      	lsls	r2, r2, #31
 8007e2e:	d501      	bpl.n	8007e34 <_printf_float+0x184>
 8007e30:	3302      	adds	r3, #2
 8007e32:	e7f4      	b.n	8007e1e <_printf_float+0x16e>
 8007e34:	2301      	movs	r3, #1
 8007e36:	e7f2      	b.n	8007e1e <_printf_float+0x16e>
 8007e38:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007e3c:	9b08      	ldr	r3, [sp, #32]
 8007e3e:	4299      	cmp	r1, r3
 8007e40:	db05      	blt.n	8007e4e <_printf_float+0x19e>
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	6121      	str	r1, [r4, #16]
 8007e46:	07d8      	lsls	r0, r3, #31
 8007e48:	d5ea      	bpl.n	8007e20 <_printf_float+0x170>
 8007e4a:	1c4b      	adds	r3, r1, #1
 8007e4c:	e7e7      	b.n	8007e1e <_printf_float+0x16e>
 8007e4e:	2900      	cmp	r1, #0
 8007e50:	bfd4      	ite	le
 8007e52:	f1c1 0202 	rsble	r2, r1, #2
 8007e56:	2201      	movgt	r2, #1
 8007e58:	4413      	add	r3, r2
 8007e5a:	e7e0      	b.n	8007e1e <_printf_float+0x16e>
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	055a      	lsls	r2, r3, #21
 8007e60:	d407      	bmi.n	8007e72 <_printf_float+0x1c2>
 8007e62:	6923      	ldr	r3, [r4, #16]
 8007e64:	4642      	mov	r2, r8
 8007e66:	4631      	mov	r1, r6
 8007e68:	4628      	mov	r0, r5
 8007e6a:	47b8      	blx	r7
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d12a      	bne.n	8007ec6 <_printf_float+0x216>
 8007e70:	e76a      	b.n	8007d48 <_printf_float+0x98>
 8007e72:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007e76:	f240 80e0 	bls.w	800803a <_printf_float+0x38a>
 8007e7a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007e7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e86:	d133      	bne.n	8007ef0 <_printf_float+0x240>
 8007e88:	4a37      	ldr	r2, [pc, #220]	; (8007f68 <_printf_float+0x2b8>)
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4628      	mov	r0, r5
 8007e90:	47b8      	blx	r7
 8007e92:	3001      	adds	r0, #1
 8007e94:	f43f af58 	beq.w	8007d48 <_printf_float+0x98>
 8007e98:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	db02      	blt.n	8007ea6 <_printf_float+0x1f6>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	07d8      	lsls	r0, r3, #31
 8007ea4:	d50f      	bpl.n	8007ec6 <_printf_float+0x216>
 8007ea6:	4653      	mov	r3, sl
 8007ea8:	465a      	mov	r2, fp
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4628      	mov	r0, r5
 8007eae:	47b8      	blx	r7
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	f43f af49 	beq.w	8007d48 <_printf_float+0x98>
 8007eb6:	f04f 0800 	mov.w	r8, #0
 8007eba:	f104 091a 	add.w	r9, r4, #26
 8007ebe:	9b08      	ldr	r3, [sp, #32]
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	4543      	cmp	r3, r8
 8007ec4:	dc09      	bgt.n	8007eda <_printf_float+0x22a>
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	079b      	lsls	r3, r3, #30
 8007eca:	f100 8106 	bmi.w	80080da <_printf_float+0x42a>
 8007ece:	68e0      	ldr	r0, [r4, #12]
 8007ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed2:	4298      	cmp	r0, r3
 8007ed4:	bfb8      	it	lt
 8007ed6:	4618      	movlt	r0, r3
 8007ed8:	e738      	b.n	8007d4c <_printf_float+0x9c>
 8007eda:	2301      	movs	r3, #1
 8007edc:	464a      	mov	r2, r9
 8007ede:	4631      	mov	r1, r6
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	47b8      	blx	r7
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	f43f af2f 	beq.w	8007d48 <_printf_float+0x98>
 8007eea:	f108 0801 	add.w	r8, r8, #1
 8007eee:	e7e6      	b.n	8007ebe <_printf_float+0x20e>
 8007ef0:	9b07      	ldr	r3, [sp, #28]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	dc3a      	bgt.n	8007f6c <_printf_float+0x2bc>
 8007ef6:	4a1c      	ldr	r2, [pc, #112]	; (8007f68 <_printf_float+0x2b8>)
 8007ef8:	2301      	movs	r3, #1
 8007efa:	4631      	mov	r1, r6
 8007efc:	4628      	mov	r0, r5
 8007efe:	47b8      	blx	r7
 8007f00:	3001      	adds	r0, #1
 8007f02:	f43f af21 	beq.w	8007d48 <_printf_float+0x98>
 8007f06:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	d102      	bne.n	8007f14 <_printf_float+0x264>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	07d9      	lsls	r1, r3, #31
 8007f12:	d5d8      	bpl.n	8007ec6 <_printf_float+0x216>
 8007f14:	4653      	mov	r3, sl
 8007f16:	465a      	mov	r2, fp
 8007f18:	4631      	mov	r1, r6
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	47b8      	blx	r7
 8007f1e:	3001      	adds	r0, #1
 8007f20:	f43f af12 	beq.w	8007d48 <_printf_float+0x98>
 8007f24:	f04f 0900 	mov.w	r9, #0
 8007f28:	f104 0a1a 	add.w	sl, r4, #26
 8007f2c:	9b07      	ldr	r3, [sp, #28]
 8007f2e:	425b      	negs	r3, r3
 8007f30:	454b      	cmp	r3, r9
 8007f32:	dc01      	bgt.n	8007f38 <_printf_float+0x288>
 8007f34:	9b08      	ldr	r3, [sp, #32]
 8007f36:	e795      	b.n	8007e64 <_printf_float+0x1b4>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	4631      	mov	r1, r6
 8007f3e:	4628      	mov	r0, r5
 8007f40:	47b8      	blx	r7
 8007f42:	3001      	adds	r0, #1
 8007f44:	f43f af00 	beq.w	8007d48 <_printf_float+0x98>
 8007f48:	f109 0901 	add.w	r9, r9, #1
 8007f4c:	e7ee      	b.n	8007f2c <_printf_float+0x27c>
 8007f4e:	bf00      	nop
 8007f50:	ffffffff 	.word	0xffffffff
 8007f54:	7fefffff 	.word	0x7fefffff
 8007f58:	0800cc1c 	.word	0x0800cc1c
 8007f5c:	0800cc20 	.word	0x0800cc20
 8007f60:	0800cc24 	.word	0x0800cc24
 8007f64:	0800cc28 	.word	0x0800cc28
 8007f68:	0800cc2c 	.word	0x0800cc2c
 8007f6c:	9a08      	ldr	r2, [sp, #32]
 8007f6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f70:	429a      	cmp	r2, r3
 8007f72:	bfa8      	it	ge
 8007f74:	461a      	movge	r2, r3
 8007f76:	2a00      	cmp	r2, #0
 8007f78:	4691      	mov	r9, r2
 8007f7a:	dc38      	bgt.n	8007fee <_printf_float+0x33e>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9305      	str	r3, [sp, #20]
 8007f80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f84:	f104 021a 	add.w	r2, r4, #26
 8007f88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f8a:	9905      	ldr	r1, [sp, #20]
 8007f8c:	9304      	str	r3, [sp, #16]
 8007f8e:	eba3 0309 	sub.w	r3, r3, r9
 8007f92:	428b      	cmp	r3, r1
 8007f94:	dc33      	bgt.n	8007ffe <_printf_float+0x34e>
 8007f96:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	db3c      	blt.n	8008018 <_printf_float+0x368>
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	07da      	lsls	r2, r3, #31
 8007fa2:	d439      	bmi.n	8008018 <_printf_float+0x368>
 8007fa4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007fa8:	eba2 0903 	sub.w	r9, r2, r3
 8007fac:	9b04      	ldr	r3, [sp, #16]
 8007fae:	1ad2      	subs	r2, r2, r3
 8007fb0:	4591      	cmp	r9, r2
 8007fb2:	bfa8      	it	ge
 8007fb4:	4691      	movge	r9, r2
 8007fb6:	f1b9 0f00 	cmp.w	r9, #0
 8007fba:	dc35      	bgt.n	8008028 <_printf_float+0x378>
 8007fbc:	f04f 0800 	mov.w	r8, #0
 8007fc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fc4:	f104 0a1a 	add.w	sl, r4, #26
 8007fc8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007fcc:	1a9b      	subs	r3, r3, r2
 8007fce:	eba3 0309 	sub.w	r3, r3, r9
 8007fd2:	4543      	cmp	r3, r8
 8007fd4:	f77f af77 	ble.w	8007ec6 <_printf_float+0x216>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	4652      	mov	r2, sl
 8007fdc:	4631      	mov	r1, r6
 8007fde:	4628      	mov	r0, r5
 8007fe0:	47b8      	blx	r7
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	f43f aeb0 	beq.w	8007d48 <_printf_float+0x98>
 8007fe8:	f108 0801 	add.w	r8, r8, #1
 8007fec:	e7ec      	b.n	8007fc8 <_printf_float+0x318>
 8007fee:	4613      	mov	r3, r2
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4642      	mov	r2, r8
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b8      	blx	r7
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d1bf      	bne.n	8007f7c <_printf_float+0x2cc>
 8007ffc:	e6a4      	b.n	8007d48 <_printf_float+0x98>
 8007ffe:	2301      	movs	r3, #1
 8008000:	4631      	mov	r1, r6
 8008002:	4628      	mov	r0, r5
 8008004:	9204      	str	r2, [sp, #16]
 8008006:	47b8      	blx	r7
 8008008:	3001      	adds	r0, #1
 800800a:	f43f ae9d 	beq.w	8007d48 <_printf_float+0x98>
 800800e:	9b05      	ldr	r3, [sp, #20]
 8008010:	9a04      	ldr	r2, [sp, #16]
 8008012:	3301      	adds	r3, #1
 8008014:	9305      	str	r3, [sp, #20]
 8008016:	e7b7      	b.n	8007f88 <_printf_float+0x2d8>
 8008018:	4653      	mov	r3, sl
 800801a:	465a      	mov	r2, fp
 800801c:	4631      	mov	r1, r6
 800801e:	4628      	mov	r0, r5
 8008020:	47b8      	blx	r7
 8008022:	3001      	adds	r0, #1
 8008024:	d1be      	bne.n	8007fa4 <_printf_float+0x2f4>
 8008026:	e68f      	b.n	8007d48 <_printf_float+0x98>
 8008028:	9a04      	ldr	r2, [sp, #16]
 800802a:	464b      	mov	r3, r9
 800802c:	4442      	add	r2, r8
 800802e:	4631      	mov	r1, r6
 8008030:	4628      	mov	r0, r5
 8008032:	47b8      	blx	r7
 8008034:	3001      	adds	r0, #1
 8008036:	d1c1      	bne.n	8007fbc <_printf_float+0x30c>
 8008038:	e686      	b.n	8007d48 <_printf_float+0x98>
 800803a:	9a08      	ldr	r2, [sp, #32]
 800803c:	2a01      	cmp	r2, #1
 800803e:	dc01      	bgt.n	8008044 <_printf_float+0x394>
 8008040:	07db      	lsls	r3, r3, #31
 8008042:	d537      	bpl.n	80080b4 <_printf_float+0x404>
 8008044:	2301      	movs	r3, #1
 8008046:	4642      	mov	r2, r8
 8008048:	4631      	mov	r1, r6
 800804a:	4628      	mov	r0, r5
 800804c:	47b8      	blx	r7
 800804e:	3001      	adds	r0, #1
 8008050:	f43f ae7a 	beq.w	8007d48 <_printf_float+0x98>
 8008054:	4653      	mov	r3, sl
 8008056:	465a      	mov	r2, fp
 8008058:	4631      	mov	r1, r6
 800805a:	4628      	mov	r0, r5
 800805c:	47b8      	blx	r7
 800805e:	3001      	adds	r0, #1
 8008060:	f43f ae72 	beq.w	8007d48 <_printf_float+0x98>
 8008064:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008068:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800806c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008070:	9b08      	ldr	r3, [sp, #32]
 8008072:	d01a      	beq.n	80080aa <_printf_float+0x3fa>
 8008074:	3b01      	subs	r3, #1
 8008076:	f108 0201 	add.w	r2, r8, #1
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	47b8      	blx	r7
 8008080:	3001      	adds	r0, #1
 8008082:	d10e      	bne.n	80080a2 <_printf_float+0x3f2>
 8008084:	e660      	b.n	8007d48 <_printf_float+0x98>
 8008086:	2301      	movs	r3, #1
 8008088:	464a      	mov	r2, r9
 800808a:	4631      	mov	r1, r6
 800808c:	4628      	mov	r0, r5
 800808e:	47b8      	blx	r7
 8008090:	3001      	adds	r0, #1
 8008092:	f43f ae59 	beq.w	8007d48 <_printf_float+0x98>
 8008096:	f108 0801 	add.w	r8, r8, #1
 800809a:	9b08      	ldr	r3, [sp, #32]
 800809c:	3b01      	subs	r3, #1
 800809e:	4543      	cmp	r3, r8
 80080a0:	dcf1      	bgt.n	8008086 <_printf_float+0x3d6>
 80080a2:	9b04      	ldr	r3, [sp, #16]
 80080a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080a8:	e6dd      	b.n	8007e66 <_printf_float+0x1b6>
 80080aa:	f04f 0800 	mov.w	r8, #0
 80080ae:	f104 091a 	add.w	r9, r4, #26
 80080b2:	e7f2      	b.n	800809a <_printf_float+0x3ea>
 80080b4:	2301      	movs	r3, #1
 80080b6:	4642      	mov	r2, r8
 80080b8:	e7df      	b.n	800807a <_printf_float+0x3ca>
 80080ba:	2301      	movs	r3, #1
 80080bc:	464a      	mov	r2, r9
 80080be:	4631      	mov	r1, r6
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b8      	blx	r7
 80080c4:	3001      	adds	r0, #1
 80080c6:	f43f ae3f 	beq.w	8007d48 <_printf_float+0x98>
 80080ca:	f108 0801 	add.w	r8, r8, #1
 80080ce:	68e3      	ldr	r3, [r4, #12]
 80080d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080d2:	1a5b      	subs	r3, r3, r1
 80080d4:	4543      	cmp	r3, r8
 80080d6:	dcf0      	bgt.n	80080ba <_printf_float+0x40a>
 80080d8:	e6f9      	b.n	8007ece <_printf_float+0x21e>
 80080da:	f04f 0800 	mov.w	r8, #0
 80080de:	f104 0919 	add.w	r9, r4, #25
 80080e2:	e7f4      	b.n	80080ce <_printf_float+0x41e>

080080e4 <_printf_common>:
 80080e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e8:	4616      	mov	r6, r2
 80080ea:	4699      	mov	r9, r3
 80080ec:	688a      	ldr	r2, [r1, #8]
 80080ee:	690b      	ldr	r3, [r1, #16]
 80080f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080f4:	4293      	cmp	r3, r2
 80080f6:	bfb8      	it	lt
 80080f8:	4613      	movlt	r3, r2
 80080fa:	6033      	str	r3, [r6, #0]
 80080fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008100:	4607      	mov	r7, r0
 8008102:	460c      	mov	r4, r1
 8008104:	b10a      	cbz	r2, 800810a <_printf_common+0x26>
 8008106:	3301      	adds	r3, #1
 8008108:	6033      	str	r3, [r6, #0]
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	0699      	lsls	r1, r3, #26
 800810e:	bf42      	ittt	mi
 8008110:	6833      	ldrmi	r3, [r6, #0]
 8008112:	3302      	addmi	r3, #2
 8008114:	6033      	strmi	r3, [r6, #0]
 8008116:	6825      	ldr	r5, [r4, #0]
 8008118:	f015 0506 	ands.w	r5, r5, #6
 800811c:	d106      	bne.n	800812c <_printf_common+0x48>
 800811e:	f104 0a19 	add.w	sl, r4, #25
 8008122:	68e3      	ldr	r3, [r4, #12]
 8008124:	6832      	ldr	r2, [r6, #0]
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	42ab      	cmp	r3, r5
 800812a:	dc26      	bgt.n	800817a <_printf_common+0x96>
 800812c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008130:	1e13      	subs	r3, r2, #0
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	bf18      	it	ne
 8008136:	2301      	movne	r3, #1
 8008138:	0692      	lsls	r2, r2, #26
 800813a:	d42b      	bmi.n	8008194 <_printf_common+0xb0>
 800813c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008140:	4649      	mov	r1, r9
 8008142:	4638      	mov	r0, r7
 8008144:	47c0      	blx	r8
 8008146:	3001      	adds	r0, #1
 8008148:	d01e      	beq.n	8008188 <_printf_common+0xa4>
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	6922      	ldr	r2, [r4, #16]
 800814e:	f003 0306 	and.w	r3, r3, #6
 8008152:	2b04      	cmp	r3, #4
 8008154:	bf02      	ittt	eq
 8008156:	68e5      	ldreq	r5, [r4, #12]
 8008158:	6833      	ldreq	r3, [r6, #0]
 800815a:	1aed      	subeq	r5, r5, r3
 800815c:	68a3      	ldr	r3, [r4, #8]
 800815e:	bf0c      	ite	eq
 8008160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008164:	2500      	movne	r5, #0
 8008166:	4293      	cmp	r3, r2
 8008168:	bfc4      	itt	gt
 800816a:	1a9b      	subgt	r3, r3, r2
 800816c:	18ed      	addgt	r5, r5, r3
 800816e:	2600      	movs	r6, #0
 8008170:	341a      	adds	r4, #26
 8008172:	42b5      	cmp	r5, r6
 8008174:	d11a      	bne.n	80081ac <_printf_common+0xc8>
 8008176:	2000      	movs	r0, #0
 8008178:	e008      	b.n	800818c <_printf_common+0xa8>
 800817a:	2301      	movs	r3, #1
 800817c:	4652      	mov	r2, sl
 800817e:	4649      	mov	r1, r9
 8008180:	4638      	mov	r0, r7
 8008182:	47c0      	blx	r8
 8008184:	3001      	adds	r0, #1
 8008186:	d103      	bne.n	8008190 <_printf_common+0xac>
 8008188:	f04f 30ff 	mov.w	r0, #4294967295
 800818c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008190:	3501      	adds	r5, #1
 8008192:	e7c6      	b.n	8008122 <_printf_common+0x3e>
 8008194:	18e1      	adds	r1, r4, r3
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	2030      	movs	r0, #48	; 0x30
 800819a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800819e:	4422      	add	r2, r4
 80081a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081a8:	3302      	adds	r3, #2
 80081aa:	e7c7      	b.n	800813c <_printf_common+0x58>
 80081ac:	2301      	movs	r3, #1
 80081ae:	4622      	mov	r2, r4
 80081b0:	4649      	mov	r1, r9
 80081b2:	4638      	mov	r0, r7
 80081b4:	47c0      	blx	r8
 80081b6:	3001      	adds	r0, #1
 80081b8:	d0e6      	beq.n	8008188 <_printf_common+0xa4>
 80081ba:	3601      	adds	r6, #1
 80081bc:	e7d9      	b.n	8008172 <_printf_common+0x8e>
	...

080081c0 <_printf_i>:
 80081c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081c4:	7e0f      	ldrb	r7, [r1, #24]
 80081c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081c8:	2f78      	cmp	r7, #120	; 0x78
 80081ca:	4691      	mov	r9, r2
 80081cc:	4680      	mov	r8, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	469a      	mov	sl, r3
 80081d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081d6:	d807      	bhi.n	80081e8 <_printf_i+0x28>
 80081d8:	2f62      	cmp	r7, #98	; 0x62
 80081da:	d80a      	bhi.n	80081f2 <_printf_i+0x32>
 80081dc:	2f00      	cmp	r7, #0
 80081de:	f000 80d4 	beq.w	800838a <_printf_i+0x1ca>
 80081e2:	2f58      	cmp	r7, #88	; 0x58
 80081e4:	f000 80c0 	beq.w	8008368 <_printf_i+0x1a8>
 80081e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081f0:	e03a      	b.n	8008268 <_printf_i+0xa8>
 80081f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081f6:	2b15      	cmp	r3, #21
 80081f8:	d8f6      	bhi.n	80081e8 <_printf_i+0x28>
 80081fa:	a101      	add	r1, pc, #4	; (adr r1, 8008200 <_printf_i+0x40>)
 80081fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008200:	08008259 	.word	0x08008259
 8008204:	0800826d 	.word	0x0800826d
 8008208:	080081e9 	.word	0x080081e9
 800820c:	080081e9 	.word	0x080081e9
 8008210:	080081e9 	.word	0x080081e9
 8008214:	080081e9 	.word	0x080081e9
 8008218:	0800826d 	.word	0x0800826d
 800821c:	080081e9 	.word	0x080081e9
 8008220:	080081e9 	.word	0x080081e9
 8008224:	080081e9 	.word	0x080081e9
 8008228:	080081e9 	.word	0x080081e9
 800822c:	08008371 	.word	0x08008371
 8008230:	08008299 	.word	0x08008299
 8008234:	0800832b 	.word	0x0800832b
 8008238:	080081e9 	.word	0x080081e9
 800823c:	080081e9 	.word	0x080081e9
 8008240:	08008393 	.word	0x08008393
 8008244:	080081e9 	.word	0x080081e9
 8008248:	08008299 	.word	0x08008299
 800824c:	080081e9 	.word	0x080081e9
 8008250:	080081e9 	.word	0x080081e9
 8008254:	08008333 	.word	0x08008333
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	1d1a      	adds	r2, r3, #4
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	602a      	str	r2, [r5, #0]
 8008260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008268:	2301      	movs	r3, #1
 800826a:	e09f      	b.n	80083ac <_printf_i+0x1ec>
 800826c:	6820      	ldr	r0, [r4, #0]
 800826e:	682b      	ldr	r3, [r5, #0]
 8008270:	0607      	lsls	r7, r0, #24
 8008272:	f103 0104 	add.w	r1, r3, #4
 8008276:	6029      	str	r1, [r5, #0]
 8008278:	d501      	bpl.n	800827e <_printf_i+0xbe>
 800827a:	681e      	ldr	r6, [r3, #0]
 800827c:	e003      	b.n	8008286 <_printf_i+0xc6>
 800827e:	0646      	lsls	r6, r0, #25
 8008280:	d5fb      	bpl.n	800827a <_printf_i+0xba>
 8008282:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008286:	2e00      	cmp	r6, #0
 8008288:	da03      	bge.n	8008292 <_printf_i+0xd2>
 800828a:	232d      	movs	r3, #45	; 0x2d
 800828c:	4276      	negs	r6, r6
 800828e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008292:	485a      	ldr	r0, [pc, #360]	; (80083fc <_printf_i+0x23c>)
 8008294:	230a      	movs	r3, #10
 8008296:	e012      	b.n	80082be <_printf_i+0xfe>
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	6820      	ldr	r0, [r4, #0]
 800829c:	1d19      	adds	r1, r3, #4
 800829e:	6029      	str	r1, [r5, #0]
 80082a0:	0605      	lsls	r5, r0, #24
 80082a2:	d501      	bpl.n	80082a8 <_printf_i+0xe8>
 80082a4:	681e      	ldr	r6, [r3, #0]
 80082a6:	e002      	b.n	80082ae <_printf_i+0xee>
 80082a8:	0641      	lsls	r1, r0, #25
 80082aa:	d5fb      	bpl.n	80082a4 <_printf_i+0xe4>
 80082ac:	881e      	ldrh	r6, [r3, #0]
 80082ae:	4853      	ldr	r0, [pc, #332]	; (80083fc <_printf_i+0x23c>)
 80082b0:	2f6f      	cmp	r7, #111	; 0x6f
 80082b2:	bf0c      	ite	eq
 80082b4:	2308      	moveq	r3, #8
 80082b6:	230a      	movne	r3, #10
 80082b8:	2100      	movs	r1, #0
 80082ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082be:	6865      	ldr	r5, [r4, #4]
 80082c0:	60a5      	str	r5, [r4, #8]
 80082c2:	2d00      	cmp	r5, #0
 80082c4:	bfa2      	ittt	ge
 80082c6:	6821      	ldrge	r1, [r4, #0]
 80082c8:	f021 0104 	bicge.w	r1, r1, #4
 80082cc:	6021      	strge	r1, [r4, #0]
 80082ce:	b90e      	cbnz	r6, 80082d4 <_printf_i+0x114>
 80082d0:	2d00      	cmp	r5, #0
 80082d2:	d04b      	beq.n	800836c <_printf_i+0x1ac>
 80082d4:	4615      	mov	r5, r2
 80082d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80082da:	fb03 6711 	mls	r7, r3, r1, r6
 80082de:	5dc7      	ldrb	r7, [r0, r7]
 80082e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082e4:	4637      	mov	r7, r6
 80082e6:	42bb      	cmp	r3, r7
 80082e8:	460e      	mov	r6, r1
 80082ea:	d9f4      	bls.n	80082d6 <_printf_i+0x116>
 80082ec:	2b08      	cmp	r3, #8
 80082ee:	d10b      	bne.n	8008308 <_printf_i+0x148>
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	07de      	lsls	r6, r3, #31
 80082f4:	d508      	bpl.n	8008308 <_printf_i+0x148>
 80082f6:	6923      	ldr	r3, [r4, #16]
 80082f8:	6861      	ldr	r1, [r4, #4]
 80082fa:	4299      	cmp	r1, r3
 80082fc:	bfde      	ittt	le
 80082fe:	2330      	movle	r3, #48	; 0x30
 8008300:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008304:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008308:	1b52      	subs	r2, r2, r5
 800830a:	6122      	str	r2, [r4, #16]
 800830c:	f8cd a000 	str.w	sl, [sp]
 8008310:	464b      	mov	r3, r9
 8008312:	aa03      	add	r2, sp, #12
 8008314:	4621      	mov	r1, r4
 8008316:	4640      	mov	r0, r8
 8008318:	f7ff fee4 	bl	80080e4 <_printf_common>
 800831c:	3001      	adds	r0, #1
 800831e:	d14a      	bne.n	80083b6 <_printf_i+0x1f6>
 8008320:	f04f 30ff 	mov.w	r0, #4294967295
 8008324:	b004      	add	sp, #16
 8008326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	f043 0320 	orr.w	r3, r3, #32
 8008330:	6023      	str	r3, [r4, #0]
 8008332:	4833      	ldr	r0, [pc, #204]	; (8008400 <_printf_i+0x240>)
 8008334:	2778      	movs	r7, #120	; 0x78
 8008336:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	6829      	ldr	r1, [r5, #0]
 800833e:	061f      	lsls	r7, r3, #24
 8008340:	f851 6b04 	ldr.w	r6, [r1], #4
 8008344:	d402      	bmi.n	800834c <_printf_i+0x18c>
 8008346:	065f      	lsls	r7, r3, #25
 8008348:	bf48      	it	mi
 800834a:	b2b6      	uxthmi	r6, r6
 800834c:	07df      	lsls	r7, r3, #31
 800834e:	bf48      	it	mi
 8008350:	f043 0320 	orrmi.w	r3, r3, #32
 8008354:	6029      	str	r1, [r5, #0]
 8008356:	bf48      	it	mi
 8008358:	6023      	strmi	r3, [r4, #0]
 800835a:	b91e      	cbnz	r6, 8008364 <_printf_i+0x1a4>
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	f023 0320 	bic.w	r3, r3, #32
 8008362:	6023      	str	r3, [r4, #0]
 8008364:	2310      	movs	r3, #16
 8008366:	e7a7      	b.n	80082b8 <_printf_i+0xf8>
 8008368:	4824      	ldr	r0, [pc, #144]	; (80083fc <_printf_i+0x23c>)
 800836a:	e7e4      	b.n	8008336 <_printf_i+0x176>
 800836c:	4615      	mov	r5, r2
 800836e:	e7bd      	b.n	80082ec <_printf_i+0x12c>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	6826      	ldr	r6, [r4, #0]
 8008374:	6961      	ldr	r1, [r4, #20]
 8008376:	1d18      	adds	r0, r3, #4
 8008378:	6028      	str	r0, [r5, #0]
 800837a:	0635      	lsls	r5, r6, #24
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	d501      	bpl.n	8008384 <_printf_i+0x1c4>
 8008380:	6019      	str	r1, [r3, #0]
 8008382:	e002      	b.n	800838a <_printf_i+0x1ca>
 8008384:	0670      	lsls	r0, r6, #25
 8008386:	d5fb      	bpl.n	8008380 <_printf_i+0x1c0>
 8008388:	8019      	strh	r1, [r3, #0]
 800838a:	2300      	movs	r3, #0
 800838c:	6123      	str	r3, [r4, #16]
 800838e:	4615      	mov	r5, r2
 8008390:	e7bc      	b.n	800830c <_printf_i+0x14c>
 8008392:	682b      	ldr	r3, [r5, #0]
 8008394:	1d1a      	adds	r2, r3, #4
 8008396:	602a      	str	r2, [r5, #0]
 8008398:	681d      	ldr	r5, [r3, #0]
 800839a:	6862      	ldr	r2, [r4, #4]
 800839c:	2100      	movs	r1, #0
 800839e:	4628      	mov	r0, r5
 80083a0:	f7f7 ff4e 	bl	8000240 <memchr>
 80083a4:	b108      	cbz	r0, 80083aa <_printf_i+0x1ea>
 80083a6:	1b40      	subs	r0, r0, r5
 80083a8:	6060      	str	r0, [r4, #4]
 80083aa:	6863      	ldr	r3, [r4, #4]
 80083ac:	6123      	str	r3, [r4, #16]
 80083ae:	2300      	movs	r3, #0
 80083b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083b4:	e7aa      	b.n	800830c <_printf_i+0x14c>
 80083b6:	6923      	ldr	r3, [r4, #16]
 80083b8:	462a      	mov	r2, r5
 80083ba:	4649      	mov	r1, r9
 80083bc:	4640      	mov	r0, r8
 80083be:	47d0      	blx	sl
 80083c0:	3001      	adds	r0, #1
 80083c2:	d0ad      	beq.n	8008320 <_printf_i+0x160>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	079b      	lsls	r3, r3, #30
 80083c8:	d413      	bmi.n	80083f2 <_printf_i+0x232>
 80083ca:	68e0      	ldr	r0, [r4, #12]
 80083cc:	9b03      	ldr	r3, [sp, #12]
 80083ce:	4298      	cmp	r0, r3
 80083d0:	bfb8      	it	lt
 80083d2:	4618      	movlt	r0, r3
 80083d4:	e7a6      	b.n	8008324 <_printf_i+0x164>
 80083d6:	2301      	movs	r3, #1
 80083d8:	4632      	mov	r2, r6
 80083da:	4649      	mov	r1, r9
 80083dc:	4640      	mov	r0, r8
 80083de:	47d0      	blx	sl
 80083e0:	3001      	adds	r0, #1
 80083e2:	d09d      	beq.n	8008320 <_printf_i+0x160>
 80083e4:	3501      	adds	r5, #1
 80083e6:	68e3      	ldr	r3, [r4, #12]
 80083e8:	9903      	ldr	r1, [sp, #12]
 80083ea:	1a5b      	subs	r3, r3, r1
 80083ec:	42ab      	cmp	r3, r5
 80083ee:	dcf2      	bgt.n	80083d6 <_printf_i+0x216>
 80083f0:	e7eb      	b.n	80083ca <_printf_i+0x20a>
 80083f2:	2500      	movs	r5, #0
 80083f4:	f104 0619 	add.w	r6, r4, #25
 80083f8:	e7f5      	b.n	80083e6 <_printf_i+0x226>
 80083fa:	bf00      	nop
 80083fc:	0800cc2e 	.word	0x0800cc2e
 8008400:	0800cc3f 	.word	0x0800cc3f

08008404 <_scanf_float>:
 8008404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008408:	b087      	sub	sp, #28
 800840a:	4617      	mov	r7, r2
 800840c:	9303      	str	r3, [sp, #12]
 800840e:	688b      	ldr	r3, [r1, #8]
 8008410:	1e5a      	subs	r2, r3, #1
 8008412:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008416:	bf83      	ittte	hi
 8008418:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800841c:	195b      	addhi	r3, r3, r5
 800841e:	9302      	strhi	r3, [sp, #8]
 8008420:	2300      	movls	r3, #0
 8008422:	bf86      	itte	hi
 8008424:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008428:	608b      	strhi	r3, [r1, #8]
 800842a:	9302      	strls	r3, [sp, #8]
 800842c:	680b      	ldr	r3, [r1, #0]
 800842e:	468b      	mov	fp, r1
 8008430:	2500      	movs	r5, #0
 8008432:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008436:	f84b 3b1c 	str.w	r3, [fp], #28
 800843a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800843e:	4680      	mov	r8, r0
 8008440:	460c      	mov	r4, r1
 8008442:	465e      	mov	r6, fp
 8008444:	46aa      	mov	sl, r5
 8008446:	46a9      	mov	r9, r5
 8008448:	9501      	str	r5, [sp, #4]
 800844a:	68a2      	ldr	r2, [r4, #8]
 800844c:	b152      	cbz	r2, 8008464 <_scanf_float+0x60>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	2b4e      	cmp	r3, #78	; 0x4e
 8008454:	d864      	bhi.n	8008520 <_scanf_float+0x11c>
 8008456:	2b40      	cmp	r3, #64	; 0x40
 8008458:	d83c      	bhi.n	80084d4 <_scanf_float+0xd0>
 800845a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800845e:	b2c8      	uxtb	r0, r1
 8008460:	280e      	cmp	r0, #14
 8008462:	d93a      	bls.n	80084da <_scanf_float+0xd6>
 8008464:	f1b9 0f00 	cmp.w	r9, #0
 8008468:	d003      	beq.n	8008472 <_scanf_float+0x6e>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008476:	f1ba 0f01 	cmp.w	sl, #1
 800847a:	f200 8113 	bhi.w	80086a4 <_scanf_float+0x2a0>
 800847e:	455e      	cmp	r6, fp
 8008480:	f200 8105 	bhi.w	800868e <_scanf_float+0x28a>
 8008484:	2501      	movs	r5, #1
 8008486:	4628      	mov	r0, r5
 8008488:	b007      	add	sp, #28
 800848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008492:	2a0d      	cmp	r2, #13
 8008494:	d8e6      	bhi.n	8008464 <_scanf_float+0x60>
 8008496:	a101      	add	r1, pc, #4	; (adr r1, 800849c <_scanf_float+0x98>)
 8008498:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800849c:	080085db 	.word	0x080085db
 80084a0:	08008465 	.word	0x08008465
 80084a4:	08008465 	.word	0x08008465
 80084a8:	08008465 	.word	0x08008465
 80084ac:	0800863b 	.word	0x0800863b
 80084b0:	08008613 	.word	0x08008613
 80084b4:	08008465 	.word	0x08008465
 80084b8:	08008465 	.word	0x08008465
 80084bc:	080085e9 	.word	0x080085e9
 80084c0:	08008465 	.word	0x08008465
 80084c4:	08008465 	.word	0x08008465
 80084c8:	08008465 	.word	0x08008465
 80084cc:	08008465 	.word	0x08008465
 80084d0:	080085a1 	.word	0x080085a1
 80084d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80084d8:	e7db      	b.n	8008492 <_scanf_float+0x8e>
 80084da:	290e      	cmp	r1, #14
 80084dc:	d8c2      	bhi.n	8008464 <_scanf_float+0x60>
 80084de:	a001      	add	r0, pc, #4	; (adr r0, 80084e4 <_scanf_float+0xe0>)
 80084e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80084e4:	08008593 	.word	0x08008593
 80084e8:	08008465 	.word	0x08008465
 80084ec:	08008593 	.word	0x08008593
 80084f0:	08008627 	.word	0x08008627
 80084f4:	08008465 	.word	0x08008465
 80084f8:	08008541 	.word	0x08008541
 80084fc:	0800857d 	.word	0x0800857d
 8008500:	0800857d 	.word	0x0800857d
 8008504:	0800857d 	.word	0x0800857d
 8008508:	0800857d 	.word	0x0800857d
 800850c:	0800857d 	.word	0x0800857d
 8008510:	0800857d 	.word	0x0800857d
 8008514:	0800857d 	.word	0x0800857d
 8008518:	0800857d 	.word	0x0800857d
 800851c:	0800857d 	.word	0x0800857d
 8008520:	2b6e      	cmp	r3, #110	; 0x6e
 8008522:	d809      	bhi.n	8008538 <_scanf_float+0x134>
 8008524:	2b60      	cmp	r3, #96	; 0x60
 8008526:	d8b2      	bhi.n	800848e <_scanf_float+0x8a>
 8008528:	2b54      	cmp	r3, #84	; 0x54
 800852a:	d077      	beq.n	800861c <_scanf_float+0x218>
 800852c:	2b59      	cmp	r3, #89	; 0x59
 800852e:	d199      	bne.n	8008464 <_scanf_float+0x60>
 8008530:	2d07      	cmp	r5, #7
 8008532:	d197      	bne.n	8008464 <_scanf_float+0x60>
 8008534:	2508      	movs	r5, #8
 8008536:	e029      	b.n	800858c <_scanf_float+0x188>
 8008538:	2b74      	cmp	r3, #116	; 0x74
 800853a:	d06f      	beq.n	800861c <_scanf_float+0x218>
 800853c:	2b79      	cmp	r3, #121	; 0x79
 800853e:	e7f6      	b.n	800852e <_scanf_float+0x12a>
 8008540:	6821      	ldr	r1, [r4, #0]
 8008542:	05c8      	lsls	r0, r1, #23
 8008544:	d51a      	bpl.n	800857c <_scanf_float+0x178>
 8008546:	9b02      	ldr	r3, [sp, #8]
 8008548:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800854c:	6021      	str	r1, [r4, #0]
 800854e:	f109 0901 	add.w	r9, r9, #1
 8008552:	b11b      	cbz	r3, 800855c <_scanf_float+0x158>
 8008554:	3b01      	subs	r3, #1
 8008556:	3201      	adds	r2, #1
 8008558:	9302      	str	r3, [sp, #8]
 800855a:	60a2      	str	r2, [r4, #8]
 800855c:	68a3      	ldr	r3, [r4, #8]
 800855e:	3b01      	subs	r3, #1
 8008560:	60a3      	str	r3, [r4, #8]
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	3301      	adds	r3, #1
 8008566:	6123      	str	r3, [r4, #16]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3b01      	subs	r3, #1
 800856c:	2b00      	cmp	r3, #0
 800856e:	607b      	str	r3, [r7, #4]
 8008570:	f340 8084 	ble.w	800867c <_scanf_float+0x278>
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	3301      	adds	r3, #1
 8008578:	603b      	str	r3, [r7, #0]
 800857a:	e766      	b.n	800844a <_scanf_float+0x46>
 800857c:	eb1a 0f05 	cmn.w	sl, r5
 8008580:	f47f af70 	bne.w	8008464 <_scanf_float+0x60>
 8008584:	6822      	ldr	r2, [r4, #0]
 8008586:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800858a:	6022      	str	r2, [r4, #0]
 800858c:	f806 3b01 	strb.w	r3, [r6], #1
 8008590:	e7e4      	b.n	800855c <_scanf_float+0x158>
 8008592:	6822      	ldr	r2, [r4, #0]
 8008594:	0610      	lsls	r0, r2, #24
 8008596:	f57f af65 	bpl.w	8008464 <_scanf_float+0x60>
 800859a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800859e:	e7f4      	b.n	800858a <_scanf_float+0x186>
 80085a0:	f1ba 0f00 	cmp.w	sl, #0
 80085a4:	d10e      	bne.n	80085c4 <_scanf_float+0x1c0>
 80085a6:	f1b9 0f00 	cmp.w	r9, #0
 80085aa:	d10e      	bne.n	80085ca <_scanf_float+0x1c6>
 80085ac:	6822      	ldr	r2, [r4, #0]
 80085ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085b6:	d108      	bne.n	80085ca <_scanf_float+0x1c6>
 80085b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085bc:	6022      	str	r2, [r4, #0]
 80085be:	f04f 0a01 	mov.w	sl, #1
 80085c2:	e7e3      	b.n	800858c <_scanf_float+0x188>
 80085c4:	f1ba 0f02 	cmp.w	sl, #2
 80085c8:	d055      	beq.n	8008676 <_scanf_float+0x272>
 80085ca:	2d01      	cmp	r5, #1
 80085cc:	d002      	beq.n	80085d4 <_scanf_float+0x1d0>
 80085ce:	2d04      	cmp	r5, #4
 80085d0:	f47f af48 	bne.w	8008464 <_scanf_float+0x60>
 80085d4:	3501      	adds	r5, #1
 80085d6:	b2ed      	uxtb	r5, r5
 80085d8:	e7d8      	b.n	800858c <_scanf_float+0x188>
 80085da:	f1ba 0f01 	cmp.w	sl, #1
 80085de:	f47f af41 	bne.w	8008464 <_scanf_float+0x60>
 80085e2:	f04f 0a02 	mov.w	sl, #2
 80085e6:	e7d1      	b.n	800858c <_scanf_float+0x188>
 80085e8:	b97d      	cbnz	r5, 800860a <_scanf_float+0x206>
 80085ea:	f1b9 0f00 	cmp.w	r9, #0
 80085ee:	f47f af3c 	bne.w	800846a <_scanf_float+0x66>
 80085f2:	6822      	ldr	r2, [r4, #0]
 80085f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085fc:	f47f af39 	bne.w	8008472 <_scanf_float+0x6e>
 8008600:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008604:	6022      	str	r2, [r4, #0]
 8008606:	2501      	movs	r5, #1
 8008608:	e7c0      	b.n	800858c <_scanf_float+0x188>
 800860a:	2d03      	cmp	r5, #3
 800860c:	d0e2      	beq.n	80085d4 <_scanf_float+0x1d0>
 800860e:	2d05      	cmp	r5, #5
 8008610:	e7de      	b.n	80085d0 <_scanf_float+0x1cc>
 8008612:	2d02      	cmp	r5, #2
 8008614:	f47f af26 	bne.w	8008464 <_scanf_float+0x60>
 8008618:	2503      	movs	r5, #3
 800861a:	e7b7      	b.n	800858c <_scanf_float+0x188>
 800861c:	2d06      	cmp	r5, #6
 800861e:	f47f af21 	bne.w	8008464 <_scanf_float+0x60>
 8008622:	2507      	movs	r5, #7
 8008624:	e7b2      	b.n	800858c <_scanf_float+0x188>
 8008626:	6822      	ldr	r2, [r4, #0]
 8008628:	0591      	lsls	r1, r2, #22
 800862a:	f57f af1b 	bpl.w	8008464 <_scanf_float+0x60>
 800862e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008632:	6022      	str	r2, [r4, #0]
 8008634:	f8cd 9004 	str.w	r9, [sp, #4]
 8008638:	e7a8      	b.n	800858c <_scanf_float+0x188>
 800863a:	6822      	ldr	r2, [r4, #0]
 800863c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008640:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008644:	d006      	beq.n	8008654 <_scanf_float+0x250>
 8008646:	0550      	lsls	r0, r2, #21
 8008648:	f57f af0c 	bpl.w	8008464 <_scanf_float+0x60>
 800864c:	f1b9 0f00 	cmp.w	r9, #0
 8008650:	f43f af0f 	beq.w	8008472 <_scanf_float+0x6e>
 8008654:	0591      	lsls	r1, r2, #22
 8008656:	bf58      	it	pl
 8008658:	9901      	ldrpl	r1, [sp, #4]
 800865a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800865e:	bf58      	it	pl
 8008660:	eba9 0101 	subpl.w	r1, r9, r1
 8008664:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008668:	bf58      	it	pl
 800866a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800866e:	6022      	str	r2, [r4, #0]
 8008670:	f04f 0900 	mov.w	r9, #0
 8008674:	e78a      	b.n	800858c <_scanf_float+0x188>
 8008676:	f04f 0a03 	mov.w	sl, #3
 800867a:	e787      	b.n	800858c <_scanf_float+0x188>
 800867c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008680:	4639      	mov	r1, r7
 8008682:	4640      	mov	r0, r8
 8008684:	4798      	blx	r3
 8008686:	2800      	cmp	r0, #0
 8008688:	f43f aedf 	beq.w	800844a <_scanf_float+0x46>
 800868c:	e6ea      	b.n	8008464 <_scanf_float+0x60>
 800868e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008692:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008696:	463a      	mov	r2, r7
 8008698:	4640      	mov	r0, r8
 800869a:	4798      	blx	r3
 800869c:	6923      	ldr	r3, [r4, #16]
 800869e:	3b01      	subs	r3, #1
 80086a0:	6123      	str	r3, [r4, #16]
 80086a2:	e6ec      	b.n	800847e <_scanf_float+0x7a>
 80086a4:	1e6b      	subs	r3, r5, #1
 80086a6:	2b06      	cmp	r3, #6
 80086a8:	d825      	bhi.n	80086f6 <_scanf_float+0x2f2>
 80086aa:	2d02      	cmp	r5, #2
 80086ac:	d836      	bhi.n	800871c <_scanf_float+0x318>
 80086ae:	455e      	cmp	r6, fp
 80086b0:	f67f aee8 	bls.w	8008484 <_scanf_float+0x80>
 80086b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086bc:	463a      	mov	r2, r7
 80086be:	4640      	mov	r0, r8
 80086c0:	4798      	blx	r3
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	6123      	str	r3, [r4, #16]
 80086c8:	e7f1      	b.n	80086ae <_scanf_float+0x2aa>
 80086ca:	9802      	ldr	r0, [sp, #8]
 80086cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80086d4:	9002      	str	r0, [sp, #8]
 80086d6:	463a      	mov	r2, r7
 80086d8:	4640      	mov	r0, r8
 80086da:	4798      	blx	r3
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	3b01      	subs	r3, #1
 80086e0:	6123      	str	r3, [r4, #16]
 80086e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086e6:	fa5f fa8a 	uxtb.w	sl, sl
 80086ea:	f1ba 0f02 	cmp.w	sl, #2
 80086ee:	d1ec      	bne.n	80086ca <_scanf_float+0x2c6>
 80086f0:	3d03      	subs	r5, #3
 80086f2:	b2ed      	uxtb	r5, r5
 80086f4:	1b76      	subs	r6, r6, r5
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	05da      	lsls	r2, r3, #23
 80086fa:	d52f      	bpl.n	800875c <_scanf_float+0x358>
 80086fc:	055b      	lsls	r3, r3, #21
 80086fe:	d510      	bpl.n	8008722 <_scanf_float+0x31e>
 8008700:	455e      	cmp	r6, fp
 8008702:	f67f aebf 	bls.w	8008484 <_scanf_float+0x80>
 8008706:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800870a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800870e:	463a      	mov	r2, r7
 8008710:	4640      	mov	r0, r8
 8008712:	4798      	blx	r3
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	3b01      	subs	r3, #1
 8008718:	6123      	str	r3, [r4, #16]
 800871a:	e7f1      	b.n	8008700 <_scanf_float+0x2fc>
 800871c:	46aa      	mov	sl, r5
 800871e:	9602      	str	r6, [sp, #8]
 8008720:	e7df      	b.n	80086e2 <_scanf_float+0x2de>
 8008722:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008726:	6923      	ldr	r3, [r4, #16]
 8008728:	2965      	cmp	r1, #101	; 0x65
 800872a:	f103 33ff 	add.w	r3, r3, #4294967295
 800872e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008732:	6123      	str	r3, [r4, #16]
 8008734:	d00c      	beq.n	8008750 <_scanf_float+0x34c>
 8008736:	2945      	cmp	r1, #69	; 0x45
 8008738:	d00a      	beq.n	8008750 <_scanf_float+0x34c>
 800873a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800873e:	463a      	mov	r2, r7
 8008740:	4640      	mov	r0, r8
 8008742:	4798      	blx	r3
 8008744:	6923      	ldr	r3, [r4, #16]
 8008746:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800874a:	3b01      	subs	r3, #1
 800874c:	1eb5      	subs	r5, r6, #2
 800874e:	6123      	str	r3, [r4, #16]
 8008750:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008754:	463a      	mov	r2, r7
 8008756:	4640      	mov	r0, r8
 8008758:	4798      	blx	r3
 800875a:	462e      	mov	r6, r5
 800875c:	6825      	ldr	r5, [r4, #0]
 800875e:	f015 0510 	ands.w	r5, r5, #16
 8008762:	d14d      	bne.n	8008800 <_scanf_float+0x3fc>
 8008764:	7035      	strb	r5, [r6, #0]
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800876c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008770:	d11a      	bne.n	80087a8 <_scanf_float+0x3a4>
 8008772:	9b01      	ldr	r3, [sp, #4]
 8008774:	454b      	cmp	r3, r9
 8008776:	eba3 0209 	sub.w	r2, r3, r9
 800877a:	d122      	bne.n	80087c2 <_scanf_float+0x3be>
 800877c:	2200      	movs	r2, #0
 800877e:	4659      	mov	r1, fp
 8008780:	4640      	mov	r0, r8
 8008782:	f002 fb5b 	bl	800ae3c <_strtod_r>
 8008786:	9b03      	ldr	r3, [sp, #12]
 8008788:	6821      	ldr	r1, [r4, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f011 0f02 	tst.w	r1, #2
 8008790:	f103 0204 	add.w	r2, r3, #4
 8008794:	d020      	beq.n	80087d8 <_scanf_float+0x3d4>
 8008796:	9903      	ldr	r1, [sp, #12]
 8008798:	600a      	str	r2, [r1, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	ed83 0b00 	vstr	d0, [r3]
 80087a0:	68e3      	ldr	r3, [r4, #12]
 80087a2:	3301      	adds	r3, #1
 80087a4:	60e3      	str	r3, [r4, #12]
 80087a6:	e66e      	b.n	8008486 <_scanf_float+0x82>
 80087a8:	9b04      	ldr	r3, [sp, #16]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0e6      	beq.n	800877c <_scanf_float+0x378>
 80087ae:	9905      	ldr	r1, [sp, #20]
 80087b0:	230a      	movs	r3, #10
 80087b2:	462a      	mov	r2, r5
 80087b4:	3101      	adds	r1, #1
 80087b6:	4640      	mov	r0, r8
 80087b8:	f002 fbc8 	bl	800af4c <_strtol_r>
 80087bc:	9b04      	ldr	r3, [sp, #16]
 80087be:	9e05      	ldr	r6, [sp, #20]
 80087c0:	1ac2      	subs	r2, r0, r3
 80087c2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80087c6:	429e      	cmp	r6, r3
 80087c8:	bf28      	it	cs
 80087ca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80087ce:	490d      	ldr	r1, [pc, #52]	; (8008804 <_scanf_float+0x400>)
 80087d0:	4630      	mov	r0, r6
 80087d2:	f000 f8dd 	bl	8008990 <siprintf>
 80087d6:	e7d1      	b.n	800877c <_scanf_float+0x378>
 80087d8:	f011 0f04 	tst.w	r1, #4
 80087dc:	9903      	ldr	r1, [sp, #12]
 80087de:	600a      	str	r2, [r1, #0]
 80087e0:	d1db      	bne.n	800879a <_scanf_float+0x396>
 80087e2:	eeb4 0b40 	vcmp.f64	d0, d0
 80087e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ea:	681e      	ldr	r6, [r3, #0]
 80087ec:	d705      	bvc.n	80087fa <_scanf_float+0x3f6>
 80087ee:	4806      	ldr	r0, [pc, #24]	; (8008808 <_scanf_float+0x404>)
 80087f0:	f000 f9b2 	bl	8008b58 <nanf>
 80087f4:	ed86 0a00 	vstr	s0, [r6]
 80087f8:	e7d2      	b.n	80087a0 <_scanf_float+0x39c>
 80087fa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80087fe:	e7f9      	b.n	80087f4 <_scanf_float+0x3f0>
 8008800:	2500      	movs	r5, #0
 8008802:	e640      	b.n	8008486 <_scanf_float+0x82>
 8008804:	0800cc50 	.word	0x0800cc50
 8008808:	0800cfe5 	.word	0x0800cfe5

0800880c <std>:
 800880c:	2300      	movs	r3, #0
 800880e:	b510      	push	{r4, lr}
 8008810:	4604      	mov	r4, r0
 8008812:	e9c0 3300 	strd	r3, r3, [r0]
 8008816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800881a:	6083      	str	r3, [r0, #8]
 800881c:	8181      	strh	r1, [r0, #12]
 800881e:	6643      	str	r3, [r0, #100]	; 0x64
 8008820:	81c2      	strh	r2, [r0, #14]
 8008822:	6183      	str	r3, [r0, #24]
 8008824:	4619      	mov	r1, r3
 8008826:	2208      	movs	r2, #8
 8008828:	305c      	adds	r0, #92	; 0x5c
 800882a:	f000 f914 	bl	8008a56 <memset>
 800882e:	4b0d      	ldr	r3, [pc, #52]	; (8008864 <std+0x58>)
 8008830:	6263      	str	r3, [r4, #36]	; 0x24
 8008832:	4b0d      	ldr	r3, [pc, #52]	; (8008868 <std+0x5c>)
 8008834:	62a3      	str	r3, [r4, #40]	; 0x28
 8008836:	4b0d      	ldr	r3, [pc, #52]	; (800886c <std+0x60>)
 8008838:	62e3      	str	r3, [r4, #44]	; 0x2c
 800883a:	4b0d      	ldr	r3, [pc, #52]	; (8008870 <std+0x64>)
 800883c:	6323      	str	r3, [r4, #48]	; 0x30
 800883e:	4b0d      	ldr	r3, [pc, #52]	; (8008874 <std+0x68>)
 8008840:	6224      	str	r4, [r4, #32]
 8008842:	429c      	cmp	r4, r3
 8008844:	d006      	beq.n	8008854 <std+0x48>
 8008846:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800884a:	4294      	cmp	r4, r2
 800884c:	d002      	beq.n	8008854 <std+0x48>
 800884e:	33d0      	adds	r3, #208	; 0xd0
 8008850:	429c      	cmp	r4, r3
 8008852:	d105      	bne.n	8008860 <std+0x54>
 8008854:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800885c:	f000 b978 	b.w	8008b50 <__retarget_lock_init_recursive>
 8008860:	bd10      	pop	{r4, pc}
 8008862:	bf00      	nop
 8008864:	080089d1 	.word	0x080089d1
 8008868:	080089f3 	.word	0x080089f3
 800886c:	08008a2b 	.word	0x08008a2b
 8008870:	08008a4f 	.word	0x08008a4f
 8008874:	20000508 	.word	0x20000508

08008878 <stdio_exit_handler>:
 8008878:	4a02      	ldr	r2, [pc, #8]	; (8008884 <stdio_exit_handler+0xc>)
 800887a:	4903      	ldr	r1, [pc, #12]	; (8008888 <stdio_exit_handler+0x10>)
 800887c:	4803      	ldr	r0, [pc, #12]	; (800888c <stdio_exit_handler+0x14>)
 800887e:	f000 b869 	b.w	8008954 <_fwalk_sglue>
 8008882:	bf00      	nop
 8008884:	2000002c 	.word	0x2000002c
 8008888:	0800b30d 	.word	0x0800b30d
 800888c:	20000038 	.word	0x20000038

08008890 <cleanup_stdio>:
 8008890:	6841      	ldr	r1, [r0, #4]
 8008892:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <cleanup_stdio+0x34>)
 8008894:	4299      	cmp	r1, r3
 8008896:	b510      	push	{r4, lr}
 8008898:	4604      	mov	r4, r0
 800889a:	d001      	beq.n	80088a0 <cleanup_stdio+0x10>
 800889c:	f002 fd36 	bl	800b30c <_fflush_r>
 80088a0:	68a1      	ldr	r1, [r4, #8]
 80088a2:	4b09      	ldr	r3, [pc, #36]	; (80088c8 <cleanup_stdio+0x38>)
 80088a4:	4299      	cmp	r1, r3
 80088a6:	d002      	beq.n	80088ae <cleanup_stdio+0x1e>
 80088a8:	4620      	mov	r0, r4
 80088aa:	f002 fd2f 	bl	800b30c <_fflush_r>
 80088ae:	68e1      	ldr	r1, [r4, #12]
 80088b0:	4b06      	ldr	r3, [pc, #24]	; (80088cc <cleanup_stdio+0x3c>)
 80088b2:	4299      	cmp	r1, r3
 80088b4:	d004      	beq.n	80088c0 <cleanup_stdio+0x30>
 80088b6:	4620      	mov	r0, r4
 80088b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088bc:	f002 bd26 	b.w	800b30c <_fflush_r>
 80088c0:	bd10      	pop	{r4, pc}
 80088c2:	bf00      	nop
 80088c4:	20000508 	.word	0x20000508
 80088c8:	20000570 	.word	0x20000570
 80088cc:	200005d8 	.word	0x200005d8

080088d0 <global_stdio_init.part.0>:
 80088d0:	b510      	push	{r4, lr}
 80088d2:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <global_stdio_init.part.0+0x30>)
 80088d4:	4c0b      	ldr	r4, [pc, #44]	; (8008904 <global_stdio_init.part.0+0x34>)
 80088d6:	4a0c      	ldr	r2, [pc, #48]	; (8008908 <global_stdio_init.part.0+0x38>)
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	4620      	mov	r0, r4
 80088dc:	2200      	movs	r2, #0
 80088de:	2104      	movs	r1, #4
 80088e0:	f7ff ff94 	bl	800880c <std>
 80088e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80088e8:	2201      	movs	r2, #1
 80088ea:	2109      	movs	r1, #9
 80088ec:	f7ff ff8e 	bl	800880c <std>
 80088f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80088f4:	2202      	movs	r2, #2
 80088f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088fa:	2112      	movs	r1, #18
 80088fc:	f7ff bf86 	b.w	800880c <std>
 8008900:	20000640 	.word	0x20000640
 8008904:	20000508 	.word	0x20000508
 8008908:	08008879 	.word	0x08008879

0800890c <__sfp_lock_acquire>:
 800890c:	4801      	ldr	r0, [pc, #4]	; (8008914 <__sfp_lock_acquire+0x8>)
 800890e:	f000 b920 	b.w	8008b52 <__retarget_lock_acquire_recursive>
 8008912:	bf00      	nop
 8008914:	20000649 	.word	0x20000649

08008918 <__sfp_lock_release>:
 8008918:	4801      	ldr	r0, [pc, #4]	; (8008920 <__sfp_lock_release+0x8>)
 800891a:	f000 b91b 	b.w	8008b54 <__retarget_lock_release_recursive>
 800891e:	bf00      	nop
 8008920:	20000649 	.word	0x20000649

08008924 <__sinit>:
 8008924:	b510      	push	{r4, lr}
 8008926:	4604      	mov	r4, r0
 8008928:	f7ff fff0 	bl	800890c <__sfp_lock_acquire>
 800892c:	6a23      	ldr	r3, [r4, #32]
 800892e:	b11b      	cbz	r3, 8008938 <__sinit+0x14>
 8008930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008934:	f7ff bff0 	b.w	8008918 <__sfp_lock_release>
 8008938:	4b04      	ldr	r3, [pc, #16]	; (800894c <__sinit+0x28>)
 800893a:	6223      	str	r3, [r4, #32]
 800893c:	4b04      	ldr	r3, [pc, #16]	; (8008950 <__sinit+0x2c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1f5      	bne.n	8008930 <__sinit+0xc>
 8008944:	f7ff ffc4 	bl	80088d0 <global_stdio_init.part.0>
 8008948:	e7f2      	b.n	8008930 <__sinit+0xc>
 800894a:	bf00      	nop
 800894c:	08008891 	.word	0x08008891
 8008950:	20000640 	.word	0x20000640

08008954 <_fwalk_sglue>:
 8008954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008958:	4607      	mov	r7, r0
 800895a:	4688      	mov	r8, r1
 800895c:	4614      	mov	r4, r2
 800895e:	2600      	movs	r6, #0
 8008960:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008964:	f1b9 0901 	subs.w	r9, r9, #1
 8008968:	d505      	bpl.n	8008976 <_fwalk_sglue+0x22>
 800896a:	6824      	ldr	r4, [r4, #0]
 800896c:	2c00      	cmp	r4, #0
 800896e:	d1f7      	bne.n	8008960 <_fwalk_sglue+0xc>
 8008970:	4630      	mov	r0, r6
 8008972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008976:	89ab      	ldrh	r3, [r5, #12]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d907      	bls.n	800898c <_fwalk_sglue+0x38>
 800897c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008980:	3301      	adds	r3, #1
 8008982:	d003      	beq.n	800898c <_fwalk_sglue+0x38>
 8008984:	4629      	mov	r1, r5
 8008986:	4638      	mov	r0, r7
 8008988:	47c0      	blx	r8
 800898a:	4306      	orrs	r6, r0
 800898c:	3568      	adds	r5, #104	; 0x68
 800898e:	e7e9      	b.n	8008964 <_fwalk_sglue+0x10>

08008990 <siprintf>:
 8008990:	b40e      	push	{r1, r2, r3}
 8008992:	b500      	push	{lr}
 8008994:	b09c      	sub	sp, #112	; 0x70
 8008996:	ab1d      	add	r3, sp, #116	; 0x74
 8008998:	9002      	str	r0, [sp, #8]
 800899a:	9006      	str	r0, [sp, #24]
 800899c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089a0:	4809      	ldr	r0, [pc, #36]	; (80089c8 <siprintf+0x38>)
 80089a2:	9107      	str	r1, [sp, #28]
 80089a4:	9104      	str	r1, [sp, #16]
 80089a6:	4909      	ldr	r1, [pc, #36]	; (80089cc <siprintf+0x3c>)
 80089a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ac:	9105      	str	r1, [sp, #20]
 80089ae:	6800      	ldr	r0, [r0, #0]
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	a902      	add	r1, sp, #8
 80089b4:	f002 fb26 	bl	800b004 <_svfiprintf_r>
 80089b8:	9b02      	ldr	r3, [sp, #8]
 80089ba:	2200      	movs	r2, #0
 80089bc:	701a      	strb	r2, [r3, #0]
 80089be:	b01c      	add	sp, #112	; 0x70
 80089c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089c4:	b003      	add	sp, #12
 80089c6:	4770      	bx	lr
 80089c8:	20000084 	.word	0x20000084
 80089cc:	ffff0208 	.word	0xffff0208

080089d0 <__sread>:
 80089d0:	b510      	push	{r4, lr}
 80089d2:	460c      	mov	r4, r1
 80089d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d8:	f000 f86c 	bl	8008ab4 <_read_r>
 80089dc:	2800      	cmp	r0, #0
 80089de:	bfab      	itete	ge
 80089e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089e2:	89a3      	ldrhlt	r3, [r4, #12]
 80089e4:	181b      	addge	r3, r3, r0
 80089e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089ea:	bfac      	ite	ge
 80089ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80089ee:	81a3      	strhlt	r3, [r4, #12]
 80089f0:	bd10      	pop	{r4, pc}

080089f2 <__swrite>:
 80089f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f6:	461f      	mov	r7, r3
 80089f8:	898b      	ldrh	r3, [r1, #12]
 80089fa:	05db      	lsls	r3, r3, #23
 80089fc:	4605      	mov	r5, r0
 80089fe:	460c      	mov	r4, r1
 8008a00:	4616      	mov	r6, r2
 8008a02:	d505      	bpl.n	8008a10 <__swrite+0x1e>
 8008a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a08:	2302      	movs	r3, #2
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f000 f840 	bl	8008a90 <_lseek_r>
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a1a:	81a3      	strh	r3, [r4, #12]
 8008a1c:	4632      	mov	r2, r6
 8008a1e:	463b      	mov	r3, r7
 8008a20:	4628      	mov	r0, r5
 8008a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a26:	f000 b857 	b.w	8008ad8 <_write_r>

08008a2a <__sseek>:
 8008a2a:	b510      	push	{r4, lr}
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a32:	f000 f82d 	bl	8008a90 <_lseek_r>
 8008a36:	1c43      	adds	r3, r0, #1
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	bf15      	itete	ne
 8008a3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a46:	81a3      	strheq	r3, [r4, #12]
 8008a48:	bf18      	it	ne
 8008a4a:	81a3      	strhne	r3, [r4, #12]
 8008a4c:	bd10      	pop	{r4, pc}

08008a4e <__sclose>:
 8008a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a52:	f000 b80d 	b.w	8008a70 <_close_r>

08008a56 <memset>:
 8008a56:	4402      	add	r2, r0
 8008a58:	4603      	mov	r3, r0
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d100      	bne.n	8008a60 <memset+0xa>
 8008a5e:	4770      	bx	lr
 8008a60:	f803 1b01 	strb.w	r1, [r3], #1
 8008a64:	e7f9      	b.n	8008a5a <memset+0x4>
	...

08008a68 <_localeconv_r>:
 8008a68:	4800      	ldr	r0, [pc, #0]	; (8008a6c <_localeconv_r+0x4>)
 8008a6a:	4770      	bx	lr
 8008a6c:	20000178 	.word	0x20000178

08008a70 <_close_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4d06      	ldr	r5, [pc, #24]	; (8008a8c <_close_r+0x1c>)
 8008a74:	2300      	movs	r3, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	4608      	mov	r0, r1
 8008a7a:	602b      	str	r3, [r5, #0]
 8008a7c:	f7f9 fb25 	bl	80020ca <_close>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d102      	bne.n	8008a8a <_close_r+0x1a>
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	b103      	cbz	r3, 8008a8a <_close_r+0x1a>
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	20000644 	.word	0x20000644

08008a90 <_lseek_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4d07      	ldr	r5, [pc, #28]	; (8008ab0 <_lseek_r+0x20>)
 8008a94:	4604      	mov	r4, r0
 8008a96:	4608      	mov	r0, r1
 8008a98:	4611      	mov	r1, r2
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	602a      	str	r2, [r5, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f7f9 fb3a 	bl	8002118 <_lseek>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d102      	bne.n	8008aae <_lseek_r+0x1e>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	b103      	cbz	r3, 8008aae <_lseek_r+0x1e>
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	20000644 	.word	0x20000644

08008ab4 <_read_r>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	4d07      	ldr	r5, [pc, #28]	; (8008ad4 <_read_r+0x20>)
 8008ab8:	4604      	mov	r4, r0
 8008aba:	4608      	mov	r0, r1
 8008abc:	4611      	mov	r1, r2
 8008abe:	2200      	movs	r2, #0
 8008ac0:	602a      	str	r2, [r5, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f7f9 fac8 	bl	8002058 <_read>
 8008ac8:	1c43      	adds	r3, r0, #1
 8008aca:	d102      	bne.n	8008ad2 <_read_r+0x1e>
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	b103      	cbz	r3, 8008ad2 <_read_r+0x1e>
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	bd38      	pop	{r3, r4, r5, pc}
 8008ad4:	20000644 	.word	0x20000644

08008ad8 <_write_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	4d07      	ldr	r5, [pc, #28]	; (8008af8 <_write_r+0x20>)
 8008adc:	4604      	mov	r4, r0
 8008ade:	4608      	mov	r0, r1
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	602a      	str	r2, [r5, #0]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	f7f9 fad3 	bl	8002092 <_write>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d102      	bne.n	8008af6 <_write_r+0x1e>
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	b103      	cbz	r3, 8008af6 <_write_r+0x1e>
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	bd38      	pop	{r3, r4, r5, pc}
 8008af8:	20000644 	.word	0x20000644

08008afc <__errno>:
 8008afc:	4b01      	ldr	r3, [pc, #4]	; (8008b04 <__errno+0x8>)
 8008afe:	6818      	ldr	r0, [r3, #0]
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	20000084 	.word	0x20000084

08008b08 <__libc_init_array>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	4d0d      	ldr	r5, [pc, #52]	; (8008b40 <__libc_init_array+0x38>)
 8008b0c:	4c0d      	ldr	r4, [pc, #52]	; (8008b44 <__libc_init_array+0x3c>)
 8008b0e:	1b64      	subs	r4, r4, r5
 8008b10:	10a4      	asrs	r4, r4, #2
 8008b12:	2600      	movs	r6, #0
 8008b14:	42a6      	cmp	r6, r4
 8008b16:	d109      	bne.n	8008b2c <__libc_init_array+0x24>
 8008b18:	4d0b      	ldr	r5, [pc, #44]	; (8008b48 <__libc_init_array+0x40>)
 8008b1a:	4c0c      	ldr	r4, [pc, #48]	; (8008b4c <__libc_init_array+0x44>)
 8008b1c:	f003 fe00 	bl	800c720 <_init>
 8008b20:	1b64      	subs	r4, r4, r5
 8008b22:	10a4      	asrs	r4, r4, #2
 8008b24:	2600      	movs	r6, #0
 8008b26:	42a6      	cmp	r6, r4
 8008b28:	d105      	bne.n	8008b36 <__libc_init_array+0x2e>
 8008b2a:	bd70      	pop	{r4, r5, r6, pc}
 8008b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b30:	4798      	blx	r3
 8008b32:	3601      	adds	r6, #1
 8008b34:	e7ee      	b.n	8008b14 <__libc_init_array+0xc>
 8008b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b3a:	4798      	blx	r3
 8008b3c:	3601      	adds	r6, #1
 8008b3e:	e7f2      	b.n	8008b26 <__libc_init_array+0x1e>
 8008b40:	0800e908 	.word	0x0800e908
 8008b44:	0800e908 	.word	0x0800e908
 8008b48:	0800e908 	.word	0x0800e908
 8008b4c:	0800e90c 	.word	0x0800e90c

08008b50 <__retarget_lock_init_recursive>:
 8008b50:	4770      	bx	lr

08008b52 <__retarget_lock_acquire_recursive>:
 8008b52:	4770      	bx	lr

08008b54 <__retarget_lock_release_recursive>:
 8008b54:	4770      	bx	lr
	...

08008b58 <nanf>:
 8008b58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008b60 <nanf+0x8>
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	7fc00000 	.word	0x7fc00000

08008b64 <quorem>:
 8008b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b68:	6903      	ldr	r3, [r0, #16]
 8008b6a:	690c      	ldr	r4, [r1, #16]
 8008b6c:	42a3      	cmp	r3, r4
 8008b6e:	4607      	mov	r7, r0
 8008b70:	db7e      	blt.n	8008c70 <quorem+0x10c>
 8008b72:	3c01      	subs	r4, #1
 8008b74:	f101 0814 	add.w	r8, r1, #20
 8008b78:	f100 0514 	add.w	r5, r0, #20
 8008b7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b96:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b9a:	d331      	bcc.n	8008c00 <quorem+0x9c>
 8008b9c:	f04f 0e00 	mov.w	lr, #0
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	46ac      	mov	ip, r5
 8008ba4:	46f2      	mov	sl, lr
 8008ba6:	f850 2b04 	ldr.w	r2, [r0], #4
 8008baa:	b293      	uxth	r3, r2
 8008bac:	fb06 e303 	mla	r3, r6, r3, lr
 8008bb0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008bb4:	0c1a      	lsrs	r2, r3, #16
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	ebaa 0303 	sub.w	r3, sl, r3
 8008bbc:	f8dc a000 	ldr.w	sl, [ip]
 8008bc0:	fa13 f38a 	uxtah	r3, r3, sl
 8008bc4:	fb06 220e 	mla	r2, r6, lr, r2
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	9b00      	ldr	r3, [sp, #0]
 8008bcc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008bd0:	b292      	uxth	r2, r2
 8008bd2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008bd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bda:	f8bd 3000 	ldrh.w	r3, [sp]
 8008bde:	4581      	cmp	r9, r0
 8008be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008be4:	f84c 3b04 	str.w	r3, [ip], #4
 8008be8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008bec:	d2db      	bcs.n	8008ba6 <quorem+0x42>
 8008bee:	f855 300b 	ldr.w	r3, [r5, fp]
 8008bf2:	b92b      	cbnz	r3, 8008c00 <quorem+0x9c>
 8008bf4:	9b01      	ldr	r3, [sp, #4]
 8008bf6:	3b04      	subs	r3, #4
 8008bf8:	429d      	cmp	r5, r3
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	d32c      	bcc.n	8008c58 <quorem+0xf4>
 8008bfe:	613c      	str	r4, [r7, #16]
 8008c00:	4638      	mov	r0, r7
 8008c02:	f001 f96b 	bl	8009edc <__mcmp>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	db22      	blt.n	8008c50 <quorem+0xec>
 8008c0a:	3601      	adds	r6, #1
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	2000      	movs	r0, #0
 8008c10:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c14:	f8d1 c000 	ldr.w	ip, [r1]
 8008c18:	b293      	uxth	r3, r2
 8008c1a:	1ac3      	subs	r3, r0, r3
 8008c1c:	0c12      	lsrs	r2, r2, #16
 8008c1e:	fa13 f38c 	uxtah	r3, r3, ip
 8008c22:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008c26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c30:	45c1      	cmp	r9, r8
 8008c32:	f841 3b04 	str.w	r3, [r1], #4
 8008c36:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c3a:	d2e9      	bcs.n	8008c10 <quorem+0xac>
 8008c3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c44:	b922      	cbnz	r2, 8008c50 <quorem+0xec>
 8008c46:	3b04      	subs	r3, #4
 8008c48:	429d      	cmp	r5, r3
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	d30a      	bcc.n	8008c64 <quorem+0x100>
 8008c4e:	613c      	str	r4, [r7, #16]
 8008c50:	4630      	mov	r0, r6
 8008c52:	b003      	add	sp, #12
 8008c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c58:	6812      	ldr	r2, [r2, #0]
 8008c5a:	3b04      	subs	r3, #4
 8008c5c:	2a00      	cmp	r2, #0
 8008c5e:	d1ce      	bne.n	8008bfe <quorem+0x9a>
 8008c60:	3c01      	subs	r4, #1
 8008c62:	e7c9      	b.n	8008bf8 <quorem+0x94>
 8008c64:	6812      	ldr	r2, [r2, #0]
 8008c66:	3b04      	subs	r3, #4
 8008c68:	2a00      	cmp	r2, #0
 8008c6a:	d1f0      	bne.n	8008c4e <quorem+0xea>
 8008c6c:	3c01      	subs	r4, #1
 8008c6e:	e7eb      	b.n	8008c48 <quorem+0xe4>
 8008c70:	2000      	movs	r0, #0
 8008c72:	e7ee      	b.n	8008c52 <quorem+0xee>
 8008c74:	0000      	movs	r0, r0
	...

08008c78 <_dtoa_r>:
 8008c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7c:	ed2d 8b02 	vpush	{d8}
 8008c80:	69c5      	ldr	r5, [r0, #28]
 8008c82:	b091      	sub	sp, #68	; 0x44
 8008c84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008c88:	ec59 8b10 	vmov	r8, r9, d0
 8008c8c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008c8e:	9106      	str	r1, [sp, #24]
 8008c90:	4606      	mov	r6, r0
 8008c92:	9208      	str	r2, [sp, #32]
 8008c94:	930c      	str	r3, [sp, #48]	; 0x30
 8008c96:	b975      	cbnz	r5, 8008cb6 <_dtoa_r+0x3e>
 8008c98:	2010      	movs	r0, #16
 8008c9a:	f000 fda5 	bl	80097e8 <malloc>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	61f0      	str	r0, [r6, #28]
 8008ca2:	b920      	cbnz	r0, 8008cae <_dtoa_r+0x36>
 8008ca4:	4ba6      	ldr	r3, [pc, #664]	; (8008f40 <_dtoa_r+0x2c8>)
 8008ca6:	21ef      	movs	r1, #239	; 0xef
 8008ca8:	48a6      	ldr	r0, [pc, #664]	; (8008f44 <_dtoa_r+0x2cc>)
 8008caa:	f002 fba9 	bl	800b400 <__assert_func>
 8008cae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008cb2:	6005      	str	r5, [r0, #0]
 8008cb4:	60c5      	str	r5, [r0, #12]
 8008cb6:	69f3      	ldr	r3, [r6, #28]
 8008cb8:	6819      	ldr	r1, [r3, #0]
 8008cba:	b151      	cbz	r1, 8008cd2 <_dtoa_r+0x5a>
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	604a      	str	r2, [r1, #4]
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	4093      	lsls	r3, r2
 8008cc4:	608b      	str	r3, [r1, #8]
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	f000 fe82 	bl	80099d0 <_Bfree>
 8008ccc:	69f3      	ldr	r3, [r6, #28]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	f1b9 0300 	subs.w	r3, r9, #0
 8008cd6:	bfbb      	ittet	lt
 8008cd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008cdc:	9303      	strlt	r3, [sp, #12]
 8008cde:	2300      	movge	r3, #0
 8008ce0:	2201      	movlt	r2, #1
 8008ce2:	bfac      	ite	ge
 8008ce4:	6023      	strge	r3, [r4, #0]
 8008ce6:	6022      	strlt	r2, [r4, #0]
 8008ce8:	4b97      	ldr	r3, [pc, #604]	; (8008f48 <_dtoa_r+0x2d0>)
 8008cea:	9c03      	ldr	r4, [sp, #12]
 8008cec:	43a3      	bics	r3, r4
 8008cee:	d11c      	bne.n	8008d2a <_dtoa_r+0xb2>
 8008cf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cf2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008cfc:	ea53 0308 	orrs.w	r3, r3, r8
 8008d00:	f000 84fb 	beq.w	80096fa <_dtoa_r+0xa82>
 8008d04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d06:	b963      	cbnz	r3, 8008d22 <_dtoa_r+0xaa>
 8008d08:	4b90      	ldr	r3, [pc, #576]	; (8008f4c <_dtoa_r+0x2d4>)
 8008d0a:	e020      	b.n	8008d4e <_dtoa_r+0xd6>
 8008d0c:	4b90      	ldr	r3, [pc, #576]	; (8008f50 <_dtoa_r+0x2d8>)
 8008d0e:	9301      	str	r3, [sp, #4]
 8008d10:	3308      	adds	r3, #8
 8008d12:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	9801      	ldr	r0, [sp, #4]
 8008d18:	b011      	add	sp, #68	; 0x44
 8008d1a:	ecbd 8b02 	vpop	{d8}
 8008d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d22:	4b8a      	ldr	r3, [pc, #552]	; (8008f4c <_dtoa_r+0x2d4>)
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	3303      	adds	r3, #3
 8008d28:	e7f3      	b.n	8008d12 <_dtoa_r+0x9a>
 8008d2a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008d2e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d36:	d10c      	bne.n	8008d52 <_dtoa_r+0xda>
 8008d38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 84d7 	beq.w	80096f4 <_dtoa_r+0xa7c>
 8008d46:	4b83      	ldr	r3, [pc, #524]	; (8008f54 <_dtoa_r+0x2dc>)
 8008d48:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008d4a:	6013      	str	r3, [r2, #0]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	9301      	str	r3, [sp, #4]
 8008d50:	e7e1      	b.n	8008d16 <_dtoa_r+0x9e>
 8008d52:	aa0e      	add	r2, sp, #56	; 0x38
 8008d54:	a90f      	add	r1, sp, #60	; 0x3c
 8008d56:	4630      	mov	r0, r6
 8008d58:	eeb0 0b48 	vmov.f64	d0, d8
 8008d5c:	f001 f9d4 	bl	800a108 <__d2b>
 8008d60:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8008d64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d66:	4605      	mov	r5, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d046      	beq.n	8008dfa <_dtoa_r+0x182>
 8008d6c:	eeb0 7b48 	vmov.f64	d7, d8
 8008d70:	ee18 1a90 	vmov	r1, s17
 8008d74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008d78:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008d7c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008d80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008d84:	2000      	movs	r0, #0
 8008d86:	ee07 1a90 	vmov	s15, r1
 8008d8a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8008d8e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008f28 <_dtoa_r+0x2b0>
 8008d92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008d96:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008f30 <_dtoa_r+0x2b8>
 8008d9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008d9e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008f38 <_dtoa_r+0x2c0>
 8008da2:	ee07 3a90 	vmov	s15, r3
 8008da6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008daa:	eeb0 7b46 	vmov.f64	d7, d6
 8008dae:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008db2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008db6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dbe:	ee16 ba90 	vmov	fp, s13
 8008dc2:	9009      	str	r0, [sp, #36]	; 0x24
 8008dc4:	d508      	bpl.n	8008dd8 <_dtoa_r+0x160>
 8008dc6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008dca:	eeb4 6b47 	vcmp.f64	d6, d7
 8008dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd2:	bf18      	it	ne
 8008dd4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008dd8:	f1bb 0f16 	cmp.w	fp, #22
 8008ddc:	d82b      	bhi.n	8008e36 <_dtoa_r+0x1be>
 8008dde:	495e      	ldr	r1, [pc, #376]	; (8008f58 <_dtoa_r+0x2e0>)
 8008de0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8008de4:	ed91 7b00 	vldr	d7, [r1]
 8008de8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008df0:	d501      	bpl.n	8008df6 <_dtoa_r+0x17e>
 8008df2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008df6:	2100      	movs	r1, #0
 8008df8:	e01e      	b.n	8008e38 <_dtoa_r+0x1c0>
 8008dfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8008e02:	2920      	cmp	r1, #32
 8008e04:	bfc1      	itttt	gt
 8008e06:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8008e0a:	408c      	lslgt	r4, r1
 8008e0c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8008e10:	fa28 f101 	lsrgt.w	r1, r8, r1
 8008e14:	bfd6      	itet	le
 8008e16:	f1c1 0120 	rsble	r1, r1, #32
 8008e1a:	4321      	orrgt	r1, r4
 8008e1c:	fa08 f101 	lslle.w	r1, r8, r1
 8008e20:	ee07 1a90 	vmov	s15, r1
 8008e24:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	ee17 1a90 	vmov	r1, s15
 8008e2e:	2001      	movs	r0, #1
 8008e30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008e34:	e7a7      	b.n	8008d86 <_dtoa_r+0x10e>
 8008e36:	2101      	movs	r1, #1
 8008e38:	1ad2      	subs	r2, r2, r3
 8008e3a:	1e53      	subs	r3, r2, #1
 8008e3c:	9305      	str	r3, [sp, #20]
 8008e3e:	bf45      	ittet	mi
 8008e40:	f1c2 0301 	rsbmi	r3, r2, #1
 8008e44:	9304      	strmi	r3, [sp, #16]
 8008e46:	2300      	movpl	r3, #0
 8008e48:	2300      	movmi	r3, #0
 8008e4a:	bf4c      	ite	mi
 8008e4c:	9305      	strmi	r3, [sp, #20]
 8008e4e:	9304      	strpl	r3, [sp, #16]
 8008e50:	f1bb 0f00 	cmp.w	fp, #0
 8008e54:	910b      	str	r1, [sp, #44]	; 0x2c
 8008e56:	db18      	blt.n	8008e8a <_dtoa_r+0x212>
 8008e58:	9b05      	ldr	r3, [sp, #20]
 8008e5a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008e5e:	445b      	add	r3, fp
 8008e60:	9305      	str	r3, [sp, #20]
 8008e62:	2300      	movs	r3, #0
 8008e64:	9a06      	ldr	r2, [sp, #24]
 8008e66:	2a09      	cmp	r2, #9
 8008e68:	d848      	bhi.n	8008efc <_dtoa_r+0x284>
 8008e6a:	2a05      	cmp	r2, #5
 8008e6c:	bfc4      	itt	gt
 8008e6e:	3a04      	subgt	r2, #4
 8008e70:	9206      	strgt	r2, [sp, #24]
 8008e72:	9a06      	ldr	r2, [sp, #24]
 8008e74:	f1a2 0202 	sub.w	r2, r2, #2
 8008e78:	bfcc      	ite	gt
 8008e7a:	2400      	movgt	r4, #0
 8008e7c:	2401      	movle	r4, #1
 8008e7e:	2a03      	cmp	r2, #3
 8008e80:	d847      	bhi.n	8008f12 <_dtoa_r+0x29a>
 8008e82:	e8df f002 	tbb	[pc, r2]
 8008e86:	2d0b      	.short	0x2d0b
 8008e88:	392b      	.short	0x392b
 8008e8a:	9b04      	ldr	r3, [sp, #16]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	eba3 030b 	sub.w	r3, r3, fp
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	920a      	str	r2, [sp, #40]	; 0x28
 8008e96:	f1cb 0300 	rsb	r3, fp, #0
 8008e9a:	e7e3      	b.n	8008e64 <_dtoa_r+0x1ec>
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	9207      	str	r2, [sp, #28]
 8008ea0:	9a08      	ldr	r2, [sp, #32]
 8008ea2:	2a00      	cmp	r2, #0
 8008ea4:	dc38      	bgt.n	8008f18 <_dtoa_r+0x2a0>
 8008ea6:	f04f 0a01 	mov.w	sl, #1
 8008eaa:	46d1      	mov	r9, sl
 8008eac:	4652      	mov	r2, sl
 8008eae:	f8cd a020 	str.w	sl, [sp, #32]
 8008eb2:	69f7      	ldr	r7, [r6, #28]
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	2004      	movs	r0, #4
 8008eb8:	f100 0c14 	add.w	ip, r0, #20
 8008ebc:	4594      	cmp	ip, r2
 8008ebe:	d930      	bls.n	8008f22 <_dtoa_r+0x2aa>
 8008ec0:	6079      	str	r1, [r7, #4]
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	930d      	str	r3, [sp, #52]	; 0x34
 8008ec6:	f000 fd43 	bl	8009950 <_Balloc>
 8008eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ecc:	9001      	str	r0, [sp, #4]
 8008ece:	4602      	mov	r2, r0
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d145      	bne.n	8008f60 <_dtoa_r+0x2e8>
 8008ed4:	4b21      	ldr	r3, [pc, #132]	; (8008f5c <_dtoa_r+0x2e4>)
 8008ed6:	f240 11af 	movw	r1, #431	; 0x1af
 8008eda:	e6e5      	b.n	8008ca8 <_dtoa_r+0x30>
 8008edc:	2201      	movs	r2, #1
 8008ede:	e7de      	b.n	8008e9e <_dtoa_r+0x226>
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	9207      	str	r2, [sp, #28]
 8008ee4:	9a08      	ldr	r2, [sp, #32]
 8008ee6:	eb0b 0a02 	add.w	sl, fp, r2
 8008eea:	f10a 0901 	add.w	r9, sl, #1
 8008eee:	464a      	mov	r2, r9
 8008ef0:	2a01      	cmp	r2, #1
 8008ef2:	bfb8      	it	lt
 8008ef4:	2201      	movlt	r2, #1
 8008ef6:	e7dc      	b.n	8008eb2 <_dtoa_r+0x23a>
 8008ef8:	2201      	movs	r2, #1
 8008efa:	e7f2      	b.n	8008ee2 <_dtoa_r+0x26a>
 8008efc:	2401      	movs	r4, #1
 8008efe:	2200      	movs	r2, #0
 8008f00:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008f04:	f04f 3aff 	mov.w	sl, #4294967295
 8008f08:	2100      	movs	r1, #0
 8008f0a:	46d1      	mov	r9, sl
 8008f0c:	2212      	movs	r2, #18
 8008f0e:	9108      	str	r1, [sp, #32]
 8008f10:	e7cf      	b.n	8008eb2 <_dtoa_r+0x23a>
 8008f12:	2201      	movs	r2, #1
 8008f14:	9207      	str	r2, [sp, #28]
 8008f16:	e7f5      	b.n	8008f04 <_dtoa_r+0x28c>
 8008f18:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008f1c:	46d1      	mov	r9, sl
 8008f1e:	4652      	mov	r2, sl
 8008f20:	e7c7      	b.n	8008eb2 <_dtoa_r+0x23a>
 8008f22:	3101      	adds	r1, #1
 8008f24:	0040      	lsls	r0, r0, #1
 8008f26:	e7c7      	b.n	8008eb8 <_dtoa_r+0x240>
 8008f28:	636f4361 	.word	0x636f4361
 8008f2c:	3fd287a7 	.word	0x3fd287a7
 8008f30:	8b60c8b3 	.word	0x8b60c8b3
 8008f34:	3fc68a28 	.word	0x3fc68a28
 8008f38:	509f79fb 	.word	0x509f79fb
 8008f3c:	3fd34413 	.word	0x3fd34413
 8008f40:	0800cc62 	.word	0x0800cc62
 8008f44:	0800cc79 	.word	0x0800cc79
 8008f48:	7ff00000 	.word	0x7ff00000
 8008f4c:	0800cc5e 	.word	0x0800cc5e
 8008f50:	0800cc55 	.word	0x0800cc55
 8008f54:	0800cc2d 	.word	0x0800cc2d
 8008f58:	0800cd68 	.word	0x0800cd68
 8008f5c:	0800ccd1 	.word	0x0800ccd1
 8008f60:	69f2      	ldr	r2, [r6, #28]
 8008f62:	9901      	ldr	r1, [sp, #4]
 8008f64:	6011      	str	r1, [r2, #0]
 8008f66:	f1b9 0f0e 	cmp.w	r9, #14
 8008f6a:	d86c      	bhi.n	8009046 <_dtoa_r+0x3ce>
 8008f6c:	2c00      	cmp	r4, #0
 8008f6e:	d06a      	beq.n	8009046 <_dtoa_r+0x3ce>
 8008f70:	f1bb 0f00 	cmp.w	fp, #0
 8008f74:	f340 80a0 	ble.w	80090b8 <_dtoa_r+0x440>
 8008f78:	4ac1      	ldr	r2, [pc, #772]	; (8009280 <_dtoa_r+0x608>)
 8008f7a:	f00b 010f 	and.w	r1, fp, #15
 8008f7e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008f82:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008f86:	ed92 7b00 	vldr	d7, [r2]
 8008f8a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8008f8e:	f000 8087 	beq.w	80090a0 <_dtoa_r+0x428>
 8008f92:	49bc      	ldr	r1, [pc, #752]	; (8009284 <_dtoa_r+0x60c>)
 8008f94:	ed91 6b08 	vldr	d6, [r1, #32]
 8008f98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008f9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008fa0:	f002 020f 	and.w	r2, r2, #15
 8008fa4:	2103      	movs	r1, #3
 8008fa6:	48b7      	ldr	r0, [pc, #732]	; (8009284 <_dtoa_r+0x60c>)
 8008fa8:	2a00      	cmp	r2, #0
 8008faa:	d17b      	bne.n	80090a4 <_dtoa_r+0x42c>
 8008fac:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008fb0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008fb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008fb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fbe:	2a00      	cmp	r2, #0
 8008fc0:	f000 80a0 	beq.w	8009104 <_dtoa_r+0x48c>
 8008fc4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008fc8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd0:	f140 8098 	bpl.w	8009104 <_dtoa_r+0x48c>
 8008fd4:	f1b9 0f00 	cmp.w	r9, #0
 8008fd8:	f000 8094 	beq.w	8009104 <_dtoa_r+0x48c>
 8008fdc:	f1ba 0f00 	cmp.w	sl, #0
 8008fe0:	dd2f      	ble.n	8009042 <_dtoa_r+0x3ca>
 8008fe2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008fe6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008fea:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008fee:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008ff2:	3101      	adds	r1, #1
 8008ff4:	4654      	mov	r4, sl
 8008ff6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008ffa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008ffe:	ee07 1a90 	vmov	s15, r1
 8009002:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009006:	eea7 5b06 	vfma.f64	d5, d7, d6
 800900a:	ee15 7a90 	vmov	r7, s11
 800900e:	ec51 0b15 	vmov	r0, r1, d5
 8009012:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8009016:	2c00      	cmp	r4, #0
 8009018:	d177      	bne.n	800910a <_dtoa_r+0x492>
 800901a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800901e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009022:	ec41 0b17 	vmov	d7, r0, r1
 8009026:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800902a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902e:	f300 826a 	bgt.w	8009506 <_dtoa_r+0x88e>
 8009032:	eeb1 7b47 	vneg.f64	d7, d7
 8009036:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800903a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800903e:	f100 8260 	bmi.w	8009502 <_dtoa_r+0x88a>
 8009042:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009046:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009048:	2a00      	cmp	r2, #0
 800904a:	f2c0 811d 	blt.w	8009288 <_dtoa_r+0x610>
 800904e:	f1bb 0f0e 	cmp.w	fp, #14
 8009052:	f300 8119 	bgt.w	8009288 <_dtoa_r+0x610>
 8009056:	4b8a      	ldr	r3, [pc, #552]	; (8009280 <_dtoa_r+0x608>)
 8009058:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800905c:	ed93 6b00 	vldr	d6, [r3]
 8009060:	9b08      	ldr	r3, [sp, #32]
 8009062:	2b00      	cmp	r3, #0
 8009064:	f280 80b7 	bge.w	80091d6 <_dtoa_r+0x55e>
 8009068:	f1b9 0f00 	cmp.w	r9, #0
 800906c:	f300 80b3 	bgt.w	80091d6 <_dtoa_r+0x55e>
 8009070:	f040 8246 	bne.w	8009500 <_dtoa_r+0x888>
 8009074:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009078:	ee26 6b07 	vmul.f64	d6, d6, d7
 800907c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009080:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009088:	464c      	mov	r4, r9
 800908a:	464f      	mov	r7, r9
 800908c:	f280 821c 	bge.w	80094c8 <_dtoa_r+0x850>
 8009090:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009094:	2331      	movs	r3, #49	; 0x31
 8009096:	f808 3b01 	strb.w	r3, [r8], #1
 800909a:	f10b 0b01 	add.w	fp, fp, #1
 800909e:	e218      	b.n	80094d2 <_dtoa_r+0x85a>
 80090a0:	2102      	movs	r1, #2
 80090a2:	e780      	b.n	8008fa6 <_dtoa_r+0x32e>
 80090a4:	07d4      	lsls	r4, r2, #31
 80090a6:	d504      	bpl.n	80090b2 <_dtoa_r+0x43a>
 80090a8:	ed90 6b00 	vldr	d6, [r0]
 80090ac:	3101      	adds	r1, #1
 80090ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80090b2:	1052      	asrs	r2, r2, #1
 80090b4:	3008      	adds	r0, #8
 80090b6:	e777      	b.n	8008fa8 <_dtoa_r+0x330>
 80090b8:	d022      	beq.n	8009100 <_dtoa_r+0x488>
 80090ba:	f1cb 0200 	rsb	r2, fp, #0
 80090be:	4970      	ldr	r1, [pc, #448]	; (8009280 <_dtoa_r+0x608>)
 80090c0:	f002 000f 	and.w	r0, r2, #15
 80090c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80090c8:	ed91 7b00 	vldr	d7, [r1]
 80090cc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80090d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80090d4:	486b      	ldr	r0, [pc, #428]	; (8009284 <_dtoa_r+0x60c>)
 80090d6:	1112      	asrs	r2, r2, #4
 80090d8:	2400      	movs	r4, #0
 80090da:	2102      	movs	r1, #2
 80090dc:	b92a      	cbnz	r2, 80090ea <_dtoa_r+0x472>
 80090de:	2c00      	cmp	r4, #0
 80090e0:	f43f af6a 	beq.w	8008fb8 <_dtoa_r+0x340>
 80090e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80090e8:	e766      	b.n	8008fb8 <_dtoa_r+0x340>
 80090ea:	07d7      	lsls	r7, r2, #31
 80090ec:	d505      	bpl.n	80090fa <_dtoa_r+0x482>
 80090ee:	ed90 6b00 	vldr	d6, [r0]
 80090f2:	3101      	adds	r1, #1
 80090f4:	2401      	movs	r4, #1
 80090f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80090fa:	1052      	asrs	r2, r2, #1
 80090fc:	3008      	adds	r0, #8
 80090fe:	e7ed      	b.n	80090dc <_dtoa_r+0x464>
 8009100:	2102      	movs	r1, #2
 8009102:	e759      	b.n	8008fb8 <_dtoa_r+0x340>
 8009104:	465a      	mov	r2, fp
 8009106:	464c      	mov	r4, r9
 8009108:	e775      	b.n	8008ff6 <_dtoa_r+0x37e>
 800910a:	ec41 0b17 	vmov	d7, r0, r1
 800910e:	495c      	ldr	r1, [pc, #368]	; (8009280 <_dtoa_r+0x608>)
 8009110:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009114:	ed11 4b02 	vldr	d4, [r1, #-8]
 8009118:	9901      	ldr	r1, [sp, #4]
 800911a:	440c      	add	r4, r1
 800911c:	9907      	ldr	r1, [sp, #28]
 800911e:	b351      	cbz	r1, 8009176 <_dtoa_r+0x4fe>
 8009120:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009124:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009128:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800912c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009130:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009134:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009138:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800913c:	ee14 1a90 	vmov	r1, s9
 8009140:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009144:	3130      	adds	r1, #48	; 0x30
 8009146:	ee36 6b45 	vsub.f64	d6, d6, d5
 800914a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800914e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009152:	f808 1b01 	strb.w	r1, [r8], #1
 8009156:	d439      	bmi.n	80091cc <_dtoa_r+0x554>
 8009158:	ee32 5b46 	vsub.f64	d5, d2, d6
 800915c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009164:	d472      	bmi.n	800924c <_dtoa_r+0x5d4>
 8009166:	45a0      	cmp	r8, r4
 8009168:	f43f af6b 	beq.w	8009042 <_dtoa_r+0x3ca>
 800916c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009170:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009174:	e7e0      	b.n	8009138 <_dtoa_r+0x4c0>
 8009176:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800917a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800917e:	4620      	mov	r0, r4
 8009180:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009184:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009188:	ee14 1a90 	vmov	r1, s9
 800918c:	3130      	adds	r1, #48	; 0x30
 800918e:	f808 1b01 	strb.w	r1, [r8], #1
 8009192:	45a0      	cmp	r8, r4
 8009194:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009198:	ee36 6b45 	vsub.f64	d6, d6, d5
 800919c:	d118      	bne.n	80091d0 <_dtoa_r+0x558>
 800919e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80091a2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80091a6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80091aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ae:	dc4d      	bgt.n	800924c <_dtoa_r+0x5d4>
 80091b0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80091b4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80091b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091bc:	f57f af41 	bpl.w	8009042 <_dtoa_r+0x3ca>
 80091c0:	4680      	mov	r8, r0
 80091c2:	3801      	subs	r0, #1
 80091c4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80091c8:	2b30      	cmp	r3, #48	; 0x30
 80091ca:	d0f9      	beq.n	80091c0 <_dtoa_r+0x548>
 80091cc:	4693      	mov	fp, r2
 80091ce:	e02a      	b.n	8009226 <_dtoa_r+0x5ae>
 80091d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80091d4:	e7d6      	b.n	8009184 <_dtoa_r+0x50c>
 80091d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091da:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80091de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80091e2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80091e6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80091ea:	ee15 3a10 	vmov	r3, s10
 80091ee:	3330      	adds	r3, #48	; 0x30
 80091f0:	f808 3b01 	strb.w	r3, [r8], #1
 80091f4:	9b01      	ldr	r3, [sp, #4]
 80091f6:	eba8 0303 	sub.w	r3, r8, r3
 80091fa:	4599      	cmp	r9, r3
 80091fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009200:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009204:	d133      	bne.n	800926e <_dtoa_r+0x5f6>
 8009206:	ee37 7b07 	vadd.f64	d7, d7, d7
 800920a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800920e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009212:	dc1a      	bgt.n	800924a <_dtoa_r+0x5d2>
 8009214:	eeb4 7b46 	vcmp.f64	d7, d6
 8009218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800921c:	d103      	bne.n	8009226 <_dtoa_r+0x5ae>
 800921e:	ee15 3a10 	vmov	r3, s10
 8009222:	07d9      	lsls	r1, r3, #31
 8009224:	d411      	bmi.n	800924a <_dtoa_r+0x5d2>
 8009226:	4629      	mov	r1, r5
 8009228:	4630      	mov	r0, r6
 800922a:	f000 fbd1 	bl	80099d0 <_Bfree>
 800922e:	2300      	movs	r3, #0
 8009230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009232:	f888 3000 	strb.w	r3, [r8]
 8009236:	f10b 0301 	add.w	r3, fp, #1
 800923a:	6013      	str	r3, [r2, #0]
 800923c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800923e:	2b00      	cmp	r3, #0
 8009240:	f43f ad69 	beq.w	8008d16 <_dtoa_r+0x9e>
 8009244:	f8c3 8000 	str.w	r8, [r3]
 8009248:	e565      	b.n	8008d16 <_dtoa_r+0x9e>
 800924a:	465a      	mov	r2, fp
 800924c:	4643      	mov	r3, r8
 800924e:	4698      	mov	r8, r3
 8009250:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8009254:	2939      	cmp	r1, #57	; 0x39
 8009256:	d106      	bne.n	8009266 <_dtoa_r+0x5ee>
 8009258:	9901      	ldr	r1, [sp, #4]
 800925a:	4299      	cmp	r1, r3
 800925c:	d1f7      	bne.n	800924e <_dtoa_r+0x5d6>
 800925e:	9801      	ldr	r0, [sp, #4]
 8009260:	2130      	movs	r1, #48	; 0x30
 8009262:	3201      	adds	r2, #1
 8009264:	7001      	strb	r1, [r0, #0]
 8009266:	7819      	ldrb	r1, [r3, #0]
 8009268:	3101      	adds	r1, #1
 800926a:	7019      	strb	r1, [r3, #0]
 800926c:	e7ae      	b.n	80091cc <_dtoa_r+0x554>
 800926e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009272:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800927a:	d1b2      	bne.n	80091e2 <_dtoa_r+0x56a>
 800927c:	e7d3      	b.n	8009226 <_dtoa_r+0x5ae>
 800927e:	bf00      	nop
 8009280:	0800cd68 	.word	0x0800cd68
 8009284:	0800cd40 	.word	0x0800cd40
 8009288:	9907      	ldr	r1, [sp, #28]
 800928a:	2900      	cmp	r1, #0
 800928c:	f000 80d0 	beq.w	8009430 <_dtoa_r+0x7b8>
 8009290:	9906      	ldr	r1, [sp, #24]
 8009292:	2901      	cmp	r1, #1
 8009294:	f300 80b4 	bgt.w	8009400 <_dtoa_r+0x788>
 8009298:	9909      	ldr	r1, [sp, #36]	; 0x24
 800929a:	2900      	cmp	r1, #0
 800929c:	f000 80ac 	beq.w	80093f8 <_dtoa_r+0x780>
 80092a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80092a4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80092a8:	461c      	mov	r4, r3
 80092aa:	9309      	str	r3, [sp, #36]	; 0x24
 80092ac:	9b04      	ldr	r3, [sp, #16]
 80092ae:	4413      	add	r3, r2
 80092b0:	9304      	str	r3, [sp, #16]
 80092b2:	9b05      	ldr	r3, [sp, #20]
 80092b4:	2101      	movs	r1, #1
 80092b6:	4413      	add	r3, r2
 80092b8:	4630      	mov	r0, r6
 80092ba:	9305      	str	r3, [sp, #20]
 80092bc:	f000 fc88 	bl	8009bd0 <__i2b>
 80092c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c2:	4607      	mov	r7, r0
 80092c4:	f1b8 0f00 	cmp.w	r8, #0
 80092c8:	d00d      	beq.n	80092e6 <_dtoa_r+0x66e>
 80092ca:	9a05      	ldr	r2, [sp, #20]
 80092cc:	2a00      	cmp	r2, #0
 80092ce:	dd0a      	ble.n	80092e6 <_dtoa_r+0x66e>
 80092d0:	4542      	cmp	r2, r8
 80092d2:	9904      	ldr	r1, [sp, #16]
 80092d4:	bfa8      	it	ge
 80092d6:	4642      	movge	r2, r8
 80092d8:	1a89      	subs	r1, r1, r2
 80092da:	9104      	str	r1, [sp, #16]
 80092dc:	9905      	ldr	r1, [sp, #20]
 80092de:	eba8 0802 	sub.w	r8, r8, r2
 80092e2:	1a8a      	subs	r2, r1, r2
 80092e4:	9205      	str	r2, [sp, #20]
 80092e6:	b303      	cbz	r3, 800932a <_dtoa_r+0x6b2>
 80092e8:	9a07      	ldr	r2, [sp, #28]
 80092ea:	2a00      	cmp	r2, #0
 80092ec:	f000 80a5 	beq.w	800943a <_dtoa_r+0x7c2>
 80092f0:	2c00      	cmp	r4, #0
 80092f2:	dd13      	ble.n	800931c <_dtoa_r+0x6a4>
 80092f4:	4639      	mov	r1, r7
 80092f6:	4622      	mov	r2, r4
 80092f8:	4630      	mov	r0, r6
 80092fa:	930d      	str	r3, [sp, #52]	; 0x34
 80092fc:	f000 fd28 	bl	8009d50 <__pow5mult>
 8009300:	462a      	mov	r2, r5
 8009302:	4601      	mov	r1, r0
 8009304:	4607      	mov	r7, r0
 8009306:	4630      	mov	r0, r6
 8009308:	f000 fc78 	bl	8009bfc <__multiply>
 800930c:	4629      	mov	r1, r5
 800930e:	9009      	str	r0, [sp, #36]	; 0x24
 8009310:	4630      	mov	r0, r6
 8009312:	f000 fb5d 	bl	80099d0 <_Bfree>
 8009316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800931a:	4615      	mov	r5, r2
 800931c:	1b1a      	subs	r2, r3, r4
 800931e:	d004      	beq.n	800932a <_dtoa_r+0x6b2>
 8009320:	4629      	mov	r1, r5
 8009322:	4630      	mov	r0, r6
 8009324:	f000 fd14 	bl	8009d50 <__pow5mult>
 8009328:	4605      	mov	r5, r0
 800932a:	2101      	movs	r1, #1
 800932c:	4630      	mov	r0, r6
 800932e:	f000 fc4f 	bl	8009bd0 <__i2b>
 8009332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009334:	2b00      	cmp	r3, #0
 8009336:	4604      	mov	r4, r0
 8009338:	f340 8081 	ble.w	800943e <_dtoa_r+0x7c6>
 800933c:	461a      	mov	r2, r3
 800933e:	4601      	mov	r1, r0
 8009340:	4630      	mov	r0, r6
 8009342:	f000 fd05 	bl	8009d50 <__pow5mult>
 8009346:	9b06      	ldr	r3, [sp, #24]
 8009348:	2b01      	cmp	r3, #1
 800934a:	4604      	mov	r4, r0
 800934c:	dd7a      	ble.n	8009444 <_dtoa_r+0x7cc>
 800934e:	2300      	movs	r3, #0
 8009350:	9309      	str	r3, [sp, #36]	; 0x24
 8009352:	6922      	ldr	r2, [r4, #16]
 8009354:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009358:	6910      	ldr	r0, [r2, #16]
 800935a:	f000 fbeb 	bl	8009b34 <__hi0bits>
 800935e:	f1c0 0020 	rsb	r0, r0, #32
 8009362:	9b05      	ldr	r3, [sp, #20]
 8009364:	4418      	add	r0, r3
 8009366:	f010 001f 	ands.w	r0, r0, #31
 800936a:	f000 8093 	beq.w	8009494 <_dtoa_r+0x81c>
 800936e:	f1c0 0220 	rsb	r2, r0, #32
 8009372:	2a04      	cmp	r2, #4
 8009374:	f340 8085 	ble.w	8009482 <_dtoa_r+0x80a>
 8009378:	9b04      	ldr	r3, [sp, #16]
 800937a:	f1c0 001c 	rsb	r0, r0, #28
 800937e:	4403      	add	r3, r0
 8009380:	9304      	str	r3, [sp, #16]
 8009382:	9b05      	ldr	r3, [sp, #20]
 8009384:	4480      	add	r8, r0
 8009386:	4403      	add	r3, r0
 8009388:	9305      	str	r3, [sp, #20]
 800938a:	9b04      	ldr	r3, [sp, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	dd05      	ble.n	800939c <_dtoa_r+0x724>
 8009390:	4629      	mov	r1, r5
 8009392:	461a      	mov	r2, r3
 8009394:	4630      	mov	r0, r6
 8009396:	f000 fd35 	bl	8009e04 <__lshift>
 800939a:	4605      	mov	r5, r0
 800939c:	9b05      	ldr	r3, [sp, #20]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	dd05      	ble.n	80093ae <_dtoa_r+0x736>
 80093a2:	4621      	mov	r1, r4
 80093a4:	461a      	mov	r2, r3
 80093a6:	4630      	mov	r0, r6
 80093a8:	f000 fd2c 	bl	8009e04 <__lshift>
 80093ac:	4604      	mov	r4, r0
 80093ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d071      	beq.n	8009498 <_dtoa_r+0x820>
 80093b4:	4621      	mov	r1, r4
 80093b6:	4628      	mov	r0, r5
 80093b8:	f000 fd90 	bl	8009edc <__mcmp>
 80093bc:	2800      	cmp	r0, #0
 80093be:	da6b      	bge.n	8009498 <_dtoa_r+0x820>
 80093c0:	2300      	movs	r3, #0
 80093c2:	4629      	mov	r1, r5
 80093c4:	220a      	movs	r2, #10
 80093c6:	4630      	mov	r0, r6
 80093c8:	f000 fb24 	bl	8009a14 <__multadd>
 80093cc:	9b07      	ldr	r3, [sp, #28]
 80093ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093d2:	4605      	mov	r5, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 8197 	beq.w	8009708 <_dtoa_r+0xa90>
 80093da:	4639      	mov	r1, r7
 80093dc:	2300      	movs	r3, #0
 80093de:	220a      	movs	r2, #10
 80093e0:	4630      	mov	r0, r6
 80093e2:	f000 fb17 	bl	8009a14 <__multadd>
 80093e6:	f1ba 0f00 	cmp.w	sl, #0
 80093ea:	4607      	mov	r7, r0
 80093ec:	f300 8093 	bgt.w	8009516 <_dtoa_r+0x89e>
 80093f0:	9b06      	ldr	r3, [sp, #24]
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	dc57      	bgt.n	80094a6 <_dtoa_r+0x82e>
 80093f6:	e08e      	b.n	8009516 <_dtoa_r+0x89e>
 80093f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80093fe:	e751      	b.n	80092a4 <_dtoa_r+0x62c>
 8009400:	f109 34ff 	add.w	r4, r9, #4294967295
 8009404:	42a3      	cmp	r3, r4
 8009406:	bfbf      	itttt	lt
 8009408:	1ae2      	sublt	r2, r4, r3
 800940a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800940c:	189b      	addlt	r3, r3, r2
 800940e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009410:	bfae      	itee	ge
 8009412:	1b1c      	subge	r4, r3, r4
 8009414:	4623      	movlt	r3, r4
 8009416:	2400      	movlt	r4, #0
 8009418:	f1b9 0f00 	cmp.w	r9, #0
 800941c:	bfb5      	itete	lt
 800941e:	9a04      	ldrlt	r2, [sp, #16]
 8009420:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009424:	eba2 0809 	sublt.w	r8, r2, r9
 8009428:	464a      	movge	r2, r9
 800942a:	bfb8      	it	lt
 800942c:	2200      	movlt	r2, #0
 800942e:	e73c      	b.n	80092aa <_dtoa_r+0x632>
 8009430:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009434:	9f07      	ldr	r7, [sp, #28]
 8009436:	461c      	mov	r4, r3
 8009438:	e744      	b.n	80092c4 <_dtoa_r+0x64c>
 800943a:	461a      	mov	r2, r3
 800943c:	e770      	b.n	8009320 <_dtoa_r+0x6a8>
 800943e:	9b06      	ldr	r3, [sp, #24]
 8009440:	2b01      	cmp	r3, #1
 8009442:	dc18      	bgt.n	8009476 <_dtoa_r+0x7fe>
 8009444:	9b02      	ldr	r3, [sp, #8]
 8009446:	b9b3      	cbnz	r3, 8009476 <_dtoa_r+0x7fe>
 8009448:	9b03      	ldr	r3, [sp, #12]
 800944a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800944e:	b9a2      	cbnz	r2, 800947a <_dtoa_r+0x802>
 8009450:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009454:	0d12      	lsrs	r2, r2, #20
 8009456:	0512      	lsls	r2, r2, #20
 8009458:	b18a      	cbz	r2, 800947e <_dtoa_r+0x806>
 800945a:	9b04      	ldr	r3, [sp, #16]
 800945c:	3301      	adds	r3, #1
 800945e:	9304      	str	r3, [sp, #16]
 8009460:	9b05      	ldr	r3, [sp, #20]
 8009462:	3301      	adds	r3, #1
 8009464:	9305      	str	r3, [sp, #20]
 8009466:	2301      	movs	r3, #1
 8009468:	9309      	str	r3, [sp, #36]	; 0x24
 800946a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800946c:	2b00      	cmp	r3, #0
 800946e:	f47f af70 	bne.w	8009352 <_dtoa_r+0x6da>
 8009472:	2001      	movs	r0, #1
 8009474:	e775      	b.n	8009362 <_dtoa_r+0x6ea>
 8009476:	2300      	movs	r3, #0
 8009478:	e7f6      	b.n	8009468 <_dtoa_r+0x7f0>
 800947a:	9b02      	ldr	r3, [sp, #8]
 800947c:	e7f4      	b.n	8009468 <_dtoa_r+0x7f0>
 800947e:	9209      	str	r2, [sp, #36]	; 0x24
 8009480:	e7f3      	b.n	800946a <_dtoa_r+0x7f2>
 8009482:	d082      	beq.n	800938a <_dtoa_r+0x712>
 8009484:	9b04      	ldr	r3, [sp, #16]
 8009486:	321c      	adds	r2, #28
 8009488:	4413      	add	r3, r2
 800948a:	9304      	str	r3, [sp, #16]
 800948c:	9b05      	ldr	r3, [sp, #20]
 800948e:	4490      	add	r8, r2
 8009490:	4413      	add	r3, r2
 8009492:	e779      	b.n	8009388 <_dtoa_r+0x710>
 8009494:	4602      	mov	r2, r0
 8009496:	e7f5      	b.n	8009484 <_dtoa_r+0x80c>
 8009498:	f1b9 0f00 	cmp.w	r9, #0
 800949c:	dc36      	bgt.n	800950c <_dtoa_r+0x894>
 800949e:	9b06      	ldr	r3, [sp, #24]
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	dd33      	ble.n	800950c <_dtoa_r+0x894>
 80094a4:	46ca      	mov	sl, r9
 80094a6:	f1ba 0f00 	cmp.w	sl, #0
 80094aa:	d10d      	bne.n	80094c8 <_dtoa_r+0x850>
 80094ac:	4621      	mov	r1, r4
 80094ae:	4653      	mov	r3, sl
 80094b0:	2205      	movs	r2, #5
 80094b2:	4630      	mov	r0, r6
 80094b4:	f000 faae 	bl	8009a14 <__multadd>
 80094b8:	4601      	mov	r1, r0
 80094ba:	4604      	mov	r4, r0
 80094bc:	4628      	mov	r0, r5
 80094be:	f000 fd0d 	bl	8009edc <__mcmp>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	f73f ade4 	bgt.w	8009090 <_dtoa_r+0x418>
 80094c8:	9b08      	ldr	r3, [sp, #32]
 80094ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80094ce:	ea6f 0b03 	mvn.w	fp, r3
 80094d2:	f04f 0900 	mov.w	r9, #0
 80094d6:	4621      	mov	r1, r4
 80094d8:	4630      	mov	r0, r6
 80094da:	f000 fa79 	bl	80099d0 <_Bfree>
 80094de:	2f00      	cmp	r7, #0
 80094e0:	f43f aea1 	beq.w	8009226 <_dtoa_r+0x5ae>
 80094e4:	f1b9 0f00 	cmp.w	r9, #0
 80094e8:	d005      	beq.n	80094f6 <_dtoa_r+0x87e>
 80094ea:	45b9      	cmp	r9, r7
 80094ec:	d003      	beq.n	80094f6 <_dtoa_r+0x87e>
 80094ee:	4649      	mov	r1, r9
 80094f0:	4630      	mov	r0, r6
 80094f2:	f000 fa6d 	bl	80099d0 <_Bfree>
 80094f6:	4639      	mov	r1, r7
 80094f8:	4630      	mov	r0, r6
 80094fa:	f000 fa69 	bl	80099d0 <_Bfree>
 80094fe:	e692      	b.n	8009226 <_dtoa_r+0x5ae>
 8009500:	2400      	movs	r4, #0
 8009502:	4627      	mov	r7, r4
 8009504:	e7e0      	b.n	80094c8 <_dtoa_r+0x850>
 8009506:	4693      	mov	fp, r2
 8009508:	4627      	mov	r7, r4
 800950a:	e5c1      	b.n	8009090 <_dtoa_r+0x418>
 800950c:	9b07      	ldr	r3, [sp, #28]
 800950e:	46ca      	mov	sl, r9
 8009510:	2b00      	cmp	r3, #0
 8009512:	f000 8100 	beq.w	8009716 <_dtoa_r+0xa9e>
 8009516:	f1b8 0f00 	cmp.w	r8, #0
 800951a:	dd05      	ble.n	8009528 <_dtoa_r+0x8b0>
 800951c:	4639      	mov	r1, r7
 800951e:	4642      	mov	r2, r8
 8009520:	4630      	mov	r0, r6
 8009522:	f000 fc6f 	bl	8009e04 <__lshift>
 8009526:	4607      	mov	r7, r0
 8009528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800952a:	2b00      	cmp	r3, #0
 800952c:	d05d      	beq.n	80095ea <_dtoa_r+0x972>
 800952e:	6879      	ldr	r1, [r7, #4]
 8009530:	4630      	mov	r0, r6
 8009532:	f000 fa0d 	bl	8009950 <_Balloc>
 8009536:	4680      	mov	r8, r0
 8009538:	b928      	cbnz	r0, 8009546 <_dtoa_r+0x8ce>
 800953a:	4b82      	ldr	r3, [pc, #520]	; (8009744 <_dtoa_r+0xacc>)
 800953c:	4602      	mov	r2, r0
 800953e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009542:	f7ff bbb1 	b.w	8008ca8 <_dtoa_r+0x30>
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	3202      	adds	r2, #2
 800954a:	0092      	lsls	r2, r2, #2
 800954c:	f107 010c 	add.w	r1, r7, #12
 8009550:	300c      	adds	r0, #12
 8009552:	f001 ff3f 	bl	800b3d4 <memcpy>
 8009556:	2201      	movs	r2, #1
 8009558:	4641      	mov	r1, r8
 800955a:	4630      	mov	r0, r6
 800955c:	f000 fc52 	bl	8009e04 <__lshift>
 8009560:	9b01      	ldr	r3, [sp, #4]
 8009562:	3301      	adds	r3, #1
 8009564:	9304      	str	r3, [sp, #16]
 8009566:	9b01      	ldr	r3, [sp, #4]
 8009568:	4453      	add	r3, sl
 800956a:	9308      	str	r3, [sp, #32]
 800956c:	9b02      	ldr	r3, [sp, #8]
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	46b9      	mov	r9, r7
 8009574:	9307      	str	r3, [sp, #28]
 8009576:	4607      	mov	r7, r0
 8009578:	9b04      	ldr	r3, [sp, #16]
 800957a:	4621      	mov	r1, r4
 800957c:	3b01      	subs	r3, #1
 800957e:	4628      	mov	r0, r5
 8009580:	9302      	str	r3, [sp, #8]
 8009582:	f7ff faef 	bl	8008b64 <quorem>
 8009586:	4603      	mov	r3, r0
 8009588:	3330      	adds	r3, #48	; 0x30
 800958a:	9005      	str	r0, [sp, #20]
 800958c:	4649      	mov	r1, r9
 800958e:	4628      	mov	r0, r5
 8009590:	9309      	str	r3, [sp, #36]	; 0x24
 8009592:	f000 fca3 	bl	8009edc <__mcmp>
 8009596:	463a      	mov	r2, r7
 8009598:	4682      	mov	sl, r0
 800959a:	4621      	mov	r1, r4
 800959c:	4630      	mov	r0, r6
 800959e:	f000 fcb9 	bl	8009f14 <__mdiff>
 80095a2:	68c2      	ldr	r2, [r0, #12]
 80095a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a6:	4680      	mov	r8, r0
 80095a8:	bb0a      	cbnz	r2, 80095ee <_dtoa_r+0x976>
 80095aa:	4601      	mov	r1, r0
 80095ac:	4628      	mov	r0, r5
 80095ae:	f000 fc95 	bl	8009edc <__mcmp>
 80095b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b4:	4602      	mov	r2, r0
 80095b6:	4641      	mov	r1, r8
 80095b8:	4630      	mov	r0, r6
 80095ba:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80095be:	f000 fa07 	bl	80099d0 <_Bfree>
 80095c2:	9b06      	ldr	r3, [sp, #24]
 80095c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095c6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80095ca:	ea43 0102 	orr.w	r1, r3, r2
 80095ce:	9b07      	ldr	r3, [sp, #28]
 80095d0:	4319      	orrs	r1, r3
 80095d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d4:	d10d      	bne.n	80095f2 <_dtoa_r+0x97a>
 80095d6:	2b39      	cmp	r3, #57	; 0x39
 80095d8:	d029      	beq.n	800962e <_dtoa_r+0x9b6>
 80095da:	f1ba 0f00 	cmp.w	sl, #0
 80095de:	dd01      	ble.n	80095e4 <_dtoa_r+0x96c>
 80095e0:	9b05      	ldr	r3, [sp, #20]
 80095e2:	3331      	adds	r3, #49	; 0x31
 80095e4:	9a02      	ldr	r2, [sp, #8]
 80095e6:	7013      	strb	r3, [r2, #0]
 80095e8:	e775      	b.n	80094d6 <_dtoa_r+0x85e>
 80095ea:	4638      	mov	r0, r7
 80095ec:	e7b8      	b.n	8009560 <_dtoa_r+0x8e8>
 80095ee:	2201      	movs	r2, #1
 80095f0:	e7e1      	b.n	80095b6 <_dtoa_r+0x93e>
 80095f2:	f1ba 0f00 	cmp.w	sl, #0
 80095f6:	db06      	blt.n	8009606 <_dtoa_r+0x98e>
 80095f8:	9906      	ldr	r1, [sp, #24]
 80095fa:	ea41 0a0a 	orr.w	sl, r1, sl
 80095fe:	9907      	ldr	r1, [sp, #28]
 8009600:	ea5a 0a01 	orrs.w	sl, sl, r1
 8009604:	d120      	bne.n	8009648 <_dtoa_r+0x9d0>
 8009606:	2a00      	cmp	r2, #0
 8009608:	ddec      	ble.n	80095e4 <_dtoa_r+0x96c>
 800960a:	4629      	mov	r1, r5
 800960c:	2201      	movs	r2, #1
 800960e:	4630      	mov	r0, r6
 8009610:	9304      	str	r3, [sp, #16]
 8009612:	f000 fbf7 	bl	8009e04 <__lshift>
 8009616:	4621      	mov	r1, r4
 8009618:	4605      	mov	r5, r0
 800961a:	f000 fc5f 	bl	8009edc <__mcmp>
 800961e:	2800      	cmp	r0, #0
 8009620:	9b04      	ldr	r3, [sp, #16]
 8009622:	dc02      	bgt.n	800962a <_dtoa_r+0x9b2>
 8009624:	d1de      	bne.n	80095e4 <_dtoa_r+0x96c>
 8009626:	07da      	lsls	r2, r3, #31
 8009628:	d5dc      	bpl.n	80095e4 <_dtoa_r+0x96c>
 800962a:	2b39      	cmp	r3, #57	; 0x39
 800962c:	d1d8      	bne.n	80095e0 <_dtoa_r+0x968>
 800962e:	9a02      	ldr	r2, [sp, #8]
 8009630:	2339      	movs	r3, #57	; 0x39
 8009632:	7013      	strb	r3, [r2, #0]
 8009634:	4643      	mov	r3, r8
 8009636:	4698      	mov	r8, r3
 8009638:	3b01      	subs	r3, #1
 800963a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800963e:	2a39      	cmp	r2, #57	; 0x39
 8009640:	d051      	beq.n	80096e6 <_dtoa_r+0xa6e>
 8009642:	3201      	adds	r2, #1
 8009644:	701a      	strb	r2, [r3, #0]
 8009646:	e746      	b.n	80094d6 <_dtoa_r+0x85e>
 8009648:	2a00      	cmp	r2, #0
 800964a:	dd03      	ble.n	8009654 <_dtoa_r+0x9dc>
 800964c:	2b39      	cmp	r3, #57	; 0x39
 800964e:	d0ee      	beq.n	800962e <_dtoa_r+0x9b6>
 8009650:	3301      	adds	r3, #1
 8009652:	e7c7      	b.n	80095e4 <_dtoa_r+0x96c>
 8009654:	9a04      	ldr	r2, [sp, #16]
 8009656:	9908      	ldr	r1, [sp, #32]
 8009658:	f802 3c01 	strb.w	r3, [r2, #-1]
 800965c:	428a      	cmp	r2, r1
 800965e:	d02b      	beq.n	80096b8 <_dtoa_r+0xa40>
 8009660:	4629      	mov	r1, r5
 8009662:	2300      	movs	r3, #0
 8009664:	220a      	movs	r2, #10
 8009666:	4630      	mov	r0, r6
 8009668:	f000 f9d4 	bl	8009a14 <__multadd>
 800966c:	45b9      	cmp	r9, r7
 800966e:	4605      	mov	r5, r0
 8009670:	f04f 0300 	mov.w	r3, #0
 8009674:	f04f 020a 	mov.w	r2, #10
 8009678:	4649      	mov	r1, r9
 800967a:	4630      	mov	r0, r6
 800967c:	d107      	bne.n	800968e <_dtoa_r+0xa16>
 800967e:	f000 f9c9 	bl	8009a14 <__multadd>
 8009682:	4681      	mov	r9, r0
 8009684:	4607      	mov	r7, r0
 8009686:	9b04      	ldr	r3, [sp, #16]
 8009688:	3301      	adds	r3, #1
 800968a:	9304      	str	r3, [sp, #16]
 800968c:	e774      	b.n	8009578 <_dtoa_r+0x900>
 800968e:	f000 f9c1 	bl	8009a14 <__multadd>
 8009692:	4639      	mov	r1, r7
 8009694:	4681      	mov	r9, r0
 8009696:	2300      	movs	r3, #0
 8009698:	220a      	movs	r2, #10
 800969a:	4630      	mov	r0, r6
 800969c:	f000 f9ba 	bl	8009a14 <__multadd>
 80096a0:	4607      	mov	r7, r0
 80096a2:	e7f0      	b.n	8009686 <_dtoa_r+0xa0e>
 80096a4:	f1ba 0f00 	cmp.w	sl, #0
 80096a8:	9a01      	ldr	r2, [sp, #4]
 80096aa:	bfcc      	ite	gt
 80096ac:	46d0      	movgt	r8, sl
 80096ae:	f04f 0801 	movle.w	r8, #1
 80096b2:	4490      	add	r8, r2
 80096b4:	f04f 0900 	mov.w	r9, #0
 80096b8:	4629      	mov	r1, r5
 80096ba:	2201      	movs	r2, #1
 80096bc:	4630      	mov	r0, r6
 80096be:	9302      	str	r3, [sp, #8]
 80096c0:	f000 fba0 	bl	8009e04 <__lshift>
 80096c4:	4621      	mov	r1, r4
 80096c6:	4605      	mov	r5, r0
 80096c8:	f000 fc08 	bl	8009edc <__mcmp>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	dcb1      	bgt.n	8009634 <_dtoa_r+0x9bc>
 80096d0:	d102      	bne.n	80096d8 <_dtoa_r+0xa60>
 80096d2:	9b02      	ldr	r3, [sp, #8]
 80096d4:	07db      	lsls	r3, r3, #31
 80096d6:	d4ad      	bmi.n	8009634 <_dtoa_r+0x9bc>
 80096d8:	4643      	mov	r3, r8
 80096da:	4698      	mov	r8, r3
 80096dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096e0:	2a30      	cmp	r2, #48	; 0x30
 80096e2:	d0fa      	beq.n	80096da <_dtoa_r+0xa62>
 80096e4:	e6f7      	b.n	80094d6 <_dtoa_r+0x85e>
 80096e6:	9a01      	ldr	r2, [sp, #4]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d1a4      	bne.n	8009636 <_dtoa_r+0x9be>
 80096ec:	f10b 0b01 	add.w	fp, fp, #1
 80096f0:	2331      	movs	r3, #49	; 0x31
 80096f2:	e778      	b.n	80095e6 <_dtoa_r+0x96e>
 80096f4:	4b14      	ldr	r3, [pc, #80]	; (8009748 <_dtoa_r+0xad0>)
 80096f6:	f7ff bb2a 	b.w	8008d4e <_dtoa_r+0xd6>
 80096fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f47f ab05 	bne.w	8008d0c <_dtoa_r+0x94>
 8009702:	4b12      	ldr	r3, [pc, #72]	; (800974c <_dtoa_r+0xad4>)
 8009704:	f7ff bb23 	b.w	8008d4e <_dtoa_r+0xd6>
 8009708:	f1ba 0f00 	cmp.w	sl, #0
 800970c:	dc03      	bgt.n	8009716 <_dtoa_r+0xa9e>
 800970e:	9b06      	ldr	r3, [sp, #24]
 8009710:	2b02      	cmp	r3, #2
 8009712:	f73f aec8 	bgt.w	80094a6 <_dtoa_r+0x82e>
 8009716:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800971a:	4621      	mov	r1, r4
 800971c:	4628      	mov	r0, r5
 800971e:	f7ff fa21 	bl	8008b64 <quorem>
 8009722:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009726:	f808 3b01 	strb.w	r3, [r8], #1
 800972a:	9a01      	ldr	r2, [sp, #4]
 800972c:	eba8 0202 	sub.w	r2, r8, r2
 8009730:	4592      	cmp	sl, r2
 8009732:	ddb7      	ble.n	80096a4 <_dtoa_r+0xa2c>
 8009734:	4629      	mov	r1, r5
 8009736:	2300      	movs	r3, #0
 8009738:	220a      	movs	r2, #10
 800973a:	4630      	mov	r0, r6
 800973c:	f000 f96a 	bl	8009a14 <__multadd>
 8009740:	4605      	mov	r5, r0
 8009742:	e7ea      	b.n	800971a <_dtoa_r+0xaa2>
 8009744:	0800ccd1 	.word	0x0800ccd1
 8009748:	0800cc2c 	.word	0x0800cc2c
 800974c:	0800cc55 	.word	0x0800cc55

08009750 <_free_r>:
 8009750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009752:	2900      	cmp	r1, #0
 8009754:	d044      	beq.n	80097e0 <_free_r+0x90>
 8009756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800975a:	9001      	str	r0, [sp, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	f1a1 0404 	sub.w	r4, r1, #4
 8009762:	bfb8      	it	lt
 8009764:	18e4      	addlt	r4, r4, r3
 8009766:	f000 f8e7 	bl	8009938 <__malloc_lock>
 800976a:	4a1e      	ldr	r2, [pc, #120]	; (80097e4 <_free_r+0x94>)
 800976c:	9801      	ldr	r0, [sp, #4]
 800976e:	6813      	ldr	r3, [r2, #0]
 8009770:	b933      	cbnz	r3, 8009780 <_free_r+0x30>
 8009772:	6063      	str	r3, [r4, #4]
 8009774:	6014      	str	r4, [r2, #0]
 8009776:	b003      	add	sp, #12
 8009778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800977c:	f000 b8e2 	b.w	8009944 <__malloc_unlock>
 8009780:	42a3      	cmp	r3, r4
 8009782:	d908      	bls.n	8009796 <_free_r+0x46>
 8009784:	6825      	ldr	r5, [r4, #0]
 8009786:	1961      	adds	r1, r4, r5
 8009788:	428b      	cmp	r3, r1
 800978a:	bf01      	itttt	eq
 800978c:	6819      	ldreq	r1, [r3, #0]
 800978e:	685b      	ldreq	r3, [r3, #4]
 8009790:	1949      	addeq	r1, r1, r5
 8009792:	6021      	streq	r1, [r4, #0]
 8009794:	e7ed      	b.n	8009772 <_free_r+0x22>
 8009796:	461a      	mov	r2, r3
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	b10b      	cbz	r3, 80097a0 <_free_r+0x50>
 800979c:	42a3      	cmp	r3, r4
 800979e:	d9fa      	bls.n	8009796 <_free_r+0x46>
 80097a0:	6811      	ldr	r1, [r2, #0]
 80097a2:	1855      	adds	r5, r2, r1
 80097a4:	42a5      	cmp	r5, r4
 80097a6:	d10b      	bne.n	80097c0 <_free_r+0x70>
 80097a8:	6824      	ldr	r4, [r4, #0]
 80097aa:	4421      	add	r1, r4
 80097ac:	1854      	adds	r4, r2, r1
 80097ae:	42a3      	cmp	r3, r4
 80097b0:	6011      	str	r1, [r2, #0]
 80097b2:	d1e0      	bne.n	8009776 <_free_r+0x26>
 80097b4:	681c      	ldr	r4, [r3, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	6053      	str	r3, [r2, #4]
 80097ba:	440c      	add	r4, r1
 80097bc:	6014      	str	r4, [r2, #0]
 80097be:	e7da      	b.n	8009776 <_free_r+0x26>
 80097c0:	d902      	bls.n	80097c8 <_free_r+0x78>
 80097c2:	230c      	movs	r3, #12
 80097c4:	6003      	str	r3, [r0, #0]
 80097c6:	e7d6      	b.n	8009776 <_free_r+0x26>
 80097c8:	6825      	ldr	r5, [r4, #0]
 80097ca:	1961      	adds	r1, r4, r5
 80097cc:	428b      	cmp	r3, r1
 80097ce:	bf04      	itt	eq
 80097d0:	6819      	ldreq	r1, [r3, #0]
 80097d2:	685b      	ldreq	r3, [r3, #4]
 80097d4:	6063      	str	r3, [r4, #4]
 80097d6:	bf04      	itt	eq
 80097d8:	1949      	addeq	r1, r1, r5
 80097da:	6021      	streq	r1, [r4, #0]
 80097dc:	6054      	str	r4, [r2, #4]
 80097de:	e7ca      	b.n	8009776 <_free_r+0x26>
 80097e0:	b003      	add	sp, #12
 80097e2:	bd30      	pop	{r4, r5, pc}
 80097e4:	2000064c 	.word	0x2000064c

080097e8 <malloc>:
 80097e8:	4b02      	ldr	r3, [pc, #8]	; (80097f4 <malloc+0xc>)
 80097ea:	4601      	mov	r1, r0
 80097ec:	6818      	ldr	r0, [r3, #0]
 80097ee:	f000 b823 	b.w	8009838 <_malloc_r>
 80097f2:	bf00      	nop
 80097f4:	20000084 	.word	0x20000084

080097f8 <sbrk_aligned>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	4e0e      	ldr	r6, [pc, #56]	; (8009834 <sbrk_aligned+0x3c>)
 80097fc:	460c      	mov	r4, r1
 80097fe:	6831      	ldr	r1, [r6, #0]
 8009800:	4605      	mov	r5, r0
 8009802:	b911      	cbnz	r1, 800980a <sbrk_aligned+0x12>
 8009804:	f001 fdd6 	bl	800b3b4 <_sbrk_r>
 8009808:	6030      	str	r0, [r6, #0]
 800980a:	4621      	mov	r1, r4
 800980c:	4628      	mov	r0, r5
 800980e:	f001 fdd1 	bl	800b3b4 <_sbrk_r>
 8009812:	1c43      	adds	r3, r0, #1
 8009814:	d00a      	beq.n	800982c <sbrk_aligned+0x34>
 8009816:	1cc4      	adds	r4, r0, #3
 8009818:	f024 0403 	bic.w	r4, r4, #3
 800981c:	42a0      	cmp	r0, r4
 800981e:	d007      	beq.n	8009830 <sbrk_aligned+0x38>
 8009820:	1a21      	subs	r1, r4, r0
 8009822:	4628      	mov	r0, r5
 8009824:	f001 fdc6 	bl	800b3b4 <_sbrk_r>
 8009828:	3001      	adds	r0, #1
 800982a:	d101      	bne.n	8009830 <sbrk_aligned+0x38>
 800982c:	f04f 34ff 	mov.w	r4, #4294967295
 8009830:	4620      	mov	r0, r4
 8009832:	bd70      	pop	{r4, r5, r6, pc}
 8009834:	20000650 	.word	0x20000650

08009838 <_malloc_r>:
 8009838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800983c:	1ccd      	adds	r5, r1, #3
 800983e:	f025 0503 	bic.w	r5, r5, #3
 8009842:	3508      	adds	r5, #8
 8009844:	2d0c      	cmp	r5, #12
 8009846:	bf38      	it	cc
 8009848:	250c      	movcc	r5, #12
 800984a:	2d00      	cmp	r5, #0
 800984c:	4607      	mov	r7, r0
 800984e:	db01      	blt.n	8009854 <_malloc_r+0x1c>
 8009850:	42a9      	cmp	r1, r5
 8009852:	d905      	bls.n	8009860 <_malloc_r+0x28>
 8009854:	230c      	movs	r3, #12
 8009856:	603b      	str	r3, [r7, #0]
 8009858:	2600      	movs	r6, #0
 800985a:	4630      	mov	r0, r6
 800985c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009860:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009934 <_malloc_r+0xfc>
 8009864:	f000 f868 	bl	8009938 <__malloc_lock>
 8009868:	f8d8 3000 	ldr.w	r3, [r8]
 800986c:	461c      	mov	r4, r3
 800986e:	bb5c      	cbnz	r4, 80098c8 <_malloc_r+0x90>
 8009870:	4629      	mov	r1, r5
 8009872:	4638      	mov	r0, r7
 8009874:	f7ff ffc0 	bl	80097f8 <sbrk_aligned>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	4604      	mov	r4, r0
 800987c:	d155      	bne.n	800992a <_malloc_r+0xf2>
 800987e:	f8d8 4000 	ldr.w	r4, [r8]
 8009882:	4626      	mov	r6, r4
 8009884:	2e00      	cmp	r6, #0
 8009886:	d145      	bne.n	8009914 <_malloc_r+0xdc>
 8009888:	2c00      	cmp	r4, #0
 800988a:	d048      	beq.n	800991e <_malloc_r+0xe6>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	4631      	mov	r1, r6
 8009890:	4638      	mov	r0, r7
 8009892:	eb04 0903 	add.w	r9, r4, r3
 8009896:	f001 fd8d 	bl	800b3b4 <_sbrk_r>
 800989a:	4581      	cmp	r9, r0
 800989c:	d13f      	bne.n	800991e <_malloc_r+0xe6>
 800989e:	6821      	ldr	r1, [r4, #0]
 80098a0:	1a6d      	subs	r5, r5, r1
 80098a2:	4629      	mov	r1, r5
 80098a4:	4638      	mov	r0, r7
 80098a6:	f7ff ffa7 	bl	80097f8 <sbrk_aligned>
 80098aa:	3001      	adds	r0, #1
 80098ac:	d037      	beq.n	800991e <_malloc_r+0xe6>
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	442b      	add	r3, r5
 80098b2:	6023      	str	r3, [r4, #0]
 80098b4:	f8d8 3000 	ldr.w	r3, [r8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d038      	beq.n	800992e <_malloc_r+0xf6>
 80098bc:	685a      	ldr	r2, [r3, #4]
 80098be:	42a2      	cmp	r2, r4
 80098c0:	d12b      	bne.n	800991a <_malloc_r+0xe2>
 80098c2:	2200      	movs	r2, #0
 80098c4:	605a      	str	r2, [r3, #4]
 80098c6:	e00f      	b.n	80098e8 <_malloc_r+0xb0>
 80098c8:	6822      	ldr	r2, [r4, #0]
 80098ca:	1b52      	subs	r2, r2, r5
 80098cc:	d41f      	bmi.n	800990e <_malloc_r+0xd6>
 80098ce:	2a0b      	cmp	r2, #11
 80098d0:	d917      	bls.n	8009902 <_malloc_r+0xca>
 80098d2:	1961      	adds	r1, r4, r5
 80098d4:	42a3      	cmp	r3, r4
 80098d6:	6025      	str	r5, [r4, #0]
 80098d8:	bf18      	it	ne
 80098da:	6059      	strne	r1, [r3, #4]
 80098dc:	6863      	ldr	r3, [r4, #4]
 80098de:	bf08      	it	eq
 80098e0:	f8c8 1000 	streq.w	r1, [r8]
 80098e4:	5162      	str	r2, [r4, r5]
 80098e6:	604b      	str	r3, [r1, #4]
 80098e8:	4638      	mov	r0, r7
 80098ea:	f104 060b 	add.w	r6, r4, #11
 80098ee:	f000 f829 	bl	8009944 <__malloc_unlock>
 80098f2:	f026 0607 	bic.w	r6, r6, #7
 80098f6:	1d23      	adds	r3, r4, #4
 80098f8:	1af2      	subs	r2, r6, r3
 80098fa:	d0ae      	beq.n	800985a <_malloc_r+0x22>
 80098fc:	1b9b      	subs	r3, r3, r6
 80098fe:	50a3      	str	r3, [r4, r2]
 8009900:	e7ab      	b.n	800985a <_malloc_r+0x22>
 8009902:	42a3      	cmp	r3, r4
 8009904:	6862      	ldr	r2, [r4, #4]
 8009906:	d1dd      	bne.n	80098c4 <_malloc_r+0x8c>
 8009908:	f8c8 2000 	str.w	r2, [r8]
 800990c:	e7ec      	b.n	80098e8 <_malloc_r+0xb0>
 800990e:	4623      	mov	r3, r4
 8009910:	6864      	ldr	r4, [r4, #4]
 8009912:	e7ac      	b.n	800986e <_malloc_r+0x36>
 8009914:	4634      	mov	r4, r6
 8009916:	6876      	ldr	r6, [r6, #4]
 8009918:	e7b4      	b.n	8009884 <_malloc_r+0x4c>
 800991a:	4613      	mov	r3, r2
 800991c:	e7cc      	b.n	80098b8 <_malloc_r+0x80>
 800991e:	230c      	movs	r3, #12
 8009920:	603b      	str	r3, [r7, #0]
 8009922:	4638      	mov	r0, r7
 8009924:	f000 f80e 	bl	8009944 <__malloc_unlock>
 8009928:	e797      	b.n	800985a <_malloc_r+0x22>
 800992a:	6025      	str	r5, [r4, #0]
 800992c:	e7dc      	b.n	80098e8 <_malloc_r+0xb0>
 800992e:	605b      	str	r3, [r3, #4]
 8009930:	deff      	udf	#255	; 0xff
 8009932:	bf00      	nop
 8009934:	2000064c 	.word	0x2000064c

08009938 <__malloc_lock>:
 8009938:	4801      	ldr	r0, [pc, #4]	; (8009940 <__malloc_lock+0x8>)
 800993a:	f7ff b90a 	b.w	8008b52 <__retarget_lock_acquire_recursive>
 800993e:	bf00      	nop
 8009940:	20000648 	.word	0x20000648

08009944 <__malloc_unlock>:
 8009944:	4801      	ldr	r0, [pc, #4]	; (800994c <__malloc_unlock+0x8>)
 8009946:	f7ff b905 	b.w	8008b54 <__retarget_lock_release_recursive>
 800994a:	bf00      	nop
 800994c:	20000648 	.word	0x20000648

08009950 <_Balloc>:
 8009950:	b570      	push	{r4, r5, r6, lr}
 8009952:	69c6      	ldr	r6, [r0, #28]
 8009954:	4604      	mov	r4, r0
 8009956:	460d      	mov	r5, r1
 8009958:	b976      	cbnz	r6, 8009978 <_Balloc+0x28>
 800995a:	2010      	movs	r0, #16
 800995c:	f7ff ff44 	bl	80097e8 <malloc>
 8009960:	4602      	mov	r2, r0
 8009962:	61e0      	str	r0, [r4, #28]
 8009964:	b920      	cbnz	r0, 8009970 <_Balloc+0x20>
 8009966:	4b18      	ldr	r3, [pc, #96]	; (80099c8 <_Balloc+0x78>)
 8009968:	4818      	ldr	r0, [pc, #96]	; (80099cc <_Balloc+0x7c>)
 800996a:	216b      	movs	r1, #107	; 0x6b
 800996c:	f001 fd48 	bl	800b400 <__assert_func>
 8009970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009974:	6006      	str	r6, [r0, #0]
 8009976:	60c6      	str	r6, [r0, #12]
 8009978:	69e6      	ldr	r6, [r4, #28]
 800997a:	68f3      	ldr	r3, [r6, #12]
 800997c:	b183      	cbz	r3, 80099a0 <_Balloc+0x50>
 800997e:	69e3      	ldr	r3, [r4, #28]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009986:	b9b8      	cbnz	r0, 80099b8 <_Balloc+0x68>
 8009988:	2101      	movs	r1, #1
 800998a:	fa01 f605 	lsl.w	r6, r1, r5
 800998e:	1d72      	adds	r2, r6, #5
 8009990:	0092      	lsls	r2, r2, #2
 8009992:	4620      	mov	r0, r4
 8009994:	f001 fd52 	bl	800b43c <_calloc_r>
 8009998:	b160      	cbz	r0, 80099b4 <_Balloc+0x64>
 800999a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800999e:	e00e      	b.n	80099be <_Balloc+0x6e>
 80099a0:	2221      	movs	r2, #33	; 0x21
 80099a2:	2104      	movs	r1, #4
 80099a4:	4620      	mov	r0, r4
 80099a6:	f001 fd49 	bl	800b43c <_calloc_r>
 80099aa:	69e3      	ldr	r3, [r4, #28]
 80099ac:	60f0      	str	r0, [r6, #12]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1e4      	bne.n	800997e <_Balloc+0x2e>
 80099b4:	2000      	movs	r0, #0
 80099b6:	bd70      	pop	{r4, r5, r6, pc}
 80099b8:	6802      	ldr	r2, [r0, #0]
 80099ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099be:	2300      	movs	r3, #0
 80099c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099c4:	e7f7      	b.n	80099b6 <_Balloc+0x66>
 80099c6:	bf00      	nop
 80099c8:	0800cc62 	.word	0x0800cc62
 80099cc:	0800cce2 	.word	0x0800cce2

080099d0 <_Bfree>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	69c6      	ldr	r6, [r0, #28]
 80099d4:	4605      	mov	r5, r0
 80099d6:	460c      	mov	r4, r1
 80099d8:	b976      	cbnz	r6, 80099f8 <_Bfree+0x28>
 80099da:	2010      	movs	r0, #16
 80099dc:	f7ff ff04 	bl	80097e8 <malloc>
 80099e0:	4602      	mov	r2, r0
 80099e2:	61e8      	str	r0, [r5, #28]
 80099e4:	b920      	cbnz	r0, 80099f0 <_Bfree+0x20>
 80099e6:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <_Bfree+0x3c>)
 80099e8:	4809      	ldr	r0, [pc, #36]	; (8009a10 <_Bfree+0x40>)
 80099ea:	218f      	movs	r1, #143	; 0x8f
 80099ec:	f001 fd08 	bl	800b400 <__assert_func>
 80099f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099f4:	6006      	str	r6, [r0, #0]
 80099f6:	60c6      	str	r6, [r0, #12]
 80099f8:	b13c      	cbz	r4, 8009a0a <_Bfree+0x3a>
 80099fa:	69eb      	ldr	r3, [r5, #28]
 80099fc:	6862      	ldr	r2, [r4, #4]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a04:	6021      	str	r1, [r4, #0]
 8009a06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a0a:	bd70      	pop	{r4, r5, r6, pc}
 8009a0c:	0800cc62 	.word	0x0800cc62
 8009a10:	0800cce2 	.word	0x0800cce2

08009a14 <__multadd>:
 8009a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a18:	690d      	ldr	r5, [r1, #16]
 8009a1a:	4607      	mov	r7, r0
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	461e      	mov	r6, r3
 8009a20:	f101 0c14 	add.w	ip, r1, #20
 8009a24:	2000      	movs	r0, #0
 8009a26:	f8dc 3000 	ldr.w	r3, [ip]
 8009a2a:	b299      	uxth	r1, r3
 8009a2c:	fb02 6101 	mla	r1, r2, r1, r6
 8009a30:	0c1e      	lsrs	r6, r3, #16
 8009a32:	0c0b      	lsrs	r3, r1, #16
 8009a34:	fb02 3306 	mla	r3, r2, r6, r3
 8009a38:	b289      	uxth	r1, r1
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a40:	4285      	cmp	r5, r0
 8009a42:	f84c 1b04 	str.w	r1, [ip], #4
 8009a46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a4a:	dcec      	bgt.n	8009a26 <__multadd+0x12>
 8009a4c:	b30e      	cbz	r6, 8009a92 <__multadd+0x7e>
 8009a4e:	68a3      	ldr	r3, [r4, #8]
 8009a50:	42ab      	cmp	r3, r5
 8009a52:	dc19      	bgt.n	8009a88 <__multadd+0x74>
 8009a54:	6861      	ldr	r1, [r4, #4]
 8009a56:	4638      	mov	r0, r7
 8009a58:	3101      	adds	r1, #1
 8009a5a:	f7ff ff79 	bl	8009950 <_Balloc>
 8009a5e:	4680      	mov	r8, r0
 8009a60:	b928      	cbnz	r0, 8009a6e <__multadd+0x5a>
 8009a62:	4602      	mov	r2, r0
 8009a64:	4b0c      	ldr	r3, [pc, #48]	; (8009a98 <__multadd+0x84>)
 8009a66:	480d      	ldr	r0, [pc, #52]	; (8009a9c <__multadd+0x88>)
 8009a68:	21ba      	movs	r1, #186	; 0xba
 8009a6a:	f001 fcc9 	bl	800b400 <__assert_func>
 8009a6e:	6922      	ldr	r2, [r4, #16]
 8009a70:	3202      	adds	r2, #2
 8009a72:	f104 010c 	add.w	r1, r4, #12
 8009a76:	0092      	lsls	r2, r2, #2
 8009a78:	300c      	adds	r0, #12
 8009a7a:	f001 fcab 	bl	800b3d4 <memcpy>
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4638      	mov	r0, r7
 8009a82:	f7ff ffa5 	bl	80099d0 <_Bfree>
 8009a86:	4644      	mov	r4, r8
 8009a88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a8c:	3501      	adds	r5, #1
 8009a8e:	615e      	str	r6, [r3, #20]
 8009a90:	6125      	str	r5, [r4, #16]
 8009a92:	4620      	mov	r0, r4
 8009a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a98:	0800ccd1 	.word	0x0800ccd1
 8009a9c:	0800cce2 	.word	0x0800cce2

08009aa0 <__s2b>:
 8009aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	4615      	mov	r5, r2
 8009aa8:	461f      	mov	r7, r3
 8009aaa:	2209      	movs	r2, #9
 8009aac:	3308      	adds	r3, #8
 8009aae:	4606      	mov	r6, r0
 8009ab0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	db09      	blt.n	8009ad0 <__s2b+0x30>
 8009abc:	4630      	mov	r0, r6
 8009abe:	f7ff ff47 	bl	8009950 <_Balloc>
 8009ac2:	b940      	cbnz	r0, 8009ad6 <__s2b+0x36>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	4b19      	ldr	r3, [pc, #100]	; (8009b2c <__s2b+0x8c>)
 8009ac8:	4819      	ldr	r0, [pc, #100]	; (8009b30 <__s2b+0x90>)
 8009aca:	21d3      	movs	r1, #211	; 0xd3
 8009acc:	f001 fc98 	bl	800b400 <__assert_func>
 8009ad0:	0052      	lsls	r2, r2, #1
 8009ad2:	3101      	adds	r1, #1
 8009ad4:	e7f0      	b.n	8009ab8 <__s2b+0x18>
 8009ad6:	9b08      	ldr	r3, [sp, #32]
 8009ad8:	6143      	str	r3, [r0, #20]
 8009ada:	2d09      	cmp	r5, #9
 8009adc:	f04f 0301 	mov.w	r3, #1
 8009ae0:	6103      	str	r3, [r0, #16]
 8009ae2:	dd16      	ble.n	8009b12 <__s2b+0x72>
 8009ae4:	f104 0909 	add.w	r9, r4, #9
 8009ae8:	46c8      	mov	r8, r9
 8009aea:	442c      	add	r4, r5
 8009aec:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009af0:	4601      	mov	r1, r0
 8009af2:	3b30      	subs	r3, #48	; 0x30
 8009af4:	220a      	movs	r2, #10
 8009af6:	4630      	mov	r0, r6
 8009af8:	f7ff ff8c 	bl	8009a14 <__multadd>
 8009afc:	45a0      	cmp	r8, r4
 8009afe:	d1f5      	bne.n	8009aec <__s2b+0x4c>
 8009b00:	f1a5 0408 	sub.w	r4, r5, #8
 8009b04:	444c      	add	r4, r9
 8009b06:	1b2d      	subs	r5, r5, r4
 8009b08:	1963      	adds	r3, r4, r5
 8009b0a:	42bb      	cmp	r3, r7
 8009b0c:	db04      	blt.n	8009b18 <__s2b+0x78>
 8009b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b12:	340a      	adds	r4, #10
 8009b14:	2509      	movs	r5, #9
 8009b16:	e7f6      	b.n	8009b06 <__s2b+0x66>
 8009b18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b1c:	4601      	mov	r1, r0
 8009b1e:	3b30      	subs	r3, #48	; 0x30
 8009b20:	220a      	movs	r2, #10
 8009b22:	4630      	mov	r0, r6
 8009b24:	f7ff ff76 	bl	8009a14 <__multadd>
 8009b28:	e7ee      	b.n	8009b08 <__s2b+0x68>
 8009b2a:	bf00      	nop
 8009b2c:	0800ccd1 	.word	0x0800ccd1
 8009b30:	0800cce2 	.word	0x0800cce2

08009b34 <__hi0bits>:
 8009b34:	0c03      	lsrs	r3, r0, #16
 8009b36:	041b      	lsls	r3, r3, #16
 8009b38:	b9d3      	cbnz	r3, 8009b70 <__hi0bits+0x3c>
 8009b3a:	0400      	lsls	r0, r0, #16
 8009b3c:	2310      	movs	r3, #16
 8009b3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b42:	bf04      	itt	eq
 8009b44:	0200      	lsleq	r0, r0, #8
 8009b46:	3308      	addeq	r3, #8
 8009b48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b4c:	bf04      	itt	eq
 8009b4e:	0100      	lsleq	r0, r0, #4
 8009b50:	3304      	addeq	r3, #4
 8009b52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b56:	bf04      	itt	eq
 8009b58:	0080      	lsleq	r0, r0, #2
 8009b5a:	3302      	addeq	r3, #2
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	db05      	blt.n	8009b6c <__hi0bits+0x38>
 8009b60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b64:	f103 0301 	add.w	r3, r3, #1
 8009b68:	bf08      	it	eq
 8009b6a:	2320      	moveq	r3, #32
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	4770      	bx	lr
 8009b70:	2300      	movs	r3, #0
 8009b72:	e7e4      	b.n	8009b3e <__hi0bits+0xa>

08009b74 <__lo0bits>:
 8009b74:	6803      	ldr	r3, [r0, #0]
 8009b76:	f013 0207 	ands.w	r2, r3, #7
 8009b7a:	d00c      	beq.n	8009b96 <__lo0bits+0x22>
 8009b7c:	07d9      	lsls	r1, r3, #31
 8009b7e:	d422      	bmi.n	8009bc6 <__lo0bits+0x52>
 8009b80:	079a      	lsls	r2, r3, #30
 8009b82:	bf49      	itett	mi
 8009b84:	085b      	lsrmi	r3, r3, #1
 8009b86:	089b      	lsrpl	r3, r3, #2
 8009b88:	6003      	strmi	r3, [r0, #0]
 8009b8a:	2201      	movmi	r2, #1
 8009b8c:	bf5c      	itt	pl
 8009b8e:	6003      	strpl	r3, [r0, #0]
 8009b90:	2202      	movpl	r2, #2
 8009b92:	4610      	mov	r0, r2
 8009b94:	4770      	bx	lr
 8009b96:	b299      	uxth	r1, r3
 8009b98:	b909      	cbnz	r1, 8009b9e <__lo0bits+0x2a>
 8009b9a:	0c1b      	lsrs	r3, r3, #16
 8009b9c:	2210      	movs	r2, #16
 8009b9e:	b2d9      	uxtb	r1, r3
 8009ba0:	b909      	cbnz	r1, 8009ba6 <__lo0bits+0x32>
 8009ba2:	3208      	adds	r2, #8
 8009ba4:	0a1b      	lsrs	r3, r3, #8
 8009ba6:	0719      	lsls	r1, r3, #28
 8009ba8:	bf04      	itt	eq
 8009baa:	091b      	lsreq	r3, r3, #4
 8009bac:	3204      	addeq	r2, #4
 8009bae:	0799      	lsls	r1, r3, #30
 8009bb0:	bf04      	itt	eq
 8009bb2:	089b      	lsreq	r3, r3, #2
 8009bb4:	3202      	addeq	r2, #2
 8009bb6:	07d9      	lsls	r1, r3, #31
 8009bb8:	d403      	bmi.n	8009bc2 <__lo0bits+0x4e>
 8009bba:	085b      	lsrs	r3, r3, #1
 8009bbc:	f102 0201 	add.w	r2, r2, #1
 8009bc0:	d003      	beq.n	8009bca <__lo0bits+0x56>
 8009bc2:	6003      	str	r3, [r0, #0]
 8009bc4:	e7e5      	b.n	8009b92 <__lo0bits+0x1e>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	e7e3      	b.n	8009b92 <__lo0bits+0x1e>
 8009bca:	2220      	movs	r2, #32
 8009bcc:	e7e1      	b.n	8009b92 <__lo0bits+0x1e>
	...

08009bd0 <__i2b>:
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	460c      	mov	r4, r1
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	f7ff febb 	bl	8009950 <_Balloc>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	b928      	cbnz	r0, 8009bea <__i2b+0x1a>
 8009bde:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <__i2b+0x24>)
 8009be0:	4805      	ldr	r0, [pc, #20]	; (8009bf8 <__i2b+0x28>)
 8009be2:	f240 1145 	movw	r1, #325	; 0x145
 8009be6:	f001 fc0b 	bl	800b400 <__assert_func>
 8009bea:	2301      	movs	r3, #1
 8009bec:	6144      	str	r4, [r0, #20]
 8009bee:	6103      	str	r3, [r0, #16]
 8009bf0:	bd10      	pop	{r4, pc}
 8009bf2:	bf00      	nop
 8009bf4:	0800ccd1 	.word	0x0800ccd1
 8009bf8:	0800cce2 	.word	0x0800cce2

08009bfc <__multiply>:
 8009bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c00:	4691      	mov	r9, r2
 8009c02:	690a      	ldr	r2, [r1, #16]
 8009c04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	bfb8      	it	lt
 8009c0c:	460b      	movlt	r3, r1
 8009c0e:	460c      	mov	r4, r1
 8009c10:	bfbc      	itt	lt
 8009c12:	464c      	movlt	r4, r9
 8009c14:	4699      	movlt	r9, r3
 8009c16:	6927      	ldr	r7, [r4, #16]
 8009c18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c1c:	68a3      	ldr	r3, [r4, #8]
 8009c1e:	6861      	ldr	r1, [r4, #4]
 8009c20:	eb07 060a 	add.w	r6, r7, sl
 8009c24:	42b3      	cmp	r3, r6
 8009c26:	b085      	sub	sp, #20
 8009c28:	bfb8      	it	lt
 8009c2a:	3101      	addlt	r1, #1
 8009c2c:	f7ff fe90 	bl	8009950 <_Balloc>
 8009c30:	b930      	cbnz	r0, 8009c40 <__multiply+0x44>
 8009c32:	4602      	mov	r2, r0
 8009c34:	4b44      	ldr	r3, [pc, #272]	; (8009d48 <__multiply+0x14c>)
 8009c36:	4845      	ldr	r0, [pc, #276]	; (8009d4c <__multiply+0x150>)
 8009c38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009c3c:	f001 fbe0 	bl	800b400 <__assert_func>
 8009c40:	f100 0514 	add.w	r5, r0, #20
 8009c44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c48:	462b      	mov	r3, r5
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	4543      	cmp	r3, r8
 8009c4e:	d321      	bcc.n	8009c94 <__multiply+0x98>
 8009c50:	f104 0314 	add.w	r3, r4, #20
 8009c54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c58:	f109 0314 	add.w	r3, r9, #20
 8009c5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c60:	9202      	str	r2, [sp, #8]
 8009c62:	1b3a      	subs	r2, r7, r4
 8009c64:	3a15      	subs	r2, #21
 8009c66:	f022 0203 	bic.w	r2, r2, #3
 8009c6a:	3204      	adds	r2, #4
 8009c6c:	f104 0115 	add.w	r1, r4, #21
 8009c70:	428f      	cmp	r7, r1
 8009c72:	bf38      	it	cc
 8009c74:	2204      	movcc	r2, #4
 8009c76:	9201      	str	r2, [sp, #4]
 8009c78:	9a02      	ldr	r2, [sp, #8]
 8009c7a:	9303      	str	r3, [sp, #12]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d80c      	bhi.n	8009c9a <__multiply+0x9e>
 8009c80:	2e00      	cmp	r6, #0
 8009c82:	dd03      	ble.n	8009c8c <__multiply+0x90>
 8009c84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d05b      	beq.n	8009d44 <__multiply+0x148>
 8009c8c:	6106      	str	r6, [r0, #16]
 8009c8e:	b005      	add	sp, #20
 8009c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c94:	f843 2b04 	str.w	r2, [r3], #4
 8009c98:	e7d8      	b.n	8009c4c <__multiply+0x50>
 8009c9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c9e:	f1ba 0f00 	cmp.w	sl, #0
 8009ca2:	d024      	beq.n	8009cee <__multiply+0xf2>
 8009ca4:	f104 0e14 	add.w	lr, r4, #20
 8009ca8:	46a9      	mov	r9, r5
 8009caa:	f04f 0c00 	mov.w	ip, #0
 8009cae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009cb2:	f8d9 1000 	ldr.w	r1, [r9]
 8009cb6:	fa1f fb82 	uxth.w	fp, r2
 8009cba:	b289      	uxth	r1, r1
 8009cbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009cc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009cc4:	f8d9 2000 	ldr.w	r2, [r9]
 8009cc8:	4461      	add	r1, ip
 8009cca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cce:	fb0a c20b 	mla	r2, sl, fp, ip
 8009cd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cd6:	b289      	uxth	r1, r1
 8009cd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cdc:	4577      	cmp	r7, lr
 8009cde:	f849 1b04 	str.w	r1, [r9], #4
 8009ce2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ce6:	d8e2      	bhi.n	8009cae <__multiply+0xb2>
 8009ce8:	9a01      	ldr	r2, [sp, #4]
 8009cea:	f845 c002 	str.w	ip, [r5, r2]
 8009cee:	9a03      	ldr	r2, [sp, #12]
 8009cf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	f1b9 0f00 	cmp.w	r9, #0
 8009cfa:	d021      	beq.n	8009d40 <__multiply+0x144>
 8009cfc:	6829      	ldr	r1, [r5, #0]
 8009cfe:	f104 0c14 	add.w	ip, r4, #20
 8009d02:	46ae      	mov	lr, r5
 8009d04:	f04f 0a00 	mov.w	sl, #0
 8009d08:	f8bc b000 	ldrh.w	fp, [ip]
 8009d0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d10:	fb09 220b 	mla	r2, r9, fp, r2
 8009d14:	4452      	add	r2, sl
 8009d16:	b289      	uxth	r1, r1
 8009d18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d1c:	f84e 1b04 	str.w	r1, [lr], #4
 8009d20:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009d24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d28:	f8be 1000 	ldrh.w	r1, [lr]
 8009d2c:	fb09 110a 	mla	r1, r9, sl, r1
 8009d30:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009d34:	4567      	cmp	r7, ip
 8009d36:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d3a:	d8e5      	bhi.n	8009d08 <__multiply+0x10c>
 8009d3c:	9a01      	ldr	r2, [sp, #4]
 8009d3e:	50a9      	str	r1, [r5, r2]
 8009d40:	3504      	adds	r5, #4
 8009d42:	e799      	b.n	8009c78 <__multiply+0x7c>
 8009d44:	3e01      	subs	r6, #1
 8009d46:	e79b      	b.n	8009c80 <__multiply+0x84>
 8009d48:	0800ccd1 	.word	0x0800ccd1
 8009d4c:	0800cce2 	.word	0x0800cce2

08009d50 <__pow5mult>:
 8009d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d54:	4615      	mov	r5, r2
 8009d56:	f012 0203 	ands.w	r2, r2, #3
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	460f      	mov	r7, r1
 8009d5e:	d007      	beq.n	8009d70 <__pow5mult+0x20>
 8009d60:	4c25      	ldr	r4, [pc, #148]	; (8009df8 <__pow5mult+0xa8>)
 8009d62:	3a01      	subs	r2, #1
 8009d64:	2300      	movs	r3, #0
 8009d66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d6a:	f7ff fe53 	bl	8009a14 <__multadd>
 8009d6e:	4607      	mov	r7, r0
 8009d70:	10ad      	asrs	r5, r5, #2
 8009d72:	d03d      	beq.n	8009df0 <__pow5mult+0xa0>
 8009d74:	69f4      	ldr	r4, [r6, #28]
 8009d76:	b97c      	cbnz	r4, 8009d98 <__pow5mult+0x48>
 8009d78:	2010      	movs	r0, #16
 8009d7a:	f7ff fd35 	bl	80097e8 <malloc>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	61f0      	str	r0, [r6, #28]
 8009d82:	b928      	cbnz	r0, 8009d90 <__pow5mult+0x40>
 8009d84:	4b1d      	ldr	r3, [pc, #116]	; (8009dfc <__pow5mult+0xac>)
 8009d86:	481e      	ldr	r0, [pc, #120]	; (8009e00 <__pow5mult+0xb0>)
 8009d88:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009d8c:	f001 fb38 	bl	800b400 <__assert_func>
 8009d90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d94:	6004      	str	r4, [r0, #0]
 8009d96:	60c4      	str	r4, [r0, #12]
 8009d98:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009d9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009da0:	b94c      	cbnz	r4, 8009db6 <__pow5mult+0x66>
 8009da2:	f240 2171 	movw	r1, #625	; 0x271
 8009da6:	4630      	mov	r0, r6
 8009da8:	f7ff ff12 	bl	8009bd0 <__i2b>
 8009dac:	2300      	movs	r3, #0
 8009dae:	f8c8 0008 	str.w	r0, [r8, #8]
 8009db2:	4604      	mov	r4, r0
 8009db4:	6003      	str	r3, [r0, #0]
 8009db6:	f04f 0900 	mov.w	r9, #0
 8009dba:	07eb      	lsls	r3, r5, #31
 8009dbc:	d50a      	bpl.n	8009dd4 <__pow5mult+0x84>
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	4622      	mov	r2, r4
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f7ff ff1a 	bl	8009bfc <__multiply>
 8009dc8:	4639      	mov	r1, r7
 8009dca:	4680      	mov	r8, r0
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f7ff fdff 	bl	80099d0 <_Bfree>
 8009dd2:	4647      	mov	r7, r8
 8009dd4:	106d      	asrs	r5, r5, #1
 8009dd6:	d00b      	beq.n	8009df0 <__pow5mult+0xa0>
 8009dd8:	6820      	ldr	r0, [r4, #0]
 8009dda:	b938      	cbnz	r0, 8009dec <__pow5mult+0x9c>
 8009ddc:	4622      	mov	r2, r4
 8009dde:	4621      	mov	r1, r4
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7ff ff0b 	bl	8009bfc <__multiply>
 8009de6:	6020      	str	r0, [r4, #0]
 8009de8:	f8c0 9000 	str.w	r9, [r0]
 8009dec:	4604      	mov	r4, r0
 8009dee:	e7e4      	b.n	8009dba <__pow5mult+0x6a>
 8009df0:	4638      	mov	r0, r7
 8009df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009df6:	bf00      	nop
 8009df8:	0800ce30 	.word	0x0800ce30
 8009dfc:	0800cc62 	.word	0x0800cc62
 8009e00:	0800cce2 	.word	0x0800cce2

08009e04 <__lshift>:
 8009e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e08:	460c      	mov	r4, r1
 8009e0a:	6849      	ldr	r1, [r1, #4]
 8009e0c:	6923      	ldr	r3, [r4, #16]
 8009e0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e12:	68a3      	ldr	r3, [r4, #8]
 8009e14:	4607      	mov	r7, r0
 8009e16:	4691      	mov	r9, r2
 8009e18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e1c:	f108 0601 	add.w	r6, r8, #1
 8009e20:	42b3      	cmp	r3, r6
 8009e22:	db0b      	blt.n	8009e3c <__lshift+0x38>
 8009e24:	4638      	mov	r0, r7
 8009e26:	f7ff fd93 	bl	8009950 <_Balloc>
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	b948      	cbnz	r0, 8009e42 <__lshift+0x3e>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	4b28      	ldr	r3, [pc, #160]	; (8009ed4 <__lshift+0xd0>)
 8009e32:	4829      	ldr	r0, [pc, #164]	; (8009ed8 <__lshift+0xd4>)
 8009e34:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009e38:	f001 fae2 	bl	800b400 <__assert_func>
 8009e3c:	3101      	adds	r1, #1
 8009e3e:	005b      	lsls	r3, r3, #1
 8009e40:	e7ee      	b.n	8009e20 <__lshift+0x1c>
 8009e42:	2300      	movs	r3, #0
 8009e44:	f100 0114 	add.w	r1, r0, #20
 8009e48:	f100 0210 	add.w	r2, r0, #16
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	4553      	cmp	r3, sl
 8009e50:	db33      	blt.n	8009eba <__lshift+0xb6>
 8009e52:	6920      	ldr	r0, [r4, #16]
 8009e54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e58:	f104 0314 	add.w	r3, r4, #20
 8009e5c:	f019 091f 	ands.w	r9, r9, #31
 8009e60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e68:	d02b      	beq.n	8009ec2 <__lshift+0xbe>
 8009e6a:	f1c9 0e20 	rsb	lr, r9, #32
 8009e6e:	468a      	mov	sl, r1
 8009e70:	2200      	movs	r2, #0
 8009e72:	6818      	ldr	r0, [r3, #0]
 8009e74:	fa00 f009 	lsl.w	r0, r0, r9
 8009e78:	4310      	orrs	r0, r2
 8009e7a:	f84a 0b04 	str.w	r0, [sl], #4
 8009e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e82:	459c      	cmp	ip, r3
 8009e84:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e88:	d8f3      	bhi.n	8009e72 <__lshift+0x6e>
 8009e8a:	ebac 0304 	sub.w	r3, ip, r4
 8009e8e:	3b15      	subs	r3, #21
 8009e90:	f023 0303 	bic.w	r3, r3, #3
 8009e94:	3304      	adds	r3, #4
 8009e96:	f104 0015 	add.w	r0, r4, #21
 8009e9a:	4584      	cmp	ip, r0
 8009e9c:	bf38      	it	cc
 8009e9e:	2304      	movcc	r3, #4
 8009ea0:	50ca      	str	r2, [r1, r3]
 8009ea2:	b10a      	cbz	r2, 8009ea8 <__lshift+0xa4>
 8009ea4:	f108 0602 	add.w	r6, r8, #2
 8009ea8:	3e01      	subs	r6, #1
 8009eaa:	4638      	mov	r0, r7
 8009eac:	612e      	str	r6, [r5, #16]
 8009eae:	4621      	mov	r1, r4
 8009eb0:	f7ff fd8e 	bl	80099d0 <_Bfree>
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eba:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	e7c5      	b.n	8009e4e <__lshift+0x4a>
 8009ec2:	3904      	subs	r1, #4
 8009ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ec8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ecc:	459c      	cmp	ip, r3
 8009ece:	d8f9      	bhi.n	8009ec4 <__lshift+0xc0>
 8009ed0:	e7ea      	b.n	8009ea8 <__lshift+0xa4>
 8009ed2:	bf00      	nop
 8009ed4:	0800ccd1 	.word	0x0800ccd1
 8009ed8:	0800cce2 	.word	0x0800cce2

08009edc <__mcmp>:
 8009edc:	b530      	push	{r4, r5, lr}
 8009ede:	6902      	ldr	r2, [r0, #16]
 8009ee0:	690c      	ldr	r4, [r1, #16]
 8009ee2:	1b12      	subs	r2, r2, r4
 8009ee4:	d10e      	bne.n	8009f04 <__mcmp+0x28>
 8009ee6:	f100 0314 	add.w	r3, r0, #20
 8009eea:	3114      	adds	r1, #20
 8009eec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ef0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ef4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ef8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009efc:	42a5      	cmp	r5, r4
 8009efe:	d003      	beq.n	8009f08 <__mcmp+0x2c>
 8009f00:	d305      	bcc.n	8009f0e <__mcmp+0x32>
 8009f02:	2201      	movs	r2, #1
 8009f04:	4610      	mov	r0, r2
 8009f06:	bd30      	pop	{r4, r5, pc}
 8009f08:	4283      	cmp	r3, r0
 8009f0a:	d3f3      	bcc.n	8009ef4 <__mcmp+0x18>
 8009f0c:	e7fa      	b.n	8009f04 <__mcmp+0x28>
 8009f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f12:	e7f7      	b.n	8009f04 <__mcmp+0x28>

08009f14 <__mdiff>:
 8009f14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f18:	460c      	mov	r4, r1
 8009f1a:	4606      	mov	r6, r0
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	4620      	mov	r0, r4
 8009f20:	4690      	mov	r8, r2
 8009f22:	f7ff ffdb 	bl	8009edc <__mcmp>
 8009f26:	1e05      	subs	r5, r0, #0
 8009f28:	d110      	bne.n	8009f4c <__mdiff+0x38>
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	f7ff fd0f 	bl	8009950 <_Balloc>
 8009f32:	b930      	cbnz	r0, 8009f42 <__mdiff+0x2e>
 8009f34:	4b3a      	ldr	r3, [pc, #232]	; (800a020 <__mdiff+0x10c>)
 8009f36:	4602      	mov	r2, r0
 8009f38:	f240 2137 	movw	r1, #567	; 0x237
 8009f3c:	4839      	ldr	r0, [pc, #228]	; (800a024 <__mdiff+0x110>)
 8009f3e:	f001 fa5f 	bl	800b400 <__assert_func>
 8009f42:	2301      	movs	r3, #1
 8009f44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4c:	bfa4      	itt	ge
 8009f4e:	4643      	movge	r3, r8
 8009f50:	46a0      	movge	r8, r4
 8009f52:	4630      	mov	r0, r6
 8009f54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f58:	bfa6      	itte	ge
 8009f5a:	461c      	movge	r4, r3
 8009f5c:	2500      	movge	r5, #0
 8009f5e:	2501      	movlt	r5, #1
 8009f60:	f7ff fcf6 	bl	8009950 <_Balloc>
 8009f64:	b920      	cbnz	r0, 8009f70 <__mdiff+0x5c>
 8009f66:	4b2e      	ldr	r3, [pc, #184]	; (800a020 <__mdiff+0x10c>)
 8009f68:	4602      	mov	r2, r0
 8009f6a:	f240 2145 	movw	r1, #581	; 0x245
 8009f6e:	e7e5      	b.n	8009f3c <__mdiff+0x28>
 8009f70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f74:	6926      	ldr	r6, [r4, #16]
 8009f76:	60c5      	str	r5, [r0, #12]
 8009f78:	f104 0914 	add.w	r9, r4, #20
 8009f7c:	f108 0514 	add.w	r5, r8, #20
 8009f80:	f100 0e14 	add.w	lr, r0, #20
 8009f84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f8c:	f108 0210 	add.w	r2, r8, #16
 8009f90:	46f2      	mov	sl, lr
 8009f92:	2100      	movs	r1, #0
 8009f94:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f9c:	fa11 f88b 	uxtah	r8, r1, fp
 8009fa0:	b299      	uxth	r1, r3
 8009fa2:	0c1b      	lsrs	r3, r3, #16
 8009fa4:	eba8 0801 	sub.w	r8, r8, r1
 8009fa8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009fac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009fb0:	fa1f f888 	uxth.w	r8, r8
 8009fb4:	1419      	asrs	r1, r3, #16
 8009fb6:	454e      	cmp	r6, r9
 8009fb8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fbc:	f84a 3b04 	str.w	r3, [sl], #4
 8009fc0:	d8e8      	bhi.n	8009f94 <__mdiff+0x80>
 8009fc2:	1b33      	subs	r3, r6, r4
 8009fc4:	3b15      	subs	r3, #21
 8009fc6:	f023 0303 	bic.w	r3, r3, #3
 8009fca:	3304      	adds	r3, #4
 8009fcc:	3415      	adds	r4, #21
 8009fce:	42a6      	cmp	r6, r4
 8009fd0:	bf38      	it	cc
 8009fd2:	2304      	movcc	r3, #4
 8009fd4:	441d      	add	r5, r3
 8009fd6:	4473      	add	r3, lr
 8009fd8:	469e      	mov	lr, r3
 8009fda:	462e      	mov	r6, r5
 8009fdc:	4566      	cmp	r6, ip
 8009fde:	d30e      	bcc.n	8009ffe <__mdiff+0xea>
 8009fe0:	f10c 0203 	add.w	r2, ip, #3
 8009fe4:	1b52      	subs	r2, r2, r5
 8009fe6:	f022 0203 	bic.w	r2, r2, #3
 8009fea:	3d03      	subs	r5, #3
 8009fec:	45ac      	cmp	ip, r5
 8009fee:	bf38      	it	cc
 8009ff0:	2200      	movcc	r2, #0
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009ff8:	b17a      	cbz	r2, 800a01a <__mdiff+0x106>
 8009ffa:	6107      	str	r7, [r0, #16]
 8009ffc:	e7a4      	b.n	8009f48 <__mdiff+0x34>
 8009ffe:	f856 8b04 	ldr.w	r8, [r6], #4
 800a002:	fa11 f288 	uxtah	r2, r1, r8
 800a006:	1414      	asrs	r4, r2, #16
 800a008:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a00c:	b292      	uxth	r2, r2
 800a00e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a012:	f84e 2b04 	str.w	r2, [lr], #4
 800a016:	1421      	asrs	r1, r4, #16
 800a018:	e7e0      	b.n	8009fdc <__mdiff+0xc8>
 800a01a:	3f01      	subs	r7, #1
 800a01c:	e7ea      	b.n	8009ff4 <__mdiff+0xe0>
 800a01e:	bf00      	nop
 800a020:	0800ccd1 	.word	0x0800ccd1
 800a024:	0800cce2 	.word	0x0800cce2

0800a028 <__ulp>:
 800a028:	b082      	sub	sp, #8
 800a02a:	ed8d 0b00 	vstr	d0, [sp]
 800a02e:	9a01      	ldr	r2, [sp, #4]
 800a030:	4b0f      	ldr	r3, [pc, #60]	; (800a070 <__ulp+0x48>)
 800a032:	4013      	ands	r3, r2
 800a034:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a038:	2b00      	cmp	r3, #0
 800a03a:	dc08      	bgt.n	800a04e <__ulp+0x26>
 800a03c:	425b      	negs	r3, r3
 800a03e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a042:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a046:	da04      	bge.n	800a052 <__ulp+0x2a>
 800a048:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a04c:	4113      	asrs	r3, r2
 800a04e:	2200      	movs	r2, #0
 800a050:	e008      	b.n	800a064 <__ulp+0x3c>
 800a052:	f1a2 0314 	sub.w	r3, r2, #20
 800a056:	2b1e      	cmp	r3, #30
 800a058:	bfda      	itte	le
 800a05a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a05e:	40da      	lsrle	r2, r3
 800a060:	2201      	movgt	r2, #1
 800a062:	2300      	movs	r3, #0
 800a064:	4619      	mov	r1, r3
 800a066:	4610      	mov	r0, r2
 800a068:	ec41 0b10 	vmov	d0, r0, r1
 800a06c:	b002      	add	sp, #8
 800a06e:	4770      	bx	lr
 800a070:	7ff00000 	.word	0x7ff00000

0800a074 <__b2d>:
 800a074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a078:	6906      	ldr	r6, [r0, #16]
 800a07a:	f100 0814 	add.w	r8, r0, #20
 800a07e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a082:	1f37      	subs	r7, r6, #4
 800a084:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a088:	4610      	mov	r0, r2
 800a08a:	f7ff fd53 	bl	8009b34 <__hi0bits>
 800a08e:	f1c0 0320 	rsb	r3, r0, #32
 800a092:	280a      	cmp	r0, #10
 800a094:	600b      	str	r3, [r1, #0]
 800a096:	491b      	ldr	r1, [pc, #108]	; (800a104 <__b2d+0x90>)
 800a098:	dc15      	bgt.n	800a0c6 <__b2d+0x52>
 800a09a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a09e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a0a2:	45b8      	cmp	r8, r7
 800a0a4:	ea43 0501 	orr.w	r5, r3, r1
 800a0a8:	bf34      	ite	cc
 800a0aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a0ae:	2300      	movcs	r3, #0
 800a0b0:	3015      	adds	r0, #21
 800a0b2:	fa02 f000 	lsl.w	r0, r2, r0
 800a0b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a0ba:	4303      	orrs	r3, r0
 800a0bc:	461c      	mov	r4, r3
 800a0be:	ec45 4b10 	vmov	d0, r4, r5
 800a0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c6:	45b8      	cmp	r8, r7
 800a0c8:	bf3a      	itte	cc
 800a0ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a0ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800a0d2:	2300      	movcs	r3, #0
 800a0d4:	380b      	subs	r0, #11
 800a0d6:	d012      	beq.n	800a0fe <__b2d+0x8a>
 800a0d8:	f1c0 0120 	rsb	r1, r0, #32
 800a0dc:	fa23 f401 	lsr.w	r4, r3, r1
 800a0e0:	4082      	lsls	r2, r0
 800a0e2:	4322      	orrs	r2, r4
 800a0e4:	4547      	cmp	r7, r8
 800a0e6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a0ea:	bf8c      	ite	hi
 800a0ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a0f0:	2200      	movls	r2, #0
 800a0f2:	4083      	lsls	r3, r0
 800a0f4:	40ca      	lsrs	r2, r1
 800a0f6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	e7de      	b.n	800a0bc <__b2d+0x48>
 800a0fe:	ea42 0501 	orr.w	r5, r2, r1
 800a102:	e7db      	b.n	800a0bc <__b2d+0x48>
 800a104:	3ff00000 	.word	0x3ff00000

0800a108 <__d2b>:
 800a108:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a10c:	460f      	mov	r7, r1
 800a10e:	2101      	movs	r1, #1
 800a110:	ec59 8b10 	vmov	r8, r9, d0
 800a114:	4616      	mov	r6, r2
 800a116:	f7ff fc1b 	bl	8009950 <_Balloc>
 800a11a:	4604      	mov	r4, r0
 800a11c:	b930      	cbnz	r0, 800a12c <__d2b+0x24>
 800a11e:	4602      	mov	r2, r0
 800a120:	4b24      	ldr	r3, [pc, #144]	; (800a1b4 <__d2b+0xac>)
 800a122:	4825      	ldr	r0, [pc, #148]	; (800a1b8 <__d2b+0xb0>)
 800a124:	f240 310f 	movw	r1, #783	; 0x30f
 800a128:	f001 f96a 	bl	800b400 <__assert_func>
 800a12c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a130:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a134:	bb2d      	cbnz	r5, 800a182 <__d2b+0x7a>
 800a136:	9301      	str	r3, [sp, #4]
 800a138:	f1b8 0300 	subs.w	r3, r8, #0
 800a13c:	d026      	beq.n	800a18c <__d2b+0x84>
 800a13e:	4668      	mov	r0, sp
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	f7ff fd17 	bl	8009b74 <__lo0bits>
 800a146:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a14a:	b1e8      	cbz	r0, 800a188 <__d2b+0x80>
 800a14c:	f1c0 0320 	rsb	r3, r0, #32
 800a150:	fa02 f303 	lsl.w	r3, r2, r3
 800a154:	430b      	orrs	r3, r1
 800a156:	40c2      	lsrs	r2, r0
 800a158:	6163      	str	r3, [r4, #20]
 800a15a:	9201      	str	r2, [sp, #4]
 800a15c:	9b01      	ldr	r3, [sp, #4]
 800a15e:	61a3      	str	r3, [r4, #24]
 800a160:	2b00      	cmp	r3, #0
 800a162:	bf14      	ite	ne
 800a164:	2202      	movne	r2, #2
 800a166:	2201      	moveq	r2, #1
 800a168:	6122      	str	r2, [r4, #16]
 800a16a:	b1bd      	cbz	r5, 800a19c <__d2b+0x94>
 800a16c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a170:	4405      	add	r5, r0
 800a172:	603d      	str	r5, [r7, #0]
 800a174:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a178:	6030      	str	r0, [r6, #0]
 800a17a:	4620      	mov	r0, r4
 800a17c:	b003      	add	sp, #12
 800a17e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a186:	e7d6      	b.n	800a136 <__d2b+0x2e>
 800a188:	6161      	str	r1, [r4, #20]
 800a18a:	e7e7      	b.n	800a15c <__d2b+0x54>
 800a18c:	a801      	add	r0, sp, #4
 800a18e:	f7ff fcf1 	bl	8009b74 <__lo0bits>
 800a192:	9b01      	ldr	r3, [sp, #4]
 800a194:	6163      	str	r3, [r4, #20]
 800a196:	3020      	adds	r0, #32
 800a198:	2201      	movs	r2, #1
 800a19a:	e7e5      	b.n	800a168 <__d2b+0x60>
 800a19c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1a4:	6038      	str	r0, [r7, #0]
 800a1a6:	6918      	ldr	r0, [r3, #16]
 800a1a8:	f7ff fcc4 	bl	8009b34 <__hi0bits>
 800a1ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1b0:	e7e2      	b.n	800a178 <__d2b+0x70>
 800a1b2:	bf00      	nop
 800a1b4:	0800ccd1 	.word	0x0800ccd1
 800a1b8:	0800cce2 	.word	0x0800cce2

0800a1bc <__ratio>:
 800a1bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c0:	4688      	mov	r8, r1
 800a1c2:	4669      	mov	r1, sp
 800a1c4:	4681      	mov	r9, r0
 800a1c6:	f7ff ff55 	bl	800a074 <__b2d>
 800a1ca:	a901      	add	r1, sp, #4
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	ec55 4b10 	vmov	r4, r5, d0
 800a1d2:	ee10 aa10 	vmov	sl, s0
 800a1d6:	f7ff ff4d 	bl	800a074 <__b2d>
 800a1da:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a1de:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a1e2:	1ad2      	subs	r2, r2, r3
 800a1e4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a1e8:	1a5b      	subs	r3, r3, r1
 800a1ea:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a1ee:	ec57 6b10 	vmov	r6, r7, d0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	bfd6      	itet	le
 800a1f6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a1fa:	462a      	movgt	r2, r5
 800a1fc:	463a      	movle	r2, r7
 800a1fe:	46ab      	mov	fp, r5
 800a200:	bfd6      	itet	le
 800a202:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a206:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a20a:	ee00 3a90 	vmovle	s1, r3
 800a20e:	ec4b ab17 	vmov	d7, sl, fp
 800a212:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a216:	b003      	add	sp, #12
 800a218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a21c <__copybits>:
 800a21c:	3901      	subs	r1, #1
 800a21e:	b570      	push	{r4, r5, r6, lr}
 800a220:	1149      	asrs	r1, r1, #5
 800a222:	6914      	ldr	r4, [r2, #16]
 800a224:	3101      	adds	r1, #1
 800a226:	f102 0314 	add.w	r3, r2, #20
 800a22a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a22e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a232:	1f05      	subs	r5, r0, #4
 800a234:	42a3      	cmp	r3, r4
 800a236:	d30c      	bcc.n	800a252 <__copybits+0x36>
 800a238:	1aa3      	subs	r3, r4, r2
 800a23a:	3b11      	subs	r3, #17
 800a23c:	f023 0303 	bic.w	r3, r3, #3
 800a240:	3211      	adds	r2, #17
 800a242:	42a2      	cmp	r2, r4
 800a244:	bf88      	it	hi
 800a246:	2300      	movhi	r3, #0
 800a248:	4418      	add	r0, r3
 800a24a:	2300      	movs	r3, #0
 800a24c:	4288      	cmp	r0, r1
 800a24e:	d305      	bcc.n	800a25c <__copybits+0x40>
 800a250:	bd70      	pop	{r4, r5, r6, pc}
 800a252:	f853 6b04 	ldr.w	r6, [r3], #4
 800a256:	f845 6f04 	str.w	r6, [r5, #4]!
 800a25a:	e7eb      	b.n	800a234 <__copybits+0x18>
 800a25c:	f840 3b04 	str.w	r3, [r0], #4
 800a260:	e7f4      	b.n	800a24c <__copybits+0x30>

0800a262 <__any_on>:
 800a262:	f100 0214 	add.w	r2, r0, #20
 800a266:	6900      	ldr	r0, [r0, #16]
 800a268:	114b      	asrs	r3, r1, #5
 800a26a:	4298      	cmp	r0, r3
 800a26c:	b510      	push	{r4, lr}
 800a26e:	db11      	blt.n	800a294 <__any_on+0x32>
 800a270:	dd0a      	ble.n	800a288 <__any_on+0x26>
 800a272:	f011 011f 	ands.w	r1, r1, #31
 800a276:	d007      	beq.n	800a288 <__any_on+0x26>
 800a278:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a27c:	fa24 f001 	lsr.w	r0, r4, r1
 800a280:	fa00 f101 	lsl.w	r1, r0, r1
 800a284:	428c      	cmp	r4, r1
 800a286:	d10b      	bne.n	800a2a0 <__any_on+0x3e>
 800a288:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d803      	bhi.n	800a298 <__any_on+0x36>
 800a290:	2000      	movs	r0, #0
 800a292:	bd10      	pop	{r4, pc}
 800a294:	4603      	mov	r3, r0
 800a296:	e7f7      	b.n	800a288 <__any_on+0x26>
 800a298:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a29c:	2900      	cmp	r1, #0
 800a29e:	d0f5      	beq.n	800a28c <__any_on+0x2a>
 800a2a0:	2001      	movs	r0, #1
 800a2a2:	e7f6      	b.n	800a292 <__any_on+0x30>

0800a2a4 <sulp>:
 800a2a4:	b570      	push	{r4, r5, r6, lr}
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	460d      	mov	r5, r1
 800a2aa:	4616      	mov	r6, r2
 800a2ac:	ec45 4b10 	vmov	d0, r4, r5
 800a2b0:	f7ff feba 	bl	800a028 <__ulp>
 800a2b4:	b17e      	cbz	r6, 800a2d6 <sulp+0x32>
 800a2b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a2ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	dd09      	ble.n	800a2d6 <sulp+0x32>
 800a2c2:	051b      	lsls	r3, r3, #20
 800a2c4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800a2ce:	ec41 0b17 	vmov	d7, r0, r1
 800a2d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a2d6:	bd70      	pop	{r4, r5, r6, pc}

0800a2d8 <_strtod_l>:
 800a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2dc:	ed2d 8b0e 	vpush	{d8-d14}
 800a2e0:	b097      	sub	sp, #92	; 0x5c
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	920d      	str	r2, [sp, #52]	; 0x34
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	9212      	str	r2, [sp, #72]	; 0x48
 800a2ea:	468a      	mov	sl, r1
 800a2ec:	f04f 0800 	mov.w	r8, #0
 800a2f0:	f04f 0900 	mov.w	r9, #0
 800a2f4:	460a      	mov	r2, r1
 800a2f6:	9211      	str	r2, [sp, #68]	; 0x44
 800a2f8:	7811      	ldrb	r1, [r2, #0]
 800a2fa:	292b      	cmp	r1, #43	; 0x2b
 800a2fc:	d04c      	beq.n	800a398 <_strtod_l+0xc0>
 800a2fe:	d839      	bhi.n	800a374 <_strtod_l+0x9c>
 800a300:	290d      	cmp	r1, #13
 800a302:	d833      	bhi.n	800a36c <_strtod_l+0x94>
 800a304:	2908      	cmp	r1, #8
 800a306:	d833      	bhi.n	800a370 <_strtod_l+0x98>
 800a308:	2900      	cmp	r1, #0
 800a30a:	d03c      	beq.n	800a386 <_strtod_l+0xae>
 800a30c:	2200      	movs	r2, #0
 800a30e:	9208      	str	r2, [sp, #32]
 800a310:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a312:	7832      	ldrb	r2, [r6, #0]
 800a314:	2a30      	cmp	r2, #48	; 0x30
 800a316:	f040 80b8 	bne.w	800a48a <_strtod_l+0x1b2>
 800a31a:	7872      	ldrb	r2, [r6, #1]
 800a31c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a320:	2a58      	cmp	r2, #88	; 0x58
 800a322:	d170      	bne.n	800a406 <_strtod_l+0x12e>
 800a324:	9302      	str	r3, [sp, #8]
 800a326:	9b08      	ldr	r3, [sp, #32]
 800a328:	9301      	str	r3, [sp, #4]
 800a32a:	ab12      	add	r3, sp, #72	; 0x48
 800a32c:	9300      	str	r3, [sp, #0]
 800a32e:	4a91      	ldr	r2, [pc, #580]	; (800a574 <_strtod_l+0x29c>)
 800a330:	ab13      	add	r3, sp, #76	; 0x4c
 800a332:	a911      	add	r1, sp, #68	; 0x44
 800a334:	4620      	mov	r0, r4
 800a336:	f001 f8ff 	bl	800b538 <__gethex>
 800a33a:	f010 070f 	ands.w	r7, r0, #15
 800a33e:	4605      	mov	r5, r0
 800a340:	d005      	beq.n	800a34e <_strtod_l+0x76>
 800a342:	2f06      	cmp	r7, #6
 800a344:	d12a      	bne.n	800a39c <_strtod_l+0xc4>
 800a346:	3601      	adds	r6, #1
 800a348:	2300      	movs	r3, #0
 800a34a:	9611      	str	r6, [sp, #68]	; 0x44
 800a34c:	9308      	str	r3, [sp, #32]
 800a34e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a350:	2b00      	cmp	r3, #0
 800a352:	f040 8555 	bne.w	800ae00 <_strtod_l+0xb28>
 800a356:	9b08      	ldr	r3, [sp, #32]
 800a358:	ec49 8b10 	vmov	d0, r8, r9
 800a35c:	b1cb      	cbz	r3, 800a392 <_strtod_l+0xba>
 800a35e:	eeb1 0b40 	vneg.f64	d0, d0
 800a362:	b017      	add	sp, #92	; 0x5c
 800a364:	ecbd 8b0e 	vpop	{d8-d14}
 800a368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a36c:	2920      	cmp	r1, #32
 800a36e:	d1cd      	bne.n	800a30c <_strtod_l+0x34>
 800a370:	3201      	adds	r2, #1
 800a372:	e7c0      	b.n	800a2f6 <_strtod_l+0x1e>
 800a374:	292d      	cmp	r1, #45	; 0x2d
 800a376:	d1c9      	bne.n	800a30c <_strtod_l+0x34>
 800a378:	2101      	movs	r1, #1
 800a37a:	9108      	str	r1, [sp, #32]
 800a37c:	1c51      	adds	r1, r2, #1
 800a37e:	9111      	str	r1, [sp, #68]	; 0x44
 800a380:	7852      	ldrb	r2, [r2, #1]
 800a382:	2a00      	cmp	r2, #0
 800a384:	d1c4      	bne.n	800a310 <_strtod_l+0x38>
 800a386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a388:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f040 8535 	bne.w	800adfc <_strtod_l+0xb24>
 800a392:	ec49 8b10 	vmov	d0, r8, r9
 800a396:	e7e4      	b.n	800a362 <_strtod_l+0x8a>
 800a398:	2100      	movs	r1, #0
 800a39a:	e7ee      	b.n	800a37a <_strtod_l+0xa2>
 800a39c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a39e:	b13a      	cbz	r2, 800a3b0 <_strtod_l+0xd8>
 800a3a0:	2135      	movs	r1, #53	; 0x35
 800a3a2:	a814      	add	r0, sp, #80	; 0x50
 800a3a4:	f7ff ff3a 	bl	800a21c <__copybits>
 800a3a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f7ff fb10 	bl	80099d0 <_Bfree>
 800a3b0:	1e7b      	subs	r3, r7, #1
 800a3b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	d806      	bhi.n	800a3c6 <_strtod_l+0xee>
 800a3b8:	e8df f003 	tbb	[pc, r3]
 800a3bc:	201d0314 	.word	0x201d0314
 800a3c0:	14          	.byte	0x14
 800a3c1:	00          	.byte	0x00
 800a3c2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800a3c6:	05eb      	lsls	r3, r5, #23
 800a3c8:	bf48      	it	mi
 800a3ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a3ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3d2:	0d1b      	lsrs	r3, r3, #20
 800a3d4:	051b      	lsls	r3, r3, #20
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d1b9      	bne.n	800a34e <_strtod_l+0x76>
 800a3da:	f7fe fb8f 	bl	8008afc <__errno>
 800a3de:	2322      	movs	r3, #34	; 0x22
 800a3e0:	6003      	str	r3, [r0, #0]
 800a3e2:	e7b4      	b.n	800a34e <_strtod_l+0x76>
 800a3e4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800a3e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a3ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a3f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a3f4:	e7e7      	b.n	800a3c6 <_strtod_l+0xee>
 800a3f6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800a57c <_strtod_l+0x2a4>
 800a3fa:	e7e4      	b.n	800a3c6 <_strtod_l+0xee>
 800a3fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a400:	f04f 38ff 	mov.w	r8, #4294967295
 800a404:	e7df      	b.n	800a3c6 <_strtod_l+0xee>
 800a406:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a408:	1c5a      	adds	r2, r3, #1
 800a40a:	9211      	str	r2, [sp, #68]	; 0x44
 800a40c:	785b      	ldrb	r3, [r3, #1]
 800a40e:	2b30      	cmp	r3, #48	; 0x30
 800a410:	d0f9      	beq.n	800a406 <_strtod_l+0x12e>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d09b      	beq.n	800a34e <_strtod_l+0x76>
 800a416:	2301      	movs	r3, #1
 800a418:	9306      	str	r3, [sp, #24]
 800a41a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a41c:	9309      	str	r3, [sp, #36]	; 0x24
 800a41e:	2300      	movs	r3, #0
 800a420:	9305      	str	r3, [sp, #20]
 800a422:	9307      	str	r3, [sp, #28]
 800a424:	461e      	mov	r6, r3
 800a426:	220a      	movs	r2, #10
 800a428:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a42a:	7805      	ldrb	r5, [r0, #0]
 800a42c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a430:	b2d9      	uxtb	r1, r3
 800a432:	2909      	cmp	r1, #9
 800a434:	d92b      	bls.n	800a48e <_strtod_l+0x1b6>
 800a436:	4950      	ldr	r1, [pc, #320]	; (800a578 <_strtod_l+0x2a0>)
 800a438:	2201      	movs	r2, #1
 800a43a:	f000 ffa9 	bl	800b390 <strncmp>
 800a43e:	2800      	cmp	r0, #0
 800a440:	d035      	beq.n	800a4ae <_strtod_l+0x1d6>
 800a442:	2000      	movs	r0, #0
 800a444:	462a      	mov	r2, r5
 800a446:	4633      	mov	r3, r6
 800a448:	4683      	mov	fp, r0
 800a44a:	4601      	mov	r1, r0
 800a44c:	2a65      	cmp	r2, #101	; 0x65
 800a44e:	d001      	beq.n	800a454 <_strtod_l+0x17c>
 800a450:	2a45      	cmp	r2, #69	; 0x45
 800a452:	d118      	bne.n	800a486 <_strtod_l+0x1ae>
 800a454:	b91b      	cbnz	r3, 800a45e <_strtod_l+0x186>
 800a456:	9b06      	ldr	r3, [sp, #24]
 800a458:	4303      	orrs	r3, r0
 800a45a:	d094      	beq.n	800a386 <_strtod_l+0xae>
 800a45c:	2300      	movs	r3, #0
 800a45e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800a462:	f10a 0201 	add.w	r2, sl, #1
 800a466:	9211      	str	r2, [sp, #68]	; 0x44
 800a468:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800a46c:	2a2b      	cmp	r2, #43	; 0x2b
 800a46e:	d075      	beq.n	800a55c <_strtod_l+0x284>
 800a470:	2a2d      	cmp	r2, #45	; 0x2d
 800a472:	d07b      	beq.n	800a56c <_strtod_l+0x294>
 800a474:	f04f 0e00 	mov.w	lr, #0
 800a478:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a47c:	2d09      	cmp	r5, #9
 800a47e:	f240 8083 	bls.w	800a588 <_strtod_l+0x2b0>
 800a482:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800a486:	2500      	movs	r5, #0
 800a488:	e09e      	b.n	800a5c8 <_strtod_l+0x2f0>
 800a48a:	2300      	movs	r3, #0
 800a48c:	e7c4      	b.n	800a418 <_strtod_l+0x140>
 800a48e:	2e08      	cmp	r6, #8
 800a490:	bfd5      	itete	le
 800a492:	9907      	ldrle	r1, [sp, #28]
 800a494:	9905      	ldrgt	r1, [sp, #20]
 800a496:	fb02 3301 	mlale	r3, r2, r1, r3
 800a49a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a49e:	f100 0001 	add.w	r0, r0, #1
 800a4a2:	bfd4      	ite	le
 800a4a4:	9307      	strle	r3, [sp, #28]
 800a4a6:	9305      	strgt	r3, [sp, #20]
 800a4a8:	3601      	adds	r6, #1
 800a4aa:	9011      	str	r0, [sp, #68]	; 0x44
 800a4ac:	e7bc      	b.n	800a428 <_strtod_l+0x150>
 800a4ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4b0:	1c5a      	adds	r2, r3, #1
 800a4b2:	9211      	str	r2, [sp, #68]	; 0x44
 800a4b4:	785a      	ldrb	r2, [r3, #1]
 800a4b6:	b3ae      	cbz	r6, 800a524 <_strtod_l+0x24c>
 800a4b8:	4683      	mov	fp, r0
 800a4ba:	4633      	mov	r3, r6
 800a4bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a4c0:	2909      	cmp	r1, #9
 800a4c2:	d912      	bls.n	800a4ea <_strtod_l+0x212>
 800a4c4:	2101      	movs	r1, #1
 800a4c6:	e7c1      	b.n	800a44c <_strtod_l+0x174>
 800a4c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4ca:	1c5a      	adds	r2, r3, #1
 800a4cc:	9211      	str	r2, [sp, #68]	; 0x44
 800a4ce:	785a      	ldrb	r2, [r3, #1]
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	2a30      	cmp	r2, #48	; 0x30
 800a4d4:	d0f8      	beq.n	800a4c8 <_strtod_l+0x1f0>
 800a4d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a4da:	2b08      	cmp	r3, #8
 800a4dc:	f200 8495 	bhi.w	800ae0a <_strtod_l+0xb32>
 800a4e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4e4:	4683      	mov	fp, r0
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	3a30      	subs	r2, #48	; 0x30
 800a4ec:	f100 0101 	add.w	r1, r0, #1
 800a4f0:	d012      	beq.n	800a518 <_strtod_l+0x240>
 800a4f2:	448b      	add	fp, r1
 800a4f4:	eb00 0c03 	add.w	ip, r0, r3
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	250a      	movs	r5, #10
 800a4fc:	4561      	cmp	r1, ip
 800a4fe:	d113      	bne.n	800a528 <_strtod_l+0x250>
 800a500:	1819      	adds	r1, r3, r0
 800a502:	2908      	cmp	r1, #8
 800a504:	f103 0301 	add.w	r3, r3, #1
 800a508:	4403      	add	r3, r0
 800a50a:	dc1b      	bgt.n	800a544 <_strtod_l+0x26c>
 800a50c:	9807      	ldr	r0, [sp, #28]
 800a50e:	210a      	movs	r1, #10
 800a510:	fb01 2200 	mla	r2, r1, r0, r2
 800a514:	9207      	str	r2, [sp, #28]
 800a516:	2100      	movs	r1, #0
 800a518:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a51a:	1c50      	adds	r0, r2, #1
 800a51c:	9011      	str	r0, [sp, #68]	; 0x44
 800a51e:	7852      	ldrb	r2, [r2, #1]
 800a520:	4608      	mov	r0, r1
 800a522:	e7cb      	b.n	800a4bc <_strtod_l+0x1e4>
 800a524:	4630      	mov	r0, r6
 800a526:	e7d4      	b.n	800a4d2 <_strtod_l+0x1fa>
 800a528:	2908      	cmp	r1, #8
 800a52a:	f101 0101 	add.w	r1, r1, #1
 800a52e:	dc03      	bgt.n	800a538 <_strtod_l+0x260>
 800a530:	9f07      	ldr	r7, [sp, #28]
 800a532:	436f      	muls	r7, r5
 800a534:	9707      	str	r7, [sp, #28]
 800a536:	e7e1      	b.n	800a4fc <_strtod_l+0x224>
 800a538:	2910      	cmp	r1, #16
 800a53a:	bfde      	ittt	le
 800a53c:	9f05      	ldrle	r7, [sp, #20]
 800a53e:	436f      	mulle	r7, r5
 800a540:	9705      	strle	r7, [sp, #20]
 800a542:	e7db      	b.n	800a4fc <_strtod_l+0x224>
 800a544:	2b10      	cmp	r3, #16
 800a546:	bfdf      	itttt	le
 800a548:	9805      	ldrle	r0, [sp, #20]
 800a54a:	210a      	movle	r1, #10
 800a54c:	fb01 2200 	mlale	r2, r1, r0, r2
 800a550:	9205      	strle	r2, [sp, #20]
 800a552:	e7e0      	b.n	800a516 <_strtod_l+0x23e>
 800a554:	f04f 0b00 	mov.w	fp, #0
 800a558:	2101      	movs	r1, #1
 800a55a:	e77c      	b.n	800a456 <_strtod_l+0x17e>
 800a55c:	f04f 0e00 	mov.w	lr, #0
 800a560:	f10a 0202 	add.w	r2, sl, #2
 800a564:	9211      	str	r2, [sp, #68]	; 0x44
 800a566:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800a56a:	e785      	b.n	800a478 <_strtod_l+0x1a0>
 800a56c:	f04f 0e01 	mov.w	lr, #1
 800a570:	e7f6      	b.n	800a560 <_strtod_l+0x288>
 800a572:	bf00      	nop
 800a574:	0800ce40 	.word	0x0800ce40
 800a578:	0800ce3c 	.word	0x0800ce3c
 800a57c:	7ff00000 	.word	0x7ff00000
 800a580:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a582:	1c55      	adds	r5, r2, #1
 800a584:	9511      	str	r5, [sp, #68]	; 0x44
 800a586:	7852      	ldrb	r2, [r2, #1]
 800a588:	2a30      	cmp	r2, #48	; 0x30
 800a58a:	d0f9      	beq.n	800a580 <_strtod_l+0x2a8>
 800a58c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800a590:	2d08      	cmp	r5, #8
 800a592:	f63f af78 	bhi.w	800a486 <_strtod_l+0x1ae>
 800a596:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a59a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a59c:	920a      	str	r2, [sp, #40]	; 0x28
 800a59e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a5a0:	1c55      	adds	r5, r2, #1
 800a5a2:	9511      	str	r5, [sp, #68]	; 0x44
 800a5a4:	7852      	ldrb	r2, [r2, #1]
 800a5a6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800a5aa:	2f09      	cmp	r7, #9
 800a5ac:	d937      	bls.n	800a61e <_strtod_l+0x346>
 800a5ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a5b0:	1bed      	subs	r5, r5, r7
 800a5b2:	2d08      	cmp	r5, #8
 800a5b4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a5b8:	dc02      	bgt.n	800a5c0 <_strtod_l+0x2e8>
 800a5ba:	4565      	cmp	r5, ip
 800a5bc:	bfa8      	it	ge
 800a5be:	4665      	movge	r5, ip
 800a5c0:	f1be 0f00 	cmp.w	lr, #0
 800a5c4:	d000      	beq.n	800a5c8 <_strtod_l+0x2f0>
 800a5c6:	426d      	negs	r5, r5
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d14d      	bne.n	800a668 <_strtod_l+0x390>
 800a5cc:	9b06      	ldr	r3, [sp, #24]
 800a5ce:	4303      	orrs	r3, r0
 800a5d0:	f47f aebd 	bne.w	800a34e <_strtod_l+0x76>
 800a5d4:	2900      	cmp	r1, #0
 800a5d6:	f47f aed6 	bne.w	800a386 <_strtod_l+0xae>
 800a5da:	2a69      	cmp	r2, #105	; 0x69
 800a5dc:	d027      	beq.n	800a62e <_strtod_l+0x356>
 800a5de:	dc24      	bgt.n	800a62a <_strtod_l+0x352>
 800a5e0:	2a49      	cmp	r2, #73	; 0x49
 800a5e2:	d024      	beq.n	800a62e <_strtod_l+0x356>
 800a5e4:	2a4e      	cmp	r2, #78	; 0x4e
 800a5e6:	f47f aece 	bne.w	800a386 <_strtod_l+0xae>
 800a5ea:	4995      	ldr	r1, [pc, #596]	; (800a840 <_strtod_l+0x568>)
 800a5ec:	a811      	add	r0, sp, #68	; 0x44
 800a5ee:	f001 f9e3 	bl	800b9b8 <__match>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	f43f aec7 	beq.w	800a386 <_strtod_l+0xae>
 800a5f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	2b28      	cmp	r3, #40	; 0x28
 800a5fe:	d12d      	bne.n	800a65c <_strtod_l+0x384>
 800a600:	4990      	ldr	r1, [pc, #576]	; (800a844 <_strtod_l+0x56c>)
 800a602:	aa14      	add	r2, sp, #80	; 0x50
 800a604:	a811      	add	r0, sp, #68	; 0x44
 800a606:	f001 f9eb 	bl	800b9e0 <__hexnan>
 800a60a:	2805      	cmp	r0, #5
 800a60c:	d126      	bne.n	800a65c <_strtod_l+0x384>
 800a60e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a610:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a614:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a618:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a61c:	e697      	b.n	800a34e <_strtod_l+0x76>
 800a61e:	250a      	movs	r5, #10
 800a620:	fb05 2c0c 	mla	ip, r5, ip, r2
 800a624:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a628:	e7b9      	b.n	800a59e <_strtod_l+0x2c6>
 800a62a:	2a6e      	cmp	r2, #110	; 0x6e
 800a62c:	e7db      	b.n	800a5e6 <_strtod_l+0x30e>
 800a62e:	4986      	ldr	r1, [pc, #536]	; (800a848 <_strtod_l+0x570>)
 800a630:	a811      	add	r0, sp, #68	; 0x44
 800a632:	f001 f9c1 	bl	800b9b8 <__match>
 800a636:	2800      	cmp	r0, #0
 800a638:	f43f aea5 	beq.w	800a386 <_strtod_l+0xae>
 800a63c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a63e:	4983      	ldr	r1, [pc, #524]	; (800a84c <_strtod_l+0x574>)
 800a640:	3b01      	subs	r3, #1
 800a642:	a811      	add	r0, sp, #68	; 0x44
 800a644:	9311      	str	r3, [sp, #68]	; 0x44
 800a646:	f001 f9b7 	bl	800b9b8 <__match>
 800a64a:	b910      	cbnz	r0, 800a652 <_strtod_l+0x37a>
 800a64c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a64e:	3301      	adds	r3, #1
 800a650:	9311      	str	r3, [sp, #68]	; 0x44
 800a652:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800a860 <_strtod_l+0x588>
 800a656:	f04f 0800 	mov.w	r8, #0
 800a65a:	e678      	b.n	800a34e <_strtod_l+0x76>
 800a65c:	487c      	ldr	r0, [pc, #496]	; (800a850 <_strtod_l+0x578>)
 800a65e:	f000 fec7 	bl	800b3f0 <nan>
 800a662:	ec59 8b10 	vmov	r8, r9, d0
 800a666:	e672      	b.n	800a34e <_strtod_l+0x76>
 800a668:	eddd 7a07 	vldr	s15, [sp, #28]
 800a66c:	eba5 020b 	sub.w	r2, r5, fp
 800a670:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a674:	2e00      	cmp	r6, #0
 800a676:	bf08      	it	eq
 800a678:	461e      	moveq	r6, r3
 800a67a:	2b10      	cmp	r3, #16
 800a67c:	9206      	str	r2, [sp, #24]
 800a67e:	461a      	mov	r2, r3
 800a680:	bfa8      	it	ge
 800a682:	2210      	movge	r2, #16
 800a684:	2b09      	cmp	r3, #9
 800a686:	ec59 8b17 	vmov	r8, r9, d7
 800a68a:	dd0c      	ble.n	800a6a6 <_strtod_l+0x3ce>
 800a68c:	4971      	ldr	r1, [pc, #452]	; (800a854 <_strtod_l+0x57c>)
 800a68e:	eddd 6a05 	vldr	s13, [sp, #20]
 800a692:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a696:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800a69a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800a69e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a6a2:	ec59 8b16 	vmov	r8, r9, d6
 800a6a6:	2b0f      	cmp	r3, #15
 800a6a8:	dc37      	bgt.n	800a71a <_strtod_l+0x442>
 800a6aa:	9906      	ldr	r1, [sp, #24]
 800a6ac:	2900      	cmp	r1, #0
 800a6ae:	f43f ae4e 	beq.w	800a34e <_strtod_l+0x76>
 800a6b2:	dd23      	ble.n	800a6fc <_strtod_l+0x424>
 800a6b4:	2916      	cmp	r1, #22
 800a6b6:	dc0b      	bgt.n	800a6d0 <_strtod_l+0x3f8>
 800a6b8:	4b66      	ldr	r3, [pc, #408]	; (800a854 <_strtod_l+0x57c>)
 800a6ba:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a6be:	ed93 7b00 	vldr	d7, [r3]
 800a6c2:	ec49 8b16 	vmov	d6, r8, r9
 800a6c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a6ca:	ec59 8b17 	vmov	r8, r9, d7
 800a6ce:	e63e      	b.n	800a34e <_strtod_l+0x76>
 800a6d0:	9806      	ldr	r0, [sp, #24]
 800a6d2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800a6d6:	4281      	cmp	r1, r0
 800a6d8:	db1f      	blt.n	800a71a <_strtod_l+0x442>
 800a6da:	4a5e      	ldr	r2, [pc, #376]	; (800a854 <_strtod_l+0x57c>)
 800a6dc:	f1c3 030f 	rsb	r3, r3, #15
 800a6e0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a6e4:	ed91 7b00 	vldr	d7, [r1]
 800a6e8:	ec49 8b16 	vmov	d6, r8, r9
 800a6ec:	1ac3      	subs	r3, r0, r3
 800a6ee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a6f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a6f6:	ed92 6b00 	vldr	d6, [r2]
 800a6fa:	e7e4      	b.n	800a6c6 <_strtod_l+0x3ee>
 800a6fc:	9906      	ldr	r1, [sp, #24]
 800a6fe:	3116      	adds	r1, #22
 800a700:	db0b      	blt.n	800a71a <_strtod_l+0x442>
 800a702:	4b54      	ldr	r3, [pc, #336]	; (800a854 <_strtod_l+0x57c>)
 800a704:	ebab 0505 	sub.w	r5, fp, r5
 800a708:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a70c:	ed95 7b00 	vldr	d7, [r5]
 800a710:	ec49 8b16 	vmov	d6, r8, r9
 800a714:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a718:	e7d7      	b.n	800a6ca <_strtod_l+0x3f2>
 800a71a:	9906      	ldr	r1, [sp, #24]
 800a71c:	1a9a      	subs	r2, r3, r2
 800a71e:	440a      	add	r2, r1
 800a720:	2a00      	cmp	r2, #0
 800a722:	dd6e      	ble.n	800a802 <_strtod_l+0x52a>
 800a724:	f012 000f 	ands.w	r0, r2, #15
 800a728:	d00a      	beq.n	800a740 <_strtod_l+0x468>
 800a72a:	494a      	ldr	r1, [pc, #296]	; (800a854 <_strtod_l+0x57c>)
 800a72c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a730:	ed91 7b00 	vldr	d7, [r1]
 800a734:	ec49 8b16 	vmov	d6, r8, r9
 800a738:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a73c:	ec59 8b17 	vmov	r8, r9, d7
 800a740:	f032 020f 	bics.w	r2, r2, #15
 800a744:	d04e      	beq.n	800a7e4 <_strtod_l+0x50c>
 800a746:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800a74a:	dd22      	ble.n	800a792 <_strtod_l+0x4ba>
 800a74c:	2500      	movs	r5, #0
 800a74e:	462e      	mov	r6, r5
 800a750:	9507      	str	r5, [sp, #28]
 800a752:	462f      	mov	r7, r5
 800a754:	2322      	movs	r3, #34	; 0x22
 800a756:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a860 <_strtod_l+0x588>
 800a75a:	6023      	str	r3, [r4, #0]
 800a75c:	f04f 0800 	mov.w	r8, #0
 800a760:	9b07      	ldr	r3, [sp, #28]
 800a762:	2b00      	cmp	r3, #0
 800a764:	f43f adf3 	beq.w	800a34e <_strtod_l+0x76>
 800a768:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a76a:	4620      	mov	r0, r4
 800a76c:	f7ff f930 	bl	80099d0 <_Bfree>
 800a770:	4639      	mov	r1, r7
 800a772:	4620      	mov	r0, r4
 800a774:	f7ff f92c 	bl	80099d0 <_Bfree>
 800a778:	4631      	mov	r1, r6
 800a77a:	4620      	mov	r0, r4
 800a77c:	f7ff f928 	bl	80099d0 <_Bfree>
 800a780:	9907      	ldr	r1, [sp, #28]
 800a782:	4620      	mov	r0, r4
 800a784:	f7ff f924 	bl	80099d0 <_Bfree>
 800a788:	4629      	mov	r1, r5
 800a78a:	4620      	mov	r0, r4
 800a78c:	f7ff f920 	bl	80099d0 <_Bfree>
 800a790:	e5dd      	b.n	800a34e <_strtod_l+0x76>
 800a792:	2000      	movs	r0, #0
 800a794:	ec49 8b17 	vmov	d7, r8, r9
 800a798:	4f2f      	ldr	r7, [pc, #188]	; (800a858 <_strtod_l+0x580>)
 800a79a:	1112      	asrs	r2, r2, #4
 800a79c:	4601      	mov	r1, r0
 800a79e:	2a01      	cmp	r2, #1
 800a7a0:	dc23      	bgt.n	800a7ea <_strtod_l+0x512>
 800a7a2:	b108      	cbz	r0, 800a7a8 <_strtod_l+0x4d0>
 800a7a4:	ec59 8b17 	vmov	r8, r9, d7
 800a7a8:	4a2b      	ldr	r2, [pc, #172]	; (800a858 <_strtod_l+0x580>)
 800a7aa:	482c      	ldr	r0, [pc, #176]	; (800a85c <_strtod_l+0x584>)
 800a7ac:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a7b0:	ed92 7b00 	vldr	d7, [r2]
 800a7b4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a7b8:	ec49 8b16 	vmov	d6, r8, r9
 800a7bc:	4a28      	ldr	r2, [pc, #160]	; (800a860 <_strtod_l+0x588>)
 800a7be:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a7c2:	ee17 1a90 	vmov	r1, s15
 800a7c6:	400a      	ands	r2, r1
 800a7c8:	4282      	cmp	r2, r0
 800a7ca:	ec59 8b17 	vmov	r8, r9, d7
 800a7ce:	d8bd      	bhi.n	800a74c <_strtod_l+0x474>
 800a7d0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800a7d4:	4282      	cmp	r2, r0
 800a7d6:	bf86      	itte	hi
 800a7d8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800a864 <_strtod_l+0x58c>
 800a7dc:	f04f 38ff 	movhi.w	r8, #4294967295
 800a7e0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	9205      	str	r2, [sp, #20]
 800a7e8:	e076      	b.n	800a8d8 <_strtod_l+0x600>
 800a7ea:	f012 0f01 	tst.w	r2, #1
 800a7ee:	d004      	beq.n	800a7fa <_strtod_l+0x522>
 800a7f0:	ed97 6b00 	vldr	d6, [r7]
 800a7f4:	2001      	movs	r0, #1
 800a7f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a7fa:	3101      	adds	r1, #1
 800a7fc:	1052      	asrs	r2, r2, #1
 800a7fe:	3708      	adds	r7, #8
 800a800:	e7cd      	b.n	800a79e <_strtod_l+0x4c6>
 800a802:	d0ef      	beq.n	800a7e4 <_strtod_l+0x50c>
 800a804:	4252      	negs	r2, r2
 800a806:	f012 000f 	ands.w	r0, r2, #15
 800a80a:	d00a      	beq.n	800a822 <_strtod_l+0x54a>
 800a80c:	4911      	ldr	r1, [pc, #68]	; (800a854 <_strtod_l+0x57c>)
 800a80e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a812:	ed91 7b00 	vldr	d7, [r1]
 800a816:	ec49 8b16 	vmov	d6, r8, r9
 800a81a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a81e:	ec59 8b17 	vmov	r8, r9, d7
 800a822:	1112      	asrs	r2, r2, #4
 800a824:	d0de      	beq.n	800a7e4 <_strtod_l+0x50c>
 800a826:	2a1f      	cmp	r2, #31
 800a828:	dd1e      	ble.n	800a868 <_strtod_l+0x590>
 800a82a:	2500      	movs	r5, #0
 800a82c:	462e      	mov	r6, r5
 800a82e:	9507      	str	r5, [sp, #28]
 800a830:	462f      	mov	r7, r5
 800a832:	2322      	movs	r3, #34	; 0x22
 800a834:	f04f 0800 	mov.w	r8, #0
 800a838:	f04f 0900 	mov.w	r9, #0
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	e78f      	b.n	800a760 <_strtod_l+0x488>
 800a840:	0800cc29 	.word	0x0800cc29
 800a844:	0800ce54 	.word	0x0800ce54
 800a848:	0800cc21 	.word	0x0800cc21
 800a84c:	0800cc58 	.word	0x0800cc58
 800a850:	0800cfe5 	.word	0x0800cfe5
 800a854:	0800cd68 	.word	0x0800cd68
 800a858:	0800cd40 	.word	0x0800cd40
 800a85c:	7ca00000 	.word	0x7ca00000
 800a860:	7ff00000 	.word	0x7ff00000
 800a864:	7fefffff 	.word	0x7fefffff
 800a868:	f012 0110 	ands.w	r1, r2, #16
 800a86c:	bf18      	it	ne
 800a86e:	216a      	movne	r1, #106	; 0x6a
 800a870:	9105      	str	r1, [sp, #20]
 800a872:	ec49 8b17 	vmov	d7, r8, r9
 800a876:	49be      	ldr	r1, [pc, #760]	; (800ab70 <_strtod_l+0x898>)
 800a878:	2000      	movs	r0, #0
 800a87a:	07d7      	lsls	r7, r2, #31
 800a87c:	d504      	bpl.n	800a888 <_strtod_l+0x5b0>
 800a87e:	ed91 6b00 	vldr	d6, [r1]
 800a882:	2001      	movs	r0, #1
 800a884:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a888:	1052      	asrs	r2, r2, #1
 800a88a:	f101 0108 	add.w	r1, r1, #8
 800a88e:	d1f4      	bne.n	800a87a <_strtod_l+0x5a2>
 800a890:	b108      	cbz	r0, 800a896 <_strtod_l+0x5be>
 800a892:	ec59 8b17 	vmov	r8, r9, d7
 800a896:	9a05      	ldr	r2, [sp, #20]
 800a898:	b1ba      	cbz	r2, 800a8ca <_strtod_l+0x5f2>
 800a89a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800a89e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800a8a2:	2a00      	cmp	r2, #0
 800a8a4:	4648      	mov	r0, r9
 800a8a6:	dd10      	ble.n	800a8ca <_strtod_l+0x5f2>
 800a8a8:	2a1f      	cmp	r2, #31
 800a8aa:	f340 812c 	ble.w	800ab06 <_strtod_l+0x82e>
 800a8ae:	2a34      	cmp	r2, #52	; 0x34
 800a8b0:	bfde      	ittt	le
 800a8b2:	f04f 32ff 	movle.w	r2, #4294967295
 800a8b6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800a8ba:	408a      	lslle	r2, r1
 800a8bc:	f04f 0800 	mov.w	r8, #0
 800a8c0:	bfcc      	ite	gt
 800a8c2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a8c6:	ea02 0900 	andle.w	r9, r2, r0
 800a8ca:	ec49 8b17 	vmov	d7, r8, r9
 800a8ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8d6:	d0a8      	beq.n	800a82a <_strtod_l+0x552>
 800a8d8:	9a07      	ldr	r2, [sp, #28]
 800a8da:	9200      	str	r2, [sp, #0]
 800a8dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8de:	4632      	mov	r2, r6
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f7ff f8dd 	bl	8009aa0 <__s2b>
 800a8e6:	9007      	str	r0, [sp, #28]
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	f43f af2f 	beq.w	800a74c <_strtod_l+0x474>
 800a8ee:	9a06      	ldr	r2, [sp, #24]
 800a8f0:	2a00      	cmp	r2, #0
 800a8f2:	ebab 0305 	sub.w	r3, fp, r5
 800a8f6:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800ab50 <_strtod_l+0x878>
 800a8fa:	bfa8      	it	ge
 800a8fc:	2300      	movge	r3, #0
 800a8fe:	ed9f ab96 	vldr	d10, [pc, #600]	; 800ab58 <_strtod_l+0x880>
 800a902:	ed9f bb97 	vldr	d11, [pc, #604]	; 800ab60 <_strtod_l+0x888>
 800a906:	9309      	str	r3, [sp, #36]	; 0x24
 800a908:	2500      	movs	r5, #0
 800a90a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a90e:	930c      	str	r3, [sp, #48]	; 0x30
 800a910:	462e      	mov	r6, r5
 800a912:	9b07      	ldr	r3, [sp, #28]
 800a914:	4620      	mov	r0, r4
 800a916:	6859      	ldr	r1, [r3, #4]
 800a918:	f7ff f81a 	bl	8009950 <_Balloc>
 800a91c:	4607      	mov	r7, r0
 800a91e:	2800      	cmp	r0, #0
 800a920:	f43f af18 	beq.w	800a754 <_strtod_l+0x47c>
 800a924:	9b07      	ldr	r3, [sp, #28]
 800a926:	691a      	ldr	r2, [r3, #16]
 800a928:	3202      	adds	r2, #2
 800a92a:	f103 010c 	add.w	r1, r3, #12
 800a92e:	0092      	lsls	r2, r2, #2
 800a930:	300c      	adds	r0, #12
 800a932:	f000 fd4f 	bl	800b3d4 <memcpy>
 800a936:	ec49 8b10 	vmov	d0, r8, r9
 800a93a:	aa14      	add	r2, sp, #80	; 0x50
 800a93c:	a913      	add	r1, sp, #76	; 0x4c
 800a93e:	4620      	mov	r0, r4
 800a940:	f7ff fbe2 	bl	800a108 <__d2b>
 800a944:	ec49 8b18 	vmov	d8, r8, r9
 800a948:	9012      	str	r0, [sp, #72]	; 0x48
 800a94a:	2800      	cmp	r0, #0
 800a94c:	f43f af02 	beq.w	800a754 <_strtod_l+0x47c>
 800a950:	2101      	movs	r1, #1
 800a952:	4620      	mov	r0, r4
 800a954:	f7ff f93c 	bl	8009bd0 <__i2b>
 800a958:	4606      	mov	r6, r0
 800a95a:	2800      	cmp	r0, #0
 800a95c:	f43f aefa 	beq.w	800a754 <_strtod_l+0x47c>
 800a960:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a962:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a964:	2b00      	cmp	r3, #0
 800a966:	bfab      	itete	ge
 800a968:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800a96a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800a96c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800a970:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800a974:	bfac      	ite	ge
 800a976:	eb03 0b02 	addge.w	fp, r3, r2
 800a97a:	eba2 0a03 	sublt.w	sl, r2, r3
 800a97e:	9a05      	ldr	r2, [sp, #20]
 800a980:	1a9b      	subs	r3, r3, r2
 800a982:	440b      	add	r3, r1
 800a984:	4a7b      	ldr	r2, [pc, #492]	; (800ab74 <_strtod_l+0x89c>)
 800a986:	3b01      	subs	r3, #1
 800a988:	4293      	cmp	r3, r2
 800a98a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800a98e:	f280 80cd 	bge.w	800ab2c <_strtod_l+0x854>
 800a992:	1ad2      	subs	r2, r2, r3
 800a994:	2a1f      	cmp	r2, #31
 800a996:	eba1 0102 	sub.w	r1, r1, r2
 800a99a:	f04f 0001 	mov.w	r0, #1
 800a99e:	f300 80b9 	bgt.w	800ab14 <_strtod_l+0x83c>
 800a9a2:	fa00 f302 	lsl.w	r3, r0, r2
 800a9a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a9ac:	eb0b 0301 	add.w	r3, fp, r1
 800a9b0:	9a05      	ldr	r2, [sp, #20]
 800a9b2:	459b      	cmp	fp, r3
 800a9b4:	448a      	add	sl, r1
 800a9b6:	4492      	add	sl, r2
 800a9b8:	465a      	mov	r2, fp
 800a9ba:	bfa8      	it	ge
 800a9bc:	461a      	movge	r2, r3
 800a9be:	4552      	cmp	r2, sl
 800a9c0:	bfa8      	it	ge
 800a9c2:	4652      	movge	r2, sl
 800a9c4:	2a00      	cmp	r2, #0
 800a9c6:	bfc2      	ittt	gt
 800a9c8:	1a9b      	subgt	r3, r3, r2
 800a9ca:	ebaa 0a02 	subgt.w	sl, sl, r2
 800a9ce:	ebab 0b02 	subgt.w	fp, fp, r2
 800a9d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9d4:	2a00      	cmp	r2, #0
 800a9d6:	dd18      	ble.n	800aa0a <_strtod_l+0x732>
 800a9d8:	4631      	mov	r1, r6
 800a9da:	4620      	mov	r0, r4
 800a9dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9de:	f7ff f9b7 	bl	8009d50 <__pow5mult>
 800a9e2:	4606      	mov	r6, r0
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	f43f aeb5 	beq.w	800a754 <_strtod_l+0x47c>
 800a9ea:	4601      	mov	r1, r0
 800a9ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f7ff f904 	bl	8009bfc <__multiply>
 800a9f4:	900e      	str	r0, [sp, #56]	; 0x38
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	f43f aeac 	beq.w	800a754 <_strtod_l+0x47c>
 800a9fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f7fe ffe6 	bl	80099d0 <_Bfree>
 800aa04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa08:	9212      	str	r2, [sp, #72]	; 0x48
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f300 8093 	bgt.w	800ab36 <_strtod_l+0x85e>
 800aa10:	9b06      	ldr	r3, [sp, #24]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	dd08      	ble.n	800aa28 <_strtod_l+0x750>
 800aa16:	4639      	mov	r1, r7
 800aa18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f7ff f998 	bl	8009d50 <__pow5mult>
 800aa20:	4607      	mov	r7, r0
 800aa22:	2800      	cmp	r0, #0
 800aa24:	f43f ae96 	beq.w	800a754 <_strtod_l+0x47c>
 800aa28:	f1ba 0f00 	cmp.w	sl, #0
 800aa2c:	dd08      	ble.n	800aa40 <_strtod_l+0x768>
 800aa2e:	4639      	mov	r1, r7
 800aa30:	4652      	mov	r2, sl
 800aa32:	4620      	mov	r0, r4
 800aa34:	f7ff f9e6 	bl	8009e04 <__lshift>
 800aa38:	4607      	mov	r7, r0
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	f43f ae8a 	beq.w	800a754 <_strtod_l+0x47c>
 800aa40:	f1bb 0f00 	cmp.w	fp, #0
 800aa44:	dd08      	ble.n	800aa58 <_strtod_l+0x780>
 800aa46:	4631      	mov	r1, r6
 800aa48:	465a      	mov	r2, fp
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f7ff f9da 	bl	8009e04 <__lshift>
 800aa50:	4606      	mov	r6, r0
 800aa52:	2800      	cmp	r0, #0
 800aa54:	f43f ae7e 	beq.w	800a754 <_strtod_l+0x47c>
 800aa58:	9912      	ldr	r1, [sp, #72]	; 0x48
 800aa5a:	463a      	mov	r2, r7
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f7ff fa59 	bl	8009f14 <__mdiff>
 800aa62:	4605      	mov	r5, r0
 800aa64:	2800      	cmp	r0, #0
 800aa66:	f43f ae75 	beq.w	800a754 <_strtod_l+0x47c>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800aa70:	60c3      	str	r3, [r0, #12]
 800aa72:	4631      	mov	r1, r6
 800aa74:	f7ff fa32 	bl	8009edc <__mcmp>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	da7f      	bge.n	800ab7c <_strtod_l+0x8a4>
 800aa7c:	ea5a 0a08 	orrs.w	sl, sl, r8
 800aa80:	f040 80a5 	bne.w	800abce <_strtod_l+0x8f6>
 800aa84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f040 80a0 	bne.w	800abce <_strtod_l+0x8f6>
 800aa8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa92:	0d1b      	lsrs	r3, r3, #20
 800aa94:	051b      	lsls	r3, r3, #20
 800aa96:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aa9a:	f240 8098 	bls.w	800abce <_strtod_l+0x8f6>
 800aa9e:	696b      	ldr	r3, [r5, #20]
 800aaa0:	b91b      	cbnz	r3, 800aaaa <_strtod_l+0x7d2>
 800aaa2:	692b      	ldr	r3, [r5, #16]
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	f340 8092 	ble.w	800abce <_strtod_l+0x8f6>
 800aaaa:	4629      	mov	r1, r5
 800aaac:	2201      	movs	r2, #1
 800aaae:	4620      	mov	r0, r4
 800aab0:	f7ff f9a8 	bl	8009e04 <__lshift>
 800aab4:	4631      	mov	r1, r6
 800aab6:	4605      	mov	r5, r0
 800aab8:	f7ff fa10 	bl	8009edc <__mcmp>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	f340 8086 	ble.w	800abce <_strtod_l+0x8f6>
 800aac2:	9905      	ldr	r1, [sp, #20]
 800aac4:	4a2c      	ldr	r2, [pc, #176]	; (800ab78 <_strtod_l+0x8a0>)
 800aac6:	464b      	mov	r3, r9
 800aac8:	2900      	cmp	r1, #0
 800aaca:	f000 809f 	beq.w	800ac0c <_strtod_l+0x934>
 800aace:	ea02 0109 	and.w	r1, r2, r9
 800aad2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aad6:	f300 8099 	bgt.w	800ac0c <_strtod_l+0x934>
 800aada:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aade:	f77f aea8 	ble.w	800a832 <_strtod_l+0x55a>
 800aae2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800ab68 <_strtod_l+0x890>
 800aae6:	ec49 8b16 	vmov	d6, r8, r9
 800aaea:	4b23      	ldr	r3, [pc, #140]	; (800ab78 <_strtod_l+0x8a0>)
 800aaec:	ee26 7b07 	vmul.f64	d7, d6, d7
 800aaf0:	ee17 2a90 	vmov	r2, s15
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	ec59 8b17 	vmov	r8, r9, d7
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f47f ae34 	bne.w	800a768 <_strtod_l+0x490>
 800ab00:	2322      	movs	r3, #34	; 0x22
 800ab02:	6023      	str	r3, [r4, #0]
 800ab04:	e630      	b.n	800a768 <_strtod_l+0x490>
 800ab06:	f04f 31ff 	mov.w	r1, #4294967295
 800ab0a:	fa01 f202 	lsl.w	r2, r1, r2
 800ab0e:	ea02 0808 	and.w	r8, r2, r8
 800ab12:	e6da      	b.n	800a8ca <_strtod_l+0x5f2>
 800ab14:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ab18:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ab1c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ab20:	33e2      	adds	r3, #226	; 0xe2
 800ab22:	fa00 f303 	lsl.w	r3, r0, r3
 800ab26:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800ab2a:	e73f      	b.n	800a9ac <_strtod_l+0x6d4>
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ab34:	e73a      	b.n	800a9ac <_strtod_l+0x6d4>
 800ab36:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ab38:	461a      	mov	r2, r3
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f7ff f962 	bl	8009e04 <__lshift>
 800ab40:	9012      	str	r0, [sp, #72]	; 0x48
 800ab42:	2800      	cmp	r0, #0
 800ab44:	f47f af64 	bne.w	800aa10 <_strtod_l+0x738>
 800ab48:	e604      	b.n	800a754 <_strtod_l+0x47c>
 800ab4a:	bf00      	nop
 800ab4c:	f3af 8000 	nop.w
 800ab50:	94a03595 	.word	0x94a03595
 800ab54:	3fcfffff 	.word	0x3fcfffff
 800ab58:	94a03595 	.word	0x94a03595
 800ab5c:	3fdfffff 	.word	0x3fdfffff
 800ab60:	35afe535 	.word	0x35afe535
 800ab64:	3fe00000 	.word	0x3fe00000
 800ab68:	00000000 	.word	0x00000000
 800ab6c:	39500000 	.word	0x39500000
 800ab70:	0800ce68 	.word	0x0800ce68
 800ab74:	fffffc02 	.word	0xfffffc02
 800ab78:	7ff00000 	.word	0x7ff00000
 800ab7c:	46cb      	mov	fp, r9
 800ab7e:	d15f      	bne.n	800ac40 <_strtod_l+0x968>
 800ab80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab84:	f1ba 0f00 	cmp.w	sl, #0
 800ab88:	d02a      	beq.n	800abe0 <_strtod_l+0x908>
 800ab8a:	4aa7      	ldr	r2, [pc, #668]	; (800ae28 <_strtod_l+0xb50>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d12b      	bne.n	800abe8 <_strtod_l+0x910>
 800ab90:	9b05      	ldr	r3, [sp, #20]
 800ab92:	4642      	mov	r2, r8
 800ab94:	b1fb      	cbz	r3, 800abd6 <_strtod_l+0x8fe>
 800ab96:	4ba5      	ldr	r3, [pc, #660]	; (800ae2c <_strtod_l+0xb54>)
 800ab98:	ea09 0303 	and.w	r3, r9, r3
 800ab9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aba0:	f04f 31ff 	mov.w	r1, #4294967295
 800aba4:	d81a      	bhi.n	800abdc <_strtod_l+0x904>
 800aba6:	0d1b      	lsrs	r3, r3, #20
 800aba8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abac:	fa01 f303 	lsl.w	r3, r1, r3
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d119      	bne.n	800abe8 <_strtod_l+0x910>
 800abb4:	4b9e      	ldr	r3, [pc, #632]	; (800ae30 <_strtod_l+0xb58>)
 800abb6:	459b      	cmp	fp, r3
 800abb8:	d102      	bne.n	800abc0 <_strtod_l+0x8e8>
 800abba:	3201      	adds	r2, #1
 800abbc:	f43f adca 	beq.w	800a754 <_strtod_l+0x47c>
 800abc0:	4b9a      	ldr	r3, [pc, #616]	; (800ae2c <_strtod_l+0xb54>)
 800abc2:	ea0b 0303 	and.w	r3, fp, r3
 800abc6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800abca:	f04f 0800 	mov.w	r8, #0
 800abce:	9b05      	ldr	r3, [sp, #20]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d186      	bne.n	800aae2 <_strtod_l+0x80a>
 800abd4:	e5c8      	b.n	800a768 <_strtod_l+0x490>
 800abd6:	f04f 33ff 	mov.w	r3, #4294967295
 800abda:	e7e9      	b.n	800abb0 <_strtod_l+0x8d8>
 800abdc:	460b      	mov	r3, r1
 800abde:	e7e7      	b.n	800abb0 <_strtod_l+0x8d8>
 800abe0:	ea53 0308 	orrs.w	r3, r3, r8
 800abe4:	f43f af6d 	beq.w	800aac2 <_strtod_l+0x7ea>
 800abe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abea:	b1cb      	cbz	r3, 800ac20 <_strtod_l+0x948>
 800abec:	ea13 0f0b 	tst.w	r3, fp
 800abf0:	d0ed      	beq.n	800abce <_strtod_l+0x8f6>
 800abf2:	9a05      	ldr	r2, [sp, #20]
 800abf4:	4640      	mov	r0, r8
 800abf6:	4649      	mov	r1, r9
 800abf8:	f1ba 0f00 	cmp.w	sl, #0
 800abfc:	d014      	beq.n	800ac28 <_strtod_l+0x950>
 800abfe:	f7ff fb51 	bl	800a2a4 <sulp>
 800ac02:	ee38 7b00 	vadd.f64	d7, d8, d0
 800ac06:	ec59 8b17 	vmov	r8, r9, d7
 800ac0a:	e7e0      	b.n	800abce <_strtod_l+0x8f6>
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ac12:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ac16:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ac1a:	f04f 38ff 	mov.w	r8, #4294967295
 800ac1e:	e7d6      	b.n	800abce <_strtod_l+0x8f6>
 800ac20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac22:	ea13 0f08 	tst.w	r3, r8
 800ac26:	e7e3      	b.n	800abf0 <_strtod_l+0x918>
 800ac28:	f7ff fb3c 	bl	800a2a4 <sulp>
 800ac2c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800ac30:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ac34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac38:	ec59 8b10 	vmov	r8, r9, d0
 800ac3c:	d1c7      	bne.n	800abce <_strtod_l+0x8f6>
 800ac3e:	e5f8      	b.n	800a832 <_strtod_l+0x55a>
 800ac40:	4631      	mov	r1, r6
 800ac42:	4628      	mov	r0, r5
 800ac44:	f7ff faba 	bl	800a1bc <__ratio>
 800ac48:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ac4c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ac50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac54:	d85f      	bhi.n	800ad16 <_strtod_l+0xa3e>
 800ac56:	f1ba 0f00 	cmp.w	sl, #0
 800ac5a:	d166      	bne.n	800ad2a <_strtod_l+0xa52>
 800ac5c:	f1b8 0f00 	cmp.w	r8, #0
 800ac60:	d14d      	bne.n	800acfe <_strtod_l+0xa26>
 800ac62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac66:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d162      	bne.n	800ad34 <_strtod_l+0xa5c>
 800ac6e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800ac72:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ac76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac7a:	d401      	bmi.n	800ac80 <_strtod_l+0x9a8>
 800ac7c:	ee20 db0d 	vmul.f64	d13, d0, d13
 800ac80:	eeb1 cb4d 	vneg.f64	d12, d13
 800ac84:	4869      	ldr	r0, [pc, #420]	; (800ae2c <_strtod_l+0xb54>)
 800ac86:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800ae38 <_strtod_l+0xb60>
 800ac8a:	ea0b 0100 	and.w	r1, fp, r0
 800ac8e:	4561      	cmp	r1, ip
 800ac90:	ec53 2b1c 	vmov	r2, r3, d12
 800ac94:	d17a      	bne.n	800ad8c <_strtod_l+0xab4>
 800ac96:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800ac9a:	ec49 8b10 	vmov	d0, r8, r9
 800ac9e:	910a      	str	r1, [sp, #40]	; 0x28
 800aca0:	f7ff f9c2 	bl	800a028 <__ulp>
 800aca4:	ec49 8b1e 	vmov	d14, r8, r9
 800aca8:	4860      	ldr	r0, [pc, #384]	; (800ae2c <_strtod_l+0xb54>)
 800acaa:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800acae:	ee1e 3a90 	vmov	r3, s29
 800acb2:	4a60      	ldr	r2, [pc, #384]	; (800ae34 <_strtod_l+0xb5c>)
 800acb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800acb6:	4018      	ands	r0, r3
 800acb8:	4290      	cmp	r0, r2
 800acba:	ec59 8b1e 	vmov	r8, r9, d14
 800acbe:	d93c      	bls.n	800ad3a <_strtod_l+0xa62>
 800acc0:	ee18 2a90 	vmov	r2, s17
 800acc4:	4b5a      	ldr	r3, [pc, #360]	; (800ae30 <_strtod_l+0xb58>)
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d104      	bne.n	800acd4 <_strtod_l+0x9fc>
 800acca:	ee18 3a10 	vmov	r3, s16
 800acce:	3301      	adds	r3, #1
 800acd0:	f43f ad40 	beq.w	800a754 <_strtod_l+0x47c>
 800acd4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800ae30 <_strtod_l+0xb58>
 800acd8:	f04f 38ff 	mov.w	r8, #4294967295
 800acdc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800acde:	4620      	mov	r0, r4
 800ace0:	f7fe fe76 	bl	80099d0 <_Bfree>
 800ace4:	4639      	mov	r1, r7
 800ace6:	4620      	mov	r0, r4
 800ace8:	f7fe fe72 	bl	80099d0 <_Bfree>
 800acec:	4631      	mov	r1, r6
 800acee:	4620      	mov	r0, r4
 800acf0:	f7fe fe6e 	bl	80099d0 <_Bfree>
 800acf4:	4629      	mov	r1, r5
 800acf6:	4620      	mov	r0, r4
 800acf8:	f7fe fe6a 	bl	80099d0 <_Bfree>
 800acfc:	e609      	b.n	800a912 <_strtod_l+0x63a>
 800acfe:	f1b8 0f01 	cmp.w	r8, #1
 800ad02:	d103      	bne.n	800ad0c <_strtod_l+0xa34>
 800ad04:	f1b9 0f00 	cmp.w	r9, #0
 800ad08:	f43f ad93 	beq.w	800a832 <_strtod_l+0x55a>
 800ad0c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800ad10:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800ad14:	e7b6      	b.n	800ac84 <_strtod_l+0x9ac>
 800ad16:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ad1a:	ee20 db0d 	vmul.f64	d13, d0, d13
 800ad1e:	f1ba 0f00 	cmp.w	sl, #0
 800ad22:	d0ad      	beq.n	800ac80 <_strtod_l+0x9a8>
 800ad24:	eeb0 cb4d 	vmov.f64	d12, d13
 800ad28:	e7ac      	b.n	800ac84 <_strtod_l+0x9ac>
 800ad2a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800ad2e:	eeb0 db4c 	vmov.f64	d13, d12
 800ad32:	e7a7      	b.n	800ac84 <_strtod_l+0x9ac>
 800ad34:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800ad38:	e7a4      	b.n	800ac84 <_strtod_l+0x9ac>
 800ad3a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ad3e:	9b05      	ldr	r3, [sp, #20]
 800ad40:	46cb      	mov	fp, r9
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1ca      	bne.n	800acdc <_strtod_l+0xa04>
 800ad46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad4a:	0d1b      	lsrs	r3, r3, #20
 800ad4c:	051b      	lsls	r3, r3, #20
 800ad4e:	4299      	cmp	r1, r3
 800ad50:	d1c4      	bne.n	800acdc <_strtod_l+0xa04>
 800ad52:	ec51 0b1d 	vmov	r0, r1, d13
 800ad56:	f7f5 fc9f 	bl	8000698 <__aeabi_d2lz>
 800ad5a:	f7f5 fc57 	bl	800060c <__aeabi_l2d>
 800ad5e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800ad62:	ec41 0b17 	vmov	d7, r0, r1
 800ad66:	ea4b 0b08 	orr.w	fp, fp, r8
 800ad6a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800ad6e:	ee3d db47 	vsub.f64	d13, d13, d7
 800ad72:	d03c      	beq.n	800adee <_strtod_l+0xb16>
 800ad74:	eeb4 dbca 	vcmpe.f64	d13, d10
 800ad78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7c:	f53f acf4 	bmi.w	800a768 <_strtod_l+0x490>
 800ad80:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800ad84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad88:	dda8      	ble.n	800acdc <_strtod_l+0xa04>
 800ad8a:	e4ed      	b.n	800a768 <_strtod_l+0x490>
 800ad8c:	9805      	ldr	r0, [sp, #20]
 800ad8e:	b1f0      	cbz	r0, 800adce <_strtod_l+0xaf6>
 800ad90:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800ad94:	d81b      	bhi.n	800adce <_strtod_l+0xaf6>
 800ad96:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800ae20 <_strtod_l+0xb48>
 800ad9a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800ad9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ada2:	d811      	bhi.n	800adc8 <_strtod_l+0xaf0>
 800ada4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800ada8:	ee1d 3a10 	vmov	r3, s26
 800adac:	2b01      	cmp	r3, #1
 800adae:	bf38      	it	cc
 800adb0:	2301      	movcc	r3, #1
 800adb2:	ee0d 3a10 	vmov	s26, r3
 800adb6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800adba:	f1ba 0f00 	cmp.w	sl, #0
 800adbe:	d113      	bne.n	800ade8 <_strtod_l+0xb10>
 800adc0:	eeb1 7b4d 	vneg.f64	d7, d13
 800adc4:	ec53 2b17 	vmov	r2, r3, d7
 800adc8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800adcc:	1a43      	subs	r3, r0, r1
 800adce:	eeb0 0b48 	vmov.f64	d0, d8
 800add2:	ec43 2b1c 	vmov	d12, r2, r3
 800add6:	910a      	str	r1, [sp, #40]	; 0x28
 800add8:	f7ff f926 	bl	800a028 <__ulp>
 800addc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800adde:	eeac 8b00 	vfma.f64	d8, d12, d0
 800ade2:	ec59 8b18 	vmov	r8, r9, d8
 800ade6:	e7aa      	b.n	800ad3e <_strtod_l+0xa66>
 800ade8:	eeb0 7b4d 	vmov.f64	d7, d13
 800adec:	e7ea      	b.n	800adc4 <_strtod_l+0xaec>
 800adee:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800adf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf6:	f57f af71 	bpl.w	800acdc <_strtod_l+0xa04>
 800adfa:	e4b5      	b.n	800a768 <_strtod_l+0x490>
 800adfc:	2300      	movs	r3, #0
 800adfe:	9308      	str	r3, [sp, #32]
 800ae00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae04:	6013      	str	r3, [r2, #0]
 800ae06:	f7ff baa6 	b.w	800a356 <_strtod_l+0x7e>
 800ae0a:	2a65      	cmp	r2, #101	; 0x65
 800ae0c:	f43f aba2 	beq.w	800a554 <_strtod_l+0x27c>
 800ae10:	2a45      	cmp	r2, #69	; 0x45
 800ae12:	f43f ab9f 	beq.w	800a554 <_strtod_l+0x27c>
 800ae16:	2101      	movs	r1, #1
 800ae18:	f7ff bbd8 	b.w	800a5cc <_strtod_l+0x2f4>
 800ae1c:	f3af 8000 	nop.w
 800ae20:	ffc00000 	.word	0xffc00000
 800ae24:	41dfffff 	.word	0x41dfffff
 800ae28:	000fffff 	.word	0x000fffff
 800ae2c:	7ff00000 	.word	0x7ff00000
 800ae30:	7fefffff 	.word	0x7fefffff
 800ae34:	7c9fffff 	.word	0x7c9fffff
 800ae38:	7fe00000 	.word	0x7fe00000

0800ae3c <_strtod_r>:
 800ae3c:	4b01      	ldr	r3, [pc, #4]	; (800ae44 <_strtod_r+0x8>)
 800ae3e:	f7ff ba4b 	b.w	800a2d8 <_strtod_l>
 800ae42:	bf00      	nop
 800ae44:	20000088 	.word	0x20000088

0800ae48 <_strtol_l.constprop.0>:
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae4e:	d001      	beq.n	800ae54 <_strtol_l.constprop.0+0xc>
 800ae50:	2b24      	cmp	r3, #36	; 0x24
 800ae52:	d906      	bls.n	800ae62 <_strtol_l.constprop.0+0x1a>
 800ae54:	f7fd fe52 	bl	8008afc <__errno>
 800ae58:	2316      	movs	r3, #22
 800ae5a:	6003      	str	r3, [r0, #0]
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800af48 <_strtol_l.constprop.0+0x100>
 800ae66:	460d      	mov	r5, r1
 800ae68:	462e      	mov	r6, r5
 800ae6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae6e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ae72:	f017 0708 	ands.w	r7, r7, #8
 800ae76:	d1f7      	bne.n	800ae68 <_strtol_l.constprop.0+0x20>
 800ae78:	2c2d      	cmp	r4, #45	; 0x2d
 800ae7a:	d132      	bne.n	800aee2 <_strtol_l.constprop.0+0x9a>
 800ae7c:	782c      	ldrb	r4, [r5, #0]
 800ae7e:	2701      	movs	r7, #1
 800ae80:	1cb5      	adds	r5, r6, #2
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d05b      	beq.n	800af3e <_strtol_l.constprop.0+0xf6>
 800ae86:	2b10      	cmp	r3, #16
 800ae88:	d109      	bne.n	800ae9e <_strtol_l.constprop.0+0x56>
 800ae8a:	2c30      	cmp	r4, #48	; 0x30
 800ae8c:	d107      	bne.n	800ae9e <_strtol_l.constprop.0+0x56>
 800ae8e:	782c      	ldrb	r4, [r5, #0]
 800ae90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ae94:	2c58      	cmp	r4, #88	; 0x58
 800ae96:	d14d      	bne.n	800af34 <_strtol_l.constprop.0+0xec>
 800ae98:	786c      	ldrb	r4, [r5, #1]
 800ae9a:	2310      	movs	r3, #16
 800ae9c:	3502      	adds	r5, #2
 800ae9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800aea2:	f108 38ff 	add.w	r8, r8, #4294967295
 800aea6:	f04f 0e00 	mov.w	lr, #0
 800aeaa:	fbb8 f9f3 	udiv	r9, r8, r3
 800aeae:	4676      	mov	r6, lr
 800aeb0:	fb03 8a19 	mls	sl, r3, r9, r8
 800aeb4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800aeb8:	f1bc 0f09 	cmp.w	ip, #9
 800aebc:	d816      	bhi.n	800aeec <_strtol_l.constprop.0+0xa4>
 800aebe:	4664      	mov	r4, ip
 800aec0:	42a3      	cmp	r3, r4
 800aec2:	dd24      	ble.n	800af0e <_strtol_l.constprop.0+0xc6>
 800aec4:	f1be 3fff 	cmp.w	lr, #4294967295
 800aec8:	d008      	beq.n	800aedc <_strtol_l.constprop.0+0x94>
 800aeca:	45b1      	cmp	r9, r6
 800aecc:	d31c      	bcc.n	800af08 <_strtol_l.constprop.0+0xc0>
 800aece:	d101      	bne.n	800aed4 <_strtol_l.constprop.0+0x8c>
 800aed0:	45a2      	cmp	sl, r4
 800aed2:	db19      	blt.n	800af08 <_strtol_l.constprop.0+0xc0>
 800aed4:	fb06 4603 	mla	r6, r6, r3, r4
 800aed8:	f04f 0e01 	mov.w	lr, #1
 800aedc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aee0:	e7e8      	b.n	800aeb4 <_strtol_l.constprop.0+0x6c>
 800aee2:	2c2b      	cmp	r4, #43	; 0x2b
 800aee4:	bf04      	itt	eq
 800aee6:	782c      	ldrbeq	r4, [r5, #0]
 800aee8:	1cb5      	addeq	r5, r6, #2
 800aeea:	e7ca      	b.n	800ae82 <_strtol_l.constprop.0+0x3a>
 800aeec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aef0:	f1bc 0f19 	cmp.w	ip, #25
 800aef4:	d801      	bhi.n	800aefa <_strtol_l.constprop.0+0xb2>
 800aef6:	3c37      	subs	r4, #55	; 0x37
 800aef8:	e7e2      	b.n	800aec0 <_strtol_l.constprop.0+0x78>
 800aefa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aefe:	f1bc 0f19 	cmp.w	ip, #25
 800af02:	d804      	bhi.n	800af0e <_strtol_l.constprop.0+0xc6>
 800af04:	3c57      	subs	r4, #87	; 0x57
 800af06:	e7db      	b.n	800aec0 <_strtol_l.constprop.0+0x78>
 800af08:	f04f 3eff 	mov.w	lr, #4294967295
 800af0c:	e7e6      	b.n	800aedc <_strtol_l.constprop.0+0x94>
 800af0e:	f1be 3fff 	cmp.w	lr, #4294967295
 800af12:	d105      	bne.n	800af20 <_strtol_l.constprop.0+0xd8>
 800af14:	2322      	movs	r3, #34	; 0x22
 800af16:	6003      	str	r3, [r0, #0]
 800af18:	4646      	mov	r6, r8
 800af1a:	b942      	cbnz	r2, 800af2e <_strtol_l.constprop.0+0xe6>
 800af1c:	4630      	mov	r0, r6
 800af1e:	e79e      	b.n	800ae5e <_strtol_l.constprop.0+0x16>
 800af20:	b107      	cbz	r7, 800af24 <_strtol_l.constprop.0+0xdc>
 800af22:	4276      	negs	r6, r6
 800af24:	2a00      	cmp	r2, #0
 800af26:	d0f9      	beq.n	800af1c <_strtol_l.constprop.0+0xd4>
 800af28:	f1be 0f00 	cmp.w	lr, #0
 800af2c:	d000      	beq.n	800af30 <_strtol_l.constprop.0+0xe8>
 800af2e:	1e69      	subs	r1, r5, #1
 800af30:	6011      	str	r1, [r2, #0]
 800af32:	e7f3      	b.n	800af1c <_strtol_l.constprop.0+0xd4>
 800af34:	2430      	movs	r4, #48	; 0x30
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1b1      	bne.n	800ae9e <_strtol_l.constprop.0+0x56>
 800af3a:	2308      	movs	r3, #8
 800af3c:	e7af      	b.n	800ae9e <_strtol_l.constprop.0+0x56>
 800af3e:	2c30      	cmp	r4, #48	; 0x30
 800af40:	d0a5      	beq.n	800ae8e <_strtol_l.constprop.0+0x46>
 800af42:	230a      	movs	r3, #10
 800af44:	e7ab      	b.n	800ae9e <_strtol_l.constprop.0+0x56>
 800af46:	bf00      	nop
 800af48:	0800ce91 	.word	0x0800ce91

0800af4c <_strtol_r>:
 800af4c:	f7ff bf7c 	b.w	800ae48 <_strtol_l.constprop.0>

0800af50 <__ssputs_r>:
 800af50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af54:	688e      	ldr	r6, [r1, #8]
 800af56:	461f      	mov	r7, r3
 800af58:	42be      	cmp	r6, r7
 800af5a:	680b      	ldr	r3, [r1, #0]
 800af5c:	4682      	mov	sl, r0
 800af5e:	460c      	mov	r4, r1
 800af60:	4690      	mov	r8, r2
 800af62:	d82c      	bhi.n	800afbe <__ssputs_r+0x6e>
 800af64:	898a      	ldrh	r2, [r1, #12]
 800af66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af6a:	d026      	beq.n	800afba <__ssputs_r+0x6a>
 800af6c:	6965      	ldr	r5, [r4, #20]
 800af6e:	6909      	ldr	r1, [r1, #16]
 800af70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af74:	eba3 0901 	sub.w	r9, r3, r1
 800af78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af7c:	1c7b      	adds	r3, r7, #1
 800af7e:	444b      	add	r3, r9
 800af80:	106d      	asrs	r5, r5, #1
 800af82:	429d      	cmp	r5, r3
 800af84:	bf38      	it	cc
 800af86:	461d      	movcc	r5, r3
 800af88:	0553      	lsls	r3, r2, #21
 800af8a:	d527      	bpl.n	800afdc <__ssputs_r+0x8c>
 800af8c:	4629      	mov	r1, r5
 800af8e:	f7fe fc53 	bl	8009838 <_malloc_r>
 800af92:	4606      	mov	r6, r0
 800af94:	b360      	cbz	r0, 800aff0 <__ssputs_r+0xa0>
 800af96:	6921      	ldr	r1, [r4, #16]
 800af98:	464a      	mov	r2, r9
 800af9a:	f000 fa1b 	bl	800b3d4 <memcpy>
 800af9e:	89a3      	ldrh	r3, [r4, #12]
 800afa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afa8:	81a3      	strh	r3, [r4, #12]
 800afaa:	6126      	str	r6, [r4, #16]
 800afac:	6165      	str	r5, [r4, #20]
 800afae:	444e      	add	r6, r9
 800afb0:	eba5 0509 	sub.w	r5, r5, r9
 800afb4:	6026      	str	r6, [r4, #0]
 800afb6:	60a5      	str	r5, [r4, #8]
 800afb8:	463e      	mov	r6, r7
 800afba:	42be      	cmp	r6, r7
 800afbc:	d900      	bls.n	800afc0 <__ssputs_r+0x70>
 800afbe:	463e      	mov	r6, r7
 800afc0:	6820      	ldr	r0, [r4, #0]
 800afc2:	4632      	mov	r2, r6
 800afc4:	4641      	mov	r1, r8
 800afc6:	f000 f9c9 	bl	800b35c <memmove>
 800afca:	68a3      	ldr	r3, [r4, #8]
 800afcc:	1b9b      	subs	r3, r3, r6
 800afce:	60a3      	str	r3, [r4, #8]
 800afd0:	6823      	ldr	r3, [r4, #0]
 800afd2:	4433      	add	r3, r6
 800afd4:	6023      	str	r3, [r4, #0]
 800afd6:	2000      	movs	r0, #0
 800afd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afdc:	462a      	mov	r2, r5
 800afde:	f000 fdac 	bl	800bb3a <_realloc_r>
 800afe2:	4606      	mov	r6, r0
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d1e0      	bne.n	800afaa <__ssputs_r+0x5a>
 800afe8:	6921      	ldr	r1, [r4, #16]
 800afea:	4650      	mov	r0, sl
 800afec:	f7fe fbb0 	bl	8009750 <_free_r>
 800aff0:	230c      	movs	r3, #12
 800aff2:	f8ca 3000 	str.w	r3, [sl]
 800aff6:	89a3      	ldrh	r3, [r4, #12]
 800aff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800affc:	81a3      	strh	r3, [r4, #12]
 800affe:	f04f 30ff 	mov.w	r0, #4294967295
 800b002:	e7e9      	b.n	800afd8 <__ssputs_r+0x88>

0800b004 <_svfiprintf_r>:
 800b004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b008:	4698      	mov	r8, r3
 800b00a:	898b      	ldrh	r3, [r1, #12]
 800b00c:	061b      	lsls	r3, r3, #24
 800b00e:	b09d      	sub	sp, #116	; 0x74
 800b010:	4607      	mov	r7, r0
 800b012:	460d      	mov	r5, r1
 800b014:	4614      	mov	r4, r2
 800b016:	d50e      	bpl.n	800b036 <_svfiprintf_r+0x32>
 800b018:	690b      	ldr	r3, [r1, #16]
 800b01a:	b963      	cbnz	r3, 800b036 <_svfiprintf_r+0x32>
 800b01c:	2140      	movs	r1, #64	; 0x40
 800b01e:	f7fe fc0b 	bl	8009838 <_malloc_r>
 800b022:	6028      	str	r0, [r5, #0]
 800b024:	6128      	str	r0, [r5, #16]
 800b026:	b920      	cbnz	r0, 800b032 <_svfiprintf_r+0x2e>
 800b028:	230c      	movs	r3, #12
 800b02a:	603b      	str	r3, [r7, #0]
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295
 800b030:	e0d0      	b.n	800b1d4 <_svfiprintf_r+0x1d0>
 800b032:	2340      	movs	r3, #64	; 0x40
 800b034:	616b      	str	r3, [r5, #20]
 800b036:	2300      	movs	r3, #0
 800b038:	9309      	str	r3, [sp, #36]	; 0x24
 800b03a:	2320      	movs	r3, #32
 800b03c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b040:	f8cd 800c 	str.w	r8, [sp, #12]
 800b044:	2330      	movs	r3, #48	; 0x30
 800b046:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b1ec <_svfiprintf_r+0x1e8>
 800b04a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b04e:	f04f 0901 	mov.w	r9, #1
 800b052:	4623      	mov	r3, r4
 800b054:	469a      	mov	sl, r3
 800b056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b05a:	b10a      	cbz	r2, 800b060 <_svfiprintf_r+0x5c>
 800b05c:	2a25      	cmp	r2, #37	; 0x25
 800b05e:	d1f9      	bne.n	800b054 <_svfiprintf_r+0x50>
 800b060:	ebba 0b04 	subs.w	fp, sl, r4
 800b064:	d00b      	beq.n	800b07e <_svfiprintf_r+0x7a>
 800b066:	465b      	mov	r3, fp
 800b068:	4622      	mov	r2, r4
 800b06a:	4629      	mov	r1, r5
 800b06c:	4638      	mov	r0, r7
 800b06e:	f7ff ff6f 	bl	800af50 <__ssputs_r>
 800b072:	3001      	adds	r0, #1
 800b074:	f000 80a9 	beq.w	800b1ca <_svfiprintf_r+0x1c6>
 800b078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b07a:	445a      	add	r2, fp
 800b07c:	9209      	str	r2, [sp, #36]	; 0x24
 800b07e:	f89a 3000 	ldrb.w	r3, [sl]
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 80a1 	beq.w	800b1ca <_svfiprintf_r+0x1c6>
 800b088:	2300      	movs	r3, #0
 800b08a:	f04f 32ff 	mov.w	r2, #4294967295
 800b08e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b092:	f10a 0a01 	add.w	sl, sl, #1
 800b096:	9304      	str	r3, [sp, #16]
 800b098:	9307      	str	r3, [sp, #28]
 800b09a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b09e:	931a      	str	r3, [sp, #104]	; 0x68
 800b0a0:	4654      	mov	r4, sl
 800b0a2:	2205      	movs	r2, #5
 800b0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a8:	4850      	ldr	r0, [pc, #320]	; (800b1ec <_svfiprintf_r+0x1e8>)
 800b0aa:	f7f5 f8c9 	bl	8000240 <memchr>
 800b0ae:	9a04      	ldr	r2, [sp, #16]
 800b0b0:	b9d8      	cbnz	r0, 800b0ea <_svfiprintf_r+0xe6>
 800b0b2:	06d0      	lsls	r0, r2, #27
 800b0b4:	bf44      	itt	mi
 800b0b6:	2320      	movmi	r3, #32
 800b0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0bc:	0711      	lsls	r1, r2, #28
 800b0be:	bf44      	itt	mi
 800b0c0:	232b      	movmi	r3, #43	; 0x2b
 800b0c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b0ca:	2b2a      	cmp	r3, #42	; 0x2a
 800b0cc:	d015      	beq.n	800b0fa <_svfiprintf_r+0xf6>
 800b0ce:	9a07      	ldr	r2, [sp, #28]
 800b0d0:	4654      	mov	r4, sl
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	f04f 0c0a 	mov.w	ip, #10
 800b0d8:	4621      	mov	r1, r4
 800b0da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0de:	3b30      	subs	r3, #48	; 0x30
 800b0e0:	2b09      	cmp	r3, #9
 800b0e2:	d94d      	bls.n	800b180 <_svfiprintf_r+0x17c>
 800b0e4:	b1b0      	cbz	r0, 800b114 <_svfiprintf_r+0x110>
 800b0e6:	9207      	str	r2, [sp, #28]
 800b0e8:	e014      	b.n	800b114 <_svfiprintf_r+0x110>
 800b0ea:	eba0 0308 	sub.w	r3, r0, r8
 800b0ee:	fa09 f303 	lsl.w	r3, r9, r3
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	9304      	str	r3, [sp, #16]
 800b0f6:	46a2      	mov	sl, r4
 800b0f8:	e7d2      	b.n	800b0a0 <_svfiprintf_r+0x9c>
 800b0fa:	9b03      	ldr	r3, [sp, #12]
 800b0fc:	1d19      	adds	r1, r3, #4
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	9103      	str	r1, [sp, #12]
 800b102:	2b00      	cmp	r3, #0
 800b104:	bfbb      	ittet	lt
 800b106:	425b      	neglt	r3, r3
 800b108:	f042 0202 	orrlt.w	r2, r2, #2
 800b10c:	9307      	strge	r3, [sp, #28]
 800b10e:	9307      	strlt	r3, [sp, #28]
 800b110:	bfb8      	it	lt
 800b112:	9204      	strlt	r2, [sp, #16]
 800b114:	7823      	ldrb	r3, [r4, #0]
 800b116:	2b2e      	cmp	r3, #46	; 0x2e
 800b118:	d10c      	bne.n	800b134 <_svfiprintf_r+0x130>
 800b11a:	7863      	ldrb	r3, [r4, #1]
 800b11c:	2b2a      	cmp	r3, #42	; 0x2a
 800b11e:	d134      	bne.n	800b18a <_svfiprintf_r+0x186>
 800b120:	9b03      	ldr	r3, [sp, #12]
 800b122:	1d1a      	adds	r2, r3, #4
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	9203      	str	r2, [sp, #12]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	bfb8      	it	lt
 800b12c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b130:	3402      	adds	r4, #2
 800b132:	9305      	str	r3, [sp, #20]
 800b134:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b1fc <_svfiprintf_r+0x1f8>
 800b138:	7821      	ldrb	r1, [r4, #0]
 800b13a:	2203      	movs	r2, #3
 800b13c:	4650      	mov	r0, sl
 800b13e:	f7f5 f87f 	bl	8000240 <memchr>
 800b142:	b138      	cbz	r0, 800b154 <_svfiprintf_r+0x150>
 800b144:	9b04      	ldr	r3, [sp, #16]
 800b146:	eba0 000a 	sub.w	r0, r0, sl
 800b14a:	2240      	movs	r2, #64	; 0x40
 800b14c:	4082      	lsls	r2, r0
 800b14e:	4313      	orrs	r3, r2
 800b150:	3401      	adds	r4, #1
 800b152:	9304      	str	r3, [sp, #16]
 800b154:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b158:	4825      	ldr	r0, [pc, #148]	; (800b1f0 <_svfiprintf_r+0x1ec>)
 800b15a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b15e:	2206      	movs	r2, #6
 800b160:	f7f5 f86e 	bl	8000240 <memchr>
 800b164:	2800      	cmp	r0, #0
 800b166:	d038      	beq.n	800b1da <_svfiprintf_r+0x1d6>
 800b168:	4b22      	ldr	r3, [pc, #136]	; (800b1f4 <_svfiprintf_r+0x1f0>)
 800b16a:	bb1b      	cbnz	r3, 800b1b4 <_svfiprintf_r+0x1b0>
 800b16c:	9b03      	ldr	r3, [sp, #12]
 800b16e:	3307      	adds	r3, #7
 800b170:	f023 0307 	bic.w	r3, r3, #7
 800b174:	3308      	adds	r3, #8
 800b176:	9303      	str	r3, [sp, #12]
 800b178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b17a:	4433      	add	r3, r6
 800b17c:	9309      	str	r3, [sp, #36]	; 0x24
 800b17e:	e768      	b.n	800b052 <_svfiprintf_r+0x4e>
 800b180:	fb0c 3202 	mla	r2, ip, r2, r3
 800b184:	460c      	mov	r4, r1
 800b186:	2001      	movs	r0, #1
 800b188:	e7a6      	b.n	800b0d8 <_svfiprintf_r+0xd4>
 800b18a:	2300      	movs	r3, #0
 800b18c:	3401      	adds	r4, #1
 800b18e:	9305      	str	r3, [sp, #20]
 800b190:	4619      	mov	r1, r3
 800b192:	f04f 0c0a 	mov.w	ip, #10
 800b196:	4620      	mov	r0, r4
 800b198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b19c:	3a30      	subs	r2, #48	; 0x30
 800b19e:	2a09      	cmp	r2, #9
 800b1a0:	d903      	bls.n	800b1aa <_svfiprintf_r+0x1a6>
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d0c6      	beq.n	800b134 <_svfiprintf_r+0x130>
 800b1a6:	9105      	str	r1, [sp, #20]
 800b1a8:	e7c4      	b.n	800b134 <_svfiprintf_r+0x130>
 800b1aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e7f0      	b.n	800b196 <_svfiprintf_r+0x192>
 800b1b4:	ab03      	add	r3, sp, #12
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	462a      	mov	r2, r5
 800b1ba:	4b0f      	ldr	r3, [pc, #60]	; (800b1f8 <_svfiprintf_r+0x1f4>)
 800b1bc:	a904      	add	r1, sp, #16
 800b1be:	4638      	mov	r0, r7
 800b1c0:	f7fc fd76 	bl	8007cb0 <_printf_float>
 800b1c4:	1c42      	adds	r2, r0, #1
 800b1c6:	4606      	mov	r6, r0
 800b1c8:	d1d6      	bne.n	800b178 <_svfiprintf_r+0x174>
 800b1ca:	89ab      	ldrh	r3, [r5, #12]
 800b1cc:	065b      	lsls	r3, r3, #25
 800b1ce:	f53f af2d 	bmi.w	800b02c <_svfiprintf_r+0x28>
 800b1d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1d4:	b01d      	add	sp, #116	; 0x74
 800b1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1da:	ab03      	add	r3, sp, #12
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	462a      	mov	r2, r5
 800b1e0:	4b05      	ldr	r3, [pc, #20]	; (800b1f8 <_svfiprintf_r+0x1f4>)
 800b1e2:	a904      	add	r1, sp, #16
 800b1e4:	4638      	mov	r0, r7
 800b1e6:	f7fc ffeb 	bl	80081c0 <_printf_i>
 800b1ea:	e7eb      	b.n	800b1c4 <_svfiprintf_r+0x1c0>
 800b1ec:	0800cf91 	.word	0x0800cf91
 800b1f0:	0800cf9b 	.word	0x0800cf9b
 800b1f4:	08007cb1 	.word	0x08007cb1
 800b1f8:	0800af51 	.word	0x0800af51
 800b1fc:	0800cf97 	.word	0x0800cf97

0800b200 <__sflush_r>:
 800b200:	898a      	ldrh	r2, [r1, #12]
 800b202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b206:	4605      	mov	r5, r0
 800b208:	0710      	lsls	r0, r2, #28
 800b20a:	460c      	mov	r4, r1
 800b20c:	d458      	bmi.n	800b2c0 <__sflush_r+0xc0>
 800b20e:	684b      	ldr	r3, [r1, #4]
 800b210:	2b00      	cmp	r3, #0
 800b212:	dc05      	bgt.n	800b220 <__sflush_r+0x20>
 800b214:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b216:	2b00      	cmp	r3, #0
 800b218:	dc02      	bgt.n	800b220 <__sflush_r+0x20>
 800b21a:	2000      	movs	r0, #0
 800b21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b222:	2e00      	cmp	r6, #0
 800b224:	d0f9      	beq.n	800b21a <__sflush_r+0x1a>
 800b226:	2300      	movs	r3, #0
 800b228:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b22c:	682f      	ldr	r7, [r5, #0]
 800b22e:	6a21      	ldr	r1, [r4, #32]
 800b230:	602b      	str	r3, [r5, #0]
 800b232:	d032      	beq.n	800b29a <__sflush_r+0x9a>
 800b234:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b236:	89a3      	ldrh	r3, [r4, #12]
 800b238:	075a      	lsls	r2, r3, #29
 800b23a:	d505      	bpl.n	800b248 <__sflush_r+0x48>
 800b23c:	6863      	ldr	r3, [r4, #4]
 800b23e:	1ac0      	subs	r0, r0, r3
 800b240:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b242:	b10b      	cbz	r3, 800b248 <__sflush_r+0x48>
 800b244:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b246:	1ac0      	subs	r0, r0, r3
 800b248:	2300      	movs	r3, #0
 800b24a:	4602      	mov	r2, r0
 800b24c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b24e:	6a21      	ldr	r1, [r4, #32]
 800b250:	4628      	mov	r0, r5
 800b252:	47b0      	blx	r6
 800b254:	1c43      	adds	r3, r0, #1
 800b256:	89a3      	ldrh	r3, [r4, #12]
 800b258:	d106      	bne.n	800b268 <__sflush_r+0x68>
 800b25a:	6829      	ldr	r1, [r5, #0]
 800b25c:	291d      	cmp	r1, #29
 800b25e:	d82b      	bhi.n	800b2b8 <__sflush_r+0xb8>
 800b260:	4a29      	ldr	r2, [pc, #164]	; (800b308 <__sflush_r+0x108>)
 800b262:	410a      	asrs	r2, r1
 800b264:	07d6      	lsls	r6, r2, #31
 800b266:	d427      	bmi.n	800b2b8 <__sflush_r+0xb8>
 800b268:	2200      	movs	r2, #0
 800b26a:	6062      	str	r2, [r4, #4]
 800b26c:	04d9      	lsls	r1, r3, #19
 800b26e:	6922      	ldr	r2, [r4, #16]
 800b270:	6022      	str	r2, [r4, #0]
 800b272:	d504      	bpl.n	800b27e <__sflush_r+0x7e>
 800b274:	1c42      	adds	r2, r0, #1
 800b276:	d101      	bne.n	800b27c <__sflush_r+0x7c>
 800b278:	682b      	ldr	r3, [r5, #0]
 800b27a:	b903      	cbnz	r3, 800b27e <__sflush_r+0x7e>
 800b27c:	6560      	str	r0, [r4, #84]	; 0x54
 800b27e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b280:	602f      	str	r7, [r5, #0]
 800b282:	2900      	cmp	r1, #0
 800b284:	d0c9      	beq.n	800b21a <__sflush_r+0x1a>
 800b286:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b28a:	4299      	cmp	r1, r3
 800b28c:	d002      	beq.n	800b294 <__sflush_r+0x94>
 800b28e:	4628      	mov	r0, r5
 800b290:	f7fe fa5e 	bl	8009750 <_free_r>
 800b294:	2000      	movs	r0, #0
 800b296:	6360      	str	r0, [r4, #52]	; 0x34
 800b298:	e7c0      	b.n	800b21c <__sflush_r+0x1c>
 800b29a:	2301      	movs	r3, #1
 800b29c:	4628      	mov	r0, r5
 800b29e:	47b0      	blx	r6
 800b2a0:	1c41      	adds	r1, r0, #1
 800b2a2:	d1c8      	bne.n	800b236 <__sflush_r+0x36>
 800b2a4:	682b      	ldr	r3, [r5, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d0c5      	beq.n	800b236 <__sflush_r+0x36>
 800b2aa:	2b1d      	cmp	r3, #29
 800b2ac:	d001      	beq.n	800b2b2 <__sflush_r+0xb2>
 800b2ae:	2b16      	cmp	r3, #22
 800b2b0:	d101      	bne.n	800b2b6 <__sflush_r+0xb6>
 800b2b2:	602f      	str	r7, [r5, #0]
 800b2b4:	e7b1      	b.n	800b21a <__sflush_r+0x1a>
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2bc:	81a3      	strh	r3, [r4, #12]
 800b2be:	e7ad      	b.n	800b21c <__sflush_r+0x1c>
 800b2c0:	690f      	ldr	r7, [r1, #16]
 800b2c2:	2f00      	cmp	r7, #0
 800b2c4:	d0a9      	beq.n	800b21a <__sflush_r+0x1a>
 800b2c6:	0793      	lsls	r3, r2, #30
 800b2c8:	680e      	ldr	r6, [r1, #0]
 800b2ca:	bf08      	it	eq
 800b2cc:	694b      	ldreq	r3, [r1, #20]
 800b2ce:	600f      	str	r7, [r1, #0]
 800b2d0:	bf18      	it	ne
 800b2d2:	2300      	movne	r3, #0
 800b2d4:	eba6 0807 	sub.w	r8, r6, r7
 800b2d8:	608b      	str	r3, [r1, #8]
 800b2da:	f1b8 0f00 	cmp.w	r8, #0
 800b2de:	dd9c      	ble.n	800b21a <__sflush_r+0x1a>
 800b2e0:	6a21      	ldr	r1, [r4, #32]
 800b2e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2e4:	4643      	mov	r3, r8
 800b2e6:	463a      	mov	r2, r7
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	47b0      	blx	r6
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	dc06      	bgt.n	800b2fe <__sflush_r+0xfe>
 800b2f0:	89a3      	ldrh	r3, [r4, #12]
 800b2f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2f6:	81a3      	strh	r3, [r4, #12]
 800b2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fc:	e78e      	b.n	800b21c <__sflush_r+0x1c>
 800b2fe:	4407      	add	r7, r0
 800b300:	eba8 0800 	sub.w	r8, r8, r0
 800b304:	e7e9      	b.n	800b2da <__sflush_r+0xda>
 800b306:	bf00      	nop
 800b308:	dfbffffe 	.word	0xdfbffffe

0800b30c <_fflush_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	690b      	ldr	r3, [r1, #16]
 800b310:	4605      	mov	r5, r0
 800b312:	460c      	mov	r4, r1
 800b314:	b913      	cbnz	r3, 800b31c <_fflush_r+0x10>
 800b316:	2500      	movs	r5, #0
 800b318:	4628      	mov	r0, r5
 800b31a:	bd38      	pop	{r3, r4, r5, pc}
 800b31c:	b118      	cbz	r0, 800b326 <_fflush_r+0x1a>
 800b31e:	6a03      	ldr	r3, [r0, #32]
 800b320:	b90b      	cbnz	r3, 800b326 <_fflush_r+0x1a>
 800b322:	f7fd faff 	bl	8008924 <__sinit>
 800b326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d0f3      	beq.n	800b316 <_fflush_r+0xa>
 800b32e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b330:	07d0      	lsls	r0, r2, #31
 800b332:	d404      	bmi.n	800b33e <_fflush_r+0x32>
 800b334:	0599      	lsls	r1, r3, #22
 800b336:	d402      	bmi.n	800b33e <_fflush_r+0x32>
 800b338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b33a:	f7fd fc0a 	bl	8008b52 <__retarget_lock_acquire_recursive>
 800b33e:	4628      	mov	r0, r5
 800b340:	4621      	mov	r1, r4
 800b342:	f7ff ff5d 	bl	800b200 <__sflush_r>
 800b346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b348:	07da      	lsls	r2, r3, #31
 800b34a:	4605      	mov	r5, r0
 800b34c:	d4e4      	bmi.n	800b318 <_fflush_r+0xc>
 800b34e:	89a3      	ldrh	r3, [r4, #12]
 800b350:	059b      	lsls	r3, r3, #22
 800b352:	d4e1      	bmi.n	800b318 <_fflush_r+0xc>
 800b354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b356:	f7fd fbfd 	bl	8008b54 <__retarget_lock_release_recursive>
 800b35a:	e7dd      	b.n	800b318 <_fflush_r+0xc>

0800b35c <memmove>:
 800b35c:	4288      	cmp	r0, r1
 800b35e:	b510      	push	{r4, lr}
 800b360:	eb01 0402 	add.w	r4, r1, r2
 800b364:	d902      	bls.n	800b36c <memmove+0x10>
 800b366:	4284      	cmp	r4, r0
 800b368:	4623      	mov	r3, r4
 800b36a:	d807      	bhi.n	800b37c <memmove+0x20>
 800b36c:	1e43      	subs	r3, r0, #1
 800b36e:	42a1      	cmp	r1, r4
 800b370:	d008      	beq.n	800b384 <memmove+0x28>
 800b372:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b376:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b37a:	e7f8      	b.n	800b36e <memmove+0x12>
 800b37c:	4402      	add	r2, r0
 800b37e:	4601      	mov	r1, r0
 800b380:	428a      	cmp	r2, r1
 800b382:	d100      	bne.n	800b386 <memmove+0x2a>
 800b384:	bd10      	pop	{r4, pc}
 800b386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b38a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b38e:	e7f7      	b.n	800b380 <memmove+0x24>

0800b390 <strncmp>:
 800b390:	b510      	push	{r4, lr}
 800b392:	b16a      	cbz	r2, 800b3b0 <strncmp+0x20>
 800b394:	3901      	subs	r1, #1
 800b396:	1884      	adds	r4, r0, r2
 800b398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b39c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d103      	bne.n	800b3ac <strncmp+0x1c>
 800b3a4:	42a0      	cmp	r0, r4
 800b3a6:	d001      	beq.n	800b3ac <strncmp+0x1c>
 800b3a8:	2a00      	cmp	r2, #0
 800b3aa:	d1f5      	bne.n	800b398 <strncmp+0x8>
 800b3ac:	1ad0      	subs	r0, r2, r3
 800b3ae:	bd10      	pop	{r4, pc}
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	e7fc      	b.n	800b3ae <strncmp+0x1e>

0800b3b4 <_sbrk_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4d06      	ldr	r5, [pc, #24]	; (800b3d0 <_sbrk_r+0x1c>)
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	4608      	mov	r0, r1
 800b3be:	602b      	str	r3, [r5, #0]
 800b3c0:	f7f6 feb8 	bl	8002134 <_sbrk>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d102      	bne.n	800b3ce <_sbrk_r+0x1a>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	b103      	cbz	r3, 800b3ce <_sbrk_r+0x1a>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	20000644 	.word	0x20000644

0800b3d4 <memcpy>:
 800b3d4:	440a      	add	r2, r1
 800b3d6:	4291      	cmp	r1, r2
 800b3d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3dc:	d100      	bne.n	800b3e0 <memcpy+0xc>
 800b3de:	4770      	bx	lr
 800b3e0:	b510      	push	{r4, lr}
 800b3e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3ea:	4291      	cmp	r1, r2
 800b3ec:	d1f9      	bne.n	800b3e2 <memcpy+0xe>
 800b3ee:	bd10      	pop	{r4, pc}

0800b3f0 <nan>:
 800b3f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b3f8 <nan+0x8>
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	00000000 	.word	0x00000000
 800b3fc:	7ff80000 	.word	0x7ff80000

0800b400 <__assert_func>:
 800b400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b402:	4614      	mov	r4, r2
 800b404:	461a      	mov	r2, r3
 800b406:	4b09      	ldr	r3, [pc, #36]	; (800b42c <__assert_func+0x2c>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4605      	mov	r5, r0
 800b40c:	68d8      	ldr	r0, [r3, #12]
 800b40e:	b14c      	cbz	r4, 800b424 <__assert_func+0x24>
 800b410:	4b07      	ldr	r3, [pc, #28]	; (800b430 <__assert_func+0x30>)
 800b412:	9100      	str	r1, [sp, #0]
 800b414:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b418:	4906      	ldr	r1, [pc, #24]	; (800b434 <__assert_func+0x34>)
 800b41a:	462b      	mov	r3, r5
 800b41c:	f000 fbca 	bl	800bbb4 <fiprintf>
 800b420:	f000 fbda 	bl	800bbd8 <abort>
 800b424:	4b04      	ldr	r3, [pc, #16]	; (800b438 <__assert_func+0x38>)
 800b426:	461c      	mov	r4, r3
 800b428:	e7f3      	b.n	800b412 <__assert_func+0x12>
 800b42a:	bf00      	nop
 800b42c:	20000084 	.word	0x20000084
 800b430:	0800cfaa 	.word	0x0800cfaa
 800b434:	0800cfb7 	.word	0x0800cfb7
 800b438:	0800cfe5 	.word	0x0800cfe5

0800b43c <_calloc_r>:
 800b43c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b43e:	fba1 2402 	umull	r2, r4, r1, r2
 800b442:	b94c      	cbnz	r4, 800b458 <_calloc_r+0x1c>
 800b444:	4611      	mov	r1, r2
 800b446:	9201      	str	r2, [sp, #4]
 800b448:	f7fe f9f6 	bl	8009838 <_malloc_r>
 800b44c:	9a01      	ldr	r2, [sp, #4]
 800b44e:	4605      	mov	r5, r0
 800b450:	b930      	cbnz	r0, 800b460 <_calloc_r+0x24>
 800b452:	4628      	mov	r0, r5
 800b454:	b003      	add	sp, #12
 800b456:	bd30      	pop	{r4, r5, pc}
 800b458:	220c      	movs	r2, #12
 800b45a:	6002      	str	r2, [r0, #0]
 800b45c:	2500      	movs	r5, #0
 800b45e:	e7f8      	b.n	800b452 <_calloc_r+0x16>
 800b460:	4621      	mov	r1, r4
 800b462:	f7fd faf8 	bl	8008a56 <memset>
 800b466:	e7f4      	b.n	800b452 <_calloc_r+0x16>

0800b468 <rshift>:
 800b468:	6903      	ldr	r3, [r0, #16]
 800b46a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b46e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b472:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b476:	f100 0414 	add.w	r4, r0, #20
 800b47a:	dd45      	ble.n	800b508 <rshift+0xa0>
 800b47c:	f011 011f 	ands.w	r1, r1, #31
 800b480:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b484:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b488:	d10c      	bne.n	800b4a4 <rshift+0x3c>
 800b48a:	f100 0710 	add.w	r7, r0, #16
 800b48e:	4629      	mov	r1, r5
 800b490:	42b1      	cmp	r1, r6
 800b492:	d334      	bcc.n	800b4fe <rshift+0x96>
 800b494:	1a9b      	subs	r3, r3, r2
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	1eea      	subs	r2, r5, #3
 800b49a:	4296      	cmp	r6, r2
 800b49c:	bf38      	it	cc
 800b49e:	2300      	movcc	r3, #0
 800b4a0:	4423      	add	r3, r4
 800b4a2:	e015      	b.n	800b4d0 <rshift+0x68>
 800b4a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b4a8:	f1c1 0820 	rsb	r8, r1, #32
 800b4ac:	40cf      	lsrs	r7, r1
 800b4ae:	f105 0e04 	add.w	lr, r5, #4
 800b4b2:	46a1      	mov	r9, r4
 800b4b4:	4576      	cmp	r6, lr
 800b4b6:	46f4      	mov	ip, lr
 800b4b8:	d815      	bhi.n	800b4e6 <rshift+0x7e>
 800b4ba:	1a9a      	subs	r2, r3, r2
 800b4bc:	0092      	lsls	r2, r2, #2
 800b4be:	3a04      	subs	r2, #4
 800b4c0:	3501      	adds	r5, #1
 800b4c2:	42ae      	cmp	r6, r5
 800b4c4:	bf38      	it	cc
 800b4c6:	2200      	movcc	r2, #0
 800b4c8:	18a3      	adds	r3, r4, r2
 800b4ca:	50a7      	str	r7, [r4, r2]
 800b4cc:	b107      	cbz	r7, 800b4d0 <rshift+0x68>
 800b4ce:	3304      	adds	r3, #4
 800b4d0:	1b1a      	subs	r2, r3, r4
 800b4d2:	42a3      	cmp	r3, r4
 800b4d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b4d8:	bf08      	it	eq
 800b4da:	2300      	moveq	r3, #0
 800b4dc:	6102      	str	r2, [r0, #16]
 800b4de:	bf08      	it	eq
 800b4e0:	6143      	streq	r3, [r0, #20]
 800b4e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4e6:	f8dc c000 	ldr.w	ip, [ip]
 800b4ea:	fa0c fc08 	lsl.w	ip, ip, r8
 800b4ee:	ea4c 0707 	orr.w	r7, ip, r7
 800b4f2:	f849 7b04 	str.w	r7, [r9], #4
 800b4f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b4fa:	40cf      	lsrs	r7, r1
 800b4fc:	e7da      	b.n	800b4b4 <rshift+0x4c>
 800b4fe:	f851 cb04 	ldr.w	ip, [r1], #4
 800b502:	f847 cf04 	str.w	ip, [r7, #4]!
 800b506:	e7c3      	b.n	800b490 <rshift+0x28>
 800b508:	4623      	mov	r3, r4
 800b50a:	e7e1      	b.n	800b4d0 <rshift+0x68>

0800b50c <__hexdig_fun>:
 800b50c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b510:	2b09      	cmp	r3, #9
 800b512:	d802      	bhi.n	800b51a <__hexdig_fun+0xe>
 800b514:	3820      	subs	r0, #32
 800b516:	b2c0      	uxtb	r0, r0
 800b518:	4770      	bx	lr
 800b51a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b51e:	2b05      	cmp	r3, #5
 800b520:	d801      	bhi.n	800b526 <__hexdig_fun+0x1a>
 800b522:	3847      	subs	r0, #71	; 0x47
 800b524:	e7f7      	b.n	800b516 <__hexdig_fun+0xa>
 800b526:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b52a:	2b05      	cmp	r3, #5
 800b52c:	d801      	bhi.n	800b532 <__hexdig_fun+0x26>
 800b52e:	3827      	subs	r0, #39	; 0x27
 800b530:	e7f1      	b.n	800b516 <__hexdig_fun+0xa>
 800b532:	2000      	movs	r0, #0
 800b534:	4770      	bx	lr
	...

0800b538 <__gethex>:
 800b538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	4617      	mov	r7, r2
 800b53e:	680a      	ldr	r2, [r1, #0]
 800b540:	b085      	sub	sp, #20
 800b542:	f102 0b02 	add.w	fp, r2, #2
 800b546:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b54a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b54e:	4681      	mov	r9, r0
 800b550:	468a      	mov	sl, r1
 800b552:	9302      	str	r3, [sp, #8]
 800b554:	32fe      	adds	r2, #254	; 0xfe
 800b556:	eb02 030b 	add.w	r3, r2, fp
 800b55a:	46d8      	mov	r8, fp
 800b55c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b560:	9301      	str	r3, [sp, #4]
 800b562:	2830      	cmp	r0, #48	; 0x30
 800b564:	d0f7      	beq.n	800b556 <__gethex+0x1e>
 800b566:	f7ff ffd1 	bl	800b50c <__hexdig_fun>
 800b56a:	4604      	mov	r4, r0
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d138      	bne.n	800b5e2 <__gethex+0xaa>
 800b570:	49a7      	ldr	r1, [pc, #668]	; (800b810 <__gethex+0x2d8>)
 800b572:	2201      	movs	r2, #1
 800b574:	4640      	mov	r0, r8
 800b576:	f7ff ff0b 	bl	800b390 <strncmp>
 800b57a:	4606      	mov	r6, r0
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d169      	bne.n	800b654 <__gethex+0x11c>
 800b580:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b584:	465d      	mov	r5, fp
 800b586:	f7ff ffc1 	bl	800b50c <__hexdig_fun>
 800b58a:	2800      	cmp	r0, #0
 800b58c:	d064      	beq.n	800b658 <__gethex+0x120>
 800b58e:	465a      	mov	r2, fp
 800b590:	7810      	ldrb	r0, [r2, #0]
 800b592:	2830      	cmp	r0, #48	; 0x30
 800b594:	4690      	mov	r8, r2
 800b596:	f102 0201 	add.w	r2, r2, #1
 800b59a:	d0f9      	beq.n	800b590 <__gethex+0x58>
 800b59c:	f7ff ffb6 	bl	800b50c <__hexdig_fun>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	fab0 f480 	clz	r4, r0
 800b5a6:	0964      	lsrs	r4, r4, #5
 800b5a8:	465e      	mov	r6, fp
 800b5aa:	9301      	str	r3, [sp, #4]
 800b5ac:	4642      	mov	r2, r8
 800b5ae:	4615      	mov	r5, r2
 800b5b0:	3201      	adds	r2, #1
 800b5b2:	7828      	ldrb	r0, [r5, #0]
 800b5b4:	f7ff ffaa 	bl	800b50c <__hexdig_fun>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	d1f8      	bne.n	800b5ae <__gethex+0x76>
 800b5bc:	4994      	ldr	r1, [pc, #592]	; (800b810 <__gethex+0x2d8>)
 800b5be:	2201      	movs	r2, #1
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	f7ff fee5 	bl	800b390 <strncmp>
 800b5c6:	b978      	cbnz	r0, 800b5e8 <__gethex+0xb0>
 800b5c8:	b946      	cbnz	r6, 800b5dc <__gethex+0xa4>
 800b5ca:	1c6e      	adds	r6, r5, #1
 800b5cc:	4632      	mov	r2, r6
 800b5ce:	4615      	mov	r5, r2
 800b5d0:	3201      	adds	r2, #1
 800b5d2:	7828      	ldrb	r0, [r5, #0]
 800b5d4:	f7ff ff9a 	bl	800b50c <__hexdig_fun>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d1f8      	bne.n	800b5ce <__gethex+0x96>
 800b5dc:	1b73      	subs	r3, r6, r5
 800b5de:	009e      	lsls	r6, r3, #2
 800b5e0:	e004      	b.n	800b5ec <__gethex+0xb4>
 800b5e2:	2400      	movs	r4, #0
 800b5e4:	4626      	mov	r6, r4
 800b5e6:	e7e1      	b.n	800b5ac <__gethex+0x74>
 800b5e8:	2e00      	cmp	r6, #0
 800b5ea:	d1f7      	bne.n	800b5dc <__gethex+0xa4>
 800b5ec:	782b      	ldrb	r3, [r5, #0]
 800b5ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b5f2:	2b50      	cmp	r3, #80	; 0x50
 800b5f4:	d13d      	bne.n	800b672 <__gethex+0x13a>
 800b5f6:	786b      	ldrb	r3, [r5, #1]
 800b5f8:	2b2b      	cmp	r3, #43	; 0x2b
 800b5fa:	d02f      	beq.n	800b65c <__gethex+0x124>
 800b5fc:	2b2d      	cmp	r3, #45	; 0x2d
 800b5fe:	d031      	beq.n	800b664 <__gethex+0x12c>
 800b600:	1c69      	adds	r1, r5, #1
 800b602:	f04f 0b00 	mov.w	fp, #0
 800b606:	7808      	ldrb	r0, [r1, #0]
 800b608:	f7ff ff80 	bl	800b50c <__hexdig_fun>
 800b60c:	1e42      	subs	r2, r0, #1
 800b60e:	b2d2      	uxtb	r2, r2
 800b610:	2a18      	cmp	r2, #24
 800b612:	d82e      	bhi.n	800b672 <__gethex+0x13a>
 800b614:	f1a0 0210 	sub.w	r2, r0, #16
 800b618:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b61c:	f7ff ff76 	bl	800b50c <__hexdig_fun>
 800b620:	f100 3cff 	add.w	ip, r0, #4294967295
 800b624:	fa5f fc8c 	uxtb.w	ip, ip
 800b628:	f1bc 0f18 	cmp.w	ip, #24
 800b62c:	d91d      	bls.n	800b66a <__gethex+0x132>
 800b62e:	f1bb 0f00 	cmp.w	fp, #0
 800b632:	d000      	beq.n	800b636 <__gethex+0xfe>
 800b634:	4252      	negs	r2, r2
 800b636:	4416      	add	r6, r2
 800b638:	f8ca 1000 	str.w	r1, [sl]
 800b63c:	b1dc      	cbz	r4, 800b676 <__gethex+0x13e>
 800b63e:	9b01      	ldr	r3, [sp, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	bf14      	ite	ne
 800b644:	f04f 0800 	movne.w	r8, #0
 800b648:	f04f 0806 	moveq.w	r8, #6
 800b64c:	4640      	mov	r0, r8
 800b64e:	b005      	add	sp, #20
 800b650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b654:	4645      	mov	r5, r8
 800b656:	4626      	mov	r6, r4
 800b658:	2401      	movs	r4, #1
 800b65a:	e7c7      	b.n	800b5ec <__gethex+0xb4>
 800b65c:	f04f 0b00 	mov.w	fp, #0
 800b660:	1ca9      	adds	r1, r5, #2
 800b662:	e7d0      	b.n	800b606 <__gethex+0xce>
 800b664:	f04f 0b01 	mov.w	fp, #1
 800b668:	e7fa      	b.n	800b660 <__gethex+0x128>
 800b66a:	230a      	movs	r3, #10
 800b66c:	fb03 0002 	mla	r0, r3, r2, r0
 800b670:	e7d0      	b.n	800b614 <__gethex+0xdc>
 800b672:	4629      	mov	r1, r5
 800b674:	e7e0      	b.n	800b638 <__gethex+0x100>
 800b676:	eba5 0308 	sub.w	r3, r5, r8
 800b67a:	3b01      	subs	r3, #1
 800b67c:	4621      	mov	r1, r4
 800b67e:	2b07      	cmp	r3, #7
 800b680:	dc0a      	bgt.n	800b698 <__gethex+0x160>
 800b682:	4648      	mov	r0, r9
 800b684:	f7fe f964 	bl	8009950 <_Balloc>
 800b688:	4604      	mov	r4, r0
 800b68a:	b940      	cbnz	r0, 800b69e <__gethex+0x166>
 800b68c:	4b61      	ldr	r3, [pc, #388]	; (800b814 <__gethex+0x2dc>)
 800b68e:	4602      	mov	r2, r0
 800b690:	21e4      	movs	r1, #228	; 0xe4
 800b692:	4861      	ldr	r0, [pc, #388]	; (800b818 <__gethex+0x2e0>)
 800b694:	f7ff feb4 	bl	800b400 <__assert_func>
 800b698:	3101      	adds	r1, #1
 800b69a:	105b      	asrs	r3, r3, #1
 800b69c:	e7ef      	b.n	800b67e <__gethex+0x146>
 800b69e:	f100 0a14 	add.w	sl, r0, #20
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	495a      	ldr	r1, [pc, #360]	; (800b810 <__gethex+0x2d8>)
 800b6a6:	f8cd a004 	str.w	sl, [sp, #4]
 800b6aa:	469b      	mov	fp, r3
 800b6ac:	45a8      	cmp	r8, r5
 800b6ae:	d342      	bcc.n	800b736 <__gethex+0x1fe>
 800b6b0:	9801      	ldr	r0, [sp, #4]
 800b6b2:	f840 bb04 	str.w	fp, [r0], #4
 800b6b6:	eba0 000a 	sub.w	r0, r0, sl
 800b6ba:	1080      	asrs	r0, r0, #2
 800b6bc:	6120      	str	r0, [r4, #16]
 800b6be:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b6c2:	4658      	mov	r0, fp
 800b6c4:	f7fe fa36 	bl	8009b34 <__hi0bits>
 800b6c8:	683d      	ldr	r5, [r7, #0]
 800b6ca:	eba8 0000 	sub.w	r0, r8, r0
 800b6ce:	42a8      	cmp	r0, r5
 800b6d0:	dd59      	ble.n	800b786 <__gethex+0x24e>
 800b6d2:	eba0 0805 	sub.w	r8, r0, r5
 800b6d6:	4641      	mov	r1, r8
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f7fe fdc2 	bl	800a262 <__any_on>
 800b6de:	4683      	mov	fp, r0
 800b6e0:	b1b8      	cbz	r0, 800b712 <__gethex+0x1da>
 800b6e2:	f108 33ff 	add.w	r3, r8, #4294967295
 800b6e6:	1159      	asrs	r1, r3, #5
 800b6e8:	f003 021f 	and.w	r2, r3, #31
 800b6ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b6f0:	f04f 0b01 	mov.w	fp, #1
 800b6f4:	fa0b f202 	lsl.w	r2, fp, r2
 800b6f8:	420a      	tst	r2, r1
 800b6fa:	d00a      	beq.n	800b712 <__gethex+0x1da>
 800b6fc:	455b      	cmp	r3, fp
 800b6fe:	dd06      	ble.n	800b70e <__gethex+0x1d6>
 800b700:	f1a8 0102 	sub.w	r1, r8, #2
 800b704:	4620      	mov	r0, r4
 800b706:	f7fe fdac 	bl	800a262 <__any_on>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	d138      	bne.n	800b780 <__gethex+0x248>
 800b70e:	f04f 0b02 	mov.w	fp, #2
 800b712:	4641      	mov	r1, r8
 800b714:	4620      	mov	r0, r4
 800b716:	f7ff fea7 	bl	800b468 <rshift>
 800b71a:	4446      	add	r6, r8
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	42b3      	cmp	r3, r6
 800b720:	da41      	bge.n	800b7a6 <__gethex+0x26e>
 800b722:	4621      	mov	r1, r4
 800b724:	4648      	mov	r0, r9
 800b726:	f7fe f953 	bl	80099d0 <_Bfree>
 800b72a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b72c:	2300      	movs	r3, #0
 800b72e:	6013      	str	r3, [r2, #0]
 800b730:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b734:	e78a      	b.n	800b64c <__gethex+0x114>
 800b736:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b73a:	2a2e      	cmp	r2, #46	; 0x2e
 800b73c:	d014      	beq.n	800b768 <__gethex+0x230>
 800b73e:	2b20      	cmp	r3, #32
 800b740:	d106      	bne.n	800b750 <__gethex+0x218>
 800b742:	9b01      	ldr	r3, [sp, #4]
 800b744:	f843 bb04 	str.w	fp, [r3], #4
 800b748:	f04f 0b00 	mov.w	fp, #0
 800b74c:	9301      	str	r3, [sp, #4]
 800b74e:	465b      	mov	r3, fp
 800b750:	7828      	ldrb	r0, [r5, #0]
 800b752:	9303      	str	r3, [sp, #12]
 800b754:	f7ff feda 	bl	800b50c <__hexdig_fun>
 800b758:	9b03      	ldr	r3, [sp, #12]
 800b75a:	f000 000f 	and.w	r0, r0, #15
 800b75e:	4098      	lsls	r0, r3
 800b760:	ea4b 0b00 	orr.w	fp, fp, r0
 800b764:	3304      	adds	r3, #4
 800b766:	e7a1      	b.n	800b6ac <__gethex+0x174>
 800b768:	45a8      	cmp	r8, r5
 800b76a:	d8e8      	bhi.n	800b73e <__gethex+0x206>
 800b76c:	2201      	movs	r2, #1
 800b76e:	4628      	mov	r0, r5
 800b770:	9303      	str	r3, [sp, #12]
 800b772:	f7ff fe0d 	bl	800b390 <strncmp>
 800b776:	4926      	ldr	r1, [pc, #152]	; (800b810 <__gethex+0x2d8>)
 800b778:	9b03      	ldr	r3, [sp, #12]
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d1df      	bne.n	800b73e <__gethex+0x206>
 800b77e:	e795      	b.n	800b6ac <__gethex+0x174>
 800b780:	f04f 0b03 	mov.w	fp, #3
 800b784:	e7c5      	b.n	800b712 <__gethex+0x1da>
 800b786:	da0b      	bge.n	800b7a0 <__gethex+0x268>
 800b788:	eba5 0800 	sub.w	r8, r5, r0
 800b78c:	4621      	mov	r1, r4
 800b78e:	4642      	mov	r2, r8
 800b790:	4648      	mov	r0, r9
 800b792:	f7fe fb37 	bl	8009e04 <__lshift>
 800b796:	eba6 0608 	sub.w	r6, r6, r8
 800b79a:	4604      	mov	r4, r0
 800b79c:	f100 0a14 	add.w	sl, r0, #20
 800b7a0:	f04f 0b00 	mov.w	fp, #0
 800b7a4:	e7ba      	b.n	800b71c <__gethex+0x1e4>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	42b3      	cmp	r3, r6
 800b7aa:	dd73      	ble.n	800b894 <__gethex+0x35c>
 800b7ac:	1b9e      	subs	r6, r3, r6
 800b7ae:	42b5      	cmp	r5, r6
 800b7b0:	dc34      	bgt.n	800b81c <__gethex+0x2e4>
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d023      	beq.n	800b800 <__gethex+0x2c8>
 800b7b8:	2b03      	cmp	r3, #3
 800b7ba:	d025      	beq.n	800b808 <__gethex+0x2d0>
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d115      	bne.n	800b7ec <__gethex+0x2b4>
 800b7c0:	42b5      	cmp	r5, r6
 800b7c2:	d113      	bne.n	800b7ec <__gethex+0x2b4>
 800b7c4:	2d01      	cmp	r5, #1
 800b7c6:	d10b      	bne.n	800b7e0 <__gethex+0x2a8>
 800b7c8:	9a02      	ldr	r2, [sp, #8]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6013      	str	r3, [r2, #0]
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	6123      	str	r3, [r4, #16]
 800b7d2:	f8ca 3000 	str.w	r3, [sl]
 800b7d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7d8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b7dc:	601c      	str	r4, [r3, #0]
 800b7de:	e735      	b.n	800b64c <__gethex+0x114>
 800b7e0:	1e69      	subs	r1, r5, #1
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f7fe fd3d 	bl	800a262 <__any_on>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d1ed      	bne.n	800b7c8 <__gethex+0x290>
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	4648      	mov	r0, r9
 800b7f0:	f7fe f8ee 	bl	80099d0 <_Bfree>
 800b7f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	6013      	str	r3, [r2, #0]
 800b7fa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b7fe:	e725      	b.n	800b64c <__gethex+0x114>
 800b800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1f2      	bne.n	800b7ec <__gethex+0x2b4>
 800b806:	e7df      	b.n	800b7c8 <__gethex+0x290>
 800b808:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1dc      	bne.n	800b7c8 <__gethex+0x290>
 800b80e:	e7ed      	b.n	800b7ec <__gethex+0x2b4>
 800b810:	0800ce3c 	.word	0x0800ce3c
 800b814:	0800ccd1 	.word	0x0800ccd1
 800b818:	0800cfe6 	.word	0x0800cfe6
 800b81c:	f106 38ff 	add.w	r8, r6, #4294967295
 800b820:	f1bb 0f00 	cmp.w	fp, #0
 800b824:	d133      	bne.n	800b88e <__gethex+0x356>
 800b826:	f1b8 0f00 	cmp.w	r8, #0
 800b82a:	d004      	beq.n	800b836 <__gethex+0x2fe>
 800b82c:	4641      	mov	r1, r8
 800b82e:	4620      	mov	r0, r4
 800b830:	f7fe fd17 	bl	800a262 <__any_on>
 800b834:	4683      	mov	fp, r0
 800b836:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b83a:	2301      	movs	r3, #1
 800b83c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b840:	f008 081f 	and.w	r8, r8, #31
 800b844:	fa03 f308 	lsl.w	r3, r3, r8
 800b848:	4213      	tst	r3, r2
 800b84a:	4631      	mov	r1, r6
 800b84c:	4620      	mov	r0, r4
 800b84e:	bf18      	it	ne
 800b850:	f04b 0b02 	orrne.w	fp, fp, #2
 800b854:	1bad      	subs	r5, r5, r6
 800b856:	f7ff fe07 	bl	800b468 <rshift>
 800b85a:	687e      	ldr	r6, [r7, #4]
 800b85c:	f04f 0802 	mov.w	r8, #2
 800b860:	f1bb 0f00 	cmp.w	fp, #0
 800b864:	d04a      	beq.n	800b8fc <__gethex+0x3c4>
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d016      	beq.n	800b89a <__gethex+0x362>
 800b86c:	2b03      	cmp	r3, #3
 800b86e:	d018      	beq.n	800b8a2 <__gethex+0x36a>
 800b870:	2b01      	cmp	r3, #1
 800b872:	d109      	bne.n	800b888 <__gethex+0x350>
 800b874:	f01b 0f02 	tst.w	fp, #2
 800b878:	d006      	beq.n	800b888 <__gethex+0x350>
 800b87a:	f8da 3000 	ldr.w	r3, [sl]
 800b87e:	ea4b 0b03 	orr.w	fp, fp, r3
 800b882:	f01b 0f01 	tst.w	fp, #1
 800b886:	d10f      	bne.n	800b8a8 <__gethex+0x370>
 800b888:	f048 0810 	orr.w	r8, r8, #16
 800b88c:	e036      	b.n	800b8fc <__gethex+0x3c4>
 800b88e:	f04f 0b01 	mov.w	fp, #1
 800b892:	e7d0      	b.n	800b836 <__gethex+0x2fe>
 800b894:	f04f 0801 	mov.w	r8, #1
 800b898:	e7e2      	b.n	800b860 <__gethex+0x328>
 800b89a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b89c:	f1c3 0301 	rsb	r3, r3, #1
 800b8a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d0ef      	beq.n	800b888 <__gethex+0x350>
 800b8a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b8ac:	f104 0214 	add.w	r2, r4, #20
 800b8b0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b8b4:	9301      	str	r3, [sp, #4]
 800b8b6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	4694      	mov	ip, r2
 800b8be:	f852 1b04 	ldr.w	r1, [r2], #4
 800b8c2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b8c6:	d01e      	beq.n	800b906 <__gethex+0x3ce>
 800b8c8:	3101      	adds	r1, #1
 800b8ca:	f8cc 1000 	str.w	r1, [ip]
 800b8ce:	f1b8 0f02 	cmp.w	r8, #2
 800b8d2:	f104 0214 	add.w	r2, r4, #20
 800b8d6:	d13d      	bne.n	800b954 <__gethex+0x41c>
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	3b01      	subs	r3, #1
 800b8dc:	42ab      	cmp	r3, r5
 800b8de:	d10b      	bne.n	800b8f8 <__gethex+0x3c0>
 800b8e0:	1169      	asrs	r1, r5, #5
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	f005 051f 	and.w	r5, r5, #31
 800b8e8:	fa03 f505 	lsl.w	r5, r3, r5
 800b8ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8f0:	421d      	tst	r5, r3
 800b8f2:	bf18      	it	ne
 800b8f4:	f04f 0801 	movne.w	r8, #1
 800b8f8:	f048 0820 	orr.w	r8, r8, #32
 800b8fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8fe:	601c      	str	r4, [r3, #0]
 800b900:	9b02      	ldr	r3, [sp, #8]
 800b902:	601e      	str	r6, [r3, #0]
 800b904:	e6a2      	b.n	800b64c <__gethex+0x114>
 800b906:	4290      	cmp	r0, r2
 800b908:	f842 3c04 	str.w	r3, [r2, #-4]
 800b90c:	d8d6      	bhi.n	800b8bc <__gethex+0x384>
 800b90e:	68a2      	ldr	r2, [r4, #8]
 800b910:	4593      	cmp	fp, r2
 800b912:	db17      	blt.n	800b944 <__gethex+0x40c>
 800b914:	6861      	ldr	r1, [r4, #4]
 800b916:	4648      	mov	r0, r9
 800b918:	3101      	adds	r1, #1
 800b91a:	f7fe f819 	bl	8009950 <_Balloc>
 800b91e:	4682      	mov	sl, r0
 800b920:	b918      	cbnz	r0, 800b92a <__gethex+0x3f2>
 800b922:	4b1b      	ldr	r3, [pc, #108]	; (800b990 <__gethex+0x458>)
 800b924:	4602      	mov	r2, r0
 800b926:	2184      	movs	r1, #132	; 0x84
 800b928:	e6b3      	b.n	800b692 <__gethex+0x15a>
 800b92a:	6922      	ldr	r2, [r4, #16]
 800b92c:	3202      	adds	r2, #2
 800b92e:	f104 010c 	add.w	r1, r4, #12
 800b932:	0092      	lsls	r2, r2, #2
 800b934:	300c      	adds	r0, #12
 800b936:	f7ff fd4d 	bl	800b3d4 <memcpy>
 800b93a:	4621      	mov	r1, r4
 800b93c:	4648      	mov	r0, r9
 800b93e:	f7fe f847 	bl	80099d0 <_Bfree>
 800b942:	4654      	mov	r4, sl
 800b944:	6922      	ldr	r2, [r4, #16]
 800b946:	1c51      	adds	r1, r2, #1
 800b948:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b94c:	6121      	str	r1, [r4, #16]
 800b94e:	2101      	movs	r1, #1
 800b950:	6151      	str	r1, [r2, #20]
 800b952:	e7bc      	b.n	800b8ce <__gethex+0x396>
 800b954:	6921      	ldr	r1, [r4, #16]
 800b956:	4559      	cmp	r1, fp
 800b958:	dd0b      	ble.n	800b972 <__gethex+0x43a>
 800b95a:	2101      	movs	r1, #1
 800b95c:	4620      	mov	r0, r4
 800b95e:	f7ff fd83 	bl	800b468 <rshift>
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	3601      	adds	r6, #1
 800b966:	42b3      	cmp	r3, r6
 800b968:	f6ff aedb 	blt.w	800b722 <__gethex+0x1ea>
 800b96c:	f04f 0801 	mov.w	r8, #1
 800b970:	e7c2      	b.n	800b8f8 <__gethex+0x3c0>
 800b972:	f015 051f 	ands.w	r5, r5, #31
 800b976:	d0f9      	beq.n	800b96c <__gethex+0x434>
 800b978:	9b01      	ldr	r3, [sp, #4]
 800b97a:	441a      	add	r2, r3
 800b97c:	f1c5 0520 	rsb	r5, r5, #32
 800b980:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b984:	f7fe f8d6 	bl	8009b34 <__hi0bits>
 800b988:	42a8      	cmp	r0, r5
 800b98a:	dbe6      	blt.n	800b95a <__gethex+0x422>
 800b98c:	e7ee      	b.n	800b96c <__gethex+0x434>
 800b98e:	bf00      	nop
 800b990:	0800ccd1 	.word	0x0800ccd1

0800b994 <L_shift>:
 800b994:	f1c2 0208 	rsb	r2, r2, #8
 800b998:	0092      	lsls	r2, r2, #2
 800b99a:	b570      	push	{r4, r5, r6, lr}
 800b99c:	f1c2 0620 	rsb	r6, r2, #32
 800b9a0:	6843      	ldr	r3, [r0, #4]
 800b9a2:	6804      	ldr	r4, [r0, #0]
 800b9a4:	fa03 f506 	lsl.w	r5, r3, r6
 800b9a8:	432c      	orrs	r4, r5
 800b9aa:	40d3      	lsrs	r3, r2
 800b9ac:	6004      	str	r4, [r0, #0]
 800b9ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800b9b2:	4288      	cmp	r0, r1
 800b9b4:	d3f4      	bcc.n	800b9a0 <L_shift+0xc>
 800b9b6:	bd70      	pop	{r4, r5, r6, pc}

0800b9b8 <__match>:
 800b9b8:	b530      	push	{r4, r5, lr}
 800b9ba:	6803      	ldr	r3, [r0, #0]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9c2:	b914      	cbnz	r4, 800b9ca <__match+0x12>
 800b9c4:	6003      	str	r3, [r0, #0]
 800b9c6:	2001      	movs	r0, #1
 800b9c8:	bd30      	pop	{r4, r5, pc}
 800b9ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b9d2:	2d19      	cmp	r5, #25
 800b9d4:	bf98      	it	ls
 800b9d6:	3220      	addls	r2, #32
 800b9d8:	42a2      	cmp	r2, r4
 800b9da:	d0f0      	beq.n	800b9be <__match+0x6>
 800b9dc:	2000      	movs	r0, #0
 800b9de:	e7f3      	b.n	800b9c8 <__match+0x10>

0800b9e0 <__hexnan>:
 800b9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e4:	680b      	ldr	r3, [r1, #0]
 800b9e6:	6801      	ldr	r1, [r0, #0]
 800b9e8:	115e      	asrs	r6, r3, #5
 800b9ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b9ee:	f013 031f 	ands.w	r3, r3, #31
 800b9f2:	b087      	sub	sp, #28
 800b9f4:	bf18      	it	ne
 800b9f6:	3604      	addne	r6, #4
 800b9f8:	2500      	movs	r5, #0
 800b9fa:	1f37      	subs	r7, r6, #4
 800b9fc:	4682      	mov	sl, r0
 800b9fe:	4690      	mov	r8, r2
 800ba00:	9301      	str	r3, [sp, #4]
 800ba02:	f846 5c04 	str.w	r5, [r6, #-4]
 800ba06:	46b9      	mov	r9, r7
 800ba08:	463c      	mov	r4, r7
 800ba0a:	9502      	str	r5, [sp, #8]
 800ba0c:	46ab      	mov	fp, r5
 800ba0e:	784a      	ldrb	r2, [r1, #1]
 800ba10:	1c4b      	adds	r3, r1, #1
 800ba12:	9303      	str	r3, [sp, #12]
 800ba14:	b342      	cbz	r2, 800ba68 <__hexnan+0x88>
 800ba16:	4610      	mov	r0, r2
 800ba18:	9105      	str	r1, [sp, #20]
 800ba1a:	9204      	str	r2, [sp, #16]
 800ba1c:	f7ff fd76 	bl	800b50c <__hexdig_fun>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d14f      	bne.n	800bac4 <__hexnan+0xe4>
 800ba24:	9a04      	ldr	r2, [sp, #16]
 800ba26:	9905      	ldr	r1, [sp, #20]
 800ba28:	2a20      	cmp	r2, #32
 800ba2a:	d818      	bhi.n	800ba5e <__hexnan+0x7e>
 800ba2c:	9b02      	ldr	r3, [sp, #8]
 800ba2e:	459b      	cmp	fp, r3
 800ba30:	dd13      	ble.n	800ba5a <__hexnan+0x7a>
 800ba32:	454c      	cmp	r4, r9
 800ba34:	d206      	bcs.n	800ba44 <__hexnan+0x64>
 800ba36:	2d07      	cmp	r5, #7
 800ba38:	dc04      	bgt.n	800ba44 <__hexnan+0x64>
 800ba3a:	462a      	mov	r2, r5
 800ba3c:	4649      	mov	r1, r9
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f7ff ffa8 	bl	800b994 <L_shift>
 800ba44:	4544      	cmp	r4, r8
 800ba46:	d950      	bls.n	800baea <__hexnan+0x10a>
 800ba48:	2300      	movs	r3, #0
 800ba4a:	f1a4 0904 	sub.w	r9, r4, #4
 800ba4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba52:	f8cd b008 	str.w	fp, [sp, #8]
 800ba56:	464c      	mov	r4, r9
 800ba58:	461d      	mov	r5, r3
 800ba5a:	9903      	ldr	r1, [sp, #12]
 800ba5c:	e7d7      	b.n	800ba0e <__hexnan+0x2e>
 800ba5e:	2a29      	cmp	r2, #41	; 0x29
 800ba60:	d155      	bne.n	800bb0e <__hexnan+0x12e>
 800ba62:	3102      	adds	r1, #2
 800ba64:	f8ca 1000 	str.w	r1, [sl]
 800ba68:	f1bb 0f00 	cmp.w	fp, #0
 800ba6c:	d04f      	beq.n	800bb0e <__hexnan+0x12e>
 800ba6e:	454c      	cmp	r4, r9
 800ba70:	d206      	bcs.n	800ba80 <__hexnan+0xa0>
 800ba72:	2d07      	cmp	r5, #7
 800ba74:	dc04      	bgt.n	800ba80 <__hexnan+0xa0>
 800ba76:	462a      	mov	r2, r5
 800ba78:	4649      	mov	r1, r9
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f7ff ff8a 	bl	800b994 <L_shift>
 800ba80:	4544      	cmp	r4, r8
 800ba82:	d934      	bls.n	800baee <__hexnan+0x10e>
 800ba84:	f1a8 0204 	sub.w	r2, r8, #4
 800ba88:	4623      	mov	r3, r4
 800ba8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ba8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ba92:	429f      	cmp	r7, r3
 800ba94:	d2f9      	bcs.n	800ba8a <__hexnan+0xaa>
 800ba96:	1b3b      	subs	r3, r7, r4
 800ba98:	f023 0303 	bic.w	r3, r3, #3
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	3e03      	subs	r6, #3
 800baa0:	3401      	adds	r4, #1
 800baa2:	42a6      	cmp	r6, r4
 800baa4:	bf38      	it	cc
 800baa6:	2304      	movcc	r3, #4
 800baa8:	4443      	add	r3, r8
 800baaa:	2200      	movs	r2, #0
 800baac:	f843 2b04 	str.w	r2, [r3], #4
 800bab0:	429f      	cmp	r7, r3
 800bab2:	d2fb      	bcs.n	800baac <__hexnan+0xcc>
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	b91b      	cbnz	r3, 800bac0 <__hexnan+0xe0>
 800bab8:	4547      	cmp	r7, r8
 800baba:	d126      	bne.n	800bb0a <__hexnan+0x12a>
 800babc:	2301      	movs	r3, #1
 800babe:	603b      	str	r3, [r7, #0]
 800bac0:	2005      	movs	r0, #5
 800bac2:	e025      	b.n	800bb10 <__hexnan+0x130>
 800bac4:	3501      	adds	r5, #1
 800bac6:	2d08      	cmp	r5, #8
 800bac8:	f10b 0b01 	add.w	fp, fp, #1
 800bacc:	dd06      	ble.n	800badc <__hexnan+0xfc>
 800bace:	4544      	cmp	r4, r8
 800bad0:	d9c3      	bls.n	800ba5a <__hexnan+0x7a>
 800bad2:	2300      	movs	r3, #0
 800bad4:	f844 3c04 	str.w	r3, [r4, #-4]
 800bad8:	2501      	movs	r5, #1
 800bada:	3c04      	subs	r4, #4
 800badc:	6822      	ldr	r2, [r4, #0]
 800bade:	f000 000f 	and.w	r0, r0, #15
 800bae2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bae6:	6020      	str	r0, [r4, #0]
 800bae8:	e7b7      	b.n	800ba5a <__hexnan+0x7a>
 800baea:	2508      	movs	r5, #8
 800baec:	e7b5      	b.n	800ba5a <__hexnan+0x7a>
 800baee:	9b01      	ldr	r3, [sp, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d0df      	beq.n	800bab4 <__hexnan+0xd4>
 800baf4:	f1c3 0320 	rsb	r3, r3, #32
 800baf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bafc:	40da      	lsrs	r2, r3
 800bafe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bb02:	4013      	ands	r3, r2
 800bb04:	f846 3c04 	str.w	r3, [r6, #-4]
 800bb08:	e7d4      	b.n	800bab4 <__hexnan+0xd4>
 800bb0a:	3f04      	subs	r7, #4
 800bb0c:	e7d2      	b.n	800bab4 <__hexnan+0xd4>
 800bb0e:	2004      	movs	r0, #4
 800bb10:	b007      	add	sp, #28
 800bb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb16 <__ascii_mbtowc>:
 800bb16:	b082      	sub	sp, #8
 800bb18:	b901      	cbnz	r1, 800bb1c <__ascii_mbtowc+0x6>
 800bb1a:	a901      	add	r1, sp, #4
 800bb1c:	b142      	cbz	r2, 800bb30 <__ascii_mbtowc+0x1a>
 800bb1e:	b14b      	cbz	r3, 800bb34 <__ascii_mbtowc+0x1e>
 800bb20:	7813      	ldrb	r3, [r2, #0]
 800bb22:	600b      	str	r3, [r1, #0]
 800bb24:	7812      	ldrb	r2, [r2, #0]
 800bb26:	1e10      	subs	r0, r2, #0
 800bb28:	bf18      	it	ne
 800bb2a:	2001      	movne	r0, #1
 800bb2c:	b002      	add	sp, #8
 800bb2e:	4770      	bx	lr
 800bb30:	4610      	mov	r0, r2
 800bb32:	e7fb      	b.n	800bb2c <__ascii_mbtowc+0x16>
 800bb34:	f06f 0001 	mvn.w	r0, #1
 800bb38:	e7f8      	b.n	800bb2c <__ascii_mbtowc+0x16>

0800bb3a <_realloc_r>:
 800bb3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb3e:	4680      	mov	r8, r0
 800bb40:	4614      	mov	r4, r2
 800bb42:	460e      	mov	r6, r1
 800bb44:	b921      	cbnz	r1, 800bb50 <_realloc_r+0x16>
 800bb46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb4a:	4611      	mov	r1, r2
 800bb4c:	f7fd be74 	b.w	8009838 <_malloc_r>
 800bb50:	b92a      	cbnz	r2, 800bb5e <_realloc_r+0x24>
 800bb52:	f7fd fdfd 	bl	8009750 <_free_r>
 800bb56:	4625      	mov	r5, r4
 800bb58:	4628      	mov	r0, r5
 800bb5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb5e:	f000 f842 	bl	800bbe6 <_malloc_usable_size_r>
 800bb62:	4284      	cmp	r4, r0
 800bb64:	4607      	mov	r7, r0
 800bb66:	d802      	bhi.n	800bb6e <_realloc_r+0x34>
 800bb68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb6c:	d812      	bhi.n	800bb94 <_realloc_r+0x5a>
 800bb6e:	4621      	mov	r1, r4
 800bb70:	4640      	mov	r0, r8
 800bb72:	f7fd fe61 	bl	8009838 <_malloc_r>
 800bb76:	4605      	mov	r5, r0
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d0ed      	beq.n	800bb58 <_realloc_r+0x1e>
 800bb7c:	42bc      	cmp	r4, r7
 800bb7e:	4622      	mov	r2, r4
 800bb80:	4631      	mov	r1, r6
 800bb82:	bf28      	it	cs
 800bb84:	463a      	movcs	r2, r7
 800bb86:	f7ff fc25 	bl	800b3d4 <memcpy>
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	4640      	mov	r0, r8
 800bb8e:	f7fd fddf 	bl	8009750 <_free_r>
 800bb92:	e7e1      	b.n	800bb58 <_realloc_r+0x1e>
 800bb94:	4635      	mov	r5, r6
 800bb96:	e7df      	b.n	800bb58 <_realloc_r+0x1e>

0800bb98 <__ascii_wctomb>:
 800bb98:	b149      	cbz	r1, 800bbae <__ascii_wctomb+0x16>
 800bb9a:	2aff      	cmp	r2, #255	; 0xff
 800bb9c:	bf85      	ittet	hi
 800bb9e:	238a      	movhi	r3, #138	; 0x8a
 800bba0:	6003      	strhi	r3, [r0, #0]
 800bba2:	700a      	strbls	r2, [r1, #0]
 800bba4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bba8:	bf98      	it	ls
 800bbaa:	2001      	movls	r0, #1
 800bbac:	4770      	bx	lr
 800bbae:	4608      	mov	r0, r1
 800bbb0:	4770      	bx	lr
	...

0800bbb4 <fiprintf>:
 800bbb4:	b40e      	push	{r1, r2, r3}
 800bbb6:	b503      	push	{r0, r1, lr}
 800bbb8:	4601      	mov	r1, r0
 800bbba:	ab03      	add	r3, sp, #12
 800bbbc:	4805      	ldr	r0, [pc, #20]	; (800bbd4 <fiprintf+0x20>)
 800bbbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbc2:	6800      	ldr	r0, [r0, #0]
 800bbc4:	9301      	str	r3, [sp, #4]
 800bbc6:	f000 f83f 	bl	800bc48 <_vfiprintf_r>
 800bbca:	b002      	add	sp, #8
 800bbcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbd0:	b003      	add	sp, #12
 800bbd2:	4770      	bx	lr
 800bbd4:	20000084 	.word	0x20000084

0800bbd8 <abort>:
 800bbd8:	b508      	push	{r3, lr}
 800bbda:	2006      	movs	r0, #6
 800bbdc:	f000 fa0c 	bl	800bff8 <raise>
 800bbe0:	2001      	movs	r0, #1
 800bbe2:	f7f6 fa2f 	bl	8002044 <_exit>

0800bbe6 <_malloc_usable_size_r>:
 800bbe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbea:	1f18      	subs	r0, r3, #4
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	bfbc      	itt	lt
 800bbf0:	580b      	ldrlt	r3, [r1, r0]
 800bbf2:	18c0      	addlt	r0, r0, r3
 800bbf4:	4770      	bx	lr

0800bbf6 <__sfputc_r>:
 800bbf6:	6893      	ldr	r3, [r2, #8]
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	b410      	push	{r4}
 800bbfe:	6093      	str	r3, [r2, #8]
 800bc00:	da08      	bge.n	800bc14 <__sfputc_r+0x1e>
 800bc02:	6994      	ldr	r4, [r2, #24]
 800bc04:	42a3      	cmp	r3, r4
 800bc06:	db01      	blt.n	800bc0c <__sfputc_r+0x16>
 800bc08:	290a      	cmp	r1, #10
 800bc0a:	d103      	bne.n	800bc14 <__sfputc_r+0x1e>
 800bc0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc10:	f000 b934 	b.w	800be7c <__swbuf_r>
 800bc14:	6813      	ldr	r3, [r2, #0]
 800bc16:	1c58      	adds	r0, r3, #1
 800bc18:	6010      	str	r0, [r2, #0]
 800bc1a:	7019      	strb	r1, [r3, #0]
 800bc1c:	4608      	mov	r0, r1
 800bc1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <__sfputs_r>:
 800bc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc26:	4606      	mov	r6, r0
 800bc28:	460f      	mov	r7, r1
 800bc2a:	4614      	mov	r4, r2
 800bc2c:	18d5      	adds	r5, r2, r3
 800bc2e:	42ac      	cmp	r4, r5
 800bc30:	d101      	bne.n	800bc36 <__sfputs_r+0x12>
 800bc32:	2000      	movs	r0, #0
 800bc34:	e007      	b.n	800bc46 <__sfputs_r+0x22>
 800bc36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc3a:	463a      	mov	r2, r7
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	f7ff ffda 	bl	800bbf6 <__sfputc_r>
 800bc42:	1c43      	adds	r3, r0, #1
 800bc44:	d1f3      	bne.n	800bc2e <__sfputs_r+0xa>
 800bc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc48 <_vfiprintf_r>:
 800bc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4c:	460d      	mov	r5, r1
 800bc4e:	b09d      	sub	sp, #116	; 0x74
 800bc50:	4614      	mov	r4, r2
 800bc52:	4698      	mov	r8, r3
 800bc54:	4606      	mov	r6, r0
 800bc56:	b118      	cbz	r0, 800bc60 <_vfiprintf_r+0x18>
 800bc58:	6a03      	ldr	r3, [r0, #32]
 800bc5a:	b90b      	cbnz	r3, 800bc60 <_vfiprintf_r+0x18>
 800bc5c:	f7fc fe62 	bl	8008924 <__sinit>
 800bc60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc62:	07d9      	lsls	r1, r3, #31
 800bc64:	d405      	bmi.n	800bc72 <_vfiprintf_r+0x2a>
 800bc66:	89ab      	ldrh	r3, [r5, #12]
 800bc68:	059a      	lsls	r2, r3, #22
 800bc6a:	d402      	bmi.n	800bc72 <_vfiprintf_r+0x2a>
 800bc6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc6e:	f7fc ff70 	bl	8008b52 <__retarget_lock_acquire_recursive>
 800bc72:	89ab      	ldrh	r3, [r5, #12]
 800bc74:	071b      	lsls	r3, r3, #28
 800bc76:	d501      	bpl.n	800bc7c <_vfiprintf_r+0x34>
 800bc78:	692b      	ldr	r3, [r5, #16]
 800bc7a:	b99b      	cbnz	r3, 800bca4 <_vfiprintf_r+0x5c>
 800bc7c:	4629      	mov	r1, r5
 800bc7e:	4630      	mov	r0, r6
 800bc80:	f000 f93a 	bl	800bef8 <__swsetup_r>
 800bc84:	b170      	cbz	r0, 800bca4 <_vfiprintf_r+0x5c>
 800bc86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc88:	07dc      	lsls	r4, r3, #31
 800bc8a:	d504      	bpl.n	800bc96 <_vfiprintf_r+0x4e>
 800bc8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc90:	b01d      	add	sp, #116	; 0x74
 800bc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc96:	89ab      	ldrh	r3, [r5, #12]
 800bc98:	0598      	lsls	r0, r3, #22
 800bc9a:	d4f7      	bmi.n	800bc8c <_vfiprintf_r+0x44>
 800bc9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc9e:	f7fc ff59 	bl	8008b54 <__retarget_lock_release_recursive>
 800bca2:	e7f3      	b.n	800bc8c <_vfiprintf_r+0x44>
 800bca4:	2300      	movs	r3, #0
 800bca6:	9309      	str	r3, [sp, #36]	; 0x24
 800bca8:	2320      	movs	r3, #32
 800bcaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcae:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcb2:	2330      	movs	r3, #48	; 0x30
 800bcb4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800be68 <_vfiprintf_r+0x220>
 800bcb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcbc:	f04f 0901 	mov.w	r9, #1
 800bcc0:	4623      	mov	r3, r4
 800bcc2:	469a      	mov	sl, r3
 800bcc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcc8:	b10a      	cbz	r2, 800bcce <_vfiprintf_r+0x86>
 800bcca:	2a25      	cmp	r2, #37	; 0x25
 800bccc:	d1f9      	bne.n	800bcc2 <_vfiprintf_r+0x7a>
 800bcce:	ebba 0b04 	subs.w	fp, sl, r4
 800bcd2:	d00b      	beq.n	800bcec <_vfiprintf_r+0xa4>
 800bcd4:	465b      	mov	r3, fp
 800bcd6:	4622      	mov	r2, r4
 800bcd8:	4629      	mov	r1, r5
 800bcda:	4630      	mov	r0, r6
 800bcdc:	f7ff ffa2 	bl	800bc24 <__sfputs_r>
 800bce0:	3001      	adds	r0, #1
 800bce2:	f000 80a9 	beq.w	800be38 <_vfiprintf_r+0x1f0>
 800bce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bce8:	445a      	add	r2, fp
 800bcea:	9209      	str	r2, [sp, #36]	; 0x24
 800bcec:	f89a 3000 	ldrb.w	r3, [sl]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f000 80a1 	beq.w	800be38 <_vfiprintf_r+0x1f0>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd00:	f10a 0a01 	add.w	sl, sl, #1
 800bd04:	9304      	str	r3, [sp, #16]
 800bd06:	9307      	str	r3, [sp, #28]
 800bd08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd0c:	931a      	str	r3, [sp, #104]	; 0x68
 800bd0e:	4654      	mov	r4, sl
 800bd10:	2205      	movs	r2, #5
 800bd12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd16:	4854      	ldr	r0, [pc, #336]	; (800be68 <_vfiprintf_r+0x220>)
 800bd18:	f7f4 fa92 	bl	8000240 <memchr>
 800bd1c:	9a04      	ldr	r2, [sp, #16]
 800bd1e:	b9d8      	cbnz	r0, 800bd58 <_vfiprintf_r+0x110>
 800bd20:	06d1      	lsls	r1, r2, #27
 800bd22:	bf44      	itt	mi
 800bd24:	2320      	movmi	r3, #32
 800bd26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd2a:	0713      	lsls	r3, r2, #28
 800bd2c:	bf44      	itt	mi
 800bd2e:	232b      	movmi	r3, #43	; 0x2b
 800bd30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd34:	f89a 3000 	ldrb.w	r3, [sl]
 800bd38:	2b2a      	cmp	r3, #42	; 0x2a
 800bd3a:	d015      	beq.n	800bd68 <_vfiprintf_r+0x120>
 800bd3c:	9a07      	ldr	r2, [sp, #28]
 800bd3e:	4654      	mov	r4, sl
 800bd40:	2000      	movs	r0, #0
 800bd42:	f04f 0c0a 	mov.w	ip, #10
 800bd46:	4621      	mov	r1, r4
 800bd48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd4c:	3b30      	subs	r3, #48	; 0x30
 800bd4e:	2b09      	cmp	r3, #9
 800bd50:	d94d      	bls.n	800bdee <_vfiprintf_r+0x1a6>
 800bd52:	b1b0      	cbz	r0, 800bd82 <_vfiprintf_r+0x13a>
 800bd54:	9207      	str	r2, [sp, #28]
 800bd56:	e014      	b.n	800bd82 <_vfiprintf_r+0x13a>
 800bd58:	eba0 0308 	sub.w	r3, r0, r8
 800bd5c:	fa09 f303 	lsl.w	r3, r9, r3
 800bd60:	4313      	orrs	r3, r2
 800bd62:	9304      	str	r3, [sp, #16]
 800bd64:	46a2      	mov	sl, r4
 800bd66:	e7d2      	b.n	800bd0e <_vfiprintf_r+0xc6>
 800bd68:	9b03      	ldr	r3, [sp, #12]
 800bd6a:	1d19      	adds	r1, r3, #4
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	9103      	str	r1, [sp, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	bfbb      	ittet	lt
 800bd74:	425b      	neglt	r3, r3
 800bd76:	f042 0202 	orrlt.w	r2, r2, #2
 800bd7a:	9307      	strge	r3, [sp, #28]
 800bd7c:	9307      	strlt	r3, [sp, #28]
 800bd7e:	bfb8      	it	lt
 800bd80:	9204      	strlt	r2, [sp, #16]
 800bd82:	7823      	ldrb	r3, [r4, #0]
 800bd84:	2b2e      	cmp	r3, #46	; 0x2e
 800bd86:	d10c      	bne.n	800bda2 <_vfiprintf_r+0x15a>
 800bd88:	7863      	ldrb	r3, [r4, #1]
 800bd8a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd8c:	d134      	bne.n	800bdf8 <_vfiprintf_r+0x1b0>
 800bd8e:	9b03      	ldr	r3, [sp, #12]
 800bd90:	1d1a      	adds	r2, r3, #4
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	9203      	str	r2, [sp, #12]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	bfb8      	it	lt
 800bd9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd9e:	3402      	adds	r4, #2
 800bda0:	9305      	str	r3, [sp, #20]
 800bda2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800be78 <_vfiprintf_r+0x230>
 800bda6:	7821      	ldrb	r1, [r4, #0]
 800bda8:	2203      	movs	r2, #3
 800bdaa:	4650      	mov	r0, sl
 800bdac:	f7f4 fa48 	bl	8000240 <memchr>
 800bdb0:	b138      	cbz	r0, 800bdc2 <_vfiprintf_r+0x17a>
 800bdb2:	9b04      	ldr	r3, [sp, #16]
 800bdb4:	eba0 000a 	sub.w	r0, r0, sl
 800bdb8:	2240      	movs	r2, #64	; 0x40
 800bdba:	4082      	lsls	r2, r0
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	3401      	adds	r4, #1
 800bdc0:	9304      	str	r3, [sp, #16]
 800bdc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdc6:	4829      	ldr	r0, [pc, #164]	; (800be6c <_vfiprintf_r+0x224>)
 800bdc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdcc:	2206      	movs	r2, #6
 800bdce:	f7f4 fa37 	bl	8000240 <memchr>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d03f      	beq.n	800be56 <_vfiprintf_r+0x20e>
 800bdd6:	4b26      	ldr	r3, [pc, #152]	; (800be70 <_vfiprintf_r+0x228>)
 800bdd8:	bb1b      	cbnz	r3, 800be22 <_vfiprintf_r+0x1da>
 800bdda:	9b03      	ldr	r3, [sp, #12]
 800bddc:	3307      	adds	r3, #7
 800bdde:	f023 0307 	bic.w	r3, r3, #7
 800bde2:	3308      	adds	r3, #8
 800bde4:	9303      	str	r3, [sp, #12]
 800bde6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bde8:	443b      	add	r3, r7
 800bdea:	9309      	str	r3, [sp, #36]	; 0x24
 800bdec:	e768      	b.n	800bcc0 <_vfiprintf_r+0x78>
 800bdee:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	2001      	movs	r0, #1
 800bdf6:	e7a6      	b.n	800bd46 <_vfiprintf_r+0xfe>
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	3401      	adds	r4, #1
 800bdfc:	9305      	str	r3, [sp, #20]
 800bdfe:	4619      	mov	r1, r3
 800be00:	f04f 0c0a 	mov.w	ip, #10
 800be04:	4620      	mov	r0, r4
 800be06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be0a:	3a30      	subs	r2, #48	; 0x30
 800be0c:	2a09      	cmp	r2, #9
 800be0e:	d903      	bls.n	800be18 <_vfiprintf_r+0x1d0>
 800be10:	2b00      	cmp	r3, #0
 800be12:	d0c6      	beq.n	800bda2 <_vfiprintf_r+0x15a>
 800be14:	9105      	str	r1, [sp, #20]
 800be16:	e7c4      	b.n	800bda2 <_vfiprintf_r+0x15a>
 800be18:	fb0c 2101 	mla	r1, ip, r1, r2
 800be1c:	4604      	mov	r4, r0
 800be1e:	2301      	movs	r3, #1
 800be20:	e7f0      	b.n	800be04 <_vfiprintf_r+0x1bc>
 800be22:	ab03      	add	r3, sp, #12
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	462a      	mov	r2, r5
 800be28:	4b12      	ldr	r3, [pc, #72]	; (800be74 <_vfiprintf_r+0x22c>)
 800be2a:	a904      	add	r1, sp, #16
 800be2c:	4630      	mov	r0, r6
 800be2e:	f7fb ff3f 	bl	8007cb0 <_printf_float>
 800be32:	4607      	mov	r7, r0
 800be34:	1c78      	adds	r0, r7, #1
 800be36:	d1d6      	bne.n	800bde6 <_vfiprintf_r+0x19e>
 800be38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be3a:	07d9      	lsls	r1, r3, #31
 800be3c:	d405      	bmi.n	800be4a <_vfiprintf_r+0x202>
 800be3e:	89ab      	ldrh	r3, [r5, #12]
 800be40:	059a      	lsls	r2, r3, #22
 800be42:	d402      	bmi.n	800be4a <_vfiprintf_r+0x202>
 800be44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be46:	f7fc fe85 	bl	8008b54 <__retarget_lock_release_recursive>
 800be4a:	89ab      	ldrh	r3, [r5, #12]
 800be4c:	065b      	lsls	r3, r3, #25
 800be4e:	f53f af1d 	bmi.w	800bc8c <_vfiprintf_r+0x44>
 800be52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be54:	e71c      	b.n	800bc90 <_vfiprintf_r+0x48>
 800be56:	ab03      	add	r3, sp, #12
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	462a      	mov	r2, r5
 800be5c:	4b05      	ldr	r3, [pc, #20]	; (800be74 <_vfiprintf_r+0x22c>)
 800be5e:	a904      	add	r1, sp, #16
 800be60:	4630      	mov	r0, r6
 800be62:	f7fc f9ad 	bl	80081c0 <_printf_i>
 800be66:	e7e4      	b.n	800be32 <_vfiprintf_r+0x1ea>
 800be68:	0800cf91 	.word	0x0800cf91
 800be6c:	0800cf9b 	.word	0x0800cf9b
 800be70:	08007cb1 	.word	0x08007cb1
 800be74:	0800bc25 	.word	0x0800bc25
 800be78:	0800cf97 	.word	0x0800cf97

0800be7c <__swbuf_r>:
 800be7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7e:	460e      	mov	r6, r1
 800be80:	4614      	mov	r4, r2
 800be82:	4605      	mov	r5, r0
 800be84:	b118      	cbz	r0, 800be8e <__swbuf_r+0x12>
 800be86:	6a03      	ldr	r3, [r0, #32]
 800be88:	b90b      	cbnz	r3, 800be8e <__swbuf_r+0x12>
 800be8a:	f7fc fd4b 	bl	8008924 <__sinit>
 800be8e:	69a3      	ldr	r3, [r4, #24]
 800be90:	60a3      	str	r3, [r4, #8]
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	071a      	lsls	r2, r3, #28
 800be96:	d525      	bpl.n	800bee4 <__swbuf_r+0x68>
 800be98:	6923      	ldr	r3, [r4, #16]
 800be9a:	b31b      	cbz	r3, 800bee4 <__swbuf_r+0x68>
 800be9c:	6823      	ldr	r3, [r4, #0]
 800be9e:	6922      	ldr	r2, [r4, #16]
 800bea0:	1a98      	subs	r0, r3, r2
 800bea2:	6963      	ldr	r3, [r4, #20]
 800bea4:	b2f6      	uxtb	r6, r6
 800bea6:	4283      	cmp	r3, r0
 800bea8:	4637      	mov	r7, r6
 800beaa:	dc04      	bgt.n	800beb6 <__swbuf_r+0x3a>
 800beac:	4621      	mov	r1, r4
 800beae:	4628      	mov	r0, r5
 800beb0:	f7ff fa2c 	bl	800b30c <_fflush_r>
 800beb4:	b9e0      	cbnz	r0, 800bef0 <__swbuf_r+0x74>
 800beb6:	68a3      	ldr	r3, [r4, #8]
 800beb8:	3b01      	subs	r3, #1
 800beba:	60a3      	str	r3, [r4, #8]
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	1c5a      	adds	r2, r3, #1
 800bec0:	6022      	str	r2, [r4, #0]
 800bec2:	701e      	strb	r6, [r3, #0]
 800bec4:	6962      	ldr	r2, [r4, #20]
 800bec6:	1c43      	adds	r3, r0, #1
 800bec8:	429a      	cmp	r2, r3
 800beca:	d004      	beq.n	800bed6 <__swbuf_r+0x5a>
 800becc:	89a3      	ldrh	r3, [r4, #12]
 800bece:	07db      	lsls	r3, r3, #31
 800bed0:	d506      	bpl.n	800bee0 <__swbuf_r+0x64>
 800bed2:	2e0a      	cmp	r6, #10
 800bed4:	d104      	bne.n	800bee0 <__swbuf_r+0x64>
 800bed6:	4621      	mov	r1, r4
 800bed8:	4628      	mov	r0, r5
 800beda:	f7ff fa17 	bl	800b30c <_fflush_r>
 800bede:	b938      	cbnz	r0, 800bef0 <__swbuf_r+0x74>
 800bee0:	4638      	mov	r0, r7
 800bee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bee4:	4621      	mov	r1, r4
 800bee6:	4628      	mov	r0, r5
 800bee8:	f000 f806 	bl	800bef8 <__swsetup_r>
 800beec:	2800      	cmp	r0, #0
 800beee:	d0d5      	beq.n	800be9c <__swbuf_r+0x20>
 800bef0:	f04f 37ff 	mov.w	r7, #4294967295
 800bef4:	e7f4      	b.n	800bee0 <__swbuf_r+0x64>
	...

0800bef8 <__swsetup_r>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	4b2a      	ldr	r3, [pc, #168]	; (800bfa4 <__swsetup_r+0xac>)
 800befc:	4605      	mov	r5, r0
 800befe:	6818      	ldr	r0, [r3, #0]
 800bf00:	460c      	mov	r4, r1
 800bf02:	b118      	cbz	r0, 800bf0c <__swsetup_r+0x14>
 800bf04:	6a03      	ldr	r3, [r0, #32]
 800bf06:	b90b      	cbnz	r3, 800bf0c <__swsetup_r+0x14>
 800bf08:	f7fc fd0c 	bl	8008924 <__sinit>
 800bf0c:	89a3      	ldrh	r3, [r4, #12]
 800bf0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf12:	0718      	lsls	r0, r3, #28
 800bf14:	d422      	bmi.n	800bf5c <__swsetup_r+0x64>
 800bf16:	06d9      	lsls	r1, r3, #27
 800bf18:	d407      	bmi.n	800bf2a <__swsetup_r+0x32>
 800bf1a:	2309      	movs	r3, #9
 800bf1c:	602b      	str	r3, [r5, #0]
 800bf1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf22:	81a3      	strh	r3, [r4, #12]
 800bf24:	f04f 30ff 	mov.w	r0, #4294967295
 800bf28:	e034      	b.n	800bf94 <__swsetup_r+0x9c>
 800bf2a:	0758      	lsls	r0, r3, #29
 800bf2c:	d512      	bpl.n	800bf54 <__swsetup_r+0x5c>
 800bf2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf30:	b141      	cbz	r1, 800bf44 <__swsetup_r+0x4c>
 800bf32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf36:	4299      	cmp	r1, r3
 800bf38:	d002      	beq.n	800bf40 <__swsetup_r+0x48>
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	f7fd fc08 	bl	8009750 <_free_r>
 800bf40:	2300      	movs	r3, #0
 800bf42:	6363      	str	r3, [r4, #52]	; 0x34
 800bf44:	89a3      	ldrh	r3, [r4, #12]
 800bf46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	6063      	str	r3, [r4, #4]
 800bf50:	6923      	ldr	r3, [r4, #16]
 800bf52:	6023      	str	r3, [r4, #0]
 800bf54:	89a3      	ldrh	r3, [r4, #12]
 800bf56:	f043 0308 	orr.w	r3, r3, #8
 800bf5a:	81a3      	strh	r3, [r4, #12]
 800bf5c:	6923      	ldr	r3, [r4, #16]
 800bf5e:	b94b      	cbnz	r3, 800bf74 <__swsetup_r+0x7c>
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf6a:	d003      	beq.n	800bf74 <__swsetup_r+0x7c>
 800bf6c:	4621      	mov	r1, r4
 800bf6e:	4628      	mov	r0, r5
 800bf70:	f000 f884 	bl	800c07c <__smakebuf_r>
 800bf74:	89a0      	ldrh	r0, [r4, #12]
 800bf76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf7a:	f010 0301 	ands.w	r3, r0, #1
 800bf7e:	d00a      	beq.n	800bf96 <__swsetup_r+0x9e>
 800bf80:	2300      	movs	r3, #0
 800bf82:	60a3      	str	r3, [r4, #8]
 800bf84:	6963      	ldr	r3, [r4, #20]
 800bf86:	425b      	negs	r3, r3
 800bf88:	61a3      	str	r3, [r4, #24]
 800bf8a:	6923      	ldr	r3, [r4, #16]
 800bf8c:	b943      	cbnz	r3, 800bfa0 <__swsetup_r+0xa8>
 800bf8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf92:	d1c4      	bne.n	800bf1e <__swsetup_r+0x26>
 800bf94:	bd38      	pop	{r3, r4, r5, pc}
 800bf96:	0781      	lsls	r1, r0, #30
 800bf98:	bf58      	it	pl
 800bf9a:	6963      	ldrpl	r3, [r4, #20]
 800bf9c:	60a3      	str	r3, [r4, #8]
 800bf9e:	e7f4      	b.n	800bf8a <__swsetup_r+0x92>
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	e7f7      	b.n	800bf94 <__swsetup_r+0x9c>
 800bfa4:	20000084 	.word	0x20000084

0800bfa8 <_raise_r>:
 800bfa8:	291f      	cmp	r1, #31
 800bfaa:	b538      	push	{r3, r4, r5, lr}
 800bfac:	4604      	mov	r4, r0
 800bfae:	460d      	mov	r5, r1
 800bfb0:	d904      	bls.n	800bfbc <_raise_r+0x14>
 800bfb2:	2316      	movs	r3, #22
 800bfb4:	6003      	str	r3, [r0, #0]
 800bfb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfba:	bd38      	pop	{r3, r4, r5, pc}
 800bfbc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bfbe:	b112      	cbz	r2, 800bfc6 <_raise_r+0x1e>
 800bfc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfc4:	b94b      	cbnz	r3, 800bfda <_raise_r+0x32>
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f000 f830 	bl	800c02c <_getpid_r>
 800bfcc:	462a      	mov	r2, r5
 800bfce:	4601      	mov	r1, r0
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfd6:	f000 b817 	b.w	800c008 <_kill_r>
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d00a      	beq.n	800bff4 <_raise_r+0x4c>
 800bfde:	1c59      	adds	r1, r3, #1
 800bfe0:	d103      	bne.n	800bfea <_raise_r+0x42>
 800bfe2:	2316      	movs	r3, #22
 800bfe4:	6003      	str	r3, [r0, #0]
 800bfe6:	2001      	movs	r0, #1
 800bfe8:	e7e7      	b.n	800bfba <_raise_r+0x12>
 800bfea:	2400      	movs	r4, #0
 800bfec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bff0:	4628      	mov	r0, r5
 800bff2:	4798      	blx	r3
 800bff4:	2000      	movs	r0, #0
 800bff6:	e7e0      	b.n	800bfba <_raise_r+0x12>

0800bff8 <raise>:
 800bff8:	4b02      	ldr	r3, [pc, #8]	; (800c004 <raise+0xc>)
 800bffa:	4601      	mov	r1, r0
 800bffc:	6818      	ldr	r0, [r3, #0]
 800bffe:	f7ff bfd3 	b.w	800bfa8 <_raise_r>
 800c002:	bf00      	nop
 800c004:	20000084 	.word	0x20000084

0800c008 <_kill_r>:
 800c008:	b538      	push	{r3, r4, r5, lr}
 800c00a:	4d07      	ldr	r5, [pc, #28]	; (800c028 <_kill_r+0x20>)
 800c00c:	2300      	movs	r3, #0
 800c00e:	4604      	mov	r4, r0
 800c010:	4608      	mov	r0, r1
 800c012:	4611      	mov	r1, r2
 800c014:	602b      	str	r3, [r5, #0]
 800c016:	f7f6 f805 	bl	8002024 <_kill>
 800c01a:	1c43      	adds	r3, r0, #1
 800c01c:	d102      	bne.n	800c024 <_kill_r+0x1c>
 800c01e:	682b      	ldr	r3, [r5, #0]
 800c020:	b103      	cbz	r3, 800c024 <_kill_r+0x1c>
 800c022:	6023      	str	r3, [r4, #0]
 800c024:	bd38      	pop	{r3, r4, r5, pc}
 800c026:	bf00      	nop
 800c028:	20000644 	.word	0x20000644

0800c02c <_getpid_r>:
 800c02c:	f7f5 bff2 	b.w	8002014 <_getpid>

0800c030 <__swhatbuf_r>:
 800c030:	b570      	push	{r4, r5, r6, lr}
 800c032:	460c      	mov	r4, r1
 800c034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c038:	2900      	cmp	r1, #0
 800c03a:	b096      	sub	sp, #88	; 0x58
 800c03c:	4615      	mov	r5, r2
 800c03e:	461e      	mov	r6, r3
 800c040:	da0d      	bge.n	800c05e <__swhatbuf_r+0x2e>
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c048:	f04f 0100 	mov.w	r1, #0
 800c04c:	bf0c      	ite	eq
 800c04e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c052:	2340      	movne	r3, #64	; 0x40
 800c054:	2000      	movs	r0, #0
 800c056:	6031      	str	r1, [r6, #0]
 800c058:	602b      	str	r3, [r5, #0]
 800c05a:	b016      	add	sp, #88	; 0x58
 800c05c:	bd70      	pop	{r4, r5, r6, pc}
 800c05e:	466a      	mov	r2, sp
 800c060:	f000 f848 	bl	800c0f4 <_fstat_r>
 800c064:	2800      	cmp	r0, #0
 800c066:	dbec      	blt.n	800c042 <__swhatbuf_r+0x12>
 800c068:	9901      	ldr	r1, [sp, #4]
 800c06a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c06e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c072:	4259      	negs	r1, r3
 800c074:	4159      	adcs	r1, r3
 800c076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c07a:	e7eb      	b.n	800c054 <__swhatbuf_r+0x24>

0800c07c <__smakebuf_r>:
 800c07c:	898b      	ldrh	r3, [r1, #12]
 800c07e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c080:	079d      	lsls	r5, r3, #30
 800c082:	4606      	mov	r6, r0
 800c084:	460c      	mov	r4, r1
 800c086:	d507      	bpl.n	800c098 <__smakebuf_r+0x1c>
 800c088:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c08c:	6023      	str	r3, [r4, #0]
 800c08e:	6123      	str	r3, [r4, #16]
 800c090:	2301      	movs	r3, #1
 800c092:	6163      	str	r3, [r4, #20]
 800c094:	b002      	add	sp, #8
 800c096:	bd70      	pop	{r4, r5, r6, pc}
 800c098:	ab01      	add	r3, sp, #4
 800c09a:	466a      	mov	r2, sp
 800c09c:	f7ff ffc8 	bl	800c030 <__swhatbuf_r>
 800c0a0:	9900      	ldr	r1, [sp, #0]
 800c0a2:	4605      	mov	r5, r0
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	f7fd fbc7 	bl	8009838 <_malloc_r>
 800c0aa:	b948      	cbnz	r0, 800c0c0 <__smakebuf_r+0x44>
 800c0ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0b0:	059a      	lsls	r2, r3, #22
 800c0b2:	d4ef      	bmi.n	800c094 <__smakebuf_r+0x18>
 800c0b4:	f023 0303 	bic.w	r3, r3, #3
 800c0b8:	f043 0302 	orr.w	r3, r3, #2
 800c0bc:	81a3      	strh	r3, [r4, #12]
 800c0be:	e7e3      	b.n	800c088 <__smakebuf_r+0xc>
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	6020      	str	r0, [r4, #0]
 800c0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0c8:	81a3      	strh	r3, [r4, #12]
 800c0ca:	9b00      	ldr	r3, [sp, #0]
 800c0cc:	6163      	str	r3, [r4, #20]
 800c0ce:	9b01      	ldr	r3, [sp, #4]
 800c0d0:	6120      	str	r0, [r4, #16]
 800c0d2:	b15b      	cbz	r3, 800c0ec <__smakebuf_r+0x70>
 800c0d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f000 f81d 	bl	800c118 <_isatty_r>
 800c0de:	b128      	cbz	r0, 800c0ec <__smakebuf_r+0x70>
 800c0e0:	89a3      	ldrh	r3, [r4, #12]
 800c0e2:	f023 0303 	bic.w	r3, r3, #3
 800c0e6:	f043 0301 	orr.w	r3, r3, #1
 800c0ea:	81a3      	strh	r3, [r4, #12]
 800c0ec:	89a3      	ldrh	r3, [r4, #12]
 800c0ee:	431d      	orrs	r5, r3
 800c0f0:	81a5      	strh	r5, [r4, #12]
 800c0f2:	e7cf      	b.n	800c094 <__smakebuf_r+0x18>

0800c0f4 <_fstat_r>:
 800c0f4:	b538      	push	{r3, r4, r5, lr}
 800c0f6:	4d07      	ldr	r5, [pc, #28]	; (800c114 <_fstat_r+0x20>)
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	4608      	mov	r0, r1
 800c0fe:	4611      	mov	r1, r2
 800c100:	602b      	str	r3, [r5, #0]
 800c102:	f7f5 ffee 	bl	80020e2 <_fstat>
 800c106:	1c43      	adds	r3, r0, #1
 800c108:	d102      	bne.n	800c110 <_fstat_r+0x1c>
 800c10a:	682b      	ldr	r3, [r5, #0]
 800c10c:	b103      	cbz	r3, 800c110 <_fstat_r+0x1c>
 800c10e:	6023      	str	r3, [r4, #0]
 800c110:	bd38      	pop	{r3, r4, r5, pc}
 800c112:	bf00      	nop
 800c114:	20000644 	.word	0x20000644

0800c118 <_isatty_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4d06      	ldr	r5, [pc, #24]	; (800c134 <_isatty_r+0x1c>)
 800c11c:	2300      	movs	r3, #0
 800c11e:	4604      	mov	r4, r0
 800c120:	4608      	mov	r0, r1
 800c122:	602b      	str	r3, [r5, #0]
 800c124:	f7f5 ffed 	bl	8002102 <_isatty>
 800c128:	1c43      	adds	r3, r0, #1
 800c12a:	d102      	bne.n	800c132 <_isatty_r+0x1a>
 800c12c:	682b      	ldr	r3, [r5, #0]
 800c12e:	b103      	cbz	r3, 800c132 <_isatty_r+0x1a>
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	bd38      	pop	{r3, r4, r5, pc}
 800c134:	20000644 	.word	0x20000644

0800c138 <checkint>:
 800c138:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c13c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800c140:	429a      	cmp	r2, r3
 800c142:	b570      	push	{r4, r5, r6, lr}
 800c144:	dd2a      	ble.n	800c19c <checkint+0x64>
 800c146:	f240 4333 	movw	r3, #1075	; 0x433
 800c14a:	429a      	cmp	r2, r3
 800c14c:	dc24      	bgt.n	800c198 <checkint+0x60>
 800c14e:	1a9b      	subs	r3, r3, r2
 800c150:	f1a3 0620 	sub.w	r6, r3, #32
 800c154:	f04f 32ff 	mov.w	r2, #4294967295
 800c158:	fa02 f403 	lsl.w	r4, r2, r3
 800c15c:	fa02 f606 	lsl.w	r6, r2, r6
 800c160:	f1c3 0520 	rsb	r5, r3, #32
 800c164:	fa22 f505 	lsr.w	r5, r2, r5
 800c168:	4334      	orrs	r4, r6
 800c16a:	432c      	orrs	r4, r5
 800c16c:	409a      	lsls	r2, r3
 800c16e:	ea20 0202 	bic.w	r2, r0, r2
 800c172:	ea21 0404 	bic.w	r4, r1, r4
 800c176:	4322      	orrs	r2, r4
 800c178:	f1a3 0420 	sub.w	r4, r3, #32
 800c17c:	f1c3 0220 	rsb	r2, r3, #32
 800c180:	d10c      	bne.n	800c19c <checkint+0x64>
 800c182:	40d8      	lsrs	r0, r3
 800c184:	fa01 f302 	lsl.w	r3, r1, r2
 800c188:	4318      	orrs	r0, r3
 800c18a:	40e1      	lsrs	r1, r4
 800c18c:	4308      	orrs	r0, r1
 800c18e:	f000 0001 	and.w	r0, r0, #1
 800c192:	f1d0 0002 	rsbs	r0, r0, #2
 800c196:	bd70      	pop	{r4, r5, r6, pc}
 800c198:	2002      	movs	r0, #2
 800c19a:	e7fc      	b.n	800c196 <checkint+0x5e>
 800c19c:	2000      	movs	r0, #0
 800c19e:	e7fa      	b.n	800c196 <checkint+0x5e>

0800c1a0 <pow>:
 800c1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a4:	ee10 4a90 	vmov	r4, s1
 800c1a8:	ed2d 8b0a 	vpush	{d8-d12}
 800c1ac:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800c1b0:	ee11 aa90 	vmov	sl, s3
 800c1b4:	f108 32ff 	add.w	r2, r8, #4294967295
 800c1b8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	ee10 5a10 	vmov	r5, s0
 800c1c2:	ee11 0a10 	vmov	r0, s2
 800c1c6:	b087      	sub	sp, #28
 800c1c8:	46c4      	mov	ip, r8
 800c1ca:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800c1ce:	d806      	bhi.n	800c1de <pow+0x3e>
 800c1d0:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800c1d4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800c1d8:	2b7f      	cmp	r3, #127	; 0x7f
 800c1da:	f240 8156 	bls.w	800c48a <pow+0x2ea>
 800c1de:	1802      	adds	r2, r0, r0
 800c1e0:	eb4a 010a 	adc.w	r1, sl, sl
 800c1e4:	f06f 0b01 	mvn.w	fp, #1
 800c1e8:	1e57      	subs	r7, r2, #1
 800c1ea:	f141 33ff 	adc.w	r3, r1, #4294967295
 800c1ee:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 800c1f2:	45bb      	cmp	fp, r7
 800c1f4:	eb7e 0303 	sbcs.w	r3, lr, r3
 800c1f8:	d242      	bcs.n	800c280 <pow+0xe0>
 800c1fa:	ea52 0301 	orrs.w	r3, r2, r1
 800c1fe:	f04f 0300 	mov.w	r3, #0
 800c202:	d10c      	bne.n	800c21e <pow+0x7e>
 800c204:	196d      	adds	r5, r5, r5
 800c206:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800c20a:	4164      	adcs	r4, r4
 800c20c:	42ab      	cmp	r3, r5
 800c20e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c212:	41a3      	sbcs	r3, r4
 800c214:	f0c0 808f 	bcc.w	800c336 <pow+0x196>
 800c218:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c21c:	e02b      	b.n	800c276 <pow+0xd6>
 800c21e:	4ed4      	ldr	r6, [pc, #848]	; (800c570 <pow+0x3d0>)
 800c220:	42b4      	cmp	r4, r6
 800c222:	bf08      	it	eq
 800c224:	429d      	cmpeq	r5, r3
 800c226:	d109      	bne.n	800c23c <pow+0x9c>
 800c228:	1800      	adds	r0, r0, r0
 800c22a:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 800c22e:	eb4a 0a0a 	adc.w	sl, sl, sl
 800c232:	4283      	cmp	r3, r0
 800c234:	4bcf      	ldr	r3, [pc, #828]	; (800c574 <pow+0x3d4>)
 800c236:	eb73 030a 	sbcs.w	r3, r3, sl
 800c23a:	e7eb      	b.n	800c214 <pow+0x74>
 800c23c:	196d      	adds	r5, r5, r5
 800c23e:	48ce      	ldr	r0, [pc, #824]	; (800c578 <pow+0x3d8>)
 800c240:	4164      	adcs	r4, r4
 800c242:	42ab      	cmp	r3, r5
 800c244:	eb70 0604 	sbcs.w	r6, r0, r4
 800c248:	d375      	bcc.n	800c336 <pow+0x196>
 800c24a:	4281      	cmp	r1, r0
 800c24c:	bf08      	it	eq
 800c24e:	429a      	cmpeq	r2, r3
 800c250:	d171      	bne.n	800c336 <pow+0x196>
 800c252:	4aca      	ldr	r2, [pc, #808]	; (800c57c <pow+0x3dc>)
 800c254:	4294      	cmp	r4, r2
 800c256:	bf08      	it	eq
 800c258:	429d      	cmpeq	r5, r3
 800c25a:	d0dd      	beq.n	800c218 <pow+0x78>
 800c25c:	4294      	cmp	r4, r2
 800c25e:	ea6f 0a0a 	mvn.w	sl, sl
 800c262:	bf34      	ite	cc
 800c264:	2400      	movcc	r4, #0
 800c266:	2401      	movcs	r4, #1
 800c268:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800c26c:	4554      	cmp	r4, sl
 800c26e:	f040 81dc 	bne.w	800c62a <pow+0x48a>
 800c272:	ee21 0b01 	vmul.f64	d0, d1, d1
 800c276:	b007      	add	sp, #28
 800c278:	ecbd 8b0a 	vpop	{d8-d12}
 800c27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c280:	196f      	adds	r7, r5, r5
 800c282:	eb44 0904 	adc.w	r9, r4, r4
 800c286:	1e7a      	subs	r2, r7, #1
 800c288:	f169 0300 	sbc.w	r3, r9, #0
 800c28c:	4593      	cmp	fp, r2
 800c28e:	eb7e 0303 	sbcs.w	r3, lr, r3
 800c292:	d225      	bcs.n	800c2e0 <pow+0x140>
 800c294:	ee20 0b00 	vmul.f64	d0, d0, d0
 800c298:	2c00      	cmp	r4, #0
 800c29a:	da13      	bge.n	800c2c4 <pow+0x124>
 800c29c:	4651      	mov	r1, sl
 800c29e:	f7ff ff4b 	bl	800c138 <checkint>
 800c2a2:	2801      	cmp	r0, #1
 800c2a4:	d10e      	bne.n	800c2c4 <pow+0x124>
 800c2a6:	eeb1 0b40 	vneg.f64	d0, d0
 800c2aa:	ea57 0909 	orrs.w	r9, r7, r9
 800c2ae:	d10b      	bne.n	800c2c8 <pow+0x128>
 800c2b0:	f1ba 0f00 	cmp.w	sl, #0
 800c2b4:	dadf      	bge.n	800c276 <pow+0xd6>
 800c2b6:	b007      	add	sp, #28
 800c2b8:	ecbd 8b0a 	vpop	{d8-d12}
 800c2bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c0:	f000 b9ea 	b.w	800c698 <__math_divzero>
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	e7f0      	b.n	800c2aa <pow+0x10a>
 800c2c8:	f1ba 0f00 	cmp.w	sl, #0
 800c2cc:	dad3      	bge.n	800c276 <pow+0xd6>
 800c2ce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c2d2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800c2d6:	ed8d 7b00 	vstr	d7, [sp]
 800c2da:	ed9d 0b00 	vldr	d0, [sp]
 800c2de:	e7ca      	b.n	800c276 <pow+0xd6>
 800c2e0:	2c00      	cmp	r4, #0
 800c2e2:	da2b      	bge.n	800c33c <pow+0x19c>
 800c2e4:	4651      	mov	r1, sl
 800c2e6:	f7ff ff27 	bl	800c138 <checkint>
 800c2ea:	b930      	cbnz	r0, 800c2fa <pow+0x15a>
 800c2ec:	b007      	add	sp, #28
 800c2ee:	ecbd 8b0a 	vpop	{d8-d12}
 800c2f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f6:	f000 b9e7 	b.w	800c6c8 <__math_invalid>
 800c2fa:	1e41      	subs	r1, r0, #1
 800c2fc:	4248      	negs	r0, r1
 800c2fe:	4148      	adcs	r0, r1
 800c300:	0480      	lsls	r0, r0, #18
 800c302:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c306:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800c30a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800c30e:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800c312:	2b7f      	cmp	r3, #127	; 0x7f
 800c314:	d92d      	bls.n	800c372 <pow+0x1d2>
 800c316:	4b96      	ldr	r3, [pc, #600]	; (800c570 <pow+0x3d0>)
 800c318:	2000      	movs	r0, #0
 800c31a:	429c      	cmp	r4, r3
 800c31c:	bf08      	it	eq
 800c31e:	4285      	cmpeq	r5, r0
 800c320:	f43f af7a 	beq.w	800c218 <pow+0x78>
 800c324:	f240 31bd 	movw	r1, #957	; 0x3bd
 800c328:	428a      	cmp	r2, r1
 800c32a:	d80c      	bhi.n	800c346 <pow+0x1a6>
 800c32c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c330:	42a8      	cmp	r0, r5
 800c332:	41a3      	sbcs	r3, r4
 800c334:	d204      	bcs.n	800c340 <pow+0x1a0>
 800c336:	ee31 0b00 	vadd.f64	d0, d1, d0
 800c33a:	e79c      	b.n	800c276 <pow+0xd6>
 800c33c:	2000      	movs	r0, #0
 800c33e:	e7e4      	b.n	800c30a <pow+0x16a>
 800c340:	ee30 0b41 	vsub.f64	d0, d0, d1
 800c344:	e797      	b.n	800c276 <pow+0xd6>
 800c346:	2d01      	cmp	r5, #1
 800c348:	eb74 0303 	sbcs.w	r3, r4, r3
 800c34c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c350:	bf34      	ite	cc
 800c352:	2301      	movcc	r3, #1
 800c354:	2300      	movcs	r3, #0
 800c356:	4296      	cmp	r6, r2
 800c358:	bf8c      	ite	hi
 800c35a:	2600      	movhi	r6, #0
 800c35c:	2601      	movls	r6, #1
 800c35e:	42b3      	cmp	r3, r6
 800c360:	f000 809b 	beq.w	800c49a <pow+0x2fa>
 800c364:	b007      	add	sp, #28
 800c366:	ecbd 8b0a 	vpop	{d8-d12}
 800c36a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36e:	f000 b98b 	b.w	800c688 <__math_oflow>
 800c372:	f1bc 0f00 	cmp.w	ip, #0
 800c376:	d10b      	bne.n	800c390 <pow+0x1f0>
 800c378:	ed9f 7b79 	vldr	d7, [pc, #484]	; 800c560 <pow+0x3c0>
 800c37c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c380:	ec53 2b17 	vmov	r2, r3, d7
 800c384:	ee17 5a10 	vmov	r5, s14
 800c388:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c38c:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800c390:	4b7b      	ldr	r3, [pc, #492]	; (800c580 <pow+0x3e0>)
 800c392:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c396:	4423      	add	r3, r4
 800c398:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800c39c:	1519      	asrs	r1, r3, #20
 800c39e:	0d1b      	lsrs	r3, r3, #20
 800c3a0:	051b      	lsls	r3, r3, #20
 800c3a2:	1ae7      	subs	r7, r4, r3
 800c3a4:	4b77      	ldr	r3, [pc, #476]	; (800c584 <pow+0x3e4>)
 800c3a6:	ee03 1a10 	vmov	s6, r1
 800c3aa:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800c3ae:	1e2e      	subs	r6, r5, #0
 800c3b0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800c3b4:	ec47 6b15 	vmov	d5, r6, r7
 800c3b8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800c3bc:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c3c0:	ed93 7b00 	vldr	d7, [r3]
 800c3c4:	ed93 5b02 	vldr	d5, [r3, #8]
 800c3c8:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800c3cc:	eea3 2b07 	vfma.f64	d2, d3, d7
 800c3d0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800c3d4:	ee36 4b02 	vadd.f64	d4, d6, d2
 800c3d8:	ee32 2b44 	vsub.f64	d2, d2, d4
 800c3dc:	eea3 7b05 	vfma.f64	d7, d3, d5
 800c3e0:	ed93 5b04 	vldr	d5, [r3, #16]
 800c3e4:	ee32 2b06 	vadd.f64	d2, d2, d6
 800c3e8:	ee37 7b02 	vadd.f64	d7, d7, d2
 800c3ec:	ee26 5b05 	vmul.f64	d5, d6, d5
 800c3f0:	ee26 0b05 	vmul.f64	d0, d6, d5
 800c3f4:	ee34 8b00 	vadd.f64	d8, d4, d0
 800c3f8:	eeb0 9b40 	vmov.f64	d9, d0
 800c3fc:	ee34 4b48 	vsub.f64	d4, d4, d8
 800c400:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800c404:	ee34 ab00 	vadd.f64	d10, d4, d0
 800c408:	ed93 5b06 	vldr	d5, [r3, #24]
 800c40c:	ee26 bb00 	vmul.f64	d11, d6, d0
 800c410:	ee37 7b09 	vadd.f64	d7, d7, d9
 800c414:	ed93 4b08 	vldr	d4, [r3, #32]
 800c418:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800c41c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800c420:	eea6 5b04 	vfma.f64	d5, d6, d4
 800c424:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800c428:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800c42c:	eea6 4b03 	vfma.f64	d4, d6, d3
 800c430:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800c434:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800c438:	eea0 4b03 	vfma.f64	d4, d0, d3
 800c43c:	eea0 5b04 	vfma.f64	d5, d0, d4
 800c440:	eeab 7b05 	vfma.f64	d7, d11, d5
 800c444:	ee38 4b07 	vadd.f64	d4, d8, d7
 800c448:	ee21 6b04 	vmul.f64	d6, d1, d4
 800c44c:	ee16 3a90 	vmov	r3, s13
 800c450:	eeb0 5b46 	vmov.f64	d5, d6
 800c454:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800c458:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800c45c:	18b2      	adds	r2, r6, r2
 800c45e:	2a3e      	cmp	r2, #62	; 0x3e
 800c460:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800c464:	ee38 8b44 	vsub.f64	d8, d8, d4
 800c468:	ee38 8b07 	vadd.f64	d8, d8, d7
 800c46c:	eea1 5b08 	vfma.f64	d5, d1, d8
 800c470:	d91b      	bls.n	800c4aa <pow+0x30a>
 800c472:	2a00      	cmp	r2, #0
 800c474:	da0b      	bge.n	800c48e <pow+0x2ee>
 800c476:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c47a:	ee36 0b00 	vadd.f64	d0, d6, d0
 800c47e:	2800      	cmp	r0, #0
 800c480:	f43f aef9 	beq.w	800c276 <pow+0xd6>
 800c484:	eeb1 0b40 	vneg.f64	d0, d0
 800c488:	e6f5      	b.n	800c276 <pow+0xd6>
 800c48a:	2000      	movs	r0, #0
 800c48c:	e780      	b.n	800c390 <pow+0x1f0>
 800c48e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800c492:	d909      	bls.n	800c4a8 <pow+0x308>
 800c494:	2b00      	cmp	r3, #0
 800c496:	f6bf af65 	bge.w	800c364 <pow+0x1c4>
 800c49a:	b007      	add	sp, #28
 800c49c:	ecbd 8b0a 	vpop	{d8-d12}
 800c4a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a4:	f000 b8e8 	b.w	800c678 <__math_uflow>
 800c4a8:	2600      	movs	r6, #0
 800c4aa:	4937      	ldr	r1, [pc, #220]	; (800c588 <pow+0x3e8>)
 800c4ac:	ed91 4b02 	vldr	d4, [r1, #8]
 800c4b0:	ed91 3b00 	vldr	d3, [r1]
 800c4b4:	eeb0 7b44 	vmov.f64	d7, d4
 800c4b8:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c4bc:	ee17 5a10 	vmov	r5, s14
 800c4c0:	ee37 7b44 	vsub.f64	d7, d7, d4
 800c4c4:	ed91 4b04 	vldr	d4, [r1, #16]
 800c4c8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800c4cc:	eea7 6b04 	vfma.f64	d6, d7, d4
 800c4d0:	ed91 4b06 	vldr	d4, [r1, #24]
 800c4d4:	18dc      	adds	r4, r3, r3
 800c4d6:	f104 030f 	add.w	r3, r4, #15
 800c4da:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800c4de:	eea7 6b04 	vfma.f64	d6, d7, d4
 800c4e2:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 800c4e6:	ee35 5b06 	vadd.f64	d5, d5, d6
 800c4ea:	ee25 6b05 	vmul.f64	d6, d5, d5
 800c4ee:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800c4f2:	ed91 4b08 	vldr	d4, [r1, #32]
 800c4f6:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c4fa:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800c4fe:	eea5 4b03 	vfma.f64	d4, d5, d3
 800c502:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 800c506:	eea6 7b04 	vfma.f64	d7, d6, d4
 800c50a:	ee26 6b06 	vmul.f64	d6, d6, d6
 800c50e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 800c512:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800c516:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800c51a:	eea5 4b03 	vfma.f64	d4, d5, d3
 800c51e:	1940      	adds	r0, r0, r5
 800c520:	2700      	movs	r7, #0
 800c522:	eb17 020c 	adds.w	r2, r7, ip
 800c526:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800c52a:	eea6 7b04 	vfma.f64	d7, d6, d4
 800c52e:	2e00      	cmp	r6, #0
 800c530:	d176      	bne.n	800c620 <pow+0x480>
 800c532:	42bd      	cmp	r5, r7
 800c534:	db2a      	blt.n	800c58c <pow+0x3ec>
 800c536:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800c53a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800c53e:	4610      	mov	r0, r2
 800c540:	ec41 0b10 	vmov	d0, r0, r1
 800c544:	eea7 0b00 	vfma.f64	d0, d7, d0
 800c548:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800c568 <pow+0x3c8>
 800c54c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c550:	b007      	add	sp, #28
 800c552:	ecbd 8b0a 	vpop	{d8-d12}
 800c556:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c55a:	f000 b8cd 	b.w	800c6f8 <__math_check_oflow>
 800c55e:	bf00      	nop
 800c560:	00000000 	.word	0x00000000
 800c564:	43300000 	.word	0x43300000
 800c568:	00000000 	.word	0x00000000
 800c56c:	7f000000 	.word	0x7f000000
 800c570:	3ff00000 	.word	0x3ff00000
 800c574:	fff00000 	.word	0xfff00000
 800c578:	ffe00000 	.word	0xffe00000
 800c57c:	7fe00000 	.word	0x7fe00000
 800c580:	c0196aab 	.word	0xc0196aab
 800c584:	0800d048 	.word	0x0800d048
 800c588:	0800e090 	.word	0x0800e090
 800c58c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c590:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800c594:	4610      	mov	r0, r2
 800c596:	ec41 0b15 	vmov	d5, r0, r1
 800c59a:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 800c59e:	ee27 6b05 	vmul.f64	d6, d7, d5
 800c5a2:	ee35 7b06 	vadd.f64	d7, d5, d6
 800c5a6:	eeb0 4bc7 	vabs.f64	d4, d7
 800c5aa:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800c5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800c630 <pow+0x490>
 800c5b6:	d52a      	bpl.n	800c60e <pow+0x46e>
 800c5b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c5bc:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c4:	ee35 5b06 	vadd.f64	d5, d5, d6
 800c5c8:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800c5cc:	bf58      	it	pl
 800c5ce:	eeb0 4b43 	vmovpl.f64	d4, d3
 800c5d2:	ee37 3b04 	vadd.f64	d3, d7, d4
 800c5d6:	ee34 6b43 	vsub.f64	d6, d4, d3
 800c5da:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c5de:	ee36 6b05 	vadd.f64	d6, d6, d5
 800c5e2:	ee36 6b03 	vadd.f64	d6, d6, d3
 800c5e6:	ee36 7b44 	vsub.f64	d7, d6, d4
 800c5ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5f2:	d104      	bne.n	800c5fe <pow+0x45e>
 800c5f4:	4632      	mov	r2, r6
 800c5f6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c5fa:	ec43 2b17 	vmov	d7, r2, r3
 800c5fe:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c602:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c606:	ee26 6b00 	vmul.f64	d6, d6, d0
 800c60a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c60e:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c612:	b007      	add	sp, #28
 800c614:	ecbd 8b0a 	vpop	{d8-d12}
 800c618:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	f000 b863 	b.w	800c6e6 <__math_check_uflow>
 800c620:	ec43 2b10 	vmov	d0, r2, r3
 800c624:	eea7 0b00 	vfma.f64	d0, d7, d0
 800c628:	e625      	b.n	800c276 <pow+0xd6>
 800c62a:	ed9f 0b03 	vldr	d0, [pc, #12]	; 800c638 <pow+0x498>
 800c62e:	e622      	b.n	800c276 <pow+0xd6>
 800c630:	00000000 	.word	0x00000000
 800c634:	00100000 	.word	0x00100000
	...

0800c640 <with_errno>:
 800c640:	b513      	push	{r0, r1, r4, lr}
 800c642:	4604      	mov	r4, r0
 800c644:	ed8d 0b00 	vstr	d0, [sp]
 800c648:	f7fc fa58 	bl	8008afc <__errno>
 800c64c:	ed9d 0b00 	vldr	d0, [sp]
 800c650:	6004      	str	r4, [r0, #0]
 800c652:	b002      	add	sp, #8
 800c654:	bd10      	pop	{r4, pc}

0800c656 <xflow>:
 800c656:	b082      	sub	sp, #8
 800c658:	b158      	cbz	r0, 800c672 <xflow+0x1c>
 800c65a:	eeb1 7b40 	vneg.f64	d7, d0
 800c65e:	ed8d 7b00 	vstr	d7, [sp]
 800c662:	ed9d 7b00 	vldr	d7, [sp]
 800c666:	2022      	movs	r0, #34	; 0x22
 800c668:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c66c:	b002      	add	sp, #8
 800c66e:	f7ff bfe7 	b.w	800c640 <with_errno>
 800c672:	eeb0 7b40 	vmov.f64	d7, d0
 800c676:	e7f2      	b.n	800c65e <xflow+0x8>

0800c678 <__math_uflow>:
 800c678:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c680 <__math_uflow+0x8>
 800c67c:	f7ff bfeb 	b.w	800c656 <xflow>
 800c680:	00000000 	.word	0x00000000
 800c684:	10000000 	.word	0x10000000

0800c688 <__math_oflow>:
 800c688:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c690 <__math_oflow+0x8>
 800c68c:	f7ff bfe3 	b.w	800c656 <xflow>
 800c690:	00000000 	.word	0x00000000
 800c694:	70000000 	.word	0x70000000

0800c698 <__math_divzero>:
 800c698:	b082      	sub	sp, #8
 800c69a:	2800      	cmp	r0, #0
 800c69c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c6a0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800c6a4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800c6a8:	ed8d 7b00 	vstr	d7, [sp]
 800c6ac:	ed9d 0b00 	vldr	d0, [sp]
 800c6b0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800c6c0 <__math_divzero+0x28>
 800c6b4:	2022      	movs	r0, #34	; 0x22
 800c6b6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800c6ba:	b002      	add	sp, #8
 800c6bc:	f7ff bfc0 	b.w	800c640 <with_errno>
	...

0800c6c8 <__math_invalid>:
 800c6c8:	eeb0 7b40 	vmov.f64	d7, d0
 800c6cc:	eeb4 7b47 	vcmp.f64	d7, d7
 800c6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6d4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800c6d8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800c6dc:	d602      	bvs.n	800c6e4 <__math_invalid+0x1c>
 800c6de:	2021      	movs	r0, #33	; 0x21
 800c6e0:	f7ff bfae 	b.w	800c640 <with_errno>
 800c6e4:	4770      	bx	lr

0800c6e6 <__math_check_uflow>:
 800c6e6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ee:	d102      	bne.n	800c6f6 <__math_check_uflow+0x10>
 800c6f0:	2022      	movs	r0, #34	; 0x22
 800c6f2:	f7ff bfa5 	b.w	800c640 <with_errno>
 800c6f6:	4770      	bx	lr

0800c6f8 <__math_check_oflow>:
 800c6f8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800c718 <__math_check_oflow+0x20>
 800c6fc:	eeb0 7bc0 	vabs.f64	d7, d0
 800c700:	eeb4 7b46 	vcmp.f64	d7, d6
 800c704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c708:	dd02      	ble.n	800c710 <__math_check_oflow+0x18>
 800c70a:	2022      	movs	r0, #34	; 0x22
 800c70c:	f7ff bf98 	b.w	800c640 <with_errno>
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	f3af 8000 	nop.w
 800c718:	ffffffff 	.word	0xffffffff
 800c71c:	7fefffff 	.word	0x7fefffff

0800c720 <_init>:
 800c720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c722:	bf00      	nop
 800c724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c726:	bc08      	pop	{r3}
 800c728:	469e      	mov	lr, r3
 800c72a:	4770      	bx	lr

0800c72c <_fini>:
 800c72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c72e:	bf00      	nop
 800c730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c732:	bc08      	pop	{r3}
 800c734:	469e      	mov	lr, r3
 800c736:	4770      	bx	lr
