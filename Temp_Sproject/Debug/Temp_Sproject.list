
Temp_Sproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008668  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08008868  08008868  00018868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ca0  08008ca0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008ca0  08008ca0  00018ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ca8  08008ca8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001ec  08008e9c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08008e9c  00020430  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a27a  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ba  00000000  00000000  0002a4d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002c598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000751  00000000  00000000  0002cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028fd6  00000000  00000000  0002d6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cea0  00000000  00000000  0005669f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5c29  00000000  00000000  0006353f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003988  00000000  00000000  00159168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0015caf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ec 	.word	0x200001ec
 800021c:	00000000 	.word	0x00000000
 8000220:	08008850 	.word	0x08008850

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f0 	.word	0x200001f0
 800023c:	08008850 	.word	0x08008850

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <SELECT>:
/***************************************
 * SPI functions
 **************************************/
/* slave select */
static void SELECT(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2110      	movs	r1, #16
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <SELECT+0x18>)
 80009de:	f002 f8df 	bl	8002ba0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f001 f9e0 	bl	8001da8 <HAL_Delay>
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40020000 	.word	0x40020000

080009f0 <DESELECT>:
/* slave deselect */
static void DESELECT(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2110      	movs	r1, #16
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <DESELECT+0x18>)
 80009fa:	f002 f8d1 	bl	8002ba0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f001 f9d2 	bl	8001da8 <HAL_Delay>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40020000 	.word	0x40020000

08000a0c <SPI_TxByte>:
/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a16:	bf00      	nop
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <SPI_TxByte+0x30>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d1f8      	bne.n	8000a18 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000a26:	1df9      	adds	r1, r7, #7
 8000a28:	2364      	movs	r3, #100	; 0x64
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <SPI_TxByte+0x30>)
 8000a2e:	f002 fe6c 	bl	800370a <HAL_SPI_Transmit>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000258 	.word	0x20000258

08000a40 <SPI_TxBuffer>:
/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a4c:	bf00      	nop
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <SPI_TxBuffer+0x30>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d1f8      	bne.n	8000a4e <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000a5c:	887a      	ldrh	r2, [r7, #2]
 8000a5e:	2364      	movs	r3, #100	; 0x64
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	4803      	ldr	r0, [pc, #12]	; (8000a70 <SPI_TxBuffer+0x30>)
 8000a64:	f002 fe51 	bl	800370a <HAL_SPI_Transmit>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000258 	.word	0x20000258

08000a74 <SPI_RxByte>:
/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000a7a:	23ff      	movs	r3, #255	; 0xff
 8000a7c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a7e:	bf00      	nop
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <SPI_RxByte+0x34>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d1f8      	bne.n	8000a80 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000a8e:	1dba      	adds	r2, r7, #6
 8000a90:	1df9      	adds	r1, r7, #7
 8000a92:	2364      	movs	r3, #100	; 0x64
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2301      	movs	r3, #1
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <SPI_RxByte+0x34>)
 8000a9a:	f002 ffa4 	bl	80039e6 <HAL_SPI_TransmitReceive>
  return data;
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000258 	.word	0x20000258

08000aac <SPI_RxBytePtr>:
/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000ab4:	f7ff ffde 	bl	8000a74 <SPI_RxByte>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	701a      	strb	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/
/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <SD_ReadyWait+0x30>)
 8000ad0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ad4:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000ad6:	f7ff ffcd 	bl	8000a74 <SPI_RxByte>
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2bff      	cmp	r3, #255	; 0xff
 8000ae2:	d003      	beq.n	8000aec <SD_ReadyWait+0x24>
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SD_ReadyWait+0x30>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1f4      	bne.n	8000ad6 <SD_ReadyWait+0xe>
  return res;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000020a 	.word	0x2000020a

08000afc <SD_PowerOn>:
/* power on */
static void SD_PowerOn(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8000b02:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000b06:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8000b08:	f7ff ff72 	bl	80009f0 <DESELECT>
  for(int i = 0; i < 10; i++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	e005      	b.n	8000b1e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000b12:	20ff      	movs	r0, #255	; 0xff
 8000b14:	f7ff ff7a 	bl	8000a0c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	2b09      	cmp	r3, #9
 8000b22:	ddf6      	ble.n	8000b12 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8000b24:	f7ff ff56 	bl	80009d4 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000b28:	2340      	movs	r3, #64	; 0x40
 8000b2a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000b3c:	2395      	movs	r3, #149	; 0x95
 8000b3e:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8000b40:	463b      	mov	r3, r7
 8000b42:	2106      	movs	r1, #6
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff7b 	bl	8000a40 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8000b4a:	e002      	b.n	8000b52 <SD_PowerOn+0x56>
  {
    cnt--;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000b52:	f7ff ff8f 	bl	8000a74 <SPI_RxByte>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d002      	beq.n	8000b62 <SD_PowerOn+0x66>
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1f4      	bne.n	8000b4c <SD_PowerOn+0x50>
  }
  DESELECT();
 8000b62:	f7ff ff45 	bl	80009f0 <DESELECT>
  SPI_TxByte(0XFF);
 8000b66:	20ff      	movs	r0, #255	; 0xff
 8000b68:	f7ff ff50 	bl	8000a0c <SPI_TxByte>
  PowerFlag = 1;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <SD_PowerOn+0x80>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000020d 	.word	0x2000020d

08000b80 <SD_PowerOff>:
/* power off */
static void SD_PowerOff(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <SD_PowerOff+0x14>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	2000020d 	.word	0x2000020d

08000b98 <SD_CheckPower>:
/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <SD_CheckPower+0x14>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	2000020d 	.word	0x2000020d

08000bb0 <SD_RxDataBlock>:
/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <SD_RxDataBlock+0x58>)
 8000bbc:	22c8      	movs	r2, #200	; 0xc8
 8000bbe:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000bc0:	f7ff ff58 	bl	8000a74 <SPI_RxByte>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2bff      	cmp	r3, #255	; 0xff
 8000bcc:	d103      	bne.n	8000bd6 <SD_RxDataBlock+0x26>
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <SD_RxDataBlock+0x58>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f4      	bne.n	8000bc0 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	2bfe      	cmp	r3, #254	; 0xfe
 8000bda:	d001      	beq.n	8000be0 <SD_RxDataBlock+0x30>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e00f      	b.n	8000c00 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff60 	bl	8000aac <SPI_RxBytePtr>
  } while(len--);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	1e5a      	subs	r2, r3, #1
 8000bf0:	603a      	str	r2, [r7, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1f4      	bne.n	8000be0 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8000bf6:	f7ff ff3d 	bl	8000a74 <SPI_RxByte>
  SPI_RxByte();
 8000bfa:	f7ff ff3b 	bl	8000a74 <SPI_RxByte>
  return TRUE;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000208 	.word	0x20000208

08000c0c <SD_TxDataBlock>:
/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000c1c:	f7ff ff54 	bl	8000ac8 <SD_ReadyWait>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2bff      	cmp	r3, #255	; 0xff
 8000c24:	d001      	beq.n	8000c2a <SD_TxDataBlock+0x1e>
 8000c26:	2300      	movs	r3, #0
 8000c28:	e02f      	b.n	8000c8a <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8000c2a:	78fb      	ldrb	r3, [r7, #3]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff feed 	bl	8000a0c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	2bfd      	cmp	r3, #253	; 0xfd
 8000c36:	d020      	beq.n	8000c7a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000c38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff feff 	bl	8000a40 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8000c42:	f7ff ff17 	bl	8000a74 <SPI_RxByte>
    SPI_RxByte();
 8000c46:	f7ff ff15 	bl	8000a74 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8000c4a:	e00b      	b.n	8000c64 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000c4c:	f7ff ff12 	bl	8000a74 <SPI_RxByte>
 8000c50:	4603      	mov	r3, r0
 8000c52:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	f003 031f 	and.w	r3, r3, #31
 8000c5a:	2b05      	cmp	r3, #5
 8000c5c:	d006      	beq.n	8000c6c <SD_TxDataBlock+0x60>
      i++;
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	3301      	adds	r3, #1
 8000c62:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	2b40      	cmp	r3, #64	; 0x40
 8000c68:	d9f0      	bls.n	8000c4c <SD_TxDataBlock+0x40>
 8000c6a:	e000      	b.n	8000c6e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000c6c:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8000c6e:	bf00      	nop
 8000c70:	f7ff ff00 	bl	8000a74 <SPI_RxByte>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0fa      	beq.n	8000c70 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	f003 031f 	and.w	r3, r3, #31
 8000c80:	2b05      	cmp	r3, #5
 8000c82:	d101      	bne.n	8000c88 <SD_TxDataBlock+0x7c>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <SD_TxDataBlock+0x7e>
  return FALSE;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <SD_SendCmd>:
#endif /* _USE_WRITE */
/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b084      	sub	sp, #16
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	6039      	str	r1, [r7, #0]
 8000c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000c9e:	f7ff ff13 	bl	8000ac8 <SD_ReadyWait>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2bff      	cmp	r3, #255	; 0xff
 8000ca6:	d001      	beq.n	8000cac <SD_SendCmd+0x1a>
 8000ca8:	23ff      	movs	r3, #255	; 0xff
 8000caa:	e042      	b.n	8000d32 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff feac 	bl	8000a0c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	0e1b      	lsrs	r3, r3, #24
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fea6 	bl	8000a0c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	0c1b      	lsrs	r3, r3, #16
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fea0 	bl	8000a0c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	0a1b      	lsrs	r3, r3, #8
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fe9a 	bl	8000a0c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fe95 	bl	8000a0c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b40      	cmp	r3, #64	; 0x40
 8000ce6:	d102      	bne.n	8000cee <SD_SendCmd+0x5c>
 8000ce8:	2395      	movs	r3, #149	; 0x95
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e007      	b.n	8000cfe <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b48      	cmp	r3, #72	; 0x48
 8000cf2:	d102      	bne.n	8000cfa <SD_SendCmd+0x68>
 8000cf4:	2387      	movs	r3, #135	; 0x87
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e001      	b.n	8000cfe <SD_SendCmd+0x6c>
  else crc = 1;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fe83 	bl	8000a0c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b4c      	cmp	r3, #76	; 0x4c
 8000d0a:	d101      	bne.n	8000d10 <SD_SendCmd+0x7e>
 8000d0c:	f7ff feb2 	bl	8000a74 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8000d10:	230a      	movs	r3, #10
 8000d12:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000d14:	f7ff feae 	bl	8000a74 <SPI_RxByte>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000d1c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	da05      	bge.n	8000d30 <SD_SendCmd+0x9e>
 8000d24:	7bbb      	ldrb	r3, [r7, #14]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	73bb      	strb	r3, [r7, #14]
 8000d2a:	7bbb      	ldrb	r3, [r7, #14]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1f1      	bne.n	8000d14 <SD_SendCmd+0x82>
  return res;
 8000d30:	7b7b      	ldrb	r3, [r7, #13]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SD_disk_initialize+0x14>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e0d1      	b.n	8000ef4 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000d50:	4b6a      	ldr	r3, [pc, #424]	; (8000efc <SD_disk_initialize+0x1c0>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <SD_disk_initialize+0x2a>
 8000d5e:	4b67      	ldr	r3, [pc, #412]	; (8000efc <SD_disk_initialize+0x1c0>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	e0c6      	b.n	8000ef4 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8000d66:	f7ff fec9 	bl	8000afc <SD_PowerOn>
  /* slave select */
  SELECT();
 8000d6a:	f7ff fe33 	bl	80009d4 <SELECT>
  /* check disk type */
  type = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000d72:	2100      	movs	r1, #0
 8000d74:	2040      	movs	r0, #64	; 0x40
 8000d76:	f7ff ff8c 	bl	8000c92 <SD_SendCmd>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	f040 80a1 	bne.w	8000ec4 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000d82:	4b5f      	ldr	r3, [pc, #380]	; (8000f00 <SD_disk_initialize+0x1c4>)
 8000d84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d88:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000d8a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000d8e:	2048      	movs	r0, #72	; 0x48
 8000d90:	f7ff ff7f 	bl	8000c92 <SD_SendCmd>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d155      	bne.n	8000e46 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]
 8000d9e:	e00c      	b.n	8000dba <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000da0:	7bfc      	ldrb	r4, [r7, #15]
 8000da2:	f7ff fe67 	bl	8000a74 <SPI_RxByte>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	f104 0310 	add.w	r3, r4, #16
 8000dae:	443b      	add	r3, r7
 8000db0:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	3301      	adds	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d9ef      	bls.n	8000da0 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000dc0:	7abb      	ldrb	r3, [r7, #10]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d17e      	bne.n	8000ec4 <SD_disk_initialize+0x188>
 8000dc6:	7afb      	ldrb	r3, [r7, #11]
 8000dc8:	2baa      	cmp	r3, #170	; 0xaa
 8000dca:	d17b      	bne.n	8000ec4 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2077      	movs	r0, #119	; 0x77
 8000dd0:	f7ff ff5f 	bl	8000c92 <SD_SendCmd>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d807      	bhi.n	8000dea <SD_disk_initialize+0xae>
 8000dda:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000dde:	2069      	movs	r0, #105	; 0x69
 8000de0:	f7ff ff57 	bl	8000c92 <SD_SendCmd>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d004      	beq.n	8000df4 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000dea:	4b45      	ldr	r3, [pc, #276]	; (8000f00 <SD_disk_initialize+0x1c4>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1ec      	bne.n	8000dcc <SD_disk_initialize+0x90>
 8000df2:	e000      	b.n	8000df6 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000df4:	bf00      	nop
        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000df6:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <SD_disk_initialize+0x1c4>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d062      	beq.n	8000ec4 <SD_disk_initialize+0x188>
 8000dfe:	2100      	movs	r1, #0
 8000e00:	207a      	movs	r0, #122	; 0x7a
 8000e02:	f7ff ff46 	bl	8000c92 <SD_SendCmd>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d15b      	bne.n	8000ec4 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	e00c      	b.n	8000e2c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8000e12:	7bfc      	ldrb	r4, [r7, #15]
 8000e14:	f7ff fe2e 	bl	8000a74 <SPI_RxByte>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	f104 0310 	add.w	r3, r4, #16
 8000e20:	443b      	add	r3, r7
 8000e22:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d9ef      	bls.n	8000e12 <SD_disk_initialize+0xd6>
          }
          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000e32:	7a3b      	ldrb	r3, [r7, #8]
 8000e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SD_disk_initialize+0x104>
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	e000      	b.n	8000e42 <SD_disk_initialize+0x106>
 8000e40:	2304      	movs	r3, #4
 8000e42:	73bb      	strb	r3, [r7, #14]
 8000e44:	e03e      	b.n	8000ec4 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000e46:	2100      	movs	r1, #0
 8000e48:	2077      	movs	r0, #119	; 0x77
 8000e4a:	f7ff ff22 	bl	8000c92 <SD_SendCmd>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d808      	bhi.n	8000e66 <SD_disk_initialize+0x12a>
 8000e54:	2100      	movs	r1, #0
 8000e56:	2069      	movs	r0, #105	; 0x69
 8000e58:	f7ff ff1b 	bl	8000c92 <SD_SendCmd>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d801      	bhi.n	8000e66 <SD_disk_initialize+0x12a>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e000      	b.n	8000e68 <SD_disk_initialize+0x12c>
 8000e66:	2301      	movs	r3, #1
 8000e68:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8000e6a:	7bbb      	ldrb	r3, [r7, #14]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d10e      	bne.n	8000e8e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000e70:	2100      	movs	r1, #0
 8000e72:	2077      	movs	r0, #119	; 0x77
 8000e74:	f7ff ff0d 	bl	8000c92 <SD_SendCmd>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d80e      	bhi.n	8000e9c <SD_disk_initialize+0x160>
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2069      	movs	r0, #105	; 0x69
 8000e82:	f7ff ff06 	bl	8000c92 <SD_SendCmd>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d107      	bne.n	8000e9c <SD_disk_initialize+0x160>
 8000e8c:	e00c      	b.n	8000ea8 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2041      	movs	r0, #65	; 0x41
 8000e92:	f7ff fefe 	bl	8000c92 <SD_SendCmd>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d004      	beq.n	8000ea6 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <SD_disk_initialize+0x1c4>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1e2      	bne.n	8000e6a <SD_disk_initialize+0x12e>
 8000ea4:	e000      	b.n	8000ea8 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000ea6:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <SD_disk_initialize+0x1c4>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d007      	beq.n	8000ec0 <SD_disk_initialize+0x184>
 8000eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb4:	2050      	movs	r0, #80	; 0x50
 8000eb6:	f7ff feec 	bl	8000c92 <SD_SendCmd>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SD_disk_initialize+0x188>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8000ec4:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <SD_disk_initialize+0x1c8>)
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8000eca:	f7ff fd91 	bl	80009f0 <DESELECT>
  SPI_RxByte();
 8000ece:	f7ff fdd1 	bl	8000a74 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d008      	beq.n	8000eea <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <SD_disk_initialize+0x1c0>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SD_disk_initialize+0x1c0>)
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	e001      	b.n	8000eee <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000eea:	f7ff fe49 	bl	8000b80 <SD_PowerOff>
  }
  return Stat;
 8000eee:	4b03      	ldr	r3, [pc, #12]	; (8000efc <SD_disk_initialize+0x1c0>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b2db      	uxtb	r3, r3
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd90      	pop	{r4, r7, pc}
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000208 	.word	0x20000208
 8000f04:	2000020c 	.word	0x2000020c

08000f08 <SD_disk_status>:
/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SD_disk_status+0x14>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e002      	b.n	8000f22 <SD_disk_status+0x1a>
  return Stat;
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SD_disk_status+0x28>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000000 	.word	0x20000000

08000f34 <SD_disk_read>:
/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <SD_disk_read+0x1c>
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <SD_disk_read+0x20>
 8000f50:	2304      	movs	r3, #4
 8000f52:	e051      	b.n	8000ff8 <SD_disk_read+0xc4>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f54:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <SD_disk_read+0xcc>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SD_disk_read+0x32>
 8000f62:	2303      	movs	r3, #3
 8000f64:	e048      	b.n	8000ff8 <SD_disk_read+0xc4>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <SD_disk_read+0xd0>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d102      	bne.n	8000f78 <SD_disk_read+0x44>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	025b      	lsls	r3, r3, #9
 8000f76:	607b      	str	r3, [r7, #4]
  SELECT();
 8000f78:	f7ff fd2c 	bl	80009d4 <SELECT>
  if (count == 1)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d111      	bne.n	8000fa6 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	2051      	movs	r0, #81	; 0x51
 8000f86:	f7ff fe84 	bl	8000c92 <SD_SendCmd>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d129      	bne.n	8000fe4 <SD_disk_read+0xb0>
 8000f90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f94:	68b8      	ldr	r0, [r7, #8]
 8000f96:	f7ff fe0b 	bl	8000bb0 <SD_RxDataBlock>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d021      	beq.n	8000fe4 <SD_disk_read+0xb0>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	e01e      	b.n	8000fe4 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	2052      	movs	r0, #82	; 0x52
 8000faa:	f7ff fe72 	bl	8000c92 <SD_SendCmd>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d117      	bne.n	8000fe4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb8:	68b8      	ldr	r0, [r7, #8]
 8000fba:	f7ff fdf9 	bl	8000bb0 <SD_RxDataBlock>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00a      	beq.n	8000fda <SD_disk_read+0xa6>
        buff += 512;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000fca:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1ed      	bne.n	8000fb4 <SD_disk_read+0x80>
 8000fd8:	e000      	b.n	8000fdc <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000fda:	bf00      	nop
      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	204c      	movs	r0, #76	; 0x4c
 8000fe0:	f7ff fe57 	bl	8000c92 <SD_SendCmd>
    }
  }
  /* Idle */
  DESELECT();
 8000fe4:	f7ff fd04 	bl	80009f0 <DESELECT>
  SPI_RxByte();
 8000fe8:	f7ff fd44 	bl	8000a74 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	bf14      	ite	ne
 8000ff2:	2301      	movne	r3, #1
 8000ff4:	2300      	moveq	r3, #0
 8000ff6:	b2db      	uxtb	r3, r3
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000000 	.word	0x20000000
 8001004:	2000020c 	.word	0x2000020c

08001008 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	4603      	mov	r3, r0
 8001016:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d102      	bne.n	8001024 <SD_disk_write+0x1c>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <SD_disk_write+0x20>
 8001024:	2304      	movs	r3, #4
 8001026:	e06b      	b.n	8001100 <SD_disk_write+0xf8>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001028:	4b37      	ldr	r3, [pc, #220]	; (8001108 <SD_disk_write+0x100>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SD_disk_write+0x32>
 8001036:	2303      	movs	r3, #3
 8001038:	e062      	b.n	8001100 <SD_disk_write+0xf8>
  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800103a:	4b33      	ldr	r3, [pc, #204]	; (8001108 <SD_disk_write+0x100>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SD_disk_write+0x44>
 8001048:	2302      	movs	r3, #2
 800104a:	e059      	b.n	8001100 <SD_disk_write+0xf8>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800104c:	4b2f      	ldr	r3, [pc, #188]	; (800110c <SD_disk_write+0x104>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <SD_disk_write+0x56>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	025b      	lsls	r3, r3, #9
 800105c:	607b      	str	r3, [r7, #4]
  SELECT();
 800105e:	f7ff fcb9 	bl	80009d4 <SELECT>
  if (count == 1)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d110      	bne.n	800108a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	2058      	movs	r0, #88	; 0x58
 800106c:	f7ff fe11 	bl	8000c92 <SD_SendCmd>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d13a      	bne.n	80010ec <SD_disk_write+0xe4>
 8001076:	21fe      	movs	r1, #254	; 0xfe
 8001078:	68b8      	ldr	r0, [r7, #8]
 800107a:	f7ff fdc7 	bl	8000c0c <SD_TxDataBlock>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d033      	beq.n	80010ec <SD_disk_write+0xe4>
      count = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	e030      	b.n	80010ec <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <SD_disk_write+0x104>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d007      	beq.n	80010a6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001096:	2100      	movs	r1, #0
 8001098:	2077      	movs	r0, #119	; 0x77
 800109a:	f7ff fdfa 	bl	8000c92 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800109e:	6839      	ldr	r1, [r7, #0]
 80010a0:	2057      	movs	r0, #87	; 0x57
 80010a2:	f7ff fdf6 	bl	8000c92 <SD_SendCmd>
    }
    if (SD_SendCmd(CMD25, sector) == 0)
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	2059      	movs	r0, #89	; 0x59
 80010aa:	f7ff fdf2 	bl	8000c92 <SD_SendCmd>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d11b      	bne.n	80010ec <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80010b4:	21fc      	movs	r1, #252	; 0xfc
 80010b6:	68b8      	ldr	r0, [r7, #8]
 80010b8:	f7ff fda8 	bl	8000c0c <SD_TxDataBlock>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00a      	beq.n	80010d8 <SD_disk_write+0xd0>
        buff += 512;
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80010c8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1ee      	bne.n	80010b4 <SD_disk_write+0xac>
 80010d6:	e000      	b.n	80010da <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80010d8:	bf00      	nop
      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80010da:	21fd      	movs	r1, #253	; 0xfd
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fd95 	bl	8000c0c <SD_TxDataBlock>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <SD_disk_write+0xe4>
      {
        count = 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	603b      	str	r3, [r7, #0]
      }
    }
  }
  /* Idle */
  DESELECT();
 80010ec:	f7ff fc80 	bl	80009f0 <DESELECT>
  SPI_RxByte();
 80010f0:	f7ff fcc0 	bl	8000a74 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bf14      	ite	ne
 80010fa:	2301      	movne	r3, #1
 80010fc:	2300      	moveq	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000000 	.word	0x20000000
 800110c:	2000020c 	.word	0x2000020c

08001110 <SD_disk_ioctl>:
#endif /* _USE_WRITE */
/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b08b      	sub	sp, #44	; 0x2c
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	603a      	str	r2, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	460b      	mov	r3, r1
 800111e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	623b      	str	r3, [r7, #32]
  WORD csize;
  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SD_disk_ioctl+0x1e>
 800112a:	2304      	movs	r3, #4
 800112c:	e115      	b.n	800135a <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (ctrl == CTRL_POWER)
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	2b05      	cmp	r3, #5
 8001138:	d124      	bne.n	8001184 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800113a:	6a3b      	ldr	r3, [r7, #32]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d012      	beq.n	8001168 <SD_disk_ioctl+0x58>
 8001142:	2b02      	cmp	r3, #2
 8001144:	dc1a      	bgt.n	800117c <SD_disk_ioctl+0x6c>
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <SD_disk_ioctl+0x40>
 800114a:	2b01      	cmp	r3, #1
 800114c:	d006      	beq.n	800115c <SD_disk_ioctl+0x4c>
 800114e:	e015      	b.n	800117c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001150:	f7ff fd16 	bl	8000b80 <SD_PowerOff>
      res = RES_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800115a:	e0fc      	b.n	8001356 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 800115c:	f7ff fcce 	bl	8000afc <SD_PowerOn>
      res = RES_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001166:	e0f6      	b.n	8001356 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	1c5c      	adds	r4, r3, #1
 800116c:	f7ff fd14 	bl	8000b98 <SD_CheckPower>
 8001170:	4603      	mov	r3, r0
 8001172:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800117a:	e0ec      	b.n	8001356 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 800117c:	2304      	movs	r3, #4
 800117e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001182:	e0e8      	b.n	8001356 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001184:	4b77      	ldr	r3, [pc, #476]	; (8001364 <SD_disk_ioctl+0x254>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SD_disk_ioctl+0x86>
 8001192:	2303      	movs	r3, #3
 8001194:	e0e1      	b.n	800135a <SD_disk_ioctl+0x24a>
    SELECT();
 8001196:	f7ff fc1d 	bl	80009d4 <SELECT>
    switch (ctrl)
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	2b0d      	cmp	r3, #13
 800119e:	f200 80cb 	bhi.w	8001338 <SD_disk_ioctl+0x228>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <SD_disk_ioctl+0x98>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	080012a3 	.word	0x080012a3
 80011ac:	080011e1 	.word	0x080011e1
 80011b0:	08001293 	.word	0x08001293
 80011b4:	08001339 	.word	0x08001339
 80011b8:	08001339 	.word	0x08001339
 80011bc:	08001339 	.word	0x08001339
 80011c0:	08001339 	.word	0x08001339
 80011c4:	08001339 	.word	0x08001339
 80011c8:	08001339 	.word	0x08001339
 80011cc:	08001339 	.word	0x08001339
 80011d0:	08001339 	.word	0x08001339
 80011d4:	080012b5 	.word	0x080012b5
 80011d8:	080012d9 	.word	0x080012d9
 80011dc:	080012fd 	.word	0x080012fd
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80011e0:	2100      	movs	r1, #0
 80011e2:	2049      	movs	r0, #73	; 0x49
 80011e4:	f7ff fd55 	bl	8000c92 <SD_SendCmd>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 80a8 	bne.w	8001340 <SD_disk_ioctl+0x230>
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2110      	movs	r1, #16
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fcda 	bl	8000bb0 <SD_RxDataBlock>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 809e 	beq.w	8001340 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8001204:	7b3b      	ldrb	r3, [r7, #12]
 8001206:	099b      	lsrs	r3, r3, #6
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d10e      	bne.n	800122c <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800120e:	7d7b      	ldrb	r3, [r7, #21]
 8001210:	b29a      	uxth	r2, r3
 8001212:	7d3b      	ldrb	r3, [r7, #20]
 8001214:	b29b      	uxth	r3, r3
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b29b      	uxth	r3, r3
 800121a:	4413      	add	r3, r2
 800121c:	b29b      	uxth	r3, r3
 800121e:	3301      	adds	r3, #1
 8001220:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001222:	8bfb      	ldrh	r3, [r7, #30]
 8001224:	029a      	lsls	r2, r3, #10
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e02e      	b.n	800128a <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800122c:	7c7b      	ldrb	r3, [r7, #17]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	b2da      	uxtb	r2, r3
 8001234:	7dbb      	ldrb	r3, [r7, #22]
 8001236:	09db      	lsrs	r3, r3, #7
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4413      	add	r3, r2
 800123c:	b2da      	uxtb	r2, r3
 800123e:	7d7b      	ldrb	r3, [r7, #21]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f003 0306 	and.w	r3, r3, #6
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b2db      	uxtb	r3, r3
 800124e:	3302      	adds	r3, #2
 8001250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001254:	7d3b      	ldrb	r3, [r7, #20]
 8001256:	099b      	lsrs	r3, r3, #6
 8001258:	b2db      	uxtb	r3, r3
 800125a:	b29a      	uxth	r2, r3
 800125c:	7cfb      	ldrb	r3, [r7, #19]
 800125e:	b29b      	uxth	r3, r3
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	b29b      	uxth	r3, r3
 8001264:	4413      	add	r3, r2
 8001266:	b29a      	uxth	r2, r3
 8001268:	7cbb      	ldrb	r3, [r7, #18]
 800126a:	029b      	lsls	r3, r3, #10
 800126c:	b29b      	uxth	r3, r3
 800126e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001272:	b29b      	uxth	r3, r3
 8001274:	4413      	add	r3, r2
 8001276:	b29b      	uxth	r3, r3
 8001278:	3301      	adds	r3, #1
 800127a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800127c:	8bfa      	ldrh	r2, [r7, #30]
 800127e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001282:	3b09      	subs	r3, #9
 8001284:	409a      	lsls	r2, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001290:	e056      	b.n	8001340 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001298:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012a0:	e055      	b.n	800134e <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80012a2:	f7ff fc11 	bl	8000ac8 <SD_ReadyWait>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2bff      	cmp	r3, #255	; 0xff
 80012aa:	d14b      	bne.n	8001344 <SD_disk_ioctl+0x234>
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012b2:	e047      	b.n	8001344 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80012b4:	2100      	movs	r1, #0
 80012b6:	2049      	movs	r0, #73	; 0x49
 80012b8:	f7ff fceb 	bl	8000c92 <SD_SendCmd>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d142      	bne.n	8001348 <SD_disk_ioctl+0x238>
 80012c2:	2110      	movs	r1, #16
 80012c4:	6a38      	ldr	r0, [r7, #32]
 80012c6:	f7ff fc73 	bl	8000bb0 <SD_RxDataBlock>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d03b      	beq.n	8001348 <SD_disk_ioctl+0x238>
 80012d0:	2300      	movs	r3, #0
 80012d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012d6:	e037      	b.n	8001348 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80012d8:	2100      	movs	r1, #0
 80012da:	204a      	movs	r0, #74	; 0x4a
 80012dc:	f7ff fcd9 	bl	8000c92 <SD_SendCmd>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d132      	bne.n	800134c <SD_disk_ioctl+0x23c>
 80012e6:	2110      	movs	r1, #16
 80012e8:	6a38      	ldr	r0, [r7, #32]
 80012ea:	f7ff fc61 	bl	8000bb0 <SD_RxDataBlock>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d02b      	beq.n	800134c <SD_disk_ioctl+0x23c>
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012fa:	e027      	b.n	800134c <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80012fc:	2100      	movs	r1, #0
 80012fe:	207a      	movs	r0, #122	; 0x7a
 8001300:	f7ff fcc7 	bl	8000c92 <SD_SendCmd>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d116      	bne.n	8001338 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 800130a:	2300      	movs	r3, #0
 800130c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001310:	e00b      	b.n	800132a <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8001312:	6a3c      	ldr	r4, [r7, #32]
 8001314:	1c63      	adds	r3, r4, #1
 8001316:	623b      	str	r3, [r7, #32]
 8001318:	f7ff fbac 	bl	8000a74 <SPI_RxByte>
 800131c:	4603      	mov	r3, r0
 800131e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001324:	3301      	adds	r3, #1
 8001326:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800132a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800132e:	2b03      	cmp	r3, #3
 8001330:	d9ef      	bls.n	8001312 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8001338:	2304      	movs	r3, #4
 800133a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800133e:	e006      	b.n	800134e <SD_disk_ioctl+0x23e>
      break;
 8001340:	bf00      	nop
 8001342:	e004      	b.n	800134e <SD_disk_ioctl+0x23e>
      break;
 8001344:	bf00      	nop
 8001346:	e002      	b.n	800134e <SD_disk_ioctl+0x23e>
      break;
 8001348:	bf00      	nop
 800134a:	e000      	b.n	800134e <SD_disk_ioctl+0x23e>
      break;
 800134c:	bf00      	nop
    }
    DESELECT();
 800134e:	f7ff fb4f 	bl	80009f0 <DESELECT>
    SPI_RxByte();
 8001352:	f7ff fb8f 	bl	8000a74 <SPI_RxByte>
  }
  return res;
 8001356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800135a:	4618      	mov	r0, r3
 800135c:	372c      	adds	r7, #44	; 0x2c
 800135e:	46bd      	mov	sp, r7
 8001360:	bd90      	pop	{r4, r7, pc}
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000

08001368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136c:	f000 fcbf 	bl	8001cee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001370:	f000 f854 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001374:	f000 f93a 	bl	80015ec <MX_GPIO_Init>
  MX_SPI1_Init();
 8001378:	f000 f8fa 	bl	8001570 <MX_SPI1_Init>
  MX_FATFS_Init();
 800137c:	f002 fece 	bl	800411c <MX_FATFS_Init>
  MX_ADC1_Init();
 8001380:	f000 f8bc 	bl	80014fc <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Measurement_of_ADC_Current_CMOS();
 8001384:	f000 f9f0 	bl	8001768 <Measurement_of_ADC_Current_CMOS>
	  Measurement_of_ADC_Current_18650();
 8001388:	f000 fa2a 	bl	80017e0 <Measurement_of_ADC_Current_18650>
	  if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET)
 800138c:	2101      	movs	r1, #1
 800138e:	481f      	ldr	r0, [pc, #124]	; (800140c <main+0xa4>)
 8001390:	f001 fbee 	bl	8002b70 <HAL_GPIO_ReadPin>
 8001394:	4603      	mov	r3, r0
 8001396:	2b01      	cmp	r3, #1
 8001398:	d1f4      	bne.n	8001384 <main+0x1c>
	  {
		  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_SET); //error light is OFF and ready to run
 800139a:	2201      	movs	r2, #1
 800139c:	2108      	movs	r1, #8
 800139e:	481b      	ldr	r0, [pc, #108]	; (800140c <main+0xa4>)
 80013a0:	f001 fbfe 	bl	8002ba0 <HAL_GPIO_WritePin>
		  // HAL_GPIO_WritePin(SD_CardDetect_Output_ReadyToRun_GPIO_Port, SD_CardDetect_Output_ReadyToRun__Pin, GPIO_PIN_SET); //ready light is ON ready to run
	  if (C_CMOS <= 1.5) {
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <main+0xa8>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80013ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b6:	d803      	bhi.n	80013c0 <main+0x58>
	              // if(Voltage_Current_Read)
	              state = State_CMOS;  // 18650 Mode >= 20mA //1
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <main+0xac>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
 80013be:	e002      	b.n	80013c6 <main+0x5e>
	          } else {
	              state = State_18650;  // Cmos Mode > //2
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <main+0xac>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
	          }



	  switch (state) {
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <main+0xac>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <main+0x6c>
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d00d      	beq.n	80013ee <main+0x86>
 80013d2:	e019      	b.n	8001408 <main+0xa0>
	              case State_CMOS: {  //1
	            	  HAL_GPIO_WritePin(Load_Switch_18650_GPIO_Port, Load_Switch_18650_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013da:	480f      	ldr	r0, [pc, #60]	; (8001418 <main+0xb0>)
 80013dc:	f001 fbe0 	bl	8002ba0 <HAL_GPIO_WritePin>
	            	  HAL_GPIO_WritePin(Load_Switch_CMOS_GPIO_Port, Load_Switch_CMOS_Pin, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013e6:	480c      	ldr	r0, [pc, #48]	; (8001418 <main+0xb0>)
 80013e8:	f001 fbda 	bl	8002ba0 <HAL_GPIO_WritePin>
	                  break;
 80013ec:	e00c      	b.n	8001408 <main+0xa0>
	              }

	              case State_18650: { //2
	            	  HAL_GPIO_WritePin(Load_Switch_CMOS_GPIO_Port, Load_Switch_CMOS_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013f4:	4808      	ldr	r0, [pc, #32]	; (8001418 <main+0xb0>)
 80013f6:	f001 fbd3 	bl	8002ba0 <HAL_GPIO_WritePin>
	            	  HAL_GPIO_WritePin(Load_Switch_18650_GPIO_Port, Load_Switch_18650_Pin, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <main+0xb0>)
 8001402:	f001 fbcd 	bl	8002ba0 <HAL_GPIO_WritePin>
	                  break;
 8001406:	bf00      	nop
	  Measurement_of_ADC_Current_CMOS();
 8001408:	e7bc      	b.n	8001384 <main+0x1c>
 800140a:	bf00      	nop
 800140c:	40020800 	.word	0x40020800
 8001410:	200002bc 	.word	0x200002bc
 8001414:	200002c4 	.word	0x200002c4
 8001418:	40020400 	.word	0x40020400

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	; 0x50
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	2234      	movs	r2, #52	; 0x34
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f003 fe9f 	bl	800516e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <SystemClock_Config+0xd8>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	4a2b      	ldr	r2, [pc, #172]	; (80014f4 <SystemClock_Config+0xd8>)
 8001446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144a:	6413      	str	r3, [r2, #64]	; 0x40
 800144c:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <SystemClock_Config+0xd8>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <SystemClock_Config+0xdc>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001460:	4a25      	ldr	r2, [pc, #148]	; (80014f8 <SystemClock_Config+0xdc>)
 8001462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <SystemClock_Config+0xdc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001474:	2302      	movs	r3, #2
 8001476:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001478:	2301      	movs	r3, #1
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800147c:	2310      	movs	r3, #16
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001480:	2302      	movs	r3, #2
 8001482:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001484:	2300      	movs	r3, #0
 8001486:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001488:	2308      	movs	r3, #8
 800148a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800148c:	2360      	movs	r3, #96	; 0x60
 800148e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001490:	2302      	movs	r3, #2
 8001492:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001494:	2304      	movs	r3, #4
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001498:	2302      	movs	r3, #2
 800149a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4618      	mov	r0, r3
 80014a2:	f001 fbe7 	bl	8002c74 <HAL_RCC_OscConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014ac:	f000 fa14 	bl	80018d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014b0:	f001 fb90 	bl	8002bd4 <HAL_PWREx_EnableOverDrive>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80014ba:	f000 fa0d 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014be:	230f      	movs	r3, #15
 80014c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c2:	2302      	movs	r3, #2
 80014c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	2103      	movs	r1, #3
 80014da:	4618      	mov	r0, r3
 80014dc:	f001 fe78 	bl	80031d0 <HAL_RCC_ClockConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0xce>
  {
    Error_Handler();
 80014e6:	f000 f9f7 	bl	80018d8 <Error_Handler>
  }
}
 80014ea:	bf00      	nop
 80014ec:	3750      	adds	r7, #80	; 0x50
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40007000 	.word	0x40007000

080014fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <MX_ADC1_Init+0x68>)
 8001502:	4a19      	ldr	r2, [pc, #100]	; (8001568 <MX_ADC1_Init+0x6c>)
 8001504:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_ADC1_Init+0x68>)
 8001508:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800150c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_ADC1_Init+0x68>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <MX_ADC1_Init+0x68>)
 8001516:	2201      	movs	r2, #1
 8001518:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_ADC1_Init+0x68>)
 800151c:	2201      	movs	r2, #1
 800151e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <MX_ADC1_Init+0x68>)
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_ADC1_Init+0x68>)
 800152a:	2200      	movs	r2, #0
 800152c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <MX_ADC1_Init+0x68>)
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <MX_ADC1_Init+0x70>)
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_ADC1_Init+0x68>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <MX_ADC1_Init+0x68>)
 800153c:	2202      	movs	r2, #2
 800153e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_ADC1_Init+0x68>)
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_ADC1_Init+0x68>)
 800154a:	2201      	movs	r2, #1
 800154c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_ADC1_Init+0x68>)
 8001550:	f000 fc4e 	bl	8001df0 <HAL_ADC_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 800155a:	f000 f9bd 	bl	80018d8 <Error_Handler>
  }

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000210 	.word	0x20000210
 8001568:	40012000 	.word	0x40012000
 800156c:	0f000001 	.word	0x0f000001

08001570 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_SPI1_Init+0x74>)
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <MX_SPI1_Init+0x78>)
 8001578:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_SPI1_Init+0x74>)
 800157c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001580:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_SPI1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_SPI1_Init+0x74>)
 800158a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800158e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_SPI1_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_SPI1_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_SPI1_Init+0x74>)
 800159e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_SPI1_Init+0x74>)
 80015a6:	2210      	movs	r2, #16
 80015a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_SPI1_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_SPI1_Init+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_SPI1_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_SPI1_Init+0x74>)
 80015be:	2207      	movs	r2, #7
 80015c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_SPI1_Init+0x74>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_SPI1_Init+0x74>)
 80015ca:	2208      	movs	r2, #8
 80015cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_SPI1_Init+0x74>)
 80015d0:	f001 fff0 	bl	80035b4 <HAL_SPI_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015da:	f000 f97d 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000258 	.word	0x20000258
 80015e8:	40013000 	.word	0x40013000

080015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001602:	4b53      	ldr	r3, [pc, #332]	; (8001750 <MX_GPIO_Init+0x164>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a52      	ldr	r2, [pc, #328]	; (8001750 <MX_GPIO_Init+0x164>)
 8001608:	f043 0320 	orr.w	r3, r3, #32
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b50      	ldr	r3, [pc, #320]	; (8001750 <MX_GPIO_Init+0x164>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	4b4d      	ldr	r3, [pc, #308]	; (8001750 <MX_GPIO_Init+0x164>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a4c      	ldr	r2, [pc, #304]	; (8001750 <MX_GPIO_Init+0x164>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b4a      	ldr	r3, [pc, #296]	; (8001750 <MX_GPIO_Init+0x164>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	4b47      	ldr	r3, [pc, #284]	; (8001750 <MX_GPIO_Init+0x164>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a46      	ldr	r2, [pc, #280]	; (8001750 <MX_GPIO_Init+0x164>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b44      	ldr	r3, [pc, #272]	; (8001750 <MX_GPIO_Init+0x164>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	4b41      	ldr	r3, [pc, #260]	; (8001750 <MX_GPIO_Init+0x164>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a40      	ldr	r2, [pc, #256]	; (8001750 <MX_GPIO_Init+0x164>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <MX_GPIO_Init+0x164>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001662:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <MX_GPIO_Init+0x164>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a3a      	ldr	r2, [pc, #232]	; (8001750 <MX_GPIO_Init+0x164>)
 8001668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <MX_GPIO_Init+0x164>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2108      	movs	r1, #8
 800167e:	4835      	ldr	r0, [pc, #212]	; (8001754 <MX_GPIO_Init+0x168>)
 8001680:	f001 fa8e 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2110      	movs	r1, #16
 8001688:	4833      	ldr	r0, [pc, #204]	; (8001758 <MX_GPIO_Init+0x16c>)
 800168a:	f001 fa89 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2101      	movs	r1, #1
 8001692:	4832      	ldr	r0, [pc, #200]	; (800175c <MX_GPIO_Init+0x170>)
 8001694:	f001 fa84 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Load_Switch_CMOS_Pin|Load_Switch_18650_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800169e:	4830      	ldr	r0, [pc, #192]	; (8001760 <MX_GPIO_Init+0x174>)
 80016a0:	f001 fa7e 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_Write_Button_Pin */
  GPIO_InitStruct.Pin = SD_Write_Button_Pin;
 80016a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Write_Button_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	482a      	ldr	r0, [pc, #168]	; (8001764 <MX_GPIO_Init+0x178>)
 80016ba:	f001 f8ad 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CardDetect_Input_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Input_Pin;
 80016be:	2301      	movs	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CardDetect_Input_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4820      	ldr	r0, [pc, #128]	; (8001754 <MX_GPIO_Init+0x168>)
 80016d2:	f001 f8a1 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CardDetect_Output_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Output_Pin;
 80016d6:	2308      	movs	r3, #8
 80016d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CardDetect_Output_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	4819      	ldr	r0, [pc, #100]	; (8001754 <MX_GPIO_Init+0x168>)
 80016ee:	f001 f893 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016f2:	2310      	movs	r3, #16
 80016f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4813      	ldr	r0, [pc, #76]	; (8001758 <MX_GPIO_Init+0x16c>)
 800170a:	f001 f885 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800170e:	2301      	movs	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	480d      	ldr	r0, [pc, #52]	; (800175c <MX_GPIO_Init+0x170>)
 8001726:	f001 f877 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pins : Load_Switch_CMOS_Pin Load_Switch_18650_Pin */
  GPIO_InitStruct.Pin = Load_Switch_CMOS_Pin|Load_Switch_18650_Pin;
 800172a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4807      	ldr	r0, [pc, #28]	; (8001760 <MX_GPIO_Init+0x174>)
 8001744:	f001 f868 	bl	8002818 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	; 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	40020800 	.word	0x40020800
 8001758:	40020000 	.word	0x40020000
 800175c:	40021800 	.word	0x40021800
 8001760:	40020400 	.word	0x40020400
 8001764:	40021400 	.word	0x40021400

08001768 <Measurement_of_ADC_Current_CMOS>:
	           V_CMOS = rawValue1 * V_stepSize;
	       }
	    HAL_ADC_Stop(&hadc1);
}

void Measurement_of_ADC_Current_CMOS(){
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
	float V_ref = 3.3;  // This is known for each micro controller from data
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <Measurement_of_ADC_Current_CMOS+0x68>)
 8001770:	60fb      	str	r3, [r7, #12]
		// sheet, V_ref = power supply in
		float ADC_resolution = (4096 - 1);  // 2^12 - 1
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <Measurement_of_ADC_Current_CMOS+0x6c>)
 8001774:	60bb      	str	r3, [r7, #8]
		float V_stepSize = V_ref / ADC_resolution;
 8001776:	edd7 6a03 	vldr	s13, [r7, #12]
 800177a:	ed97 7a02 	vldr	s14, [r7, #8]
 800177e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001782:	edc7 7a01 	vstr	s15, [r7, #4]
		// ADC
	    /* Start ADC Conversion for ADC1 */
	    ADC_Select_CurrentCMOS();
 8001786:	f000 f887 	bl	8001898 <ADC_Select_CurrentCMOS>
	    HAL_ADC_Start(&hadc1);
 800178a:	4813      	ldr	r0, [pc, #76]	; (80017d8 <Measurement_of_ADC_Current_CMOS+0x70>)
 800178c:	f000 fb74 	bl	8001e78 <HAL_ADC_Start>
	    uint16_t rawValue1;
	       if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	4810      	ldr	r0, [pc, #64]	; (80017d8 <Measurement_of_ADC_Current_CMOS+0x70>)
 8001796:	f000 fc71 	bl	800207c <HAL_ADC_PollForConversion>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d110      	bne.n	80017c2 <Measurement_of_ADC_Current_CMOS+0x5a>
	           /* Read the ADC1 value */
	           rawValue1 = HAL_ADC_GetValue(&hadc1);
 80017a0:	480d      	ldr	r0, [pc, #52]	; (80017d8 <Measurement_of_ADC_Current_CMOS+0x70>)
 80017a2:	f000 fcf6 	bl	8002192 <HAL_ADC_GetValue>
 80017a6:	4603      	mov	r3, r0
 80017a8:	807b      	strh	r3, [r7, #2]
	           C_CMOS = rawValue1 * V_stepSize;
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <Measurement_of_ADC_Current_CMOS+0x74>)
 80017be:	edc3 7a00 	vstr	s15, [r3]
	       }
	    HAL_ADC_Stop(&hadc1);
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <Measurement_of_ADC_Current_CMOS+0x70>)
 80017c4:	f000 fc26 	bl	8002014 <HAL_ADC_Stop>
}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40533333 	.word	0x40533333
 80017d4:	457ff000 	.word	0x457ff000
 80017d8:	20000210 	.word	0x20000210
 80017dc:	200002bc 	.word	0x200002bc

080017e0 <Measurement_of_ADC_Current_18650>:

void Measurement_of_ADC_Current_18650(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
	float V_ref = 3.3;  // This is known for each micro controller from data
 80017e6:	4b18      	ldr	r3, [pc, #96]	; (8001848 <Measurement_of_ADC_Current_18650+0x68>)
 80017e8:	60fb      	str	r3, [r7, #12]
		// sheet, V_ref = power supply in
		float ADC_resolution = (4096 - 1);  // 2^12 - 1
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <Measurement_of_ADC_Current_18650+0x6c>)
 80017ec:	60bb      	str	r3, [r7, #8]
		float V_stepSize = V_ref / ADC_resolution;
 80017ee:	edd7 6a03 	vldr	s13, [r7, #12]
 80017f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80017f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fa:	edc7 7a01 	vstr	s15, [r7, #4]
		// ADC
	    /* Start ADC Conversion for ADC1 */
	    ADC_Select_Current18650();
 80017fe:	f000 f82b 	bl	8001858 <ADC_Select_Current18650>
	    HAL_ADC_Start(&hadc1);
 8001802:	4813      	ldr	r0, [pc, #76]	; (8001850 <Measurement_of_ADC_Current_18650+0x70>)
 8001804:	f000 fb38 	bl	8001e78 <HAL_ADC_Start>
	    uint16_t rawValue1;
	       if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	4810      	ldr	r0, [pc, #64]	; (8001850 <Measurement_of_ADC_Current_18650+0x70>)
 800180e:	f000 fc35 	bl	800207c <HAL_ADC_PollForConversion>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d110      	bne.n	800183a <Measurement_of_ADC_Current_18650+0x5a>
	           /* Read the ADC1 value */
	           rawValue1 = HAL_ADC_GetValue(&hadc1);
 8001818:	480d      	ldr	r0, [pc, #52]	; (8001850 <Measurement_of_ADC_Current_18650+0x70>)
 800181a:	f000 fcba 	bl	8002192 <HAL_ADC_GetValue>
 800181e:	4603      	mov	r3, r0
 8001820:	807b      	strh	r3, [r7, #2]
	           C_18650 = rawValue1 * V_stepSize;
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800182c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <Measurement_of_ADC_Current_18650+0x74>)
 8001836:	edc3 7a00 	vstr	s15, [r3]
	       }
	    HAL_ADC_Stop(&hadc1);
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <Measurement_of_ADC_Current_18650+0x70>)
 800183c:	f000 fbea 	bl	8002014 <HAL_ADC_Stop>
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40533333 	.word	0x40533333
 800184c:	457ff000 	.word	0x457ff000
 8001850:	20000210 	.word	0x20000210
 8001854:	200002c0 	.word	0x200002c0

08001858 <ADC_Select_Current18650>:
 {
   Error_Handler();
 }
}

void ADC_Select_Current18650(void){
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
ADC_ChannelConfTypeDef sConfig = {0};
 800185e:	463b      	mov	r3, r7
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
sConfig.Channel = ADC_CHANNEL_0;
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
sConfig.Rank = 1;
 800186e:	2301      	movs	r3, #1
 8001870:	607b      	str	r3, [r7, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001876:	463b      	mov	r3, r7
 8001878:	4619      	mov	r1, r3
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <ADC_Select_Current18650+0x3c>)
 800187c:	f000 fc96 	bl	80021ac <HAL_ADC_ConfigChannel>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <ADC_Select_Current18650+0x32>
{
  Error_Handler();
 8001886:	f000 f827 	bl	80018d8 <Error_Handler>
}
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000210 	.word	0x20000210

08001898 <ADC_Select_CurrentCMOS>:

void ADC_Select_CurrentCMOS(void){
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
ADC_ChannelConfTypeDef sConfig = {0};
 800189e:	463b      	mov	r3, r7
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
sConfig.Channel = ADC_CHANNEL_8;
 80018aa:	2308      	movs	r3, #8
 80018ac:	603b      	str	r3, [r7, #0]
sConfig.Rank = 1;
 80018ae:	2301      	movs	r3, #1
 80018b0:	607b      	str	r3, [r7, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	; (80018d4 <ADC_Select_CurrentCMOS+0x3c>)
 80018bc:	f000 fc76 	bl	80021ac <HAL_ADC_ConfigChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <ADC_Select_CurrentCMOS+0x32>
{
  Error_Handler();
 80018c6:	f000 f807 	bl	80018d8 <Error_Handler>
}
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000210 	.word	0x20000210

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <Error_Handler+0x8>
	...

080018e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_MspInit+0x44>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <HAL_MspInit+0x44>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_MspInit+0x44>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_MspInit+0x44>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <HAL_MspInit+0x44>)
 8001908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_MspInit+0x44>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a21      	ldr	r2, [pc, #132]	; (80019d0 <HAL_ADC_MspInit+0xa4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d13b      	bne.n	80019c6 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800194e:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <HAL_ADC_MspInit+0xa8>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	4a20      	ldr	r2, [pc, #128]	; (80019d4 <HAL_ADC_MspInit+0xa8>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6453      	str	r3, [r2, #68]	; 0x44
 800195a:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_ADC_MspInit+0xa8>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_ADC_MspInit+0xa8>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a1a      	ldr	r2, [pc, #104]	; (80019d4 <HAL_ADC_MspInit+0xa8>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <HAL_ADC_MspInit+0xa8>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_ADC_MspInit+0xa8>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <HAL_ADC_MspInit+0xa8>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_ADC_MspInit+0xa8>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Current_ADC_18650_Pin|Voltage_ADC_18650_Pin;
 8001996:	2309      	movs	r3, #9
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800199a:	2303      	movs	r3, #3
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	480b      	ldr	r0, [pc, #44]	; (80019d8 <HAL_ADC_MspInit+0xac>)
 80019aa:	f000 ff35 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Current_ADC_CMOS_Pin|Voltage_ADC_CMOS_Pin;
 80019ae:	2303      	movs	r3, #3
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b2:	2303      	movs	r3, #3
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4619      	mov	r1, r3
 80019c0:	4806      	ldr	r0, [pc, #24]	; (80019dc <HAL_ADC_MspInit+0xb0>)
 80019c2:	f000 ff29 	bl	8002818 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	; 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40012000 	.word	0x40012000
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020400 	.word	0x40020400

080019e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <HAL_SPI_MspInit+0x7c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d127      	bne.n	8001a52 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_SPI_MspInit+0x80>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a16      	ldr	r2, [pc, #88]	; (8001a60 <HAL_SPI_MspInit+0x80>)
 8001a08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_SPI_MspInit+0x80>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_SPI_MspInit+0x80>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_SPI_MspInit+0x80>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_SPI_MspInit+0x80>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a32:	23e0      	movs	r3, #224	; 0xe0
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a42:	2305      	movs	r3, #5
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <HAL_SPI_MspInit+0x84>)
 8001a4e:	f000 fee3 	bl	8002818 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3728      	adds	r7, #40	; 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40013000 	.word	0x40013000
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020000 	.word	0x40020000

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <NMI_Handler+0x4>

08001a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <SysTick_Handler+0x34>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <SysTick_Handler+0x18>
		  Timer1--;
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <SysTick_Handler+0x34>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <SysTick_Handler+0x34>)
 8001ac6:	801a      	strh	r2, [r3, #0]
		if(Timer2 > 0)
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <SysTick_Handler+0x38>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <SysTick_Handler+0x2c>
		  Timer2--;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SysTick_Handler+0x38>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <SysTick_Handler+0x38>)
 8001ada:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001adc:	f000 f944 	bl	8001d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000208 	.word	0x20000208
 8001ae8:	2000020a 	.word	0x2000020a

08001aec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return 1;
 8001af0:	2301      	movs	r3, #1
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_kill>:

int _kill(int pid, int sig)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b06:	f003 fb85 	bl	8005214 <__errno>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2216      	movs	r2, #22
 8001b0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_exit>:

void _exit (int status)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b24:	f04f 31ff 	mov.w	r1, #4294967295
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ffe7 	bl	8001afc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b2e:	e7fe      	b.n	8001b2e <_exit+0x12>

08001b30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	e00a      	b.n	8001b58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b42:	f3af 8000 	nop.w
 8001b46:	4601      	mov	r1, r0
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	60ba      	str	r2, [r7, #8]
 8001b4e:	b2ca      	uxtb	r2, r1
 8001b50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dbf0      	blt.n	8001b42 <_read+0x12>
  }

  return len;
 8001b60:	687b      	ldr	r3, [r7, #4]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e009      	b.n	8001b90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	60ba      	str	r2, [r7, #8]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbf1      	blt.n	8001b7c <_write+0x12>
  }
  return len;
 8001b98:	687b      	ldr	r3, [r7, #4]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_close>:

int _close(int file)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bca:	605a      	str	r2, [r3, #4]
  return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_isatty>:

int _isatty(int file)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <_sbrk+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <_sbrk+0x60>)
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <_sbrk+0x64>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <_sbrk+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c3c:	f003 faea 	bl	8005214 <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	e009      	b.n	8001c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <_sbrk+0x64>)
 8001c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20080000 	.word	0x20080000
 8001c6c:	00000400 	.word	0x00000400
 8001c70:	200002c8 	.word	0x200002c8
 8001c74:	20000430 	.word	0x20000430

08001c78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca0:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ca2:	490e      	ldr	r1, [pc, #56]	; (8001cdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ca4:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cb8:	4c0b      	ldr	r4, [pc, #44]	; (8001ce8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cc6:	f7ff ffd7 	bl	8001c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cca:	f003 faa9 	bl	8005220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cce:	f7ff fb4b 	bl	8001368 <main>
  bx  lr    
 8001cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cdc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ce0:	08008cb0 	.word	0x08008cb0
  ldr r2, =_sbss
 8001ce4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001ce8:	20000430 	.word	0x20000430

08001cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC_IRQHandler>

08001cee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f000 fd5c 	bl	80027b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f000 f805 	bl	8001d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cfe:	f7ff fdf1 	bl	80018e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_InitTick+0x54>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_InitTick+0x58>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fd69 	bl	80027fe <HAL_SYSTICK_Config>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00e      	b.n	8001d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	d80a      	bhi.n	8001d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f000 fd3f 	bl	80027c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d48:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <HAL_InitTick+0x5c>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000004 	.word	0x20000004
 8001d60:	2000000c 	.word	0x2000000c
 8001d64:	20000008 	.word	0x20000008

08001d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_IncTick+0x20>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_IncTick+0x24>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <HAL_IncTick+0x24>)
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	2000000c 	.word	0x2000000c
 8001d8c:	200002cc 	.word	0x200002cc

08001d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return uwTick;
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <HAL_GetTick+0x14>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	200002cc 	.word	0x200002cc

08001da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db0:	f7ff ffee 	bl	8001d90 <HAL_GetTick>
 8001db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc0:	d005      	beq.n	8001dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_Delay+0x44>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dce:	bf00      	nop
 8001dd0:	f7ff ffde 	bl	8001d90 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d8f7      	bhi.n	8001dd0 <HAL_Delay+0x28>
  {
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	2000000c 	.word	0x2000000c

08001df0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e031      	b.n	8001e6a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fd8c 	bl	800192c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d116      	bne.n	8001e5c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_ADC_Init+0x84>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	f043 0202 	orr.w	r2, r3, #2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fb0a 	bl	8002458 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f023 0303 	bic.w	r3, r3, #3
 8001e52:	f043 0201 	orr.w	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
 8001e5a:	e001      	b.n	8001e60 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	ffffeefd 	.word	0xffffeefd

08001e78 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_Start+0x1a>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e0ad      	b.n	8001fee <HAL_ADC_Start+0x176>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d018      	beq.n	8001eda <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001eb8:	4b50      	ldr	r3, [pc, #320]	; (8001ffc <HAL_ADC_Start+0x184>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a50      	ldr	r2, [pc, #320]	; (8002000 <HAL_ADC_Start+0x188>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	0c9a      	lsrs	r2, r3, #18
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001ecc:	e002      	b.n	8001ed4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f9      	bne.n	8001ece <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d175      	bne.n	8001fd4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eec:	4b45      	ldr	r3, [pc, #276]	; (8002004 <HAL_ADC_Start+0x18c>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f22:	d106      	bne.n	8001f32 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	f023 0206 	bic.w	r2, r3, #6
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44
 8001f30:	e002      	b.n	8001f38 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f48:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <HAL_ADC_Start+0x190>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10f      	bne.n	8001f76 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d143      	bne.n	8001fec <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	e03a      	b.n	8001fec <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a24      	ldr	r2, [pc, #144]	; (800200c <HAL_ADC_Start+0x194>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d10e      	bne.n	8001f9e <HAL_ADC_Start+0x126>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d107      	bne.n	8001f9e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f9c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <HAL_ADC_Start+0x190>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d120      	bne.n	8001fec <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a18      	ldr	r2, [pc, #96]	; (8002010 <HAL_ADC_Start+0x198>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d11b      	bne.n	8001fec <HAL_ADC_Start+0x174>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d114      	bne.n	8001fec <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	e00b      	b.n	8001fec <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f043 0210 	orr.w	r2, r3, #16
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000004 	.word	0x20000004
 8002000:	431bde83 	.word	0x431bde83
 8002004:	fffff8fe 	.word	0xfffff8fe
 8002008:	40012300 	.word	0x40012300
 800200c:	40012000 	.word	0x40012000
 8002010:	40012200 	.word	0x40012200

08002014 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_ADC_Stop+0x16>
 8002026:	2302      	movs	r3, #2
 8002028:	e01f      	b.n	800206a <HAL_ADC_Stop+0x56>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0201 	bic.w	r2, r2, #1
 8002040:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d107      	bne.n	8002060 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_ADC_Stop+0x64>)
 8002056:	4013      	ands	r3, r2
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	ffffeefe 	.word	0xffffeefe

0800207c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002098:	d113      	bne.n	80020c2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a8:	d10b      	bne.n	80020c2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f043 0220 	orr.w	r2, r3, #32
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e063      	b.n	800218a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80020c2:	f7ff fe65 	bl	8001d90 <HAL_GetTick>
 80020c6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020c8:	e021      	b.n	800210e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d01d      	beq.n	800210e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <HAL_ADC_PollForConversion+0x6c>
 80020d8:	f7ff fe5a 	bl	8001d90 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d212      	bcs.n	800210e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d00b      	beq.n	800210e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f043 0204 	orr.w	r2, r3, #4
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e03d      	b.n	800218a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b02      	cmp	r3, #2
 800211a:	d1d6      	bne.n	80020ca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0212 	mvn.w	r2, #18
 8002124:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d123      	bne.n	8002188 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002144:	2b00      	cmp	r3, #0
 8002146:	d11f      	bne.n	8002188 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002152:	2b00      	cmp	r3, #0
 8002154:	d006      	beq.n	8002164 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002160:	2b00      	cmp	r3, #0
 8002162:	d111      	bne.n	8002188 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d105      	bne.n	8002188 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f043 0201 	orr.w	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x1c>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e136      	b.n	8002436 <HAL_ADC_ConfigChannel+0x28a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b09      	cmp	r3, #9
 80021d6:	d93a      	bls.n	800224e <HAL_ADC_ConfigChannel+0xa2>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021e0:	d035      	beq.n	800224e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68d9      	ldr	r1, [r3, #12]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	4613      	mov	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4413      	add	r3, r2
 80021f6:	3b1e      	subs	r3, #30
 80021f8:	2207      	movs	r2, #7
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43da      	mvns	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	400a      	ands	r2, r1
 8002206:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a8d      	ldr	r2, [pc, #564]	; (8002444 <HAL_ADC_ConfigChannel+0x298>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d10a      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68d9      	ldr	r1, [r3, #12]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	061a      	lsls	r2, r3, #24
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002226:	e035      	b.n	8002294 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68d9      	ldr	r1, [r3, #12]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	b29b      	uxth	r3, r3
 8002238:	4618      	mov	r0, r3
 800223a:	4603      	mov	r3, r0
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4403      	add	r3, r0
 8002240:	3b1e      	subs	r3, #30
 8002242:	409a      	lsls	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800224c:	e022      	b.n	8002294 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6919      	ldr	r1, [r3, #16]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	2207      	movs	r2, #7
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43da      	mvns	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	400a      	ands	r2, r1
 8002270:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6919      	ldr	r1, [r3, #16]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	b29b      	uxth	r3, r3
 8002282:	4618      	mov	r0, r3
 8002284:	4603      	mov	r3, r0
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4403      	add	r3, r0
 800228a:	409a      	lsls	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b06      	cmp	r3, #6
 800229a:	d824      	bhi.n	80022e6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3b05      	subs	r3, #5
 80022ae:	221f      	movs	r2, #31
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43da      	mvns	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	400a      	ands	r2, r1
 80022bc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	4618      	mov	r0, r3
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	3b05      	subs	r3, #5
 80022d8:	fa00 f203 	lsl.w	r2, r0, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	635a      	str	r2, [r3, #52]	; 0x34
 80022e4:	e04c      	b.n	8002380 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b0c      	cmp	r3, #12
 80022ec:	d824      	bhi.n	8002338 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	3b23      	subs	r3, #35	; 0x23
 8002300:	221f      	movs	r2, #31
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	400a      	ands	r2, r1
 800230e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4618      	mov	r0, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3b23      	subs	r3, #35	; 0x23
 800232a:	fa00 f203 	lsl.w	r2, r0, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	631a      	str	r2, [r3, #48]	; 0x30
 8002336:	e023      	b.n	8002380 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	3b41      	subs	r3, #65	; 0x41
 800234a:	221f      	movs	r2, #31
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43da      	mvns	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	400a      	ands	r2, r1
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	4618      	mov	r0, r3
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	3b41      	subs	r3, #65	; 0x41
 8002374:	fa00 f203 	lsl.w	r2, r0, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a30      	ldr	r2, [pc, #192]	; (8002448 <HAL_ADC_ConfigChannel+0x29c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d10a      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1f4>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002392:	d105      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_ADC_ConfigChannel+0x2a0>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4a2c      	ldr	r2, [pc, #176]	; (800244c <HAL_ADC_ConfigChannel+0x2a0>)
 800239a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800239e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a28      	ldr	r2, [pc, #160]	; (8002448 <HAL_ADC_ConfigChannel+0x29c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d10f      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x21e>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b12      	cmp	r3, #18
 80023b0:	d10b      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <HAL_ADC_ConfigChannel+0x2a0>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4a25      	ldr	r2, [pc, #148]	; (800244c <HAL_ADC_ConfigChannel+0x2a0>)
 80023b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023bc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80023be:	4b23      	ldr	r3, [pc, #140]	; (800244c <HAL_ADC_ConfigChannel+0x2a0>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4a22      	ldr	r2, [pc, #136]	; (800244c <HAL_ADC_ConfigChannel+0x2a0>)
 80023c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1e      	ldr	r2, [pc, #120]	; (8002448 <HAL_ADC_ConfigChannel+0x29c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d12b      	bne.n	800242c <HAL_ADC_ConfigChannel+0x280>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a1a      	ldr	r2, [pc, #104]	; (8002444 <HAL_ADC_ConfigChannel+0x298>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d003      	beq.n	80023e6 <HAL_ADC_ConfigChannel+0x23a>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b11      	cmp	r3, #17
 80023e4:	d122      	bne.n	800242c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_ADC_ConfigChannel+0x2a0>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4a18      	ldr	r2, [pc, #96]	; (800244c <HAL_ADC_ConfigChannel+0x2a0>)
 80023ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80023f0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_ADC_ConfigChannel+0x2a0>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4a15      	ldr	r2, [pc, #84]	; (800244c <HAL_ADC_ConfigChannel+0x2a0>)
 80023f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023fc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a10      	ldr	r2, [pc, #64]	; (8002444 <HAL_ADC_ConfigChannel+0x298>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d111      	bne.n	800242c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_ADC_ConfigChannel+0x2a4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a11      	ldr	r2, [pc, #68]	; (8002454 <HAL_ADC_ConfigChannel+0x2a8>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	0c9a      	lsrs	r2, r3, #18
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800241e:	e002      	b.n	8002426 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	3b01      	subs	r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f9      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	10000012 	.word	0x10000012
 8002448:	40012000 	.word	0x40012000
 800244c:	40012300 	.word	0x40012300
 8002450:	20000004 	.word	0x20000004
 8002454:	431bde83 	.word	0x431bde83

08002458 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002460:	4b78      	ldr	r3, [pc, #480]	; (8002644 <ADC_Init+0x1ec>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a77      	ldr	r2, [pc, #476]	; (8002644 <ADC_Init+0x1ec>)
 8002466:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800246a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800246c:	4b75      	ldr	r3, [pc, #468]	; (8002644 <ADC_Init+0x1ec>)
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4973      	ldr	r1, [pc, #460]	; (8002644 <ADC_Init+0x1ec>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002488:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6859      	ldr	r1, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	021a      	lsls	r2, r3, #8
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6899      	ldr	r1, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	4a58      	ldr	r2, [pc, #352]	; (8002648 <ADC_Init+0x1f0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d022      	beq.n	8002532 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6899      	ldr	r1, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800251c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6899      	ldr	r1, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	e00f      	b.n	8002552 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002550:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0202 	bic.w	r2, r2, #2
 8002560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6899      	ldr	r1, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	005a      	lsls	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01b      	beq.n	80025b8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800258e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800259e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6859      	ldr	r1, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	3b01      	subs	r3, #1
 80025ac:	035a      	lsls	r2, r3, #13
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	e007      	b.n	80025c8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	051a      	lsls	r2, r3, #20
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6899      	ldr	r1, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800260a:	025a      	lsls	r2, r3, #9
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6899      	ldr	r1, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	029a      	lsls	r2, r3, #10
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	609a      	str	r2, [r3, #8]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	40012300 	.word	0x40012300
 8002648:	0f000001 	.word	0x0f000001

0800264c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <__NVIC_SetPriorityGrouping+0x40>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	4313      	orrs	r3, r2
 8002678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267a:	4a04      	ldr	r2, [pc, #16]	; (800268c <__NVIC_SetPriorityGrouping+0x40>)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	60d3      	str	r3, [r2, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000ed00 	.word	0xe000ed00
 8002690:	05fa0000 	.word	0x05fa0000

08002694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <__NVIC_GetPriorityGrouping+0x18>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	f003 0307 	and.w	r3, r3, #7
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	; (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	; (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f1c3 0307 	rsb	r3, r3, #7
 800271e:	2b04      	cmp	r3, #4
 8002720:	bf28      	it	cs
 8002722:	2304      	movcs	r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3304      	adds	r3, #4
 800272a:	2b06      	cmp	r3, #6
 800272c:	d902      	bls.n	8002734 <NVIC_EncodePriority+0x30>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3b03      	subs	r3, #3
 8002732:	e000      	b.n	8002736 <NVIC_EncodePriority+0x32>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	f04f 32ff 	mov.w	r2, #4294967295
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43d9      	mvns	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	4313      	orrs	r3, r2
         );
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800277c:	d301      	bcc.n	8002782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277e:	2301      	movs	r3, #1
 8002780:	e00f      	b.n	80027a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <SysTick_Config+0x40>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278a:	210f      	movs	r1, #15
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	f7ff ff8e 	bl	80026b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <SysTick_Config+0x40>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <SysTick_Config+0x40>)
 800279c:	2207      	movs	r2, #7
 800279e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	e000e010 	.word	0xe000e010

080027b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff47 	bl	800264c <__NVIC_SetPriorityGrouping>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d8:	f7ff ff5c 	bl	8002694 <__NVIC_GetPriorityGrouping>
 80027dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f7ff ff8e 	bl	8002704 <NVIC_EncodePriority>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff5d 	bl	80026b0 <__NVIC_SetPriority>
}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ffb0 	bl	800276c <SysTick_Config>
 800280c:	4603      	mov	r3, r0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e175      	b.n	8002b24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002838:	2201      	movs	r2, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	429a      	cmp	r2, r3
 8002852:	f040 8164 	bne.w	8002b1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d005      	beq.n	800286e <HAL_GPIO_Init+0x56>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d130      	bne.n	80028d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	2203      	movs	r2, #3
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a4:	2201      	movs	r2, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 0201 	and.w	r2, r3, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d017      	beq.n	800290c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d123      	bne.n	8002960 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	220f      	movs	r2, #15
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	69b9      	ldr	r1, [r7, #24]
 800295c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0203 	and.w	r2, r3, #3
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80be 	beq.w	8002b1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	4b66      	ldr	r3, [pc, #408]	; (8002b3c <HAL_GPIO_Init+0x324>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	4a65      	ldr	r2, [pc, #404]	; (8002b3c <HAL_GPIO_Init+0x324>)
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	4b63      	ldr	r3, [pc, #396]	; (8002b3c <HAL_GPIO_Init+0x324>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029ba:	4a61      	ldr	r2, [pc, #388]	; (8002b40 <HAL_GPIO_Init+0x328>)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a58      	ldr	r2, [pc, #352]	; (8002b44 <HAL_GPIO_Init+0x32c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d037      	beq.n	8002a56 <HAL_GPIO_Init+0x23e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a57      	ldr	r2, [pc, #348]	; (8002b48 <HAL_GPIO_Init+0x330>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d031      	beq.n	8002a52 <HAL_GPIO_Init+0x23a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a56      	ldr	r2, [pc, #344]	; (8002b4c <HAL_GPIO_Init+0x334>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d02b      	beq.n	8002a4e <HAL_GPIO_Init+0x236>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a55      	ldr	r2, [pc, #340]	; (8002b50 <HAL_GPIO_Init+0x338>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d025      	beq.n	8002a4a <HAL_GPIO_Init+0x232>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a54      	ldr	r2, [pc, #336]	; (8002b54 <HAL_GPIO_Init+0x33c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01f      	beq.n	8002a46 <HAL_GPIO_Init+0x22e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a53      	ldr	r2, [pc, #332]	; (8002b58 <HAL_GPIO_Init+0x340>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d019      	beq.n	8002a42 <HAL_GPIO_Init+0x22a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a52      	ldr	r2, [pc, #328]	; (8002b5c <HAL_GPIO_Init+0x344>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_GPIO_Init+0x226>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a51      	ldr	r2, [pc, #324]	; (8002b60 <HAL_GPIO_Init+0x348>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00d      	beq.n	8002a3a <HAL_GPIO_Init+0x222>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a50      	ldr	r2, [pc, #320]	; (8002b64 <HAL_GPIO_Init+0x34c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <HAL_GPIO_Init+0x21e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4f      	ldr	r2, [pc, #316]	; (8002b68 <HAL_GPIO_Init+0x350>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_GPIO_Init+0x21a>
 8002a2e:	2309      	movs	r3, #9
 8002a30:	e012      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a32:	230a      	movs	r3, #10
 8002a34:	e010      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a36:	2308      	movs	r3, #8
 8002a38:	e00e      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	e00c      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a3e:	2306      	movs	r3, #6
 8002a40:	e00a      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a42:	2305      	movs	r3, #5
 8002a44:	e008      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a46:	2304      	movs	r3, #4
 8002a48:	e006      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e004      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e002      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a56:	2300      	movs	r3, #0
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	f002 0203 	and.w	r2, r2, #3
 8002a5e:	0092      	lsls	r2, r2, #2
 8002a60:	4093      	lsls	r3, r2
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a68:	4935      	ldr	r1, [pc, #212]	; (8002b40 <HAL_GPIO_Init+0x328>)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	089b      	lsrs	r3, r3, #2
 8002a6e:	3302      	adds	r3, #2
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a76:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a9a:	4a34      	ldr	r2, [pc, #208]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa0:	4b32      	ldr	r3, [pc, #200]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac4:	4a29      	ldr	r2, [pc, #164]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aca:	4b28      	ldr	r3, [pc, #160]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aee:	4a1f      	ldr	r2, [pc, #124]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af4:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b18:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <HAL_GPIO_Init+0x354>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3301      	adds	r3, #1
 8002b22:	61fb      	str	r3, [r7, #28]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b0f      	cmp	r3, #15
 8002b28:	f67f ae86 	bls.w	8002838 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	3724      	adds	r7, #36	; 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40013800 	.word	0x40013800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	40020800 	.word	0x40020800
 8002b50:	40020c00 	.word	0x40020c00
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40021400 	.word	0x40021400
 8002b5c:	40021800 	.word	0x40021800
 8002b60:	40021c00 	.word	0x40021c00
 8002b64:	40022000 	.word	0x40022000
 8002b68:	40022400 	.word	0x40022400
 8002b6c:	40013c00 	.word	0x40013c00

08002b70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	e001      	b.n	8002b92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
 8002bac:	4613      	mov	r3, r2
 8002bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb0:	787b      	ldrb	r3, [r7, #1]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002bbc:	e003      	b.n	8002bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002bbe:	887b      	ldrh	r3, [r7, #2]
 8002bc0:	041a      	lsls	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	619a      	str	r2, [r3, #24]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c02:	f7ff f8c5 	bl	8001d90 <HAL_GetTick>
 8002c06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c08:	e009      	b.n	8002c1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c0a:	f7ff f8c1 	bl	8001d90 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c18:	d901      	bls.n	8002c1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e022      	b.n	8002c64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2a:	d1ee      	bne.n	8002c0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c2c:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0f      	ldr	r2, [pc, #60]	; (8002c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c38:	f7ff f8aa 	bl	8001d90 <HAL_GetTick>
 8002c3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c3e:	e009      	b.n	8002c54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c40:	f7ff f8a6 	bl	8001d90 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c4e:	d901      	bls.n	8002c54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e007      	b.n	8002c64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c60:	d1ee      	bne.n	8002c40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40007000 	.word	0x40007000

08002c74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e29b      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8087 	beq.w	8002da6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c98:	4b96      	ldr	r3, [pc, #600]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d00c      	beq.n	8002cbe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca4:	4b93      	ldr	r3, [pc, #588]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d112      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x62>
 8002cb0:	4b90      	ldr	r3, [pc, #576]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbe:	4b8d      	ldr	r3, [pc, #564]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d06c      	beq.n	8002da4 <HAL_RCC_OscConfig+0x130>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d168      	bne.n	8002da4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e275      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x7a>
 8002ce0:	4b84      	ldr	r3, [pc, #528]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a83      	ldr	r2, [pc, #524]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	e02e      	b.n	8002d4c <HAL_RCC_OscConfig+0xd8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x9c>
 8002cf6:	4b7f      	ldr	r3, [pc, #508]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a7e      	ldr	r2, [pc, #504]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b7c      	ldr	r3, [pc, #496]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a7b      	ldr	r2, [pc, #492]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e01d      	b.n	8002d4c <HAL_RCC_OscConfig+0xd8>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0xc0>
 8002d1a:	4b76      	ldr	r3, [pc, #472]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a75      	ldr	r2, [pc, #468]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b73      	ldr	r3, [pc, #460]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a72      	ldr	r2, [pc, #456]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0xd8>
 8002d34:	4b6f      	ldr	r3, [pc, #444]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a6e      	ldr	r2, [pc, #440]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b6c      	ldr	r3, [pc, #432]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6b      	ldr	r2, [pc, #428]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7ff f81c 	bl	8001d90 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7ff f818 	bl	8001d90 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e229      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	4b61      	ldr	r3, [pc, #388]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0xe8>
 8002d7a:	e014      	b.n	8002da6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7ff f808 	bl	8001d90 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d84:	f7ff f804 	bl	8001d90 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e215      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	4b57      	ldr	r3, [pc, #348]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x110>
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d069      	beq.n	8002e86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db2:	4b50      	ldr	r3, [pc, #320]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dbe:	4b4d      	ldr	r3, [pc, #308]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d11c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x190>
 8002dca:	4b4a      	ldr	r3, [pc, #296]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d116      	bne.n	8002e04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	4b47      	ldr	r3, [pc, #284]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_RCC_OscConfig+0x17a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e1e9      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	4b41      	ldr	r3, [pc, #260]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	493d      	ldr	r1, [pc, #244]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e02:	e040      	b.n	8002e86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d023      	beq.n	8002e54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e0c:	4b39      	ldr	r3, [pc, #228]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a38      	ldr	r2, [pc, #224]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe ffba 	bl	8001d90 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e20:	f7fe ffb6 	bl	8001d90 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e1c7      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4929      	ldr	r1, [pc, #164]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
 8002e52:	e018      	b.n	8002e86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a26      	ldr	r2, [pc, #152]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e5a:	f023 0301 	bic.w	r3, r3, #1
 8002e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe ff96 	bl	8001d90 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e68:	f7fe ff92 	bl	8001d90 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1a3      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d038      	beq.n	8002f04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d019      	beq.n	8002ece <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9a:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9e:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea6:	f7fe ff73 	bl	8001d90 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eae:	f7fe ff6f 	bl	8001d90 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e180      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x23a>
 8002ecc:	e01a      	b.n	8002f04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed2:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eda:	f7fe ff59 	bl	8001d90 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee2:	f7fe ff55 	bl	8001d90 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d903      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e166      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
 8002ef4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef8:	4b92      	ldr	r3, [pc, #584]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ee      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80a4 	beq.w	800305a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f12:	4b8c      	ldr	r3, [pc, #560]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10d      	bne.n	8002f3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	4b89      	ldr	r3, [pc, #548]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	4a88      	ldr	r2, [pc, #544]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2a:	4b86      	ldr	r3, [pc, #536]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3a:	4b83      	ldr	r3, [pc, #524]	; (8003148 <HAL_RCC_OscConfig+0x4d4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d118      	bne.n	8002f78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f46:	4b80      	ldr	r3, [pc, #512]	; (8003148 <HAL_RCC_OscConfig+0x4d4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a7f      	ldr	r2, [pc, #508]	; (8003148 <HAL_RCC_OscConfig+0x4d4>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f52:	f7fe ff1d 	bl	8001d90 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7fe ff19 	bl	8001d90 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b64      	cmp	r3, #100	; 0x64
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e12a      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f6c:	4b76      	ldr	r3, [pc, #472]	; (8003148 <HAL_RCC_OscConfig+0x4d4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_OscConfig+0x31a>
 8002f80:	4b70      	ldr	r3, [pc, #448]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	4a6f      	ldr	r2, [pc, #444]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8c:	e02d      	b.n	8002fea <HAL_RCC_OscConfig+0x376>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x33c>
 8002f96:	4b6b      	ldr	r3, [pc, #428]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	4a6a      	ldr	r2, [pc, #424]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa2:	4b68      	ldr	r3, [pc, #416]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	4a67      	ldr	r2, [pc, #412]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	6713      	str	r3, [r2, #112]	; 0x70
 8002fae:	e01c      	b.n	8002fea <HAL_RCC_OscConfig+0x376>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	d10c      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x35e>
 8002fb8:	4b62      	ldr	r3, [pc, #392]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	4a61      	ldr	r2, [pc, #388]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc4:	4b5f      	ldr	r3, [pc, #380]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	4a5e      	ldr	r2, [pc, #376]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd0:	e00b      	b.n	8002fea <HAL_RCC_OscConfig+0x376>
 8002fd2:	4b5c      	ldr	r3, [pc, #368]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	4a5b      	ldr	r2, [pc, #364]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fde:	4b59      	ldr	r3, [pc, #356]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	4a58      	ldr	r2, [pc, #352]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fe4:	f023 0304 	bic.w	r3, r3, #4
 8002fe8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d015      	beq.n	800301e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fecd 	bl	8001d90 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff8:	e00a      	b.n	8003010 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffa:	f7fe fec9 	bl	8001d90 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	; 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0d8      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003010:	4b4c      	ldr	r3, [pc, #304]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ee      	beq.n	8002ffa <HAL_RCC_OscConfig+0x386>
 800301c:	e014      	b.n	8003048 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301e:	f7fe feb7 	bl	8001d90 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003026:	f7fe feb3 	bl	8001d90 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	; 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e0c2      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303c:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1ee      	bne.n	8003026 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d105      	bne.n	800305a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304e:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	4a3c      	ldr	r2, [pc, #240]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003058:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80ae 	beq.w	80031c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003064:	4b37      	ldr	r3, [pc, #220]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b08      	cmp	r3, #8
 800306e:	d06d      	beq.n	800314c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d14b      	bne.n	8003110 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003078:	4b32      	ldr	r3, [pc, #200]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a31      	ldr	r2, [pc, #196]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 800307e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fe fe84 	bl	8001d90 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe fe80 	bl	8001d90 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e091      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	4b29      	ldr	r3, [pc, #164]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	019b      	lsls	r3, r3, #6
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	085b      	lsrs	r3, r3, #1
 80030c2:	3b01      	subs	r3, #1
 80030c4:	041b      	lsls	r3, r3, #16
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	071b      	lsls	r3, r3, #28
 80030d6:	491b      	ldr	r1, [pc, #108]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a18      	ldr	r2, [pc, #96]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 80030e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe fe52 	bl	8001d90 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fe fe4e 	bl	8001d90 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e05f      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x47c>
 800310e:	e057      	b.n	80031c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0b      	ldr	r2, [pc, #44]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800311a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe fe38 	bl	8001d90 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003124:	f7fe fe34 	bl	8001d90 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e045      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x4b0>
 8003142:	e03d      	b.n	80031c0 <HAL_RCC_OscConfig+0x54c>
 8003144:	40023800 	.word	0x40023800
 8003148:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800314c:	4b1f      	ldr	r3, [pc, #124]	; (80031cc <HAL_RCC_OscConfig+0x558>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d030      	beq.n	80031bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d129      	bne.n	80031bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d122      	bne.n	80031bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800317c:	4013      	ands	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003182:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003184:	4293      	cmp	r3, r2
 8003186:	d119      	bne.n	80031bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	3b01      	subs	r3, #1
 8003196:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d10f      	bne.n	80031bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800

080031d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0d0      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4b6a      	ldr	r3, [pc, #424]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d910      	bls.n	8003218 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b67      	ldr	r3, [pc, #412]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 020f 	bic.w	r2, r3, #15
 80031fe:	4965      	ldr	r1, [pc, #404]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b63      	ldr	r3, [pc, #396]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0b8      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003230:	4b59      	ldr	r3, [pc, #356]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a58      	ldr	r2, [pc, #352]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003248:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a52      	ldr	r2, [pc, #328]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800324e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003252:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003254:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	494d      	ldr	r1, [pc, #308]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d040      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d115      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003292:	4b41      	ldr	r3, [pc, #260]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e073      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e06b      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b2:	4b39      	ldr	r3, [pc, #228]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f023 0203 	bic.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4936      	ldr	r1, [pc, #216]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c4:	f7fe fd64 	bl	8001d90 <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032cc:	f7fe fd60 	bl	8001d90 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e053      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	4b2d      	ldr	r3, [pc, #180]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 020c 	and.w	r2, r3, #12
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1eb      	bne.n	80032cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f4:	4b27      	ldr	r3, [pc, #156]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d210      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 020f 	bic.w	r2, r3, #15
 800330a:	4922      	ldr	r1, [pc, #136]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e032      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4916      	ldr	r1, [pc, #88]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	490e      	ldr	r1, [pc, #56]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003362:	f000 f821 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003366:	4602      	mov	r2, r0
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	490a      	ldr	r1, [pc, #40]	; (800339c <HAL_RCC_ClockConfig+0x1cc>)
 8003374:	5ccb      	ldrb	r3, [r1, r3]
 8003376:	fa22 f303 	lsr.w	r3, r2, r3
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_RCC_ClockConfig+0x1d0>)
 800337c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1d4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe fcc0 	bl	8001d08 <HAL_InitTick>

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023c00 	.word	0x40023c00
 8003398:	40023800 	.word	0x40023800
 800339c:	08008868 	.word	0x08008868
 80033a0:	20000004 	.word	0x20000004
 80033a4:	20000008 	.word	0x20000008

080033a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ac:	b094      	sub	sp, #80	; 0x50
 80033ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	647b      	str	r3, [r7, #68]	; 0x44
 80033b4:	2300      	movs	r3, #0
 80033b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b8:	2300      	movs	r3, #0
 80033ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c0:	4b79      	ldr	r3, [pc, #484]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 030c 	and.w	r3, r3, #12
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d00d      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x40>
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	f200 80e1 	bhi.w	8003594 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x34>
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033da:	e0db      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4b73      	ldr	r3, [pc, #460]	; (80035ac <HAL_RCC_GetSysClockFreq+0x204>)
 80033de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e0:	e0db      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e2:	4b73      	ldr	r3, [pc, #460]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80033e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e6:	e0d8      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e8:	4b6f      	ldr	r3, [pc, #444]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033f2:	4b6d      	ldr	r3, [pc, #436]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d063      	beq.n	80034c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fe:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	2200      	movs	r2, #0
 8003406:	63bb      	str	r3, [r7, #56]	; 0x38
 8003408:	63fa      	str	r2, [r7, #60]	; 0x3c
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003410:	633b      	str	r3, [r7, #48]	; 0x30
 8003412:	2300      	movs	r3, #0
 8003414:	637b      	str	r3, [r7, #52]	; 0x34
 8003416:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800341a:	4622      	mov	r2, r4
 800341c:	462b      	mov	r3, r5
 800341e:	f04f 0000 	mov.w	r0, #0
 8003422:	f04f 0100 	mov.w	r1, #0
 8003426:	0159      	lsls	r1, r3, #5
 8003428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800342c:	0150      	lsls	r0, r2, #5
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4621      	mov	r1, r4
 8003434:	1a51      	subs	r1, r2, r1
 8003436:	6139      	str	r1, [r7, #16]
 8003438:	4629      	mov	r1, r5
 800343a:	eb63 0301 	sbc.w	r3, r3, r1
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800344c:	4659      	mov	r1, fp
 800344e:	018b      	lsls	r3, r1, #6
 8003450:	4651      	mov	r1, sl
 8003452:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003456:	4651      	mov	r1, sl
 8003458:	018a      	lsls	r2, r1, #6
 800345a:	4651      	mov	r1, sl
 800345c:	ebb2 0801 	subs.w	r8, r2, r1
 8003460:	4659      	mov	r1, fp
 8003462:	eb63 0901 	sbc.w	r9, r3, r1
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800347a:	4690      	mov	r8, r2
 800347c:	4699      	mov	r9, r3
 800347e:	4623      	mov	r3, r4
 8003480:	eb18 0303 	adds.w	r3, r8, r3
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	462b      	mov	r3, r5
 8003488:	eb49 0303 	adc.w	r3, r9, r3
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800349a:	4629      	mov	r1, r5
 800349c:	024b      	lsls	r3, r1, #9
 800349e:	4621      	mov	r1, r4
 80034a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034a4:	4621      	mov	r1, r4
 80034a6:	024a      	lsls	r2, r1, #9
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ae:	2200      	movs	r2, #0
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034b8:	f7fd f8d6 	bl	8000668 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4613      	mov	r3, r2
 80034c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c4:	e058      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c6:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	099b      	lsrs	r3, r3, #6
 80034cc:	2200      	movs	r2, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	4611      	mov	r1, r2
 80034d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034d6:	623b      	str	r3, [r7, #32]
 80034d8:	2300      	movs	r3, #0
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
 80034dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034e0:	4642      	mov	r2, r8
 80034e2:	464b      	mov	r3, r9
 80034e4:	f04f 0000 	mov.w	r0, #0
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	0159      	lsls	r1, r3, #5
 80034ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f2:	0150      	lsls	r0, r2, #5
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4641      	mov	r1, r8
 80034fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80034fe:	4649      	mov	r1, r9
 8003500:	eb63 0b01 	sbc.w	fp, r3, r1
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003510:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003514:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003518:	ebb2 040a 	subs.w	r4, r2, sl
 800351c:	eb63 050b 	sbc.w	r5, r3, fp
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	00eb      	lsls	r3, r5, #3
 800352a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800352e:	00e2      	lsls	r2, r4, #3
 8003530:	4614      	mov	r4, r2
 8003532:	461d      	mov	r5, r3
 8003534:	4643      	mov	r3, r8
 8003536:	18e3      	adds	r3, r4, r3
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	464b      	mov	r3, r9
 800353c:	eb45 0303 	adc.w	r3, r5, r3
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800354e:	4629      	mov	r1, r5
 8003550:	028b      	lsls	r3, r1, #10
 8003552:	4621      	mov	r1, r4
 8003554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003558:	4621      	mov	r1, r4
 800355a:	028a      	lsls	r2, r1, #10
 800355c:	4610      	mov	r0, r2
 800355e:	4619      	mov	r1, r3
 8003560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003562:	2200      	movs	r2, #0
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	61fa      	str	r2, [r7, #28]
 8003568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800356c:	f7fd f87c 	bl	8000668 <__aeabi_uldivmod>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4613      	mov	r3, r2
 8003576:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	0c1b      	lsrs	r3, r3, #16
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	3301      	adds	r3, #1
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003588:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800358a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800358c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003590:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003592:	e002      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003596:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800359c:	4618      	mov	r0, r3
 800359e:	3750      	adds	r7, #80	; 0x50
 80035a0:	46bd      	mov	sp, r7
 80035a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800
 80035ac:	00f42400 	.word	0x00f42400
 80035b0:	007a1200 	.word	0x007a1200

080035b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e09d      	b.n	8003702 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d108      	bne.n	80035e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035d6:	d009      	beq.n	80035ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	61da      	str	r2, [r3, #28]
 80035de:	e005      	b.n	80035ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fe f9ea 	bl	80019e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003622:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800362c:	d902      	bls.n	8003634 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	e002      	b.n	800363a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003638:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003642:	d007      	beq.n	8003654 <HAL_SPI_Init+0xa0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800364c:	d002      	beq.n	8003654 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003696:	ea42 0103 	orr.w	r1, r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	0c1b      	lsrs	r3, r3, #16
 80036b0:	f003 0204 	and.w	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80036d0:	ea42 0103 	orr.w	r1, r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b088      	sub	sp, #32
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	4613      	mov	r3, r2
 8003718:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_SPI_Transmit+0x22>
 8003728:	2302      	movs	r3, #2
 800372a:	e158      	b.n	80039de <HAL_SPI_Transmit+0x2d4>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003734:	f7fe fb2c 	bl	8001d90 <HAL_GetTick>
 8003738:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d002      	beq.n	8003750 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800374a:	2302      	movs	r3, #2
 800374c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800374e:	e13d      	b.n	80039cc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_SPI_Transmit+0x52>
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d102      	bne.n	8003762 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003760:	e134      	b.n	80039cc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2203      	movs	r2, #3
 8003766:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	88fa      	ldrh	r2, [r7, #6]
 800377a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	88fa      	ldrh	r2, [r7, #6]
 8003780:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ac:	d10f      	bne.n	80037ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d007      	beq.n	80037ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037f4:	d94b      	bls.n	800388e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_SPI_Transmit+0xfa>
 80037fe:	8afb      	ldrh	r3, [r7, #22]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d13e      	bne.n	8003882 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	881a      	ldrh	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	1c9a      	adds	r2, r3, #2
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003828:	e02b      	b.n	8003882 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b02      	cmp	r3, #2
 8003836:	d112      	bne.n	800385e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	881a      	ldrh	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	1c9a      	adds	r2, r3, #2
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800385c:	e011      	b.n	8003882 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800385e:	f7fe fa97 	bl	8001d90 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d803      	bhi.n	8003876 <HAL_SPI_Transmit+0x16c>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d102      	bne.n	800387c <HAL_SPI_Transmit+0x172>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d102      	bne.n	8003882 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003880:	e0a4      	b.n	80039cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1ce      	bne.n	800382a <HAL_SPI_Transmit+0x120>
 800388c:	e07c      	b.n	8003988 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_SPI_Transmit+0x192>
 8003896:	8afb      	ldrh	r3, [r7, #22]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d170      	bne.n	800397e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d912      	bls.n	80038cc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	881a      	ldrh	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	1c9a      	adds	r2, r3, #2
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b02      	subs	r3, #2
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038ca:	e058      	b.n	800397e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	330c      	adds	r3, #12
 80038d6:	7812      	ldrb	r2, [r2, #0]
 80038d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80038f2:	e044      	b.n	800397e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d12b      	bne.n	800395a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d912      	bls.n	8003932 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	881a      	ldrh	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	1c9a      	adds	r2, r3, #2
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b02      	subs	r3, #2
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003930:	e025      	b.n	800397e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003958:	e011      	b.n	800397e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800395a:	f7fe fa19 	bl	8001d90 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d803      	bhi.n	8003972 <HAL_SPI_Transmit+0x268>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d102      	bne.n	8003978 <HAL_SPI_Transmit+0x26e>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800397c:	e026      	b.n	80039cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1b5      	bne.n	80038f4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	6839      	ldr	r1, [r7, #0]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 fb5b 	bl	8004048 <SPI_EndRxTxTransaction>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2220      	movs	r2, #32
 800399c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e000      	b.n	80039cc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80039ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b08a      	sub	sp, #40	; 0x28
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039f4:	2301      	movs	r3, #1
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_SPI_TransmitReceive+0x26>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e1fb      	b.n	8003e04 <HAL_SPI_TransmitReceive+0x41e>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a14:	f7fe f9bc 	bl	8001d90 <HAL_GetTick>
 8003a18:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a20:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003a28:	887b      	ldrh	r3, [r7, #2]
 8003a2a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003a2c:	887b      	ldrh	r3, [r7, #2]
 8003a2e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a30:	7efb      	ldrb	r3, [r7, #27]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d00e      	beq.n	8003a54 <HAL_SPI_TransmitReceive+0x6e>
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a3c:	d106      	bne.n	8003a4c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d102      	bne.n	8003a4c <HAL_SPI_TransmitReceive+0x66>
 8003a46:	7efb      	ldrb	r3, [r7, #27]
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d003      	beq.n	8003a54 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003a52:	e1cd      	b.n	8003df0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_SPI_TransmitReceive+0x80>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_SPI_TransmitReceive+0x80>
 8003a60:	887b      	ldrh	r3, [r7, #2]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003a6c:	e1c0      	b.n	8003df0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d003      	beq.n	8003a82 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2205      	movs	r2, #5
 8003a7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	887a      	ldrh	r2, [r7, #2]
 8003a92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	887a      	ldrh	r2, [r7, #2]
 8003a9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	887a      	ldrh	r2, [r7, #2]
 8003aae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ac4:	d802      	bhi.n	8003acc <HAL_SPI_TransmitReceive+0xe6>
 8003ac6:	8a3b      	ldrh	r3, [r7, #16]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d908      	bls.n	8003ade <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	e007      	b.n	8003aee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003aec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d007      	beq.n	8003b0c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b14:	d97c      	bls.n	8003c10 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_SPI_TransmitReceive+0x13e>
 8003b1e:	8a7b      	ldrh	r3, [r7, #18]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d169      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	1c9a      	adds	r2, r3, #2
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b48:	e056      	b.n	8003bf8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d11b      	bne.n	8003b90 <HAL_SPI_TransmitReceive+0x1aa>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d016      	beq.n	8003b90 <HAL_SPI_TransmitReceive+0x1aa>
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d113      	bne.n	8003b90 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	881a      	ldrh	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	1c9a      	adds	r2, r3, #2
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d11c      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x1f2>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	b292      	uxth	r2, r2
 8003bb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	1c9a      	adds	r2, r3, #2
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bd8:	f7fe f8da 	bl	8001d90 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d807      	bhi.n	8003bf8 <HAL_SPI_TransmitReceive+0x212>
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d003      	beq.n	8003bf8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003bf6:	e0fb      	b.n	8003df0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1a3      	bne.n	8003b4a <HAL_SPI_TransmitReceive+0x164>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d19d      	bne.n	8003b4a <HAL_SPI_TransmitReceive+0x164>
 8003c0e:	e0df      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_SPI_TransmitReceive+0x23a>
 8003c18:	8a7b      	ldrh	r3, [r7, #18]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	f040 80cb 	bne.w	8003db6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d912      	bls.n	8003c50 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	881a      	ldrh	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	1c9a      	adds	r2, r3, #2
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b02      	subs	r3, #2
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c4e:	e0b2      	b.n	8003db6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	7812      	ldrb	r2, [r2, #0]
 8003c5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c76:	e09e      	b.n	8003db6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d134      	bne.n	8003cf0 <HAL_SPI_TransmitReceive+0x30a>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02f      	beq.n	8003cf0 <HAL_SPI_TransmitReceive+0x30a>
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d12c      	bne.n	8003cf0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d912      	bls.n	8003cc6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	881a      	ldrh	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	1c9a      	adds	r2, r3, #2
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b02      	subs	r3, #2
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cc4:	e012      	b.n	8003cec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	7812      	ldrb	r2, [r2, #0]
 8003cd2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d148      	bne.n	8003d90 <HAL_SPI_TransmitReceive+0x3aa>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d042      	beq.n	8003d90 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d923      	bls.n	8003d5e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	b292      	uxth	r2, r2
 8003d22:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	1c9a      	adds	r2, r3, #2
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b02      	subs	r3, #2
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d81f      	bhi.n	8003d8c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d5a:	605a      	str	r2, [r3, #4]
 8003d5c:	e016      	b.n	8003d8c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f103 020c 	add.w	r2, r3, #12
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	7812      	ldrb	r2, [r2, #0]
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d90:	f7fd fffe 	bl	8001d90 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d803      	bhi.n	8003da8 <HAL_SPI_TransmitReceive+0x3c2>
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d102      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x3c8>
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003db4:	e01c      	b.n	8003df0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f47f af5b 	bne.w	8003c78 <HAL_SPI_TransmitReceive+0x292>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f47f af54 	bne.w	8003c78 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f937 	bl	8004048 <SPI_EndRxTxTransaction>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d006      	beq.n	8003dee <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	661a      	str	r2, [r3, #96]	; 0x60
 8003dec:	e000      	b.n	8003df0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003dee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3728      	adds	r7, #40	; 0x28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e1c:	f7fd ffb8 	bl	8001d90 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	4413      	add	r3, r2
 8003e2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e2c:	f7fd ffb0 	bl	8001d90 <HAL_GetTick>
 8003e30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e32:	4b39      	ldr	r3, [pc, #228]	; (8003f18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	015b      	lsls	r3, r3, #5
 8003e38:	0d1b      	lsrs	r3, r3, #20
 8003e3a:	69fa      	ldr	r2, [r7, #28]
 8003e3c:	fb02 f303 	mul.w	r3, r2, r3
 8003e40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e42:	e054      	b.n	8003eee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4a:	d050      	beq.n	8003eee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e4c:	f7fd ffa0 	bl	8001d90 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d902      	bls.n	8003e62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d13d      	bne.n	8003ede <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e7a:	d111      	bne.n	8003ea0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e84:	d004      	beq.n	8003e90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e8e:	d107      	bne.n	8003ea0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea8:	d10f      	bne.n	8003eca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ec8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e017      	b.n	8003f0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	bf0c      	ite	eq
 8003efe:	2301      	moveq	r3, #1
 8003f00:	2300      	movne	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d19b      	bne.n	8003e44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000004 	.word	0x20000004

08003f1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f2e:	f7fd ff2f 	bl	8001d90 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003f3e:	f7fd ff27 	bl	8001d90 <HAL_GetTick>
 8003f42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f4c:	4b3d      	ldr	r3, [pc, #244]	; (8004044 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	00da      	lsls	r2, r3, #3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	0d1b      	lsrs	r3, r3, #20
 8003f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f64:	e060      	b.n	8004028 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f6c:	d107      	bne.n	8003f7e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d104      	bne.n	8003f7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d050      	beq.n	8004028 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f86:	f7fd ff03 	bl	8001d90 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d902      	bls.n	8003f9c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d13d      	bne.n	8004018 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003faa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb4:	d111      	bne.n	8003fda <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fbe:	d004      	beq.n	8003fca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc8:	d107      	bne.n	8003fda <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	d10f      	bne.n	8004004 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004002:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e010      	b.n	800403a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	3b01      	subs	r3, #1
 8004026:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4013      	ands	r3, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	429a      	cmp	r2, r3
 8004036:	d196      	bne.n	8003f66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3728      	adds	r7, #40	; 0x28
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000004 	.word	0x20000004

08004048 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2200      	movs	r2, #0
 800405c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff ff5b 	bl	8003f1c <SPI_WaitFifoStateUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004070:	f043 0220 	orr.w	r2, r3, #32
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e046      	b.n	800410a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800407c:	4b25      	ldr	r3, [pc, #148]	; (8004114 <SPI_EndRxTxTransaction+0xcc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a25      	ldr	r2, [pc, #148]	; (8004118 <SPI_EndRxTxTransaction+0xd0>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	0d5b      	lsrs	r3, r3, #21
 8004088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800408c:	fb02 f303 	mul.w	r3, r2, r3
 8004090:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800409a:	d112      	bne.n	80040c2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2200      	movs	r2, #0
 80040a4:	2180      	movs	r1, #128	; 0x80
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff feb0 	bl	8003e0c <SPI_WaitFlagStateUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d016      	beq.n	80040e0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b6:	f043 0220 	orr.w	r2, r3, #32
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e023      	b.n	800410a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d8:	2b80      	cmp	r3, #128	; 0x80
 80040da:	d0f2      	beq.n	80040c2 <SPI_EndRxTxTransaction+0x7a>
 80040dc:	e000      	b.n	80040e0 <SPI_EndRxTxTransaction+0x98>
        break;
 80040de:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7ff ff15 	bl	8003f1c <SPI_WaitFifoStateUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d007      	beq.n	8004108 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e000      	b.n	800410a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000004 	.word	0x20000004
 8004118:	165e9f81 	.word	0x165e9f81

0800411c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004120:	4904      	ldr	r1, [pc, #16]	; (8004134 <MX_FATFS_Init+0x18>)
 8004122:	4805      	ldr	r0, [pc, #20]	; (8004138 <MX_FATFS_Init+0x1c>)
 8004124:	f000 f8ae 	bl	8004284 <FATFS_LinkDriver>
 8004128:	4603      	mov	r3, r0
 800412a:	461a      	mov	r2, r3
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <MX_FATFS_Init+0x20>)
 800412e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004130:	bf00      	nop
 8004132:	bd80      	pop	{r7, pc}
 8004134:	200002d4 	.word	0x200002d4
 8004138:	20000010 	.word	0x20000010
 800413c:	200002d0 	.word	0x200002d0

08004140 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	4618      	mov	r0, r3
 800414e:	f7fc fdf5 	bl	8000d3c <SD_disk_initialize>
 8004152:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004154:	4618      	mov	r0, r3
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	4618      	mov	r0, r3
 800416a:	f7fc fecd 	bl	8000f08 <SD_disk_status>
 800416e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	4603      	mov	r3, r0
 8004186:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8004188:	7bf8      	ldrb	r0, [r7, #15]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	68b9      	ldr	r1, [r7, #8]
 8004190:	f7fc fed0 	bl	8000f34 <SD_disk_read>
 8004194:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	4603      	mov	r3, r0
 80041ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80041ae:	7bf8      	ldrb	r0, [r7, #15]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	f7fc ff27 	bl	8001008 <SD_disk_write>
 80041ba:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	603a      	str	r2, [r7, #0]
 80041ce:	71fb      	strb	r3, [r7, #7]
 80041d0:	460b      	mov	r3, r1
 80041d2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80041d4:	79b9      	ldrb	r1, [r7, #6]
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fc ff98 	bl	8001110 <SD_disk_ioctl>
 80041e0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	4613      	mov	r3, r2
 80041f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80041fa:	2301      	movs	r3, #1
 80041fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004202:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <FATFS_LinkDriverEx+0x94>)
 8004204:	7a5b      	ldrb	r3, [r3, #9]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d131      	bne.n	8004270 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800420c:	4b1c      	ldr	r3, [pc, #112]	; (8004280 <FATFS_LinkDriverEx+0x94>)
 800420e:	7a5b      	ldrb	r3, [r3, #9]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <FATFS_LinkDriverEx+0x94>)
 8004216:	2100      	movs	r1, #0
 8004218:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800421a:	4b19      	ldr	r3, [pc, #100]	; (8004280 <FATFS_LinkDriverEx+0x94>)
 800421c:	7a5b      	ldrb	r3, [r3, #9]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	4a17      	ldr	r2, [pc, #92]	; (8004280 <FATFS_LinkDriverEx+0x94>)
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <FATFS_LinkDriverEx+0x94>)
 800422c:	7a5b      	ldrb	r3, [r3, #9]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	4b13      	ldr	r3, [pc, #76]	; (8004280 <FATFS_LinkDriverEx+0x94>)
 8004234:	4413      	add	r3, r2
 8004236:	79fa      	ldrb	r2, [r7, #7]
 8004238:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800423a:	4b11      	ldr	r3, [pc, #68]	; (8004280 <FATFS_LinkDriverEx+0x94>)
 800423c:	7a5b      	ldrb	r3, [r3, #9]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	b2d1      	uxtb	r1, r2
 8004244:	4a0e      	ldr	r2, [pc, #56]	; (8004280 <FATFS_LinkDriverEx+0x94>)
 8004246:	7251      	strb	r1, [r2, #9]
 8004248:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800424a:	7dbb      	ldrb	r3, [r7, #22]
 800424c:	3330      	adds	r3, #48	; 0x30
 800424e:	b2da      	uxtb	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	3301      	adds	r3, #1
 8004258:	223a      	movs	r2, #58	; 0x3a
 800425a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	3302      	adds	r3, #2
 8004260:	222f      	movs	r2, #47	; 0x2f
 8004262:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	3303      	adds	r3, #3
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004270:	7dfb      	ldrb	r3, [r7, #23]
}
 8004272:	4618      	mov	r0, r3
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	200002d8 	.word	0x200002d8

08004284 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800428e:	2200      	movs	r2, #0
 8004290:	6839      	ldr	r1, [r7, #0]
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff ffaa 	bl	80041ec <FATFS_LinkDriverEx>
 8004298:	4603      	mov	r3, r0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <__cvt>:
 80042a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a4:	ed2d 8b02 	vpush	{d8}
 80042a8:	eeb0 8b40 	vmov.f64	d8, d0
 80042ac:	b085      	sub	sp, #20
 80042ae:	4617      	mov	r7, r2
 80042b0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80042b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80042b4:	ee18 2a90 	vmov	r2, s17
 80042b8:	f025 0520 	bic.w	r5, r5, #32
 80042bc:	2a00      	cmp	r2, #0
 80042be:	bfb6      	itet	lt
 80042c0:	222d      	movlt	r2, #45	; 0x2d
 80042c2:	2200      	movge	r2, #0
 80042c4:	eeb1 8b40 	vneglt.f64	d8, d0
 80042c8:	2d46      	cmp	r5, #70	; 0x46
 80042ca:	460c      	mov	r4, r1
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	d004      	beq.n	80042da <__cvt+0x38>
 80042d0:	2d45      	cmp	r5, #69	; 0x45
 80042d2:	d100      	bne.n	80042d6 <__cvt+0x34>
 80042d4:	3401      	adds	r4, #1
 80042d6:	2102      	movs	r1, #2
 80042d8:	e000      	b.n	80042dc <__cvt+0x3a>
 80042da:	2103      	movs	r1, #3
 80042dc:	ab03      	add	r3, sp, #12
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	ab02      	add	r3, sp, #8
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	4622      	mov	r2, r4
 80042e6:	4633      	mov	r3, r6
 80042e8:	eeb0 0b48 	vmov.f64	d0, d8
 80042ec:	f001 f850 	bl	8005390 <_dtoa_r>
 80042f0:	2d47      	cmp	r5, #71	; 0x47
 80042f2:	d101      	bne.n	80042f8 <__cvt+0x56>
 80042f4:	07fb      	lsls	r3, r7, #31
 80042f6:	d51a      	bpl.n	800432e <__cvt+0x8c>
 80042f8:	2d46      	cmp	r5, #70	; 0x46
 80042fa:	eb00 0204 	add.w	r2, r0, r4
 80042fe:	d10c      	bne.n	800431a <__cvt+0x78>
 8004300:	7803      	ldrb	r3, [r0, #0]
 8004302:	2b30      	cmp	r3, #48	; 0x30
 8004304:	d107      	bne.n	8004316 <__cvt+0x74>
 8004306:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800430a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430e:	bf1c      	itt	ne
 8004310:	f1c4 0401 	rsbne	r4, r4, #1
 8004314:	6034      	strne	r4, [r6, #0]
 8004316:	6833      	ldr	r3, [r6, #0]
 8004318:	441a      	add	r2, r3
 800431a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800431e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004322:	bf08      	it	eq
 8004324:	9203      	streq	r2, [sp, #12]
 8004326:	2130      	movs	r1, #48	; 0x30
 8004328:	9b03      	ldr	r3, [sp, #12]
 800432a:	4293      	cmp	r3, r2
 800432c:	d307      	bcc.n	800433e <__cvt+0x9c>
 800432e:	9b03      	ldr	r3, [sp, #12]
 8004330:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004332:	1a1b      	subs	r3, r3, r0
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	b005      	add	sp, #20
 8004338:	ecbd 8b02 	vpop	{d8}
 800433c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800433e:	1c5c      	adds	r4, r3, #1
 8004340:	9403      	str	r4, [sp, #12]
 8004342:	7019      	strb	r1, [r3, #0]
 8004344:	e7f0      	b.n	8004328 <__cvt+0x86>

08004346 <__exponent>:
 8004346:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004348:	4603      	mov	r3, r0
 800434a:	2900      	cmp	r1, #0
 800434c:	bfb8      	it	lt
 800434e:	4249      	neglt	r1, r1
 8004350:	f803 2b02 	strb.w	r2, [r3], #2
 8004354:	bfb4      	ite	lt
 8004356:	222d      	movlt	r2, #45	; 0x2d
 8004358:	222b      	movge	r2, #43	; 0x2b
 800435a:	2909      	cmp	r1, #9
 800435c:	7042      	strb	r2, [r0, #1]
 800435e:	dd2a      	ble.n	80043b6 <__exponent+0x70>
 8004360:	f10d 0207 	add.w	r2, sp, #7
 8004364:	4617      	mov	r7, r2
 8004366:	260a      	movs	r6, #10
 8004368:	4694      	mov	ip, r2
 800436a:	fb91 f5f6 	sdiv	r5, r1, r6
 800436e:	fb06 1415 	mls	r4, r6, r5, r1
 8004372:	3430      	adds	r4, #48	; 0x30
 8004374:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004378:	460c      	mov	r4, r1
 800437a:	2c63      	cmp	r4, #99	; 0x63
 800437c:	f102 32ff 	add.w	r2, r2, #4294967295
 8004380:	4629      	mov	r1, r5
 8004382:	dcf1      	bgt.n	8004368 <__exponent+0x22>
 8004384:	3130      	adds	r1, #48	; 0x30
 8004386:	f1ac 0402 	sub.w	r4, ip, #2
 800438a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800438e:	1c41      	adds	r1, r0, #1
 8004390:	4622      	mov	r2, r4
 8004392:	42ba      	cmp	r2, r7
 8004394:	d30a      	bcc.n	80043ac <__exponent+0x66>
 8004396:	f10d 0209 	add.w	r2, sp, #9
 800439a:	eba2 020c 	sub.w	r2, r2, ip
 800439e:	42bc      	cmp	r4, r7
 80043a0:	bf88      	it	hi
 80043a2:	2200      	movhi	r2, #0
 80043a4:	4413      	add	r3, r2
 80043a6:	1a18      	subs	r0, r3, r0
 80043a8:	b003      	add	sp, #12
 80043aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ac:	f812 5b01 	ldrb.w	r5, [r2], #1
 80043b0:	f801 5f01 	strb.w	r5, [r1, #1]!
 80043b4:	e7ed      	b.n	8004392 <__exponent+0x4c>
 80043b6:	2330      	movs	r3, #48	; 0x30
 80043b8:	3130      	adds	r1, #48	; 0x30
 80043ba:	7083      	strb	r3, [r0, #2]
 80043bc:	70c1      	strb	r1, [r0, #3]
 80043be:	1d03      	adds	r3, r0, #4
 80043c0:	e7f1      	b.n	80043a6 <__exponent+0x60>
 80043c2:	0000      	movs	r0, r0
 80043c4:	0000      	movs	r0, r0
	...

080043c8 <_printf_float>:
 80043c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	b08b      	sub	sp, #44	; 0x2c
 80043ce:	460c      	mov	r4, r1
 80043d0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80043d4:	4616      	mov	r6, r2
 80043d6:	461f      	mov	r7, r3
 80043d8:	4605      	mov	r5, r0
 80043da:	f000 fed1 	bl	8005180 <_localeconv_r>
 80043de:	f8d0 b000 	ldr.w	fp, [r0]
 80043e2:	4658      	mov	r0, fp
 80043e4:	f7fb ff7c 	bl	80002e0 <strlen>
 80043e8:	2300      	movs	r3, #0
 80043ea:	9308      	str	r3, [sp, #32]
 80043ec:	f8d8 3000 	ldr.w	r3, [r8]
 80043f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80043f4:	6822      	ldr	r2, [r4, #0]
 80043f6:	3307      	adds	r3, #7
 80043f8:	f023 0307 	bic.w	r3, r3, #7
 80043fc:	f103 0108 	add.w	r1, r3, #8
 8004400:	f8c8 1000 	str.w	r1, [r8]
 8004404:	ed93 0b00 	vldr	d0, [r3]
 8004408:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8004668 <_printf_float+0x2a0>
 800440c:	eeb0 7bc0 	vabs.f64	d7, d0
 8004410:	eeb4 7b46 	vcmp.f64	d7, d6
 8004414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004418:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800441c:	4682      	mov	sl, r0
 800441e:	dd24      	ble.n	800446a <_printf_float+0xa2>
 8004420:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004428:	d502      	bpl.n	8004430 <_printf_float+0x68>
 800442a:	232d      	movs	r3, #45	; 0x2d
 800442c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004430:	498f      	ldr	r1, [pc, #572]	; (8004670 <_printf_float+0x2a8>)
 8004432:	4b90      	ldr	r3, [pc, #576]	; (8004674 <_printf_float+0x2ac>)
 8004434:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004438:	bf94      	ite	ls
 800443a:	4688      	movls	r8, r1
 800443c:	4698      	movhi	r8, r3
 800443e:	2303      	movs	r3, #3
 8004440:	6123      	str	r3, [r4, #16]
 8004442:	f022 0204 	bic.w	r2, r2, #4
 8004446:	2300      	movs	r3, #0
 8004448:	6022      	str	r2, [r4, #0]
 800444a:	9304      	str	r3, [sp, #16]
 800444c:	9700      	str	r7, [sp, #0]
 800444e:	4633      	mov	r3, r6
 8004450:	aa09      	add	r2, sp, #36	; 0x24
 8004452:	4621      	mov	r1, r4
 8004454:	4628      	mov	r0, r5
 8004456:	f000 f9d1 	bl	80047fc <_printf_common>
 800445a:	3001      	adds	r0, #1
 800445c:	f040 808a 	bne.w	8004574 <_printf_float+0x1ac>
 8004460:	f04f 30ff 	mov.w	r0, #4294967295
 8004464:	b00b      	add	sp, #44	; 0x2c
 8004466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446a:	eeb4 0b40 	vcmp.f64	d0, d0
 800446e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004472:	d709      	bvc.n	8004488 <_printf_float+0xc0>
 8004474:	ee10 3a90 	vmov	r3, s1
 8004478:	2b00      	cmp	r3, #0
 800447a:	bfbc      	itt	lt
 800447c:	232d      	movlt	r3, #45	; 0x2d
 800447e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004482:	497d      	ldr	r1, [pc, #500]	; (8004678 <_printf_float+0x2b0>)
 8004484:	4b7d      	ldr	r3, [pc, #500]	; (800467c <_printf_float+0x2b4>)
 8004486:	e7d5      	b.n	8004434 <_printf_float+0x6c>
 8004488:	6863      	ldr	r3, [r4, #4]
 800448a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800448e:	9104      	str	r1, [sp, #16]
 8004490:	1c59      	adds	r1, r3, #1
 8004492:	d13c      	bne.n	800450e <_printf_float+0x146>
 8004494:	2306      	movs	r3, #6
 8004496:	6063      	str	r3, [r4, #4]
 8004498:	2300      	movs	r3, #0
 800449a:	9303      	str	r3, [sp, #12]
 800449c:	ab08      	add	r3, sp, #32
 800449e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80044a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044a6:	ab07      	add	r3, sp, #28
 80044a8:	6861      	ldr	r1, [r4, #4]
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	6022      	str	r2, [r4, #0]
 80044ae:	f10d 031b 	add.w	r3, sp, #27
 80044b2:	4628      	mov	r0, r5
 80044b4:	f7ff fef5 	bl	80042a2 <__cvt>
 80044b8:	9b04      	ldr	r3, [sp, #16]
 80044ba:	9907      	ldr	r1, [sp, #28]
 80044bc:	2b47      	cmp	r3, #71	; 0x47
 80044be:	4680      	mov	r8, r0
 80044c0:	d108      	bne.n	80044d4 <_printf_float+0x10c>
 80044c2:	1cc8      	adds	r0, r1, #3
 80044c4:	db02      	blt.n	80044cc <_printf_float+0x104>
 80044c6:	6863      	ldr	r3, [r4, #4]
 80044c8:	4299      	cmp	r1, r3
 80044ca:	dd41      	ble.n	8004550 <_printf_float+0x188>
 80044cc:	f1a9 0902 	sub.w	r9, r9, #2
 80044d0:	fa5f f989 	uxtb.w	r9, r9
 80044d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80044d8:	d820      	bhi.n	800451c <_printf_float+0x154>
 80044da:	3901      	subs	r1, #1
 80044dc:	464a      	mov	r2, r9
 80044de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044e2:	9107      	str	r1, [sp, #28]
 80044e4:	f7ff ff2f 	bl	8004346 <__exponent>
 80044e8:	9a08      	ldr	r2, [sp, #32]
 80044ea:	9004      	str	r0, [sp, #16]
 80044ec:	1813      	adds	r3, r2, r0
 80044ee:	2a01      	cmp	r2, #1
 80044f0:	6123      	str	r3, [r4, #16]
 80044f2:	dc02      	bgt.n	80044fa <_printf_float+0x132>
 80044f4:	6822      	ldr	r2, [r4, #0]
 80044f6:	07d2      	lsls	r2, r2, #31
 80044f8:	d501      	bpl.n	80044fe <_printf_float+0x136>
 80044fa:	3301      	adds	r3, #1
 80044fc:	6123      	str	r3, [r4, #16]
 80044fe:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0a2      	beq.n	800444c <_printf_float+0x84>
 8004506:	232d      	movs	r3, #45	; 0x2d
 8004508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800450c:	e79e      	b.n	800444c <_printf_float+0x84>
 800450e:	9904      	ldr	r1, [sp, #16]
 8004510:	2947      	cmp	r1, #71	; 0x47
 8004512:	d1c1      	bne.n	8004498 <_printf_float+0xd0>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1bf      	bne.n	8004498 <_printf_float+0xd0>
 8004518:	2301      	movs	r3, #1
 800451a:	e7bc      	b.n	8004496 <_printf_float+0xce>
 800451c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004520:	d118      	bne.n	8004554 <_printf_float+0x18c>
 8004522:	2900      	cmp	r1, #0
 8004524:	6863      	ldr	r3, [r4, #4]
 8004526:	dd0b      	ble.n	8004540 <_printf_float+0x178>
 8004528:	6121      	str	r1, [r4, #16]
 800452a:	b913      	cbnz	r3, 8004532 <_printf_float+0x16a>
 800452c:	6822      	ldr	r2, [r4, #0]
 800452e:	07d0      	lsls	r0, r2, #31
 8004530:	d502      	bpl.n	8004538 <_printf_float+0x170>
 8004532:	3301      	adds	r3, #1
 8004534:	440b      	add	r3, r1
 8004536:	6123      	str	r3, [r4, #16]
 8004538:	2300      	movs	r3, #0
 800453a:	65a1      	str	r1, [r4, #88]	; 0x58
 800453c:	9304      	str	r3, [sp, #16]
 800453e:	e7de      	b.n	80044fe <_printf_float+0x136>
 8004540:	b913      	cbnz	r3, 8004548 <_printf_float+0x180>
 8004542:	6822      	ldr	r2, [r4, #0]
 8004544:	07d2      	lsls	r2, r2, #31
 8004546:	d501      	bpl.n	800454c <_printf_float+0x184>
 8004548:	3302      	adds	r3, #2
 800454a:	e7f4      	b.n	8004536 <_printf_float+0x16e>
 800454c:	2301      	movs	r3, #1
 800454e:	e7f2      	b.n	8004536 <_printf_float+0x16e>
 8004550:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004554:	9b08      	ldr	r3, [sp, #32]
 8004556:	4299      	cmp	r1, r3
 8004558:	db05      	blt.n	8004566 <_printf_float+0x19e>
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	6121      	str	r1, [r4, #16]
 800455e:	07d8      	lsls	r0, r3, #31
 8004560:	d5ea      	bpl.n	8004538 <_printf_float+0x170>
 8004562:	1c4b      	adds	r3, r1, #1
 8004564:	e7e7      	b.n	8004536 <_printf_float+0x16e>
 8004566:	2900      	cmp	r1, #0
 8004568:	bfd4      	ite	le
 800456a:	f1c1 0202 	rsble	r2, r1, #2
 800456e:	2201      	movgt	r2, #1
 8004570:	4413      	add	r3, r2
 8004572:	e7e0      	b.n	8004536 <_printf_float+0x16e>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	055a      	lsls	r2, r3, #21
 8004578:	d407      	bmi.n	800458a <_printf_float+0x1c2>
 800457a:	6923      	ldr	r3, [r4, #16]
 800457c:	4642      	mov	r2, r8
 800457e:	4631      	mov	r1, r6
 8004580:	4628      	mov	r0, r5
 8004582:	47b8      	blx	r7
 8004584:	3001      	adds	r0, #1
 8004586:	d12a      	bne.n	80045de <_printf_float+0x216>
 8004588:	e76a      	b.n	8004460 <_printf_float+0x98>
 800458a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800458e:	f240 80e0 	bls.w	8004752 <_printf_float+0x38a>
 8004592:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004596:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800459a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459e:	d133      	bne.n	8004608 <_printf_float+0x240>
 80045a0:	4a37      	ldr	r2, [pc, #220]	; (8004680 <_printf_float+0x2b8>)
 80045a2:	2301      	movs	r3, #1
 80045a4:	4631      	mov	r1, r6
 80045a6:	4628      	mov	r0, r5
 80045a8:	47b8      	blx	r7
 80045aa:	3001      	adds	r0, #1
 80045ac:	f43f af58 	beq.w	8004460 <_printf_float+0x98>
 80045b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	db02      	blt.n	80045be <_printf_float+0x1f6>
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	07d8      	lsls	r0, r3, #31
 80045bc:	d50f      	bpl.n	80045de <_printf_float+0x216>
 80045be:	4653      	mov	r3, sl
 80045c0:	465a      	mov	r2, fp
 80045c2:	4631      	mov	r1, r6
 80045c4:	4628      	mov	r0, r5
 80045c6:	47b8      	blx	r7
 80045c8:	3001      	adds	r0, #1
 80045ca:	f43f af49 	beq.w	8004460 <_printf_float+0x98>
 80045ce:	f04f 0800 	mov.w	r8, #0
 80045d2:	f104 091a 	add.w	r9, r4, #26
 80045d6:	9b08      	ldr	r3, [sp, #32]
 80045d8:	3b01      	subs	r3, #1
 80045da:	4543      	cmp	r3, r8
 80045dc:	dc09      	bgt.n	80045f2 <_printf_float+0x22a>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	079b      	lsls	r3, r3, #30
 80045e2:	f100 8106 	bmi.w	80047f2 <_printf_float+0x42a>
 80045e6:	68e0      	ldr	r0, [r4, #12]
 80045e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ea:	4298      	cmp	r0, r3
 80045ec:	bfb8      	it	lt
 80045ee:	4618      	movlt	r0, r3
 80045f0:	e738      	b.n	8004464 <_printf_float+0x9c>
 80045f2:	2301      	movs	r3, #1
 80045f4:	464a      	mov	r2, r9
 80045f6:	4631      	mov	r1, r6
 80045f8:	4628      	mov	r0, r5
 80045fa:	47b8      	blx	r7
 80045fc:	3001      	adds	r0, #1
 80045fe:	f43f af2f 	beq.w	8004460 <_printf_float+0x98>
 8004602:	f108 0801 	add.w	r8, r8, #1
 8004606:	e7e6      	b.n	80045d6 <_printf_float+0x20e>
 8004608:	9b07      	ldr	r3, [sp, #28]
 800460a:	2b00      	cmp	r3, #0
 800460c:	dc3a      	bgt.n	8004684 <_printf_float+0x2bc>
 800460e:	4a1c      	ldr	r2, [pc, #112]	; (8004680 <_printf_float+0x2b8>)
 8004610:	2301      	movs	r3, #1
 8004612:	4631      	mov	r1, r6
 8004614:	4628      	mov	r0, r5
 8004616:	47b8      	blx	r7
 8004618:	3001      	adds	r0, #1
 800461a:	f43f af21 	beq.w	8004460 <_printf_float+0x98>
 800461e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004622:	4313      	orrs	r3, r2
 8004624:	d102      	bne.n	800462c <_printf_float+0x264>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	07d9      	lsls	r1, r3, #31
 800462a:	d5d8      	bpl.n	80045de <_printf_float+0x216>
 800462c:	4653      	mov	r3, sl
 800462e:	465a      	mov	r2, fp
 8004630:	4631      	mov	r1, r6
 8004632:	4628      	mov	r0, r5
 8004634:	47b8      	blx	r7
 8004636:	3001      	adds	r0, #1
 8004638:	f43f af12 	beq.w	8004460 <_printf_float+0x98>
 800463c:	f04f 0900 	mov.w	r9, #0
 8004640:	f104 0a1a 	add.w	sl, r4, #26
 8004644:	9b07      	ldr	r3, [sp, #28]
 8004646:	425b      	negs	r3, r3
 8004648:	454b      	cmp	r3, r9
 800464a:	dc01      	bgt.n	8004650 <_printf_float+0x288>
 800464c:	9b08      	ldr	r3, [sp, #32]
 800464e:	e795      	b.n	800457c <_printf_float+0x1b4>
 8004650:	2301      	movs	r3, #1
 8004652:	4652      	mov	r2, sl
 8004654:	4631      	mov	r1, r6
 8004656:	4628      	mov	r0, r5
 8004658:	47b8      	blx	r7
 800465a:	3001      	adds	r0, #1
 800465c:	f43f af00 	beq.w	8004460 <_printf_float+0x98>
 8004660:	f109 0901 	add.w	r9, r9, #1
 8004664:	e7ee      	b.n	8004644 <_printf_float+0x27c>
 8004666:	bf00      	nop
 8004668:	ffffffff 	.word	0xffffffff
 800466c:	7fefffff 	.word	0x7fefffff
 8004670:	08008878 	.word	0x08008878
 8004674:	0800887c 	.word	0x0800887c
 8004678:	08008880 	.word	0x08008880
 800467c:	08008884 	.word	0x08008884
 8004680:	08008888 	.word	0x08008888
 8004684:	9a08      	ldr	r2, [sp, #32]
 8004686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004688:	429a      	cmp	r2, r3
 800468a:	bfa8      	it	ge
 800468c:	461a      	movge	r2, r3
 800468e:	2a00      	cmp	r2, #0
 8004690:	4691      	mov	r9, r2
 8004692:	dc38      	bgt.n	8004706 <_printf_float+0x33e>
 8004694:	2300      	movs	r3, #0
 8004696:	9305      	str	r3, [sp, #20]
 8004698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800469c:	f104 021a 	add.w	r2, r4, #26
 80046a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046a2:	9905      	ldr	r1, [sp, #20]
 80046a4:	9304      	str	r3, [sp, #16]
 80046a6:	eba3 0309 	sub.w	r3, r3, r9
 80046aa:	428b      	cmp	r3, r1
 80046ac:	dc33      	bgt.n	8004716 <_printf_float+0x34e>
 80046ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	db3c      	blt.n	8004730 <_printf_float+0x368>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	07da      	lsls	r2, r3, #31
 80046ba:	d439      	bmi.n	8004730 <_printf_float+0x368>
 80046bc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80046c0:	eba2 0903 	sub.w	r9, r2, r3
 80046c4:	9b04      	ldr	r3, [sp, #16]
 80046c6:	1ad2      	subs	r2, r2, r3
 80046c8:	4591      	cmp	r9, r2
 80046ca:	bfa8      	it	ge
 80046cc:	4691      	movge	r9, r2
 80046ce:	f1b9 0f00 	cmp.w	r9, #0
 80046d2:	dc35      	bgt.n	8004740 <_printf_float+0x378>
 80046d4:	f04f 0800 	mov.w	r8, #0
 80046d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046dc:	f104 0a1a 	add.w	sl, r4, #26
 80046e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	eba3 0309 	sub.w	r3, r3, r9
 80046ea:	4543      	cmp	r3, r8
 80046ec:	f77f af77 	ble.w	80045de <_printf_float+0x216>
 80046f0:	2301      	movs	r3, #1
 80046f2:	4652      	mov	r2, sl
 80046f4:	4631      	mov	r1, r6
 80046f6:	4628      	mov	r0, r5
 80046f8:	47b8      	blx	r7
 80046fa:	3001      	adds	r0, #1
 80046fc:	f43f aeb0 	beq.w	8004460 <_printf_float+0x98>
 8004700:	f108 0801 	add.w	r8, r8, #1
 8004704:	e7ec      	b.n	80046e0 <_printf_float+0x318>
 8004706:	4613      	mov	r3, r2
 8004708:	4631      	mov	r1, r6
 800470a:	4642      	mov	r2, r8
 800470c:	4628      	mov	r0, r5
 800470e:	47b8      	blx	r7
 8004710:	3001      	adds	r0, #1
 8004712:	d1bf      	bne.n	8004694 <_printf_float+0x2cc>
 8004714:	e6a4      	b.n	8004460 <_printf_float+0x98>
 8004716:	2301      	movs	r3, #1
 8004718:	4631      	mov	r1, r6
 800471a:	4628      	mov	r0, r5
 800471c:	9204      	str	r2, [sp, #16]
 800471e:	47b8      	blx	r7
 8004720:	3001      	adds	r0, #1
 8004722:	f43f ae9d 	beq.w	8004460 <_printf_float+0x98>
 8004726:	9b05      	ldr	r3, [sp, #20]
 8004728:	9a04      	ldr	r2, [sp, #16]
 800472a:	3301      	adds	r3, #1
 800472c:	9305      	str	r3, [sp, #20]
 800472e:	e7b7      	b.n	80046a0 <_printf_float+0x2d8>
 8004730:	4653      	mov	r3, sl
 8004732:	465a      	mov	r2, fp
 8004734:	4631      	mov	r1, r6
 8004736:	4628      	mov	r0, r5
 8004738:	47b8      	blx	r7
 800473a:	3001      	adds	r0, #1
 800473c:	d1be      	bne.n	80046bc <_printf_float+0x2f4>
 800473e:	e68f      	b.n	8004460 <_printf_float+0x98>
 8004740:	9a04      	ldr	r2, [sp, #16]
 8004742:	464b      	mov	r3, r9
 8004744:	4442      	add	r2, r8
 8004746:	4631      	mov	r1, r6
 8004748:	4628      	mov	r0, r5
 800474a:	47b8      	blx	r7
 800474c:	3001      	adds	r0, #1
 800474e:	d1c1      	bne.n	80046d4 <_printf_float+0x30c>
 8004750:	e686      	b.n	8004460 <_printf_float+0x98>
 8004752:	9a08      	ldr	r2, [sp, #32]
 8004754:	2a01      	cmp	r2, #1
 8004756:	dc01      	bgt.n	800475c <_printf_float+0x394>
 8004758:	07db      	lsls	r3, r3, #31
 800475a:	d537      	bpl.n	80047cc <_printf_float+0x404>
 800475c:	2301      	movs	r3, #1
 800475e:	4642      	mov	r2, r8
 8004760:	4631      	mov	r1, r6
 8004762:	4628      	mov	r0, r5
 8004764:	47b8      	blx	r7
 8004766:	3001      	adds	r0, #1
 8004768:	f43f ae7a 	beq.w	8004460 <_printf_float+0x98>
 800476c:	4653      	mov	r3, sl
 800476e:	465a      	mov	r2, fp
 8004770:	4631      	mov	r1, r6
 8004772:	4628      	mov	r0, r5
 8004774:	47b8      	blx	r7
 8004776:	3001      	adds	r0, #1
 8004778:	f43f ae72 	beq.w	8004460 <_printf_float+0x98>
 800477c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004780:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004788:	9b08      	ldr	r3, [sp, #32]
 800478a:	d01a      	beq.n	80047c2 <_printf_float+0x3fa>
 800478c:	3b01      	subs	r3, #1
 800478e:	f108 0201 	add.w	r2, r8, #1
 8004792:	4631      	mov	r1, r6
 8004794:	4628      	mov	r0, r5
 8004796:	47b8      	blx	r7
 8004798:	3001      	adds	r0, #1
 800479a:	d10e      	bne.n	80047ba <_printf_float+0x3f2>
 800479c:	e660      	b.n	8004460 <_printf_float+0x98>
 800479e:	2301      	movs	r3, #1
 80047a0:	464a      	mov	r2, r9
 80047a2:	4631      	mov	r1, r6
 80047a4:	4628      	mov	r0, r5
 80047a6:	47b8      	blx	r7
 80047a8:	3001      	adds	r0, #1
 80047aa:	f43f ae59 	beq.w	8004460 <_printf_float+0x98>
 80047ae:	f108 0801 	add.w	r8, r8, #1
 80047b2:	9b08      	ldr	r3, [sp, #32]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	4543      	cmp	r3, r8
 80047b8:	dcf1      	bgt.n	800479e <_printf_float+0x3d6>
 80047ba:	9b04      	ldr	r3, [sp, #16]
 80047bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047c0:	e6dd      	b.n	800457e <_printf_float+0x1b6>
 80047c2:	f04f 0800 	mov.w	r8, #0
 80047c6:	f104 091a 	add.w	r9, r4, #26
 80047ca:	e7f2      	b.n	80047b2 <_printf_float+0x3ea>
 80047cc:	2301      	movs	r3, #1
 80047ce:	4642      	mov	r2, r8
 80047d0:	e7df      	b.n	8004792 <_printf_float+0x3ca>
 80047d2:	2301      	movs	r3, #1
 80047d4:	464a      	mov	r2, r9
 80047d6:	4631      	mov	r1, r6
 80047d8:	4628      	mov	r0, r5
 80047da:	47b8      	blx	r7
 80047dc:	3001      	adds	r0, #1
 80047de:	f43f ae3f 	beq.w	8004460 <_printf_float+0x98>
 80047e2:	f108 0801 	add.w	r8, r8, #1
 80047e6:	68e3      	ldr	r3, [r4, #12]
 80047e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047ea:	1a5b      	subs	r3, r3, r1
 80047ec:	4543      	cmp	r3, r8
 80047ee:	dcf0      	bgt.n	80047d2 <_printf_float+0x40a>
 80047f0:	e6f9      	b.n	80045e6 <_printf_float+0x21e>
 80047f2:	f04f 0800 	mov.w	r8, #0
 80047f6:	f104 0919 	add.w	r9, r4, #25
 80047fa:	e7f4      	b.n	80047e6 <_printf_float+0x41e>

080047fc <_printf_common>:
 80047fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004800:	4616      	mov	r6, r2
 8004802:	4699      	mov	r9, r3
 8004804:	688a      	ldr	r2, [r1, #8]
 8004806:	690b      	ldr	r3, [r1, #16]
 8004808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800480c:	4293      	cmp	r3, r2
 800480e:	bfb8      	it	lt
 8004810:	4613      	movlt	r3, r2
 8004812:	6033      	str	r3, [r6, #0]
 8004814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004818:	4607      	mov	r7, r0
 800481a:	460c      	mov	r4, r1
 800481c:	b10a      	cbz	r2, 8004822 <_printf_common+0x26>
 800481e:	3301      	adds	r3, #1
 8004820:	6033      	str	r3, [r6, #0]
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	0699      	lsls	r1, r3, #26
 8004826:	bf42      	ittt	mi
 8004828:	6833      	ldrmi	r3, [r6, #0]
 800482a:	3302      	addmi	r3, #2
 800482c:	6033      	strmi	r3, [r6, #0]
 800482e:	6825      	ldr	r5, [r4, #0]
 8004830:	f015 0506 	ands.w	r5, r5, #6
 8004834:	d106      	bne.n	8004844 <_printf_common+0x48>
 8004836:	f104 0a19 	add.w	sl, r4, #25
 800483a:	68e3      	ldr	r3, [r4, #12]
 800483c:	6832      	ldr	r2, [r6, #0]
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	42ab      	cmp	r3, r5
 8004842:	dc26      	bgt.n	8004892 <_printf_common+0x96>
 8004844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004848:	1e13      	subs	r3, r2, #0
 800484a:	6822      	ldr	r2, [r4, #0]
 800484c:	bf18      	it	ne
 800484e:	2301      	movne	r3, #1
 8004850:	0692      	lsls	r2, r2, #26
 8004852:	d42b      	bmi.n	80048ac <_printf_common+0xb0>
 8004854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004858:	4649      	mov	r1, r9
 800485a:	4638      	mov	r0, r7
 800485c:	47c0      	blx	r8
 800485e:	3001      	adds	r0, #1
 8004860:	d01e      	beq.n	80048a0 <_printf_common+0xa4>
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	6922      	ldr	r2, [r4, #16]
 8004866:	f003 0306 	and.w	r3, r3, #6
 800486a:	2b04      	cmp	r3, #4
 800486c:	bf02      	ittt	eq
 800486e:	68e5      	ldreq	r5, [r4, #12]
 8004870:	6833      	ldreq	r3, [r6, #0]
 8004872:	1aed      	subeq	r5, r5, r3
 8004874:	68a3      	ldr	r3, [r4, #8]
 8004876:	bf0c      	ite	eq
 8004878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800487c:	2500      	movne	r5, #0
 800487e:	4293      	cmp	r3, r2
 8004880:	bfc4      	itt	gt
 8004882:	1a9b      	subgt	r3, r3, r2
 8004884:	18ed      	addgt	r5, r5, r3
 8004886:	2600      	movs	r6, #0
 8004888:	341a      	adds	r4, #26
 800488a:	42b5      	cmp	r5, r6
 800488c:	d11a      	bne.n	80048c4 <_printf_common+0xc8>
 800488e:	2000      	movs	r0, #0
 8004890:	e008      	b.n	80048a4 <_printf_common+0xa8>
 8004892:	2301      	movs	r3, #1
 8004894:	4652      	mov	r2, sl
 8004896:	4649      	mov	r1, r9
 8004898:	4638      	mov	r0, r7
 800489a:	47c0      	blx	r8
 800489c:	3001      	adds	r0, #1
 800489e:	d103      	bne.n	80048a8 <_printf_common+0xac>
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a8:	3501      	adds	r5, #1
 80048aa:	e7c6      	b.n	800483a <_printf_common+0x3e>
 80048ac:	18e1      	adds	r1, r4, r3
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	2030      	movs	r0, #48	; 0x30
 80048b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048b6:	4422      	add	r2, r4
 80048b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048c0:	3302      	adds	r3, #2
 80048c2:	e7c7      	b.n	8004854 <_printf_common+0x58>
 80048c4:	2301      	movs	r3, #1
 80048c6:	4622      	mov	r2, r4
 80048c8:	4649      	mov	r1, r9
 80048ca:	4638      	mov	r0, r7
 80048cc:	47c0      	blx	r8
 80048ce:	3001      	adds	r0, #1
 80048d0:	d0e6      	beq.n	80048a0 <_printf_common+0xa4>
 80048d2:	3601      	adds	r6, #1
 80048d4:	e7d9      	b.n	800488a <_printf_common+0x8e>
	...

080048d8 <_printf_i>:
 80048d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	7e0f      	ldrb	r7, [r1, #24]
 80048de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048e0:	2f78      	cmp	r7, #120	; 0x78
 80048e2:	4691      	mov	r9, r2
 80048e4:	4680      	mov	r8, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	469a      	mov	sl, r3
 80048ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048ee:	d807      	bhi.n	8004900 <_printf_i+0x28>
 80048f0:	2f62      	cmp	r7, #98	; 0x62
 80048f2:	d80a      	bhi.n	800490a <_printf_i+0x32>
 80048f4:	2f00      	cmp	r7, #0
 80048f6:	f000 80d4 	beq.w	8004aa2 <_printf_i+0x1ca>
 80048fa:	2f58      	cmp	r7, #88	; 0x58
 80048fc:	f000 80c0 	beq.w	8004a80 <_printf_i+0x1a8>
 8004900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004908:	e03a      	b.n	8004980 <_printf_i+0xa8>
 800490a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800490e:	2b15      	cmp	r3, #21
 8004910:	d8f6      	bhi.n	8004900 <_printf_i+0x28>
 8004912:	a101      	add	r1, pc, #4	; (adr r1, 8004918 <_printf_i+0x40>)
 8004914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004918:	08004971 	.word	0x08004971
 800491c:	08004985 	.word	0x08004985
 8004920:	08004901 	.word	0x08004901
 8004924:	08004901 	.word	0x08004901
 8004928:	08004901 	.word	0x08004901
 800492c:	08004901 	.word	0x08004901
 8004930:	08004985 	.word	0x08004985
 8004934:	08004901 	.word	0x08004901
 8004938:	08004901 	.word	0x08004901
 800493c:	08004901 	.word	0x08004901
 8004940:	08004901 	.word	0x08004901
 8004944:	08004a89 	.word	0x08004a89
 8004948:	080049b1 	.word	0x080049b1
 800494c:	08004a43 	.word	0x08004a43
 8004950:	08004901 	.word	0x08004901
 8004954:	08004901 	.word	0x08004901
 8004958:	08004aab 	.word	0x08004aab
 800495c:	08004901 	.word	0x08004901
 8004960:	080049b1 	.word	0x080049b1
 8004964:	08004901 	.word	0x08004901
 8004968:	08004901 	.word	0x08004901
 800496c:	08004a4b 	.word	0x08004a4b
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	1d1a      	adds	r2, r3, #4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	602a      	str	r2, [r5, #0]
 8004978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800497c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004980:	2301      	movs	r3, #1
 8004982:	e09f      	b.n	8004ac4 <_printf_i+0x1ec>
 8004984:	6820      	ldr	r0, [r4, #0]
 8004986:	682b      	ldr	r3, [r5, #0]
 8004988:	0607      	lsls	r7, r0, #24
 800498a:	f103 0104 	add.w	r1, r3, #4
 800498e:	6029      	str	r1, [r5, #0]
 8004990:	d501      	bpl.n	8004996 <_printf_i+0xbe>
 8004992:	681e      	ldr	r6, [r3, #0]
 8004994:	e003      	b.n	800499e <_printf_i+0xc6>
 8004996:	0646      	lsls	r6, r0, #25
 8004998:	d5fb      	bpl.n	8004992 <_printf_i+0xba>
 800499a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800499e:	2e00      	cmp	r6, #0
 80049a0:	da03      	bge.n	80049aa <_printf_i+0xd2>
 80049a2:	232d      	movs	r3, #45	; 0x2d
 80049a4:	4276      	negs	r6, r6
 80049a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049aa:	485a      	ldr	r0, [pc, #360]	; (8004b14 <_printf_i+0x23c>)
 80049ac:	230a      	movs	r3, #10
 80049ae:	e012      	b.n	80049d6 <_printf_i+0xfe>
 80049b0:	682b      	ldr	r3, [r5, #0]
 80049b2:	6820      	ldr	r0, [r4, #0]
 80049b4:	1d19      	adds	r1, r3, #4
 80049b6:	6029      	str	r1, [r5, #0]
 80049b8:	0605      	lsls	r5, r0, #24
 80049ba:	d501      	bpl.n	80049c0 <_printf_i+0xe8>
 80049bc:	681e      	ldr	r6, [r3, #0]
 80049be:	e002      	b.n	80049c6 <_printf_i+0xee>
 80049c0:	0641      	lsls	r1, r0, #25
 80049c2:	d5fb      	bpl.n	80049bc <_printf_i+0xe4>
 80049c4:	881e      	ldrh	r6, [r3, #0]
 80049c6:	4853      	ldr	r0, [pc, #332]	; (8004b14 <_printf_i+0x23c>)
 80049c8:	2f6f      	cmp	r7, #111	; 0x6f
 80049ca:	bf0c      	ite	eq
 80049cc:	2308      	moveq	r3, #8
 80049ce:	230a      	movne	r3, #10
 80049d0:	2100      	movs	r1, #0
 80049d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049d6:	6865      	ldr	r5, [r4, #4]
 80049d8:	60a5      	str	r5, [r4, #8]
 80049da:	2d00      	cmp	r5, #0
 80049dc:	bfa2      	ittt	ge
 80049de:	6821      	ldrge	r1, [r4, #0]
 80049e0:	f021 0104 	bicge.w	r1, r1, #4
 80049e4:	6021      	strge	r1, [r4, #0]
 80049e6:	b90e      	cbnz	r6, 80049ec <_printf_i+0x114>
 80049e8:	2d00      	cmp	r5, #0
 80049ea:	d04b      	beq.n	8004a84 <_printf_i+0x1ac>
 80049ec:	4615      	mov	r5, r2
 80049ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80049f2:	fb03 6711 	mls	r7, r3, r1, r6
 80049f6:	5dc7      	ldrb	r7, [r0, r7]
 80049f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049fc:	4637      	mov	r7, r6
 80049fe:	42bb      	cmp	r3, r7
 8004a00:	460e      	mov	r6, r1
 8004a02:	d9f4      	bls.n	80049ee <_printf_i+0x116>
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d10b      	bne.n	8004a20 <_printf_i+0x148>
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	07de      	lsls	r6, r3, #31
 8004a0c:	d508      	bpl.n	8004a20 <_printf_i+0x148>
 8004a0e:	6923      	ldr	r3, [r4, #16]
 8004a10:	6861      	ldr	r1, [r4, #4]
 8004a12:	4299      	cmp	r1, r3
 8004a14:	bfde      	ittt	le
 8004a16:	2330      	movle	r3, #48	; 0x30
 8004a18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a20:	1b52      	subs	r2, r2, r5
 8004a22:	6122      	str	r2, [r4, #16]
 8004a24:	f8cd a000 	str.w	sl, [sp]
 8004a28:	464b      	mov	r3, r9
 8004a2a:	aa03      	add	r2, sp, #12
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4640      	mov	r0, r8
 8004a30:	f7ff fee4 	bl	80047fc <_printf_common>
 8004a34:	3001      	adds	r0, #1
 8004a36:	d14a      	bne.n	8004ace <_printf_i+0x1f6>
 8004a38:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3c:	b004      	add	sp, #16
 8004a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	f043 0320 	orr.w	r3, r3, #32
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	4833      	ldr	r0, [pc, #204]	; (8004b18 <_printf_i+0x240>)
 8004a4c:	2778      	movs	r7, #120	; 0x78
 8004a4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	6829      	ldr	r1, [r5, #0]
 8004a56:	061f      	lsls	r7, r3, #24
 8004a58:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a5c:	d402      	bmi.n	8004a64 <_printf_i+0x18c>
 8004a5e:	065f      	lsls	r7, r3, #25
 8004a60:	bf48      	it	mi
 8004a62:	b2b6      	uxthmi	r6, r6
 8004a64:	07df      	lsls	r7, r3, #31
 8004a66:	bf48      	it	mi
 8004a68:	f043 0320 	orrmi.w	r3, r3, #32
 8004a6c:	6029      	str	r1, [r5, #0]
 8004a6e:	bf48      	it	mi
 8004a70:	6023      	strmi	r3, [r4, #0]
 8004a72:	b91e      	cbnz	r6, 8004a7c <_printf_i+0x1a4>
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	f023 0320 	bic.w	r3, r3, #32
 8004a7a:	6023      	str	r3, [r4, #0]
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	e7a7      	b.n	80049d0 <_printf_i+0xf8>
 8004a80:	4824      	ldr	r0, [pc, #144]	; (8004b14 <_printf_i+0x23c>)
 8004a82:	e7e4      	b.n	8004a4e <_printf_i+0x176>
 8004a84:	4615      	mov	r5, r2
 8004a86:	e7bd      	b.n	8004a04 <_printf_i+0x12c>
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	6826      	ldr	r6, [r4, #0]
 8004a8c:	6961      	ldr	r1, [r4, #20]
 8004a8e:	1d18      	adds	r0, r3, #4
 8004a90:	6028      	str	r0, [r5, #0]
 8004a92:	0635      	lsls	r5, r6, #24
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	d501      	bpl.n	8004a9c <_printf_i+0x1c4>
 8004a98:	6019      	str	r1, [r3, #0]
 8004a9a:	e002      	b.n	8004aa2 <_printf_i+0x1ca>
 8004a9c:	0670      	lsls	r0, r6, #25
 8004a9e:	d5fb      	bpl.n	8004a98 <_printf_i+0x1c0>
 8004aa0:	8019      	strh	r1, [r3, #0]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	6123      	str	r3, [r4, #16]
 8004aa6:	4615      	mov	r5, r2
 8004aa8:	e7bc      	b.n	8004a24 <_printf_i+0x14c>
 8004aaa:	682b      	ldr	r3, [r5, #0]
 8004aac:	1d1a      	adds	r2, r3, #4
 8004aae:	602a      	str	r2, [r5, #0]
 8004ab0:	681d      	ldr	r5, [r3, #0]
 8004ab2:	6862      	ldr	r2, [r4, #4]
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f7fb fbc2 	bl	8000240 <memchr>
 8004abc:	b108      	cbz	r0, 8004ac2 <_printf_i+0x1ea>
 8004abe:	1b40      	subs	r0, r0, r5
 8004ac0:	6060      	str	r0, [r4, #4]
 8004ac2:	6863      	ldr	r3, [r4, #4]
 8004ac4:	6123      	str	r3, [r4, #16]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004acc:	e7aa      	b.n	8004a24 <_printf_i+0x14c>
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	462a      	mov	r2, r5
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	4640      	mov	r0, r8
 8004ad6:	47d0      	blx	sl
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d0ad      	beq.n	8004a38 <_printf_i+0x160>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	079b      	lsls	r3, r3, #30
 8004ae0:	d413      	bmi.n	8004b0a <_printf_i+0x232>
 8004ae2:	68e0      	ldr	r0, [r4, #12]
 8004ae4:	9b03      	ldr	r3, [sp, #12]
 8004ae6:	4298      	cmp	r0, r3
 8004ae8:	bfb8      	it	lt
 8004aea:	4618      	movlt	r0, r3
 8004aec:	e7a6      	b.n	8004a3c <_printf_i+0x164>
 8004aee:	2301      	movs	r3, #1
 8004af0:	4632      	mov	r2, r6
 8004af2:	4649      	mov	r1, r9
 8004af4:	4640      	mov	r0, r8
 8004af6:	47d0      	blx	sl
 8004af8:	3001      	adds	r0, #1
 8004afa:	d09d      	beq.n	8004a38 <_printf_i+0x160>
 8004afc:	3501      	adds	r5, #1
 8004afe:	68e3      	ldr	r3, [r4, #12]
 8004b00:	9903      	ldr	r1, [sp, #12]
 8004b02:	1a5b      	subs	r3, r3, r1
 8004b04:	42ab      	cmp	r3, r5
 8004b06:	dcf2      	bgt.n	8004aee <_printf_i+0x216>
 8004b08:	e7eb      	b.n	8004ae2 <_printf_i+0x20a>
 8004b0a:	2500      	movs	r5, #0
 8004b0c:	f104 0619 	add.w	r6, r4, #25
 8004b10:	e7f5      	b.n	8004afe <_printf_i+0x226>
 8004b12:	bf00      	nop
 8004b14:	0800888a 	.word	0x0800888a
 8004b18:	0800889b 	.word	0x0800889b

08004b1c <_scanf_float>:
 8004b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b20:	b087      	sub	sp, #28
 8004b22:	4617      	mov	r7, r2
 8004b24:	9303      	str	r3, [sp, #12]
 8004b26:	688b      	ldr	r3, [r1, #8]
 8004b28:	1e5a      	subs	r2, r3, #1
 8004b2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004b2e:	bf83      	ittte	hi
 8004b30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004b34:	195b      	addhi	r3, r3, r5
 8004b36:	9302      	strhi	r3, [sp, #8]
 8004b38:	2300      	movls	r3, #0
 8004b3a:	bf86      	itte	hi
 8004b3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004b40:	608b      	strhi	r3, [r1, #8]
 8004b42:	9302      	strls	r3, [sp, #8]
 8004b44:	680b      	ldr	r3, [r1, #0]
 8004b46:	468b      	mov	fp, r1
 8004b48:	2500      	movs	r5, #0
 8004b4a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004b4e:	f84b 3b1c 	str.w	r3, [fp], #28
 8004b52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004b56:	4680      	mov	r8, r0
 8004b58:	460c      	mov	r4, r1
 8004b5a:	465e      	mov	r6, fp
 8004b5c:	46aa      	mov	sl, r5
 8004b5e:	46a9      	mov	r9, r5
 8004b60:	9501      	str	r5, [sp, #4]
 8004b62:	68a2      	ldr	r2, [r4, #8]
 8004b64:	b152      	cbz	r2, 8004b7c <_scanf_float+0x60>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b4e      	cmp	r3, #78	; 0x4e
 8004b6c:	d864      	bhi.n	8004c38 <_scanf_float+0x11c>
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d83c      	bhi.n	8004bec <_scanf_float+0xd0>
 8004b72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004b76:	b2c8      	uxtb	r0, r1
 8004b78:	280e      	cmp	r0, #14
 8004b7a:	d93a      	bls.n	8004bf2 <_scanf_float+0xd6>
 8004b7c:	f1b9 0f00 	cmp.w	r9, #0
 8004b80:	d003      	beq.n	8004b8a <_scanf_float+0x6e>
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b8e:	f1ba 0f01 	cmp.w	sl, #1
 8004b92:	f200 8113 	bhi.w	8004dbc <_scanf_float+0x2a0>
 8004b96:	455e      	cmp	r6, fp
 8004b98:	f200 8105 	bhi.w	8004da6 <_scanf_float+0x28a>
 8004b9c:	2501      	movs	r5, #1
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	b007      	add	sp, #28
 8004ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004baa:	2a0d      	cmp	r2, #13
 8004bac:	d8e6      	bhi.n	8004b7c <_scanf_float+0x60>
 8004bae:	a101      	add	r1, pc, #4	; (adr r1, 8004bb4 <_scanf_float+0x98>)
 8004bb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004bb4:	08004cf3 	.word	0x08004cf3
 8004bb8:	08004b7d 	.word	0x08004b7d
 8004bbc:	08004b7d 	.word	0x08004b7d
 8004bc0:	08004b7d 	.word	0x08004b7d
 8004bc4:	08004d53 	.word	0x08004d53
 8004bc8:	08004d2b 	.word	0x08004d2b
 8004bcc:	08004b7d 	.word	0x08004b7d
 8004bd0:	08004b7d 	.word	0x08004b7d
 8004bd4:	08004d01 	.word	0x08004d01
 8004bd8:	08004b7d 	.word	0x08004b7d
 8004bdc:	08004b7d 	.word	0x08004b7d
 8004be0:	08004b7d 	.word	0x08004b7d
 8004be4:	08004b7d 	.word	0x08004b7d
 8004be8:	08004cb9 	.word	0x08004cb9
 8004bec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004bf0:	e7db      	b.n	8004baa <_scanf_float+0x8e>
 8004bf2:	290e      	cmp	r1, #14
 8004bf4:	d8c2      	bhi.n	8004b7c <_scanf_float+0x60>
 8004bf6:	a001      	add	r0, pc, #4	; (adr r0, 8004bfc <_scanf_float+0xe0>)
 8004bf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004bfc:	08004cab 	.word	0x08004cab
 8004c00:	08004b7d 	.word	0x08004b7d
 8004c04:	08004cab 	.word	0x08004cab
 8004c08:	08004d3f 	.word	0x08004d3f
 8004c0c:	08004b7d 	.word	0x08004b7d
 8004c10:	08004c59 	.word	0x08004c59
 8004c14:	08004c95 	.word	0x08004c95
 8004c18:	08004c95 	.word	0x08004c95
 8004c1c:	08004c95 	.word	0x08004c95
 8004c20:	08004c95 	.word	0x08004c95
 8004c24:	08004c95 	.word	0x08004c95
 8004c28:	08004c95 	.word	0x08004c95
 8004c2c:	08004c95 	.word	0x08004c95
 8004c30:	08004c95 	.word	0x08004c95
 8004c34:	08004c95 	.word	0x08004c95
 8004c38:	2b6e      	cmp	r3, #110	; 0x6e
 8004c3a:	d809      	bhi.n	8004c50 <_scanf_float+0x134>
 8004c3c:	2b60      	cmp	r3, #96	; 0x60
 8004c3e:	d8b2      	bhi.n	8004ba6 <_scanf_float+0x8a>
 8004c40:	2b54      	cmp	r3, #84	; 0x54
 8004c42:	d077      	beq.n	8004d34 <_scanf_float+0x218>
 8004c44:	2b59      	cmp	r3, #89	; 0x59
 8004c46:	d199      	bne.n	8004b7c <_scanf_float+0x60>
 8004c48:	2d07      	cmp	r5, #7
 8004c4a:	d197      	bne.n	8004b7c <_scanf_float+0x60>
 8004c4c:	2508      	movs	r5, #8
 8004c4e:	e029      	b.n	8004ca4 <_scanf_float+0x188>
 8004c50:	2b74      	cmp	r3, #116	; 0x74
 8004c52:	d06f      	beq.n	8004d34 <_scanf_float+0x218>
 8004c54:	2b79      	cmp	r3, #121	; 0x79
 8004c56:	e7f6      	b.n	8004c46 <_scanf_float+0x12a>
 8004c58:	6821      	ldr	r1, [r4, #0]
 8004c5a:	05c8      	lsls	r0, r1, #23
 8004c5c:	d51a      	bpl.n	8004c94 <_scanf_float+0x178>
 8004c5e:	9b02      	ldr	r3, [sp, #8]
 8004c60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004c64:	6021      	str	r1, [r4, #0]
 8004c66:	f109 0901 	add.w	r9, r9, #1
 8004c6a:	b11b      	cbz	r3, 8004c74 <_scanf_float+0x158>
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	3201      	adds	r2, #1
 8004c70:	9302      	str	r3, [sp, #8]
 8004c72:	60a2      	str	r2, [r4, #8]
 8004c74:	68a3      	ldr	r3, [r4, #8]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	60a3      	str	r3, [r4, #8]
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	6123      	str	r3, [r4, #16]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	607b      	str	r3, [r7, #4]
 8004c88:	f340 8084 	ble.w	8004d94 <_scanf_float+0x278>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	603b      	str	r3, [r7, #0]
 8004c92:	e766      	b.n	8004b62 <_scanf_float+0x46>
 8004c94:	eb1a 0f05 	cmn.w	sl, r5
 8004c98:	f47f af70 	bne.w	8004b7c <_scanf_float+0x60>
 8004c9c:	6822      	ldr	r2, [r4, #0]
 8004c9e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004ca2:	6022      	str	r2, [r4, #0]
 8004ca4:	f806 3b01 	strb.w	r3, [r6], #1
 8004ca8:	e7e4      	b.n	8004c74 <_scanf_float+0x158>
 8004caa:	6822      	ldr	r2, [r4, #0]
 8004cac:	0610      	lsls	r0, r2, #24
 8004cae:	f57f af65 	bpl.w	8004b7c <_scanf_float+0x60>
 8004cb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cb6:	e7f4      	b.n	8004ca2 <_scanf_float+0x186>
 8004cb8:	f1ba 0f00 	cmp.w	sl, #0
 8004cbc:	d10e      	bne.n	8004cdc <_scanf_float+0x1c0>
 8004cbe:	f1b9 0f00 	cmp.w	r9, #0
 8004cc2:	d10e      	bne.n	8004ce2 <_scanf_float+0x1c6>
 8004cc4:	6822      	ldr	r2, [r4, #0]
 8004cc6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004cca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004cce:	d108      	bne.n	8004ce2 <_scanf_float+0x1c6>
 8004cd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004cd4:	6022      	str	r2, [r4, #0]
 8004cd6:	f04f 0a01 	mov.w	sl, #1
 8004cda:	e7e3      	b.n	8004ca4 <_scanf_float+0x188>
 8004cdc:	f1ba 0f02 	cmp.w	sl, #2
 8004ce0:	d055      	beq.n	8004d8e <_scanf_float+0x272>
 8004ce2:	2d01      	cmp	r5, #1
 8004ce4:	d002      	beq.n	8004cec <_scanf_float+0x1d0>
 8004ce6:	2d04      	cmp	r5, #4
 8004ce8:	f47f af48 	bne.w	8004b7c <_scanf_float+0x60>
 8004cec:	3501      	adds	r5, #1
 8004cee:	b2ed      	uxtb	r5, r5
 8004cf0:	e7d8      	b.n	8004ca4 <_scanf_float+0x188>
 8004cf2:	f1ba 0f01 	cmp.w	sl, #1
 8004cf6:	f47f af41 	bne.w	8004b7c <_scanf_float+0x60>
 8004cfa:	f04f 0a02 	mov.w	sl, #2
 8004cfe:	e7d1      	b.n	8004ca4 <_scanf_float+0x188>
 8004d00:	b97d      	cbnz	r5, 8004d22 <_scanf_float+0x206>
 8004d02:	f1b9 0f00 	cmp.w	r9, #0
 8004d06:	f47f af3c 	bne.w	8004b82 <_scanf_float+0x66>
 8004d0a:	6822      	ldr	r2, [r4, #0]
 8004d0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004d10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004d14:	f47f af39 	bne.w	8004b8a <_scanf_float+0x6e>
 8004d18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d1c:	6022      	str	r2, [r4, #0]
 8004d1e:	2501      	movs	r5, #1
 8004d20:	e7c0      	b.n	8004ca4 <_scanf_float+0x188>
 8004d22:	2d03      	cmp	r5, #3
 8004d24:	d0e2      	beq.n	8004cec <_scanf_float+0x1d0>
 8004d26:	2d05      	cmp	r5, #5
 8004d28:	e7de      	b.n	8004ce8 <_scanf_float+0x1cc>
 8004d2a:	2d02      	cmp	r5, #2
 8004d2c:	f47f af26 	bne.w	8004b7c <_scanf_float+0x60>
 8004d30:	2503      	movs	r5, #3
 8004d32:	e7b7      	b.n	8004ca4 <_scanf_float+0x188>
 8004d34:	2d06      	cmp	r5, #6
 8004d36:	f47f af21 	bne.w	8004b7c <_scanf_float+0x60>
 8004d3a:	2507      	movs	r5, #7
 8004d3c:	e7b2      	b.n	8004ca4 <_scanf_float+0x188>
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	0591      	lsls	r1, r2, #22
 8004d42:	f57f af1b 	bpl.w	8004b7c <_scanf_float+0x60>
 8004d46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004d4a:	6022      	str	r2, [r4, #0]
 8004d4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d50:	e7a8      	b.n	8004ca4 <_scanf_float+0x188>
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004d58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004d5c:	d006      	beq.n	8004d6c <_scanf_float+0x250>
 8004d5e:	0550      	lsls	r0, r2, #21
 8004d60:	f57f af0c 	bpl.w	8004b7c <_scanf_float+0x60>
 8004d64:	f1b9 0f00 	cmp.w	r9, #0
 8004d68:	f43f af0f 	beq.w	8004b8a <_scanf_float+0x6e>
 8004d6c:	0591      	lsls	r1, r2, #22
 8004d6e:	bf58      	it	pl
 8004d70:	9901      	ldrpl	r1, [sp, #4]
 8004d72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d76:	bf58      	it	pl
 8004d78:	eba9 0101 	subpl.w	r1, r9, r1
 8004d7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004d80:	bf58      	it	pl
 8004d82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004d86:	6022      	str	r2, [r4, #0]
 8004d88:	f04f 0900 	mov.w	r9, #0
 8004d8c:	e78a      	b.n	8004ca4 <_scanf_float+0x188>
 8004d8e:	f04f 0a03 	mov.w	sl, #3
 8004d92:	e787      	b.n	8004ca4 <_scanf_float+0x188>
 8004d94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004d98:	4639      	mov	r1, r7
 8004d9a:	4640      	mov	r0, r8
 8004d9c:	4798      	blx	r3
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	f43f aedf 	beq.w	8004b62 <_scanf_float+0x46>
 8004da4:	e6ea      	b.n	8004b7c <_scanf_float+0x60>
 8004da6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004daa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004dae:	463a      	mov	r2, r7
 8004db0:	4640      	mov	r0, r8
 8004db2:	4798      	blx	r3
 8004db4:	6923      	ldr	r3, [r4, #16]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	6123      	str	r3, [r4, #16]
 8004dba:	e6ec      	b.n	8004b96 <_scanf_float+0x7a>
 8004dbc:	1e6b      	subs	r3, r5, #1
 8004dbe:	2b06      	cmp	r3, #6
 8004dc0:	d825      	bhi.n	8004e0e <_scanf_float+0x2f2>
 8004dc2:	2d02      	cmp	r5, #2
 8004dc4:	d836      	bhi.n	8004e34 <_scanf_float+0x318>
 8004dc6:	455e      	cmp	r6, fp
 8004dc8:	f67f aee8 	bls.w	8004b9c <_scanf_float+0x80>
 8004dcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004dd0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004dd4:	463a      	mov	r2, r7
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	4798      	blx	r3
 8004dda:	6923      	ldr	r3, [r4, #16]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	6123      	str	r3, [r4, #16]
 8004de0:	e7f1      	b.n	8004dc6 <_scanf_float+0x2aa>
 8004de2:	9802      	ldr	r0, [sp, #8]
 8004de4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004de8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004dec:	9002      	str	r0, [sp, #8]
 8004dee:	463a      	mov	r2, r7
 8004df0:	4640      	mov	r0, r8
 8004df2:	4798      	blx	r3
 8004df4:	6923      	ldr	r3, [r4, #16]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	6123      	str	r3, [r4, #16]
 8004dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dfe:	fa5f fa8a 	uxtb.w	sl, sl
 8004e02:	f1ba 0f02 	cmp.w	sl, #2
 8004e06:	d1ec      	bne.n	8004de2 <_scanf_float+0x2c6>
 8004e08:	3d03      	subs	r5, #3
 8004e0a:	b2ed      	uxtb	r5, r5
 8004e0c:	1b76      	subs	r6, r6, r5
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	05da      	lsls	r2, r3, #23
 8004e12:	d52f      	bpl.n	8004e74 <_scanf_float+0x358>
 8004e14:	055b      	lsls	r3, r3, #21
 8004e16:	d510      	bpl.n	8004e3a <_scanf_float+0x31e>
 8004e18:	455e      	cmp	r6, fp
 8004e1a:	f67f aebf 	bls.w	8004b9c <_scanf_float+0x80>
 8004e1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e26:	463a      	mov	r2, r7
 8004e28:	4640      	mov	r0, r8
 8004e2a:	4798      	blx	r3
 8004e2c:	6923      	ldr	r3, [r4, #16]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	6123      	str	r3, [r4, #16]
 8004e32:	e7f1      	b.n	8004e18 <_scanf_float+0x2fc>
 8004e34:	46aa      	mov	sl, r5
 8004e36:	9602      	str	r6, [sp, #8]
 8004e38:	e7df      	b.n	8004dfa <_scanf_float+0x2de>
 8004e3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004e3e:	6923      	ldr	r3, [r4, #16]
 8004e40:	2965      	cmp	r1, #101	; 0x65
 8004e42:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e46:	f106 35ff 	add.w	r5, r6, #4294967295
 8004e4a:	6123      	str	r3, [r4, #16]
 8004e4c:	d00c      	beq.n	8004e68 <_scanf_float+0x34c>
 8004e4e:	2945      	cmp	r1, #69	; 0x45
 8004e50:	d00a      	beq.n	8004e68 <_scanf_float+0x34c>
 8004e52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e56:	463a      	mov	r2, r7
 8004e58:	4640      	mov	r0, r8
 8004e5a:	4798      	blx	r3
 8004e5c:	6923      	ldr	r3, [r4, #16]
 8004e5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	1eb5      	subs	r5, r6, #2
 8004e66:	6123      	str	r3, [r4, #16]
 8004e68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e6c:	463a      	mov	r2, r7
 8004e6e:	4640      	mov	r0, r8
 8004e70:	4798      	blx	r3
 8004e72:	462e      	mov	r6, r5
 8004e74:	6825      	ldr	r5, [r4, #0]
 8004e76:	f015 0510 	ands.w	r5, r5, #16
 8004e7a:	d14d      	bne.n	8004f18 <_scanf_float+0x3fc>
 8004e7c:	7035      	strb	r5, [r6, #0]
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e88:	d11a      	bne.n	8004ec0 <_scanf_float+0x3a4>
 8004e8a:	9b01      	ldr	r3, [sp, #4]
 8004e8c:	454b      	cmp	r3, r9
 8004e8e:	eba3 0209 	sub.w	r2, r3, r9
 8004e92:	d122      	bne.n	8004eda <_scanf_float+0x3be>
 8004e94:	2200      	movs	r2, #0
 8004e96:	4659      	mov	r1, fp
 8004e98:	4640      	mov	r0, r8
 8004e9a:	f002 fb5b 	bl	8007554 <_strtod_r>
 8004e9e:	9b03      	ldr	r3, [sp, #12]
 8004ea0:	6821      	ldr	r1, [r4, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f011 0f02 	tst.w	r1, #2
 8004ea8:	f103 0204 	add.w	r2, r3, #4
 8004eac:	d020      	beq.n	8004ef0 <_scanf_float+0x3d4>
 8004eae:	9903      	ldr	r1, [sp, #12]
 8004eb0:	600a      	str	r2, [r1, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	ed83 0b00 	vstr	d0, [r3]
 8004eb8:	68e3      	ldr	r3, [r4, #12]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	60e3      	str	r3, [r4, #12]
 8004ebe:	e66e      	b.n	8004b9e <_scanf_float+0x82>
 8004ec0:	9b04      	ldr	r3, [sp, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0e6      	beq.n	8004e94 <_scanf_float+0x378>
 8004ec6:	9905      	ldr	r1, [sp, #20]
 8004ec8:	230a      	movs	r3, #10
 8004eca:	462a      	mov	r2, r5
 8004ecc:	3101      	adds	r1, #1
 8004ece:	4640      	mov	r0, r8
 8004ed0:	f002 fbc8 	bl	8007664 <_strtol_r>
 8004ed4:	9b04      	ldr	r3, [sp, #16]
 8004ed6:	9e05      	ldr	r6, [sp, #20]
 8004ed8:	1ac2      	subs	r2, r0, r3
 8004eda:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004ede:	429e      	cmp	r6, r3
 8004ee0:	bf28      	it	cs
 8004ee2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004ee6:	490d      	ldr	r1, [pc, #52]	; (8004f1c <_scanf_float+0x400>)
 8004ee8:	4630      	mov	r0, r6
 8004eea:	f000 f8dd 	bl	80050a8 <siprintf>
 8004eee:	e7d1      	b.n	8004e94 <_scanf_float+0x378>
 8004ef0:	f011 0f04 	tst.w	r1, #4
 8004ef4:	9903      	ldr	r1, [sp, #12]
 8004ef6:	600a      	str	r2, [r1, #0]
 8004ef8:	d1db      	bne.n	8004eb2 <_scanf_float+0x396>
 8004efa:	eeb4 0b40 	vcmp.f64	d0, d0
 8004efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f02:	681e      	ldr	r6, [r3, #0]
 8004f04:	d705      	bvc.n	8004f12 <_scanf_float+0x3f6>
 8004f06:	4806      	ldr	r0, [pc, #24]	; (8004f20 <_scanf_float+0x404>)
 8004f08:	f000 f9b2 	bl	8005270 <nanf>
 8004f0c:	ed86 0a00 	vstr	s0, [r6]
 8004f10:	e7d2      	b.n	8004eb8 <_scanf_float+0x39c>
 8004f12:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8004f16:	e7f9      	b.n	8004f0c <_scanf_float+0x3f0>
 8004f18:	2500      	movs	r5, #0
 8004f1a:	e640      	b.n	8004b9e <_scanf_float+0x82>
 8004f1c:	080088ac 	.word	0x080088ac
 8004f20:	08008c3d 	.word	0x08008c3d

08004f24 <std>:
 8004f24:	2300      	movs	r3, #0
 8004f26:	b510      	push	{r4, lr}
 8004f28:	4604      	mov	r4, r0
 8004f2a:	e9c0 3300 	strd	r3, r3, [r0]
 8004f2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f32:	6083      	str	r3, [r0, #8]
 8004f34:	8181      	strh	r1, [r0, #12]
 8004f36:	6643      	str	r3, [r0, #100]	; 0x64
 8004f38:	81c2      	strh	r2, [r0, #14]
 8004f3a:	6183      	str	r3, [r0, #24]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	2208      	movs	r2, #8
 8004f40:	305c      	adds	r0, #92	; 0x5c
 8004f42:	f000 f914 	bl	800516e <memset>
 8004f46:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <std+0x58>)
 8004f48:	6263      	str	r3, [r4, #36]	; 0x24
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <std+0x5c>)
 8004f4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	; (8004f84 <std+0x60>)
 8004f50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f52:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <std+0x64>)
 8004f54:	6323      	str	r3, [r4, #48]	; 0x30
 8004f56:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <std+0x68>)
 8004f58:	6224      	str	r4, [r4, #32]
 8004f5a:	429c      	cmp	r4, r3
 8004f5c:	d006      	beq.n	8004f6c <std+0x48>
 8004f5e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004f62:	4294      	cmp	r4, r2
 8004f64:	d002      	beq.n	8004f6c <std+0x48>
 8004f66:	33d0      	adds	r3, #208	; 0xd0
 8004f68:	429c      	cmp	r4, r3
 8004f6a:	d105      	bne.n	8004f78 <std+0x54>
 8004f6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f74:	f000 b978 	b.w	8005268 <__retarget_lock_init_recursive>
 8004f78:	bd10      	pop	{r4, pc}
 8004f7a:	bf00      	nop
 8004f7c:	080050e9 	.word	0x080050e9
 8004f80:	0800510b 	.word	0x0800510b
 8004f84:	08005143 	.word	0x08005143
 8004f88:	08005167 	.word	0x08005167
 8004f8c:	200002e4 	.word	0x200002e4

08004f90 <stdio_exit_handler>:
 8004f90:	4a02      	ldr	r2, [pc, #8]	; (8004f9c <stdio_exit_handler+0xc>)
 8004f92:	4903      	ldr	r1, [pc, #12]	; (8004fa0 <stdio_exit_handler+0x10>)
 8004f94:	4803      	ldr	r0, [pc, #12]	; (8004fa4 <stdio_exit_handler+0x14>)
 8004f96:	f000 b869 	b.w	800506c <_fwalk_sglue>
 8004f9a:	bf00      	nop
 8004f9c:	20000024 	.word	0x20000024
 8004fa0:	08007a25 	.word	0x08007a25
 8004fa4:	20000030 	.word	0x20000030

08004fa8 <cleanup_stdio>:
 8004fa8:	6841      	ldr	r1, [r0, #4]
 8004faa:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <cleanup_stdio+0x34>)
 8004fac:	4299      	cmp	r1, r3
 8004fae:	b510      	push	{r4, lr}
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	d001      	beq.n	8004fb8 <cleanup_stdio+0x10>
 8004fb4:	f002 fd36 	bl	8007a24 <_fflush_r>
 8004fb8:	68a1      	ldr	r1, [r4, #8]
 8004fba:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <cleanup_stdio+0x38>)
 8004fbc:	4299      	cmp	r1, r3
 8004fbe:	d002      	beq.n	8004fc6 <cleanup_stdio+0x1e>
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f002 fd2f 	bl	8007a24 <_fflush_r>
 8004fc6:	68e1      	ldr	r1, [r4, #12]
 8004fc8:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <cleanup_stdio+0x3c>)
 8004fca:	4299      	cmp	r1, r3
 8004fcc:	d004      	beq.n	8004fd8 <cleanup_stdio+0x30>
 8004fce:	4620      	mov	r0, r4
 8004fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fd4:	f002 bd26 	b.w	8007a24 <_fflush_r>
 8004fd8:	bd10      	pop	{r4, pc}
 8004fda:	bf00      	nop
 8004fdc:	200002e4 	.word	0x200002e4
 8004fe0:	2000034c 	.word	0x2000034c
 8004fe4:	200003b4 	.word	0x200003b4

08004fe8 <global_stdio_init.part.0>:
 8004fe8:	b510      	push	{r4, lr}
 8004fea:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <global_stdio_init.part.0+0x30>)
 8004fec:	4c0b      	ldr	r4, [pc, #44]	; (800501c <global_stdio_init.part.0+0x34>)
 8004fee:	4a0c      	ldr	r2, [pc, #48]	; (8005020 <global_stdio_init.part.0+0x38>)
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2104      	movs	r1, #4
 8004ff8:	f7ff ff94 	bl	8004f24 <std>
 8004ffc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005000:	2201      	movs	r2, #1
 8005002:	2109      	movs	r1, #9
 8005004:	f7ff ff8e 	bl	8004f24 <std>
 8005008:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800500c:	2202      	movs	r2, #2
 800500e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005012:	2112      	movs	r1, #18
 8005014:	f7ff bf86 	b.w	8004f24 <std>
 8005018:	2000041c 	.word	0x2000041c
 800501c:	200002e4 	.word	0x200002e4
 8005020:	08004f91 	.word	0x08004f91

08005024 <__sfp_lock_acquire>:
 8005024:	4801      	ldr	r0, [pc, #4]	; (800502c <__sfp_lock_acquire+0x8>)
 8005026:	f000 b920 	b.w	800526a <__retarget_lock_acquire_recursive>
 800502a:	bf00      	nop
 800502c:	20000425 	.word	0x20000425

08005030 <__sfp_lock_release>:
 8005030:	4801      	ldr	r0, [pc, #4]	; (8005038 <__sfp_lock_release+0x8>)
 8005032:	f000 b91b 	b.w	800526c <__retarget_lock_release_recursive>
 8005036:	bf00      	nop
 8005038:	20000425 	.word	0x20000425

0800503c <__sinit>:
 800503c:	b510      	push	{r4, lr}
 800503e:	4604      	mov	r4, r0
 8005040:	f7ff fff0 	bl	8005024 <__sfp_lock_acquire>
 8005044:	6a23      	ldr	r3, [r4, #32]
 8005046:	b11b      	cbz	r3, 8005050 <__sinit+0x14>
 8005048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800504c:	f7ff bff0 	b.w	8005030 <__sfp_lock_release>
 8005050:	4b04      	ldr	r3, [pc, #16]	; (8005064 <__sinit+0x28>)
 8005052:	6223      	str	r3, [r4, #32]
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <__sinit+0x2c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1f5      	bne.n	8005048 <__sinit+0xc>
 800505c:	f7ff ffc4 	bl	8004fe8 <global_stdio_init.part.0>
 8005060:	e7f2      	b.n	8005048 <__sinit+0xc>
 8005062:	bf00      	nop
 8005064:	08004fa9 	.word	0x08004fa9
 8005068:	2000041c 	.word	0x2000041c

0800506c <_fwalk_sglue>:
 800506c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005070:	4607      	mov	r7, r0
 8005072:	4688      	mov	r8, r1
 8005074:	4614      	mov	r4, r2
 8005076:	2600      	movs	r6, #0
 8005078:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800507c:	f1b9 0901 	subs.w	r9, r9, #1
 8005080:	d505      	bpl.n	800508e <_fwalk_sglue+0x22>
 8005082:	6824      	ldr	r4, [r4, #0]
 8005084:	2c00      	cmp	r4, #0
 8005086:	d1f7      	bne.n	8005078 <_fwalk_sglue+0xc>
 8005088:	4630      	mov	r0, r6
 800508a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800508e:	89ab      	ldrh	r3, [r5, #12]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d907      	bls.n	80050a4 <_fwalk_sglue+0x38>
 8005094:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005098:	3301      	adds	r3, #1
 800509a:	d003      	beq.n	80050a4 <_fwalk_sglue+0x38>
 800509c:	4629      	mov	r1, r5
 800509e:	4638      	mov	r0, r7
 80050a0:	47c0      	blx	r8
 80050a2:	4306      	orrs	r6, r0
 80050a4:	3568      	adds	r5, #104	; 0x68
 80050a6:	e7e9      	b.n	800507c <_fwalk_sglue+0x10>

080050a8 <siprintf>:
 80050a8:	b40e      	push	{r1, r2, r3}
 80050aa:	b500      	push	{lr}
 80050ac:	b09c      	sub	sp, #112	; 0x70
 80050ae:	ab1d      	add	r3, sp, #116	; 0x74
 80050b0:	9002      	str	r0, [sp, #8]
 80050b2:	9006      	str	r0, [sp, #24]
 80050b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050b8:	4809      	ldr	r0, [pc, #36]	; (80050e0 <siprintf+0x38>)
 80050ba:	9107      	str	r1, [sp, #28]
 80050bc:	9104      	str	r1, [sp, #16]
 80050be:	4909      	ldr	r1, [pc, #36]	; (80050e4 <siprintf+0x3c>)
 80050c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050c4:	9105      	str	r1, [sp, #20]
 80050c6:	6800      	ldr	r0, [r0, #0]
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	a902      	add	r1, sp, #8
 80050cc:	f002 fb26 	bl	800771c <_svfiprintf_r>
 80050d0:	9b02      	ldr	r3, [sp, #8]
 80050d2:	2200      	movs	r2, #0
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	b01c      	add	sp, #112	; 0x70
 80050d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050dc:	b003      	add	sp, #12
 80050de:	4770      	bx	lr
 80050e0:	2000007c 	.word	0x2000007c
 80050e4:	ffff0208 	.word	0xffff0208

080050e8 <__sread>:
 80050e8:	b510      	push	{r4, lr}
 80050ea:	460c      	mov	r4, r1
 80050ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f0:	f000 f86c 	bl	80051cc <_read_r>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	bfab      	itete	ge
 80050f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050fa:	89a3      	ldrhlt	r3, [r4, #12]
 80050fc:	181b      	addge	r3, r3, r0
 80050fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005102:	bfac      	ite	ge
 8005104:	6563      	strge	r3, [r4, #84]	; 0x54
 8005106:	81a3      	strhlt	r3, [r4, #12]
 8005108:	bd10      	pop	{r4, pc}

0800510a <__swrite>:
 800510a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800510e:	461f      	mov	r7, r3
 8005110:	898b      	ldrh	r3, [r1, #12]
 8005112:	05db      	lsls	r3, r3, #23
 8005114:	4605      	mov	r5, r0
 8005116:	460c      	mov	r4, r1
 8005118:	4616      	mov	r6, r2
 800511a:	d505      	bpl.n	8005128 <__swrite+0x1e>
 800511c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005120:	2302      	movs	r3, #2
 8005122:	2200      	movs	r2, #0
 8005124:	f000 f840 	bl	80051a8 <_lseek_r>
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800512e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005132:	81a3      	strh	r3, [r4, #12]
 8005134:	4632      	mov	r2, r6
 8005136:	463b      	mov	r3, r7
 8005138:	4628      	mov	r0, r5
 800513a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800513e:	f000 b857 	b.w	80051f0 <_write_r>

08005142 <__sseek>:
 8005142:	b510      	push	{r4, lr}
 8005144:	460c      	mov	r4, r1
 8005146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800514a:	f000 f82d 	bl	80051a8 <_lseek_r>
 800514e:	1c43      	adds	r3, r0, #1
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	bf15      	itete	ne
 8005154:	6560      	strne	r0, [r4, #84]	; 0x54
 8005156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800515a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800515e:	81a3      	strheq	r3, [r4, #12]
 8005160:	bf18      	it	ne
 8005162:	81a3      	strhne	r3, [r4, #12]
 8005164:	bd10      	pop	{r4, pc}

08005166 <__sclose>:
 8005166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800516a:	f000 b80d 	b.w	8005188 <_close_r>

0800516e <memset>:
 800516e:	4402      	add	r2, r0
 8005170:	4603      	mov	r3, r0
 8005172:	4293      	cmp	r3, r2
 8005174:	d100      	bne.n	8005178 <memset+0xa>
 8005176:	4770      	bx	lr
 8005178:	f803 1b01 	strb.w	r1, [r3], #1
 800517c:	e7f9      	b.n	8005172 <memset+0x4>
	...

08005180 <_localeconv_r>:
 8005180:	4800      	ldr	r0, [pc, #0]	; (8005184 <_localeconv_r+0x4>)
 8005182:	4770      	bx	lr
 8005184:	20000170 	.word	0x20000170

08005188 <_close_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	4d06      	ldr	r5, [pc, #24]	; (80051a4 <_close_r+0x1c>)
 800518c:	2300      	movs	r3, #0
 800518e:	4604      	mov	r4, r0
 8005190:	4608      	mov	r0, r1
 8005192:	602b      	str	r3, [r5, #0]
 8005194:	f7fc fd05 	bl	8001ba2 <_close>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	d102      	bne.n	80051a2 <_close_r+0x1a>
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	b103      	cbz	r3, 80051a2 <_close_r+0x1a>
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	20000420 	.word	0x20000420

080051a8 <_lseek_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4d07      	ldr	r5, [pc, #28]	; (80051c8 <_lseek_r+0x20>)
 80051ac:	4604      	mov	r4, r0
 80051ae:	4608      	mov	r0, r1
 80051b0:	4611      	mov	r1, r2
 80051b2:	2200      	movs	r2, #0
 80051b4:	602a      	str	r2, [r5, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f7fc fd1a 	bl	8001bf0 <_lseek>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d102      	bne.n	80051c6 <_lseek_r+0x1e>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	b103      	cbz	r3, 80051c6 <_lseek_r+0x1e>
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	20000420 	.word	0x20000420

080051cc <_read_r>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	4d07      	ldr	r5, [pc, #28]	; (80051ec <_read_r+0x20>)
 80051d0:	4604      	mov	r4, r0
 80051d2:	4608      	mov	r0, r1
 80051d4:	4611      	mov	r1, r2
 80051d6:	2200      	movs	r2, #0
 80051d8:	602a      	str	r2, [r5, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	f7fc fca8 	bl	8001b30 <_read>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_read_r+0x1e>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_read_r+0x1e>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	20000420 	.word	0x20000420

080051f0 <_write_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4d07      	ldr	r5, [pc, #28]	; (8005210 <_write_r+0x20>)
 80051f4:	4604      	mov	r4, r0
 80051f6:	4608      	mov	r0, r1
 80051f8:	4611      	mov	r1, r2
 80051fa:	2200      	movs	r2, #0
 80051fc:	602a      	str	r2, [r5, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	f7fc fcb3 	bl	8001b6a <_write>
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	d102      	bne.n	800520e <_write_r+0x1e>
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	b103      	cbz	r3, 800520e <_write_r+0x1e>
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	bd38      	pop	{r3, r4, r5, pc}
 8005210:	20000420 	.word	0x20000420

08005214 <__errno>:
 8005214:	4b01      	ldr	r3, [pc, #4]	; (800521c <__errno+0x8>)
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	2000007c 	.word	0x2000007c

08005220 <__libc_init_array>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	4d0d      	ldr	r5, [pc, #52]	; (8005258 <__libc_init_array+0x38>)
 8005224:	4c0d      	ldr	r4, [pc, #52]	; (800525c <__libc_init_array+0x3c>)
 8005226:	1b64      	subs	r4, r4, r5
 8005228:	10a4      	asrs	r4, r4, #2
 800522a:	2600      	movs	r6, #0
 800522c:	42a6      	cmp	r6, r4
 800522e:	d109      	bne.n	8005244 <__libc_init_array+0x24>
 8005230:	4d0b      	ldr	r5, [pc, #44]	; (8005260 <__libc_init_array+0x40>)
 8005232:	4c0c      	ldr	r4, [pc, #48]	; (8005264 <__libc_init_array+0x44>)
 8005234:	f003 fb0c 	bl	8008850 <_init>
 8005238:	1b64      	subs	r4, r4, r5
 800523a:	10a4      	asrs	r4, r4, #2
 800523c:	2600      	movs	r6, #0
 800523e:	42a6      	cmp	r6, r4
 8005240:	d105      	bne.n	800524e <__libc_init_array+0x2e>
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	f855 3b04 	ldr.w	r3, [r5], #4
 8005248:	4798      	blx	r3
 800524a:	3601      	adds	r6, #1
 800524c:	e7ee      	b.n	800522c <__libc_init_array+0xc>
 800524e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005252:	4798      	blx	r3
 8005254:	3601      	adds	r6, #1
 8005256:	e7f2      	b.n	800523e <__libc_init_array+0x1e>
 8005258:	08008ca8 	.word	0x08008ca8
 800525c:	08008ca8 	.word	0x08008ca8
 8005260:	08008ca8 	.word	0x08008ca8
 8005264:	08008cac 	.word	0x08008cac

08005268 <__retarget_lock_init_recursive>:
 8005268:	4770      	bx	lr

0800526a <__retarget_lock_acquire_recursive>:
 800526a:	4770      	bx	lr

0800526c <__retarget_lock_release_recursive>:
 800526c:	4770      	bx	lr
	...

08005270 <nanf>:
 8005270:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005278 <nanf+0x8>
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	7fc00000 	.word	0x7fc00000

0800527c <quorem>:
 800527c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005280:	6903      	ldr	r3, [r0, #16]
 8005282:	690c      	ldr	r4, [r1, #16]
 8005284:	42a3      	cmp	r3, r4
 8005286:	4607      	mov	r7, r0
 8005288:	db7e      	blt.n	8005388 <quorem+0x10c>
 800528a:	3c01      	subs	r4, #1
 800528c:	f101 0814 	add.w	r8, r1, #20
 8005290:	f100 0514 	add.w	r5, r0, #20
 8005294:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800529e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052a2:	3301      	adds	r3, #1
 80052a4:	429a      	cmp	r2, r3
 80052a6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80052b2:	d331      	bcc.n	8005318 <quorem+0x9c>
 80052b4:	f04f 0e00 	mov.w	lr, #0
 80052b8:	4640      	mov	r0, r8
 80052ba:	46ac      	mov	ip, r5
 80052bc:	46f2      	mov	sl, lr
 80052be:	f850 2b04 	ldr.w	r2, [r0], #4
 80052c2:	b293      	uxth	r3, r2
 80052c4:	fb06 e303 	mla	r3, r6, r3, lr
 80052c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052cc:	0c1a      	lsrs	r2, r3, #16
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	ebaa 0303 	sub.w	r3, sl, r3
 80052d4:	f8dc a000 	ldr.w	sl, [ip]
 80052d8:	fa13 f38a 	uxtah	r3, r3, sl
 80052dc:	fb06 220e 	mla	r2, r6, lr, r2
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	9b00      	ldr	r3, [sp, #0]
 80052e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052e8:	b292      	uxth	r2, r2
 80052ea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80052ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052f2:	f8bd 3000 	ldrh.w	r3, [sp]
 80052f6:	4581      	cmp	r9, r0
 80052f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052fc:	f84c 3b04 	str.w	r3, [ip], #4
 8005300:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005304:	d2db      	bcs.n	80052be <quorem+0x42>
 8005306:	f855 300b 	ldr.w	r3, [r5, fp]
 800530a:	b92b      	cbnz	r3, 8005318 <quorem+0x9c>
 800530c:	9b01      	ldr	r3, [sp, #4]
 800530e:	3b04      	subs	r3, #4
 8005310:	429d      	cmp	r5, r3
 8005312:	461a      	mov	r2, r3
 8005314:	d32c      	bcc.n	8005370 <quorem+0xf4>
 8005316:	613c      	str	r4, [r7, #16]
 8005318:	4638      	mov	r0, r7
 800531a:	f001 f96b 	bl	80065f4 <__mcmp>
 800531e:	2800      	cmp	r0, #0
 8005320:	db22      	blt.n	8005368 <quorem+0xec>
 8005322:	3601      	adds	r6, #1
 8005324:	4629      	mov	r1, r5
 8005326:	2000      	movs	r0, #0
 8005328:	f858 2b04 	ldr.w	r2, [r8], #4
 800532c:	f8d1 c000 	ldr.w	ip, [r1]
 8005330:	b293      	uxth	r3, r2
 8005332:	1ac3      	subs	r3, r0, r3
 8005334:	0c12      	lsrs	r2, r2, #16
 8005336:	fa13 f38c 	uxtah	r3, r3, ip
 800533a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800533e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005342:	b29b      	uxth	r3, r3
 8005344:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005348:	45c1      	cmp	r9, r8
 800534a:	f841 3b04 	str.w	r3, [r1], #4
 800534e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005352:	d2e9      	bcs.n	8005328 <quorem+0xac>
 8005354:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005358:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800535c:	b922      	cbnz	r2, 8005368 <quorem+0xec>
 800535e:	3b04      	subs	r3, #4
 8005360:	429d      	cmp	r5, r3
 8005362:	461a      	mov	r2, r3
 8005364:	d30a      	bcc.n	800537c <quorem+0x100>
 8005366:	613c      	str	r4, [r7, #16]
 8005368:	4630      	mov	r0, r6
 800536a:	b003      	add	sp, #12
 800536c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005370:	6812      	ldr	r2, [r2, #0]
 8005372:	3b04      	subs	r3, #4
 8005374:	2a00      	cmp	r2, #0
 8005376:	d1ce      	bne.n	8005316 <quorem+0x9a>
 8005378:	3c01      	subs	r4, #1
 800537a:	e7c9      	b.n	8005310 <quorem+0x94>
 800537c:	6812      	ldr	r2, [r2, #0]
 800537e:	3b04      	subs	r3, #4
 8005380:	2a00      	cmp	r2, #0
 8005382:	d1f0      	bne.n	8005366 <quorem+0xea>
 8005384:	3c01      	subs	r4, #1
 8005386:	e7eb      	b.n	8005360 <quorem+0xe4>
 8005388:	2000      	movs	r0, #0
 800538a:	e7ee      	b.n	800536a <quorem+0xee>
 800538c:	0000      	movs	r0, r0
	...

08005390 <_dtoa_r>:
 8005390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005394:	ed2d 8b02 	vpush	{d8}
 8005398:	69c5      	ldr	r5, [r0, #28]
 800539a:	b091      	sub	sp, #68	; 0x44
 800539c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80053a0:	ec59 8b10 	vmov	r8, r9, d0
 80053a4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80053a6:	9106      	str	r1, [sp, #24]
 80053a8:	4606      	mov	r6, r0
 80053aa:	9208      	str	r2, [sp, #32]
 80053ac:	930c      	str	r3, [sp, #48]	; 0x30
 80053ae:	b975      	cbnz	r5, 80053ce <_dtoa_r+0x3e>
 80053b0:	2010      	movs	r0, #16
 80053b2:	f000 fda5 	bl	8005f00 <malloc>
 80053b6:	4602      	mov	r2, r0
 80053b8:	61f0      	str	r0, [r6, #28]
 80053ba:	b920      	cbnz	r0, 80053c6 <_dtoa_r+0x36>
 80053bc:	4ba6      	ldr	r3, [pc, #664]	; (8005658 <_dtoa_r+0x2c8>)
 80053be:	21ef      	movs	r1, #239	; 0xef
 80053c0:	48a6      	ldr	r0, [pc, #664]	; (800565c <_dtoa_r+0x2cc>)
 80053c2:	f002 fba9 	bl	8007b18 <__assert_func>
 80053c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053ca:	6005      	str	r5, [r0, #0]
 80053cc:	60c5      	str	r5, [r0, #12]
 80053ce:	69f3      	ldr	r3, [r6, #28]
 80053d0:	6819      	ldr	r1, [r3, #0]
 80053d2:	b151      	cbz	r1, 80053ea <_dtoa_r+0x5a>
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	604a      	str	r2, [r1, #4]
 80053d8:	2301      	movs	r3, #1
 80053da:	4093      	lsls	r3, r2
 80053dc:	608b      	str	r3, [r1, #8]
 80053de:	4630      	mov	r0, r6
 80053e0:	f000 fe82 	bl	80060e8 <_Bfree>
 80053e4:	69f3      	ldr	r3, [r6, #28]
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	f1b9 0300 	subs.w	r3, r9, #0
 80053ee:	bfbb      	ittet	lt
 80053f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053f4:	9303      	strlt	r3, [sp, #12]
 80053f6:	2300      	movge	r3, #0
 80053f8:	2201      	movlt	r2, #1
 80053fa:	bfac      	ite	ge
 80053fc:	6023      	strge	r3, [r4, #0]
 80053fe:	6022      	strlt	r2, [r4, #0]
 8005400:	4b97      	ldr	r3, [pc, #604]	; (8005660 <_dtoa_r+0x2d0>)
 8005402:	9c03      	ldr	r4, [sp, #12]
 8005404:	43a3      	bics	r3, r4
 8005406:	d11c      	bne.n	8005442 <_dtoa_r+0xb2>
 8005408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800540a:	f242 730f 	movw	r3, #9999	; 0x270f
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005414:	ea53 0308 	orrs.w	r3, r3, r8
 8005418:	f000 84fb 	beq.w	8005e12 <_dtoa_r+0xa82>
 800541c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800541e:	b963      	cbnz	r3, 800543a <_dtoa_r+0xaa>
 8005420:	4b90      	ldr	r3, [pc, #576]	; (8005664 <_dtoa_r+0x2d4>)
 8005422:	e020      	b.n	8005466 <_dtoa_r+0xd6>
 8005424:	4b90      	ldr	r3, [pc, #576]	; (8005668 <_dtoa_r+0x2d8>)
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	3308      	adds	r3, #8
 800542a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	9801      	ldr	r0, [sp, #4]
 8005430:	b011      	add	sp, #68	; 0x44
 8005432:	ecbd 8b02 	vpop	{d8}
 8005436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800543a:	4b8a      	ldr	r3, [pc, #552]	; (8005664 <_dtoa_r+0x2d4>)
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	3303      	adds	r3, #3
 8005440:	e7f3      	b.n	800542a <_dtoa_r+0x9a>
 8005442:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005446:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800544a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544e:	d10c      	bne.n	800546a <_dtoa_r+0xda>
 8005450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005452:	2301      	movs	r3, #1
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 84d7 	beq.w	8005e0c <_dtoa_r+0xa7c>
 800545e:	4b83      	ldr	r3, [pc, #524]	; (800566c <_dtoa_r+0x2dc>)
 8005460:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	3b01      	subs	r3, #1
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	e7e1      	b.n	800542e <_dtoa_r+0x9e>
 800546a:	aa0e      	add	r2, sp, #56	; 0x38
 800546c:	a90f      	add	r1, sp, #60	; 0x3c
 800546e:	4630      	mov	r0, r6
 8005470:	eeb0 0b48 	vmov.f64	d0, d8
 8005474:	f001 f9d4 	bl	8006820 <__d2b>
 8005478:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800547c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800547e:	4605      	mov	r5, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d046      	beq.n	8005512 <_dtoa_r+0x182>
 8005484:	eeb0 7b48 	vmov.f64	d7, d8
 8005488:	ee18 1a90 	vmov	r1, s17
 800548c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005490:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8005494:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005498:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800549c:	2000      	movs	r0, #0
 800549e:	ee07 1a90 	vmov	s15, r1
 80054a2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80054a6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005640 <_dtoa_r+0x2b0>
 80054aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80054ae:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005648 <_dtoa_r+0x2b8>
 80054b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80054b6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005650 <_dtoa_r+0x2c0>
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80054c2:	eeb0 7b46 	vmov.f64	d7, d6
 80054c6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80054ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80054ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80054d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d6:	ee16 ba90 	vmov	fp, s13
 80054da:	9009      	str	r0, [sp, #36]	; 0x24
 80054dc:	d508      	bpl.n	80054f0 <_dtoa_r+0x160>
 80054de:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80054e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80054e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ea:	bf18      	it	ne
 80054ec:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80054f0:	f1bb 0f16 	cmp.w	fp, #22
 80054f4:	d82b      	bhi.n	800554e <_dtoa_r+0x1be>
 80054f6:	495e      	ldr	r1, [pc, #376]	; (8005670 <_dtoa_r+0x2e0>)
 80054f8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80054fc:	ed91 7b00 	vldr	d7, [r1]
 8005500:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005508:	d501      	bpl.n	800550e <_dtoa_r+0x17e>
 800550a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800550e:	2100      	movs	r1, #0
 8005510:	e01e      	b.n	8005550 <_dtoa_r+0x1c0>
 8005512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005514:	4413      	add	r3, r2
 8005516:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800551a:	2920      	cmp	r1, #32
 800551c:	bfc1      	itttt	gt
 800551e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8005522:	408c      	lslgt	r4, r1
 8005524:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8005528:	fa28 f101 	lsrgt.w	r1, r8, r1
 800552c:	bfd6      	itet	le
 800552e:	f1c1 0120 	rsble	r1, r1, #32
 8005532:	4321      	orrgt	r1, r4
 8005534:	fa08 f101 	lslle.w	r1, r8, r1
 8005538:	ee07 1a90 	vmov	s15, r1
 800553c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005540:	3b01      	subs	r3, #1
 8005542:	ee17 1a90 	vmov	r1, s15
 8005546:	2001      	movs	r0, #1
 8005548:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800554c:	e7a7      	b.n	800549e <_dtoa_r+0x10e>
 800554e:	2101      	movs	r1, #1
 8005550:	1ad2      	subs	r2, r2, r3
 8005552:	1e53      	subs	r3, r2, #1
 8005554:	9305      	str	r3, [sp, #20]
 8005556:	bf45      	ittet	mi
 8005558:	f1c2 0301 	rsbmi	r3, r2, #1
 800555c:	9304      	strmi	r3, [sp, #16]
 800555e:	2300      	movpl	r3, #0
 8005560:	2300      	movmi	r3, #0
 8005562:	bf4c      	ite	mi
 8005564:	9305      	strmi	r3, [sp, #20]
 8005566:	9304      	strpl	r3, [sp, #16]
 8005568:	f1bb 0f00 	cmp.w	fp, #0
 800556c:	910b      	str	r1, [sp, #44]	; 0x2c
 800556e:	db18      	blt.n	80055a2 <_dtoa_r+0x212>
 8005570:	9b05      	ldr	r3, [sp, #20]
 8005572:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005576:	445b      	add	r3, fp
 8005578:	9305      	str	r3, [sp, #20]
 800557a:	2300      	movs	r3, #0
 800557c:	9a06      	ldr	r2, [sp, #24]
 800557e:	2a09      	cmp	r2, #9
 8005580:	d848      	bhi.n	8005614 <_dtoa_r+0x284>
 8005582:	2a05      	cmp	r2, #5
 8005584:	bfc4      	itt	gt
 8005586:	3a04      	subgt	r2, #4
 8005588:	9206      	strgt	r2, [sp, #24]
 800558a:	9a06      	ldr	r2, [sp, #24]
 800558c:	f1a2 0202 	sub.w	r2, r2, #2
 8005590:	bfcc      	ite	gt
 8005592:	2400      	movgt	r4, #0
 8005594:	2401      	movle	r4, #1
 8005596:	2a03      	cmp	r2, #3
 8005598:	d847      	bhi.n	800562a <_dtoa_r+0x29a>
 800559a:	e8df f002 	tbb	[pc, r2]
 800559e:	2d0b      	.short	0x2d0b
 80055a0:	392b      	.short	0x392b
 80055a2:	9b04      	ldr	r3, [sp, #16]
 80055a4:	2200      	movs	r2, #0
 80055a6:	eba3 030b 	sub.w	r3, r3, fp
 80055aa:	9304      	str	r3, [sp, #16]
 80055ac:	920a      	str	r2, [sp, #40]	; 0x28
 80055ae:	f1cb 0300 	rsb	r3, fp, #0
 80055b2:	e7e3      	b.n	800557c <_dtoa_r+0x1ec>
 80055b4:	2200      	movs	r2, #0
 80055b6:	9207      	str	r2, [sp, #28]
 80055b8:	9a08      	ldr	r2, [sp, #32]
 80055ba:	2a00      	cmp	r2, #0
 80055bc:	dc38      	bgt.n	8005630 <_dtoa_r+0x2a0>
 80055be:	f04f 0a01 	mov.w	sl, #1
 80055c2:	46d1      	mov	r9, sl
 80055c4:	4652      	mov	r2, sl
 80055c6:	f8cd a020 	str.w	sl, [sp, #32]
 80055ca:	69f7      	ldr	r7, [r6, #28]
 80055cc:	2100      	movs	r1, #0
 80055ce:	2004      	movs	r0, #4
 80055d0:	f100 0c14 	add.w	ip, r0, #20
 80055d4:	4594      	cmp	ip, r2
 80055d6:	d930      	bls.n	800563a <_dtoa_r+0x2aa>
 80055d8:	6079      	str	r1, [r7, #4]
 80055da:	4630      	mov	r0, r6
 80055dc:	930d      	str	r3, [sp, #52]	; 0x34
 80055de:	f000 fd43 	bl	8006068 <_Balloc>
 80055e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055e4:	9001      	str	r0, [sp, #4]
 80055e6:	4602      	mov	r2, r0
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d145      	bne.n	8005678 <_dtoa_r+0x2e8>
 80055ec:	4b21      	ldr	r3, [pc, #132]	; (8005674 <_dtoa_r+0x2e4>)
 80055ee:	f240 11af 	movw	r1, #431	; 0x1af
 80055f2:	e6e5      	b.n	80053c0 <_dtoa_r+0x30>
 80055f4:	2201      	movs	r2, #1
 80055f6:	e7de      	b.n	80055b6 <_dtoa_r+0x226>
 80055f8:	2200      	movs	r2, #0
 80055fa:	9207      	str	r2, [sp, #28]
 80055fc:	9a08      	ldr	r2, [sp, #32]
 80055fe:	eb0b 0a02 	add.w	sl, fp, r2
 8005602:	f10a 0901 	add.w	r9, sl, #1
 8005606:	464a      	mov	r2, r9
 8005608:	2a01      	cmp	r2, #1
 800560a:	bfb8      	it	lt
 800560c:	2201      	movlt	r2, #1
 800560e:	e7dc      	b.n	80055ca <_dtoa_r+0x23a>
 8005610:	2201      	movs	r2, #1
 8005612:	e7f2      	b.n	80055fa <_dtoa_r+0x26a>
 8005614:	2401      	movs	r4, #1
 8005616:	2200      	movs	r2, #0
 8005618:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800561c:	f04f 3aff 	mov.w	sl, #4294967295
 8005620:	2100      	movs	r1, #0
 8005622:	46d1      	mov	r9, sl
 8005624:	2212      	movs	r2, #18
 8005626:	9108      	str	r1, [sp, #32]
 8005628:	e7cf      	b.n	80055ca <_dtoa_r+0x23a>
 800562a:	2201      	movs	r2, #1
 800562c:	9207      	str	r2, [sp, #28]
 800562e:	e7f5      	b.n	800561c <_dtoa_r+0x28c>
 8005630:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005634:	46d1      	mov	r9, sl
 8005636:	4652      	mov	r2, sl
 8005638:	e7c7      	b.n	80055ca <_dtoa_r+0x23a>
 800563a:	3101      	adds	r1, #1
 800563c:	0040      	lsls	r0, r0, #1
 800563e:	e7c7      	b.n	80055d0 <_dtoa_r+0x240>
 8005640:	636f4361 	.word	0x636f4361
 8005644:	3fd287a7 	.word	0x3fd287a7
 8005648:	8b60c8b3 	.word	0x8b60c8b3
 800564c:	3fc68a28 	.word	0x3fc68a28
 8005650:	509f79fb 	.word	0x509f79fb
 8005654:	3fd34413 	.word	0x3fd34413
 8005658:	080088be 	.word	0x080088be
 800565c:	080088d5 	.word	0x080088d5
 8005660:	7ff00000 	.word	0x7ff00000
 8005664:	080088ba 	.word	0x080088ba
 8005668:	080088b1 	.word	0x080088b1
 800566c:	08008889 	.word	0x08008889
 8005670:	080089c0 	.word	0x080089c0
 8005674:	0800892d 	.word	0x0800892d
 8005678:	69f2      	ldr	r2, [r6, #28]
 800567a:	9901      	ldr	r1, [sp, #4]
 800567c:	6011      	str	r1, [r2, #0]
 800567e:	f1b9 0f0e 	cmp.w	r9, #14
 8005682:	d86c      	bhi.n	800575e <_dtoa_r+0x3ce>
 8005684:	2c00      	cmp	r4, #0
 8005686:	d06a      	beq.n	800575e <_dtoa_r+0x3ce>
 8005688:	f1bb 0f00 	cmp.w	fp, #0
 800568c:	f340 80a0 	ble.w	80057d0 <_dtoa_r+0x440>
 8005690:	4ac1      	ldr	r2, [pc, #772]	; (8005998 <_dtoa_r+0x608>)
 8005692:	f00b 010f 	and.w	r1, fp, #15
 8005696:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800569a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800569e:	ed92 7b00 	vldr	d7, [r2]
 80056a2:	ea4f 122b 	mov.w	r2, fp, asr #4
 80056a6:	f000 8087 	beq.w	80057b8 <_dtoa_r+0x428>
 80056aa:	49bc      	ldr	r1, [pc, #752]	; (800599c <_dtoa_r+0x60c>)
 80056ac:	ed91 6b08 	vldr	d6, [r1, #32]
 80056b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80056b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80056b8:	f002 020f 	and.w	r2, r2, #15
 80056bc:	2103      	movs	r1, #3
 80056be:	48b7      	ldr	r0, [pc, #732]	; (800599c <_dtoa_r+0x60c>)
 80056c0:	2a00      	cmp	r2, #0
 80056c2:	d17b      	bne.n	80057bc <_dtoa_r+0x42c>
 80056c4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80056c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80056cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80056d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056d6:	2a00      	cmp	r2, #0
 80056d8:	f000 80a0 	beq.w	800581c <_dtoa_r+0x48c>
 80056dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80056e0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80056e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e8:	f140 8098 	bpl.w	800581c <_dtoa_r+0x48c>
 80056ec:	f1b9 0f00 	cmp.w	r9, #0
 80056f0:	f000 8094 	beq.w	800581c <_dtoa_r+0x48c>
 80056f4:	f1ba 0f00 	cmp.w	sl, #0
 80056f8:	dd2f      	ble.n	800575a <_dtoa_r+0x3ca>
 80056fa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80056fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005702:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005706:	f10b 32ff 	add.w	r2, fp, #4294967295
 800570a:	3101      	adds	r1, #1
 800570c:	4654      	mov	r4, sl
 800570e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005712:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005716:	ee07 1a90 	vmov	s15, r1
 800571a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800571e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005722:	ee15 7a90 	vmov	r7, s11
 8005726:	ec51 0b15 	vmov	r0, r1, d5
 800572a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800572e:	2c00      	cmp	r4, #0
 8005730:	d177      	bne.n	8005822 <_dtoa_r+0x492>
 8005732:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005736:	ee36 6b47 	vsub.f64	d6, d6, d7
 800573a:	ec41 0b17 	vmov	d7, r0, r1
 800573e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005746:	f300 826a 	bgt.w	8005c1e <_dtoa_r+0x88e>
 800574a:	eeb1 7b47 	vneg.f64	d7, d7
 800574e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005756:	f100 8260 	bmi.w	8005c1a <_dtoa_r+0x88a>
 800575a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800575e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005760:	2a00      	cmp	r2, #0
 8005762:	f2c0 811d 	blt.w	80059a0 <_dtoa_r+0x610>
 8005766:	f1bb 0f0e 	cmp.w	fp, #14
 800576a:	f300 8119 	bgt.w	80059a0 <_dtoa_r+0x610>
 800576e:	4b8a      	ldr	r3, [pc, #552]	; (8005998 <_dtoa_r+0x608>)
 8005770:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005774:	ed93 6b00 	vldr	d6, [r3]
 8005778:	9b08      	ldr	r3, [sp, #32]
 800577a:	2b00      	cmp	r3, #0
 800577c:	f280 80b7 	bge.w	80058ee <_dtoa_r+0x55e>
 8005780:	f1b9 0f00 	cmp.w	r9, #0
 8005784:	f300 80b3 	bgt.w	80058ee <_dtoa_r+0x55e>
 8005788:	f040 8246 	bne.w	8005c18 <_dtoa_r+0x888>
 800578c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005790:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005794:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005798:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800579c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a0:	464c      	mov	r4, r9
 80057a2:	464f      	mov	r7, r9
 80057a4:	f280 821c 	bge.w	8005be0 <_dtoa_r+0x850>
 80057a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80057ac:	2331      	movs	r3, #49	; 0x31
 80057ae:	f808 3b01 	strb.w	r3, [r8], #1
 80057b2:	f10b 0b01 	add.w	fp, fp, #1
 80057b6:	e218      	b.n	8005bea <_dtoa_r+0x85a>
 80057b8:	2102      	movs	r1, #2
 80057ba:	e780      	b.n	80056be <_dtoa_r+0x32e>
 80057bc:	07d4      	lsls	r4, r2, #31
 80057be:	d504      	bpl.n	80057ca <_dtoa_r+0x43a>
 80057c0:	ed90 6b00 	vldr	d6, [r0]
 80057c4:	3101      	adds	r1, #1
 80057c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80057ca:	1052      	asrs	r2, r2, #1
 80057cc:	3008      	adds	r0, #8
 80057ce:	e777      	b.n	80056c0 <_dtoa_r+0x330>
 80057d0:	d022      	beq.n	8005818 <_dtoa_r+0x488>
 80057d2:	f1cb 0200 	rsb	r2, fp, #0
 80057d6:	4970      	ldr	r1, [pc, #448]	; (8005998 <_dtoa_r+0x608>)
 80057d8:	f002 000f 	and.w	r0, r2, #15
 80057dc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80057e0:	ed91 7b00 	vldr	d7, [r1]
 80057e4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80057e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80057ec:	486b      	ldr	r0, [pc, #428]	; (800599c <_dtoa_r+0x60c>)
 80057ee:	1112      	asrs	r2, r2, #4
 80057f0:	2400      	movs	r4, #0
 80057f2:	2102      	movs	r1, #2
 80057f4:	b92a      	cbnz	r2, 8005802 <_dtoa_r+0x472>
 80057f6:	2c00      	cmp	r4, #0
 80057f8:	f43f af6a 	beq.w	80056d0 <_dtoa_r+0x340>
 80057fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005800:	e766      	b.n	80056d0 <_dtoa_r+0x340>
 8005802:	07d7      	lsls	r7, r2, #31
 8005804:	d505      	bpl.n	8005812 <_dtoa_r+0x482>
 8005806:	ed90 6b00 	vldr	d6, [r0]
 800580a:	3101      	adds	r1, #1
 800580c:	2401      	movs	r4, #1
 800580e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005812:	1052      	asrs	r2, r2, #1
 8005814:	3008      	adds	r0, #8
 8005816:	e7ed      	b.n	80057f4 <_dtoa_r+0x464>
 8005818:	2102      	movs	r1, #2
 800581a:	e759      	b.n	80056d0 <_dtoa_r+0x340>
 800581c:	465a      	mov	r2, fp
 800581e:	464c      	mov	r4, r9
 8005820:	e775      	b.n	800570e <_dtoa_r+0x37e>
 8005822:	ec41 0b17 	vmov	d7, r0, r1
 8005826:	495c      	ldr	r1, [pc, #368]	; (8005998 <_dtoa_r+0x608>)
 8005828:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800582c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8005830:	9901      	ldr	r1, [sp, #4]
 8005832:	440c      	add	r4, r1
 8005834:	9907      	ldr	r1, [sp, #28]
 8005836:	b351      	cbz	r1, 800588e <_dtoa_r+0x4fe>
 8005838:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800583c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005840:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005844:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005848:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800584c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005850:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005854:	ee14 1a90 	vmov	r1, s9
 8005858:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800585c:	3130      	adds	r1, #48	; 0x30
 800585e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005862:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586a:	f808 1b01 	strb.w	r1, [r8], #1
 800586e:	d439      	bmi.n	80058e4 <_dtoa_r+0x554>
 8005870:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005874:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587c:	d472      	bmi.n	8005964 <_dtoa_r+0x5d4>
 800587e:	45a0      	cmp	r8, r4
 8005880:	f43f af6b 	beq.w	800575a <_dtoa_r+0x3ca>
 8005884:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005888:	ee26 6b03 	vmul.f64	d6, d6, d3
 800588c:	e7e0      	b.n	8005850 <_dtoa_r+0x4c0>
 800588e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005892:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005896:	4620      	mov	r0, r4
 8005898:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800589c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80058a0:	ee14 1a90 	vmov	r1, s9
 80058a4:	3130      	adds	r1, #48	; 0x30
 80058a6:	f808 1b01 	strb.w	r1, [r8], #1
 80058aa:	45a0      	cmp	r8, r4
 80058ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80058b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80058b4:	d118      	bne.n	80058e8 <_dtoa_r+0x558>
 80058b6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80058ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 80058be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80058c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c6:	dc4d      	bgt.n	8005964 <_dtoa_r+0x5d4>
 80058c8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80058cc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80058d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d4:	f57f af41 	bpl.w	800575a <_dtoa_r+0x3ca>
 80058d8:	4680      	mov	r8, r0
 80058da:	3801      	subs	r0, #1
 80058dc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80058e0:	2b30      	cmp	r3, #48	; 0x30
 80058e2:	d0f9      	beq.n	80058d8 <_dtoa_r+0x548>
 80058e4:	4693      	mov	fp, r2
 80058e6:	e02a      	b.n	800593e <_dtoa_r+0x5ae>
 80058e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80058ec:	e7d6      	b.n	800589c <_dtoa_r+0x50c>
 80058ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058f2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80058f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80058fa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80058fe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005902:	ee15 3a10 	vmov	r3, s10
 8005906:	3330      	adds	r3, #48	; 0x30
 8005908:	f808 3b01 	strb.w	r3, [r8], #1
 800590c:	9b01      	ldr	r3, [sp, #4]
 800590e:	eba8 0303 	sub.w	r3, r8, r3
 8005912:	4599      	cmp	r9, r3
 8005914:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005918:	eea3 7b46 	vfms.f64	d7, d3, d6
 800591c:	d133      	bne.n	8005986 <_dtoa_r+0x5f6>
 800591e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005922:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592a:	dc1a      	bgt.n	8005962 <_dtoa_r+0x5d2>
 800592c:	eeb4 7b46 	vcmp.f64	d7, d6
 8005930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005934:	d103      	bne.n	800593e <_dtoa_r+0x5ae>
 8005936:	ee15 3a10 	vmov	r3, s10
 800593a:	07d9      	lsls	r1, r3, #31
 800593c:	d411      	bmi.n	8005962 <_dtoa_r+0x5d2>
 800593e:	4629      	mov	r1, r5
 8005940:	4630      	mov	r0, r6
 8005942:	f000 fbd1 	bl	80060e8 <_Bfree>
 8005946:	2300      	movs	r3, #0
 8005948:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800594a:	f888 3000 	strb.w	r3, [r8]
 800594e:	f10b 0301 	add.w	r3, fp, #1
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005956:	2b00      	cmp	r3, #0
 8005958:	f43f ad69 	beq.w	800542e <_dtoa_r+0x9e>
 800595c:	f8c3 8000 	str.w	r8, [r3]
 8005960:	e565      	b.n	800542e <_dtoa_r+0x9e>
 8005962:	465a      	mov	r2, fp
 8005964:	4643      	mov	r3, r8
 8005966:	4698      	mov	r8, r3
 8005968:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800596c:	2939      	cmp	r1, #57	; 0x39
 800596e:	d106      	bne.n	800597e <_dtoa_r+0x5ee>
 8005970:	9901      	ldr	r1, [sp, #4]
 8005972:	4299      	cmp	r1, r3
 8005974:	d1f7      	bne.n	8005966 <_dtoa_r+0x5d6>
 8005976:	9801      	ldr	r0, [sp, #4]
 8005978:	2130      	movs	r1, #48	; 0x30
 800597a:	3201      	adds	r2, #1
 800597c:	7001      	strb	r1, [r0, #0]
 800597e:	7819      	ldrb	r1, [r3, #0]
 8005980:	3101      	adds	r1, #1
 8005982:	7019      	strb	r1, [r3, #0]
 8005984:	e7ae      	b.n	80058e4 <_dtoa_r+0x554>
 8005986:	ee27 7b04 	vmul.f64	d7, d7, d4
 800598a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800598e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005992:	d1b2      	bne.n	80058fa <_dtoa_r+0x56a>
 8005994:	e7d3      	b.n	800593e <_dtoa_r+0x5ae>
 8005996:	bf00      	nop
 8005998:	080089c0 	.word	0x080089c0
 800599c:	08008998 	.word	0x08008998
 80059a0:	9907      	ldr	r1, [sp, #28]
 80059a2:	2900      	cmp	r1, #0
 80059a4:	f000 80d0 	beq.w	8005b48 <_dtoa_r+0x7b8>
 80059a8:	9906      	ldr	r1, [sp, #24]
 80059aa:	2901      	cmp	r1, #1
 80059ac:	f300 80b4 	bgt.w	8005b18 <_dtoa_r+0x788>
 80059b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059b2:	2900      	cmp	r1, #0
 80059b4:	f000 80ac 	beq.w	8005b10 <_dtoa_r+0x780>
 80059b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80059bc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80059c0:	461c      	mov	r4, r3
 80059c2:	9309      	str	r3, [sp, #36]	; 0x24
 80059c4:	9b04      	ldr	r3, [sp, #16]
 80059c6:	4413      	add	r3, r2
 80059c8:	9304      	str	r3, [sp, #16]
 80059ca:	9b05      	ldr	r3, [sp, #20]
 80059cc:	2101      	movs	r1, #1
 80059ce:	4413      	add	r3, r2
 80059d0:	4630      	mov	r0, r6
 80059d2:	9305      	str	r3, [sp, #20]
 80059d4:	f000 fc88 	bl	80062e8 <__i2b>
 80059d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059da:	4607      	mov	r7, r0
 80059dc:	f1b8 0f00 	cmp.w	r8, #0
 80059e0:	d00d      	beq.n	80059fe <_dtoa_r+0x66e>
 80059e2:	9a05      	ldr	r2, [sp, #20]
 80059e4:	2a00      	cmp	r2, #0
 80059e6:	dd0a      	ble.n	80059fe <_dtoa_r+0x66e>
 80059e8:	4542      	cmp	r2, r8
 80059ea:	9904      	ldr	r1, [sp, #16]
 80059ec:	bfa8      	it	ge
 80059ee:	4642      	movge	r2, r8
 80059f0:	1a89      	subs	r1, r1, r2
 80059f2:	9104      	str	r1, [sp, #16]
 80059f4:	9905      	ldr	r1, [sp, #20]
 80059f6:	eba8 0802 	sub.w	r8, r8, r2
 80059fa:	1a8a      	subs	r2, r1, r2
 80059fc:	9205      	str	r2, [sp, #20]
 80059fe:	b303      	cbz	r3, 8005a42 <_dtoa_r+0x6b2>
 8005a00:	9a07      	ldr	r2, [sp, #28]
 8005a02:	2a00      	cmp	r2, #0
 8005a04:	f000 80a5 	beq.w	8005b52 <_dtoa_r+0x7c2>
 8005a08:	2c00      	cmp	r4, #0
 8005a0a:	dd13      	ble.n	8005a34 <_dtoa_r+0x6a4>
 8005a0c:	4639      	mov	r1, r7
 8005a0e:	4622      	mov	r2, r4
 8005a10:	4630      	mov	r0, r6
 8005a12:	930d      	str	r3, [sp, #52]	; 0x34
 8005a14:	f000 fd28 	bl	8006468 <__pow5mult>
 8005a18:	462a      	mov	r2, r5
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	4607      	mov	r7, r0
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f000 fc78 	bl	8006314 <__multiply>
 8005a24:	4629      	mov	r1, r5
 8005a26:	9009      	str	r0, [sp, #36]	; 0x24
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f000 fb5d 	bl	80060e8 <_Bfree>
 8005a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a32:	4615      	mov	r5, r2
 8005a34:	1b1a      	subs	r2, r3, r4
 8005a36:	d004      	beq.n	8005a42 <_dtoa_r+0x6b2>
 8005a38:	4629      	mov	r1, r5
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	f000 fd14 	bl	8006468 <__pow5mult>
 8005a40:	4605      	mov	r5, r0
 8005a42:	2101      	movs	r1, #1
 8005a44:	4630      	mov	r0, r6
 8005a46:	f000 fc4f 	bl	80062e8 <__i2b>
 8005a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	4604      	mov	r4, r0
 8005a50:	f340 8081 	ble.w	8005b56 <_dtoa_r+0x7c6>
 8005a54:	461a      	mov	r2, r3
 8005a56:	4601      	mov	r1, r0
 8005a58:	4630      	mov	r0, r6
 8005a5a:	f000 fd05 	bl	8006468 <__pow5mult>
 8005a5e:	9b06      	ldr	r3, [sp, #24]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	4604      	mov	r4, r0
 8005a64:	dd7a      	ble.n	8005b5c <_dtoa_r+0x7cc>
 8005a66:	2300      	movs	r3, #0
 8005a68:	9309      	str	r3, [sp, #36]	; 0x24
 8005a6a:	6922      	ldr	r2, [r4, #16]
 8005a6c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005a70:	6910      	ldr	r0, [r2, #16]
 8005a72:	f000 fbeb 	bl	800624c <__hi0bits>
 8005a76:	f1c0 0020 	rsb	r0, r0, #32
 8005a7a:	9b05      	ldr	r3, [sp, #20]
 8005a7c:	4418      	add	r0, r3
 8005a7e:	f010 001f 	ands.w	r0, r0, #31
 8005a82:	f000 8093 	beq.w	8005bac <_dtoa_r+0x81c>
 8005a86:	f1c0 0220 	rsb	r2, r0, #32
 8005a8a:	2a04      	cmp	r2, #4
 8005a8c:	f340 8085 	ble.w	8005b9a <_dtoa_r+0x80a>
 8005a90:	9b04      	ldr	r3, [sp, #16]
 8005a92:	f1c0 001c 	rsb	r0, r0, #28
 8005a96:	4403      	add	r3, r0
 8005a98:	9304      	str	r3, [sp, #16]
 8005a9a:	9b05      	ldr	r3, [sp, #20]
 8005a9c:	4480      	add	r8, r0
 8005a9e:	4403      	add	r3, r0
 8005aa0:	9305      	str	r3, [sp, #20]
 8005aa2:	9b04      	ldr	r3, [sp, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	dd05      	ble.n	8005ab4 <_dtoa_r+0x724>
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	461a      	mov	r2, r3
 8005aac:	4630      	mov	r0, r6
 8005aae:	f000 fd35 	bl	800651c <__lshift>
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	9b05      	ldr	r3, [sp, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	dd05      	ble.n	8005ac6 <_dtoa_r+0x736>
 8005aba:	4621      	mov	r1, r4
 8005abc:	461a      	mov	r2, r3
 8005abe:	4630      	mov	r0, r6
 8005ac0:	f000 fd2c 	bl	800651c <__lshift>
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d071      	beq.n	8005bb0 <_dtoa_r+0x820>
 8005acc:	4621      	mov	r1, r4
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f000 fd90 	bl	80065f4 <__mcmp>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	da6b      	bge.n	8005bb0 <_dtoa_r+0x820>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	4629      	mov	r1, r5
 8005adc:	220a      	movs	r2, #10
 8005ade:	4630      	mov	r0, r6
 8005ae0:	f000 fb24 	bl	800612c <__multadd>
 8005ae4:	9b07      	ldr	r3, [sp, #28]
 8005ae6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005aea:	4605      	mov	r5, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8197 	beq.w	8005e20 <_dtoa_r+0xa90>
 8005af2:	4639      	mov	r1, r7
 8005af4:	2300      	movs	r3, #0
 8005af6:	220a      	movs	r2, #10
 8005af8:	4630      	mov	r0, r6
 8005afa:	f000 fb17 	bl	800612c <__multadd>
 8005afe:	f1ba 0f00 	cmp.w	sl, #0
 8005b02:	4607      	mov	r7, r0
 8005b04:	f300 8093 	bgt.w	8005c2e <_dtoa_r+0x89e>
 8005b08:	9b06      	ldr	r3, [sp, #24]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	dc57      	bgt.n	8005bbe <_dtoa_r+0x82e>
 8005b0e:	e08e      	b.n	8005c2e <_dtoa_r+0x89e>
 8005b10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b12:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005b16:	e751      	b.n	80059bc <_dtoa_r+0x62c>
 8005b18:	f109 34ff 	add.w	r4, r9, #4294967295
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	bfbf      	itttt	lt
 8005b20:	1ae2      	sublt	r2, r4, r3
 8005b22:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b24:	189b      	addlt	r3, r3, r2
 8005b26:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005b28:	bfae      	itee	ge
 8005b2a:	1b1c      	subge	r4, r3, r4
 8005b2c:	4623      	movlt	r3, r4
 8005b2e:	2400      	movlt	r4, #0
 8005b30:	f1b9 0f00 	cmp.w	r9, #0
 8005b34:	bfb5      	itete	lt
 8005b36:	9a04      	ldrlt	r2, [sp, #16]
 8005b38:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8005b3c:	eba2 0809 	sublt.w	r8, r2, r9
 8005b40:	464a      	movge	r2, r9
 8005b42:	bfb8      	it	lt
 8005b44:	2200      	movlt	r2, #0
 8005b46:	e73c      	b.n	80059c2 <_dtoa_r+0x632>
 8005b48:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005b4c:	9f07      	ldr	r7, [sp, #28]
 8005b4e:	461c      	mov	r4, r3
 8005b50:	e744      	b.n	80059dc <_dtoa_r+0x64c>
 8005b52:	461a      	mov	r2, r3
 8005b54:	e770      	b.n	8005a38 <_dtoa_r+0x6a8>
 8005b56:	9b06      	ldr	r3, [sp, #24]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	dc18      	bgt.n	8005b8e <_dtoa_r+0x7fe>
 8005b5c:	9b02      	ldr	r3, [sp, #8]
 8005b5e:	b9b3      	cbnz	r3, 8005b8e <_dtoa_r+0x7fe>
 8005b60:	9b03      	ldr	r3, [sp, #12]
 8005b62:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005b66:	b9a2      	cbnz	r2, 8005b92 <_dtoa_r+0x802>
 8005b68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b6c:	0d12      	lsrs	r2, r2, #20
 8005b6e:	0512      	lsls	r2, r2, #20
 8005b70:	b18a      	cbz	r2, 8005b96 <_dtoa_r+0x806>
 8005b72:	9b04      	ldr	r3, [sp, #16]
 8005b74:	3301      	adds	r3, #1
 8005b76:	9304      	str	r3, [sp, #16]
 8005b78:	9b05      	ldr	r3, [sp, #20]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	9305      	str	r3, [sp, #20]
 8005b7e:	2301      	movs	r3, #1
 8005b80:	9309      	str	r3, [sp, #36]	; 0x24
 8005b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f47f af70 	bne.w	8005a6a <_dtoa_r+0x6da>
 8005b8a:	2001      	movs	r0, #1
 8005b8c:	e775      	b.n	8005a7a <_dtoa_r+0x6ea>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	e7f6      	b.n	8005b80 <_dtoa_r+0x7f0>
 8005b92:	9b02      	ldr	r3, [sp, #8]
 8005b94:	e7f4      	b.n	8005b80 <_dtoa_r+0x7f0>
 8005b96:	9209      	str	r2, [sp, #36]	; 0x24
 8005b98:	e7f3      	b.n	8005b82 <_dtoa_r+0x7f2>
 8005b9a:	d082      	beq.n	8005aa2 <_dtoa_r+0x712>
 8005b9c:	9b04      	ldr	r3, [sp, #16]
 8005b9e:	321c      	adds	r2, #28
 8005ba0:	4413      	add	r3, r2
 8005ba2:	9304      	str	r3, [sp, #16]
 8005ba4:	9b05      	ldr	r3, [sp, #20]
 8005ba6:	4490      	add	r8, r2
 8005ba8:	4413      	add	r3, r2
 8005baa:	e779      	b.n	8005aa0 <_dtoa_r+0x710>
 8005bac:	4602      	mov	r2, r0
 8005bae:	e7f5      	b.n	8005b9c <_dtoa_r+0x80c>
 8005bb0:	f1b9 0f00 	cmp.w	r9, #0
 8005bb4:	dc36      	bgt.n	8005c24 <_dtoa_r+0x894>
 8005bb6:	9b06      	ldr	r3, [sp, #24]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	dd33      	ble.n	8005c24 <_dtoa_r+0x894>
 8005bbc:	46ca      	mov	sl, r9
 8005bbe:	f1ba 0f00 	cmp.w	sl, #0
 8005bc2:	d10d      	bne.n	8005be0 <_dtoa_r+0x850>
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4653      	mov	r3, sl
 8005bc8:	2205      	movs	r2, #5
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f000 faae 	bl	800612c <__multadd>
 8005bd0:	4601      	mov	r1, r0
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	f000 fd0d 	bl	80065f4 <__mcmp>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	f73f ade4 	bgt.w	80057a8 <_dtoa_r+0x418>
 8005be0:	9b08      	ldr	r3, [sp, #32]
 8005be2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005be6:	ea6f 0b03 	mvn.w	fp, r3
 8005bea:	f04f 0900 	mov.w	r9, #0
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f000 fa79 	bl	80060e8 <_Bfree>
 8005bf6:	2f00      	cmp	r7, #0
 8005bf8:	f43f aea1 	beq.w	800593e <_dtoa_r+0x5ae>
 8005bfc:	f1b9 0f00 	cmp.w	r9, #0
 8005c00:	d005      	beq.n	8005c0e <_dtoa_r+0x87e>
 8005c02:	45b9      	cmp	r9, r7
 8005c04:	d003      	beq.n	8005c0e <_dtoa_r+0x87e>
 8005c06:	4649      	mov	r1, r9
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f000 fa6d 	bl	80060e8 <_Bfree>
 8005c0e:	4639      	mov	r1, r7
 8005c10:	4630      	mov	r0, r6
 8005c12:	f000 fa69 	bl	80060e8 <_Bfree>
 8005c16:	e692      	b.n	800593e <_dtoa_r+0x5ae>
 8005c18:	2400      	movs	r4, #0
 8005c1a:	4627      	mov	r7, r4
 8005c1c:	e7e0      	b.n	8005be0 <_dtoa_r+0x850>
 8005c1e:	4693      	mov	fp, r2
 8005c20:	4627      	mov	r7, r4
 8005c22:	e5c1      	b.n	80057a8 <_dtoa_r+0x418>
 8005c24:	9b07      	ldr	r3, [sp, #28]
 8005c26:	46ca      	mov	sl, r9
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 8100 	beq.w	8005e2e <_dtoa_r+0xa9e>
 8005c2e:	f1b8 0f00 	cmp.w	r8, #0
 8005c32:	dd05      	ble.n	8005c40 <_dtoa_r+0x8b0>
 8005c34:	4639      	mov	r1, r7
 8005c36:	4642      	mov	r2, r8
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f000 fc6f 	bl	800651c <__lshift>
 8005c3e:	4607      	mov	r7, r0
 8005c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d05d      	beq.n	8005d02 <_dtoa_r+0x972>
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f000 fa0d 	bl	8006068 <_Balloc>
 8005c4e:	4680      	mov	r8, r0
 8005c50:	b928      	cbnz	r0, 8005c5e <_dtoa_r+0x8ce>
 8005c52:	4b82      	ldr	r3, [pc, #520]	; (8005e5c <_dtoa_r+0xacc>)
 8005c54:	4602      	mov	r2, r0
 8005c56:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005c5a:	f7ff bbb1 	b.w	80053c0 <_dtoa_r+0x30>
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	3202      	adds	r2, #2
 8005c62:	0092      	lsls	r2, r2, #2
 8005c64:	f107 010c 	add.w	r1, r7, #12
 8005c68:	300c      	adds	r0, #12
 8005c6a:	f001 ff3f 	bl	8007aec <memcpy>
 8005c6e:	2201      	movs	r2, #1
 8005c70:	4641      	mov	r1, r8
 8005c72:	4630      	mov	r0, r6
 8005c74:	f000 fc52 	bl	800651c <__lshift>
 8005c78:	9b01      	ldr	r3, [sp, #4]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	9304      	str	r3, [sp, #16]
 8005c7e:	9b01      	ldr	r3, [sp, #4]
 8005c80:	4453      	add	r3, sl
 8005c82:	9308      	str	r3, [sp, #32]
 8005c84:	9b02      	ldr	r3, [sp, #8]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	46b9      	mov	r9, r7
 8005c8c:	9307      	str	r3, [sp, #28]
 8005c8e:	4607      	mov	r7, r0
 8005c90:	9b04      	ldr	r3, [sp, #16]
 8005c92:	4621      	mov	r1, r4
 8005c94:	3b01      	subs	r3, #1
 8005c96:	4628      	mov	r0, r5
 8005c98:	9302      	str	r3, [sp, #8]
 8005c9a:	f7ff faef 	bl	800527c <quorem>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	3330      	adds	r3, #48	; 0x30
 8005ca2:	9005      	str	r0, [sp, #20]
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8005caa:	f000 fca3 	bl	80065f4 <__mcmp>
 8005cae:	463a      	mov	r2, r7
 8005cb0:	4682      	mov	sl, r0
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	f000 fcb9 	bl	800662c <__mdiff>
 8005cba:	68c2      	ldr	r2, [r0, #12]
 8005cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cbe:	4680      	mov	r8, r0
 8005cc0:	bb0a      	cbnz	r2, 8005d06 <_dtoa_r+0x976>
 8005cc2:	4601      	mov	r1, r0
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f000 fc95 	bl	80065f4 <__mcmp>
 8005cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ccc:	4602      	mov	r2, r0
 8005cce:	4641      	mov	r1, r8
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8005cd6:	f000 fa07 	bl	80060e8 <_Bfree>
 8005cda:	9b06      	ldr	r3, [sp, #24]
 8005cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cde:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005ce2:	ea43 0102 	orr.w	r1, r3, r2
 8005ce6:	9b07      	ldr	r3, [sp, #28]
 8005ce8:	4319      	orrs	r1, r3
 8005cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cec:	d10d      	bne.n	8005d0a <_dtoa_r+0x97a>
 8005cee:	2b39      	cmp	r3, #57	; 0x39
 8005cf0:	d029      	beq.n	8005d46 <_dtoa_r+0x9b6>
 8005cf2:	f1ba 0f00 	cmp.w	sl, #0
 8005cf6:	dd01      	ble.n	8005cfc <_dtoa_r+0x96c>
 8005cf8:	9b05      	ldr	r3, [sp, #20]
 8005cfa:	3331      	adds	r3, #49	; 0x31
 8005cfc:	9a02      	ldr	r2, [sp, #8]
 8005cfe:	7013      	strb	r3, [r2, #0]
 8005d00:	e775      	b.n	8005bee <_dtoa_r+0x85e>
 8005d02:	4638      	mov	r0, r7
 8005d04:	e7b8      	b.n	8005c78 <_dtoa_r+0x8e8>
 8005d06:	2201      	movs	r2, #1
 8005d08:	e7e1      	b.n	8005cce <_dtoa_r+0x93e>
 8005d0a:	f1ba 0f00 	cmp.w	sl, #0
 8005d0e:	db06      	blt.n	8005d1e <_dtoa_r+0x98e>
 8005d10:	9906      	ldr	r1, [sp, #24]
 8005d12:	ea41 0a0a 	orr.w	sl, r1, sl
 8005d16:	9907      	ldr	r1, [sp, #28]
 8005d18:	ea5a 0a01 	orrs.w	sl, sl, r1
 8005d1c:	d120      	bne.n	8005d60 <_dtoa_r+0x9d0>
 8005d1e:	2a00      	cmp	r2, #0
 8005d20:	ddec      	ble.n	8005cfc <_dtoa_r+0x96c>
 8005d22:	4629      	mov	r1, r5
 8005d24:	2201      	movs	r2, #1
 8005d26:	4630      	mov	r0, r6
 8005d28:	9304      	str	r3, [sp, #16]
 8005d2a:	f000 fbf7 	bl	800651c <__lshift>
 8005d2e:	4621      	mov	r1, r4
 8005d30:	4605      	mov	r5, r0
 8005d32:	f000 fc5f 	bl	80065f4 <__mcmp>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	9b04      	ldr	r3, [sp, #16]
 8005d3a:	dc02      	bgt.n	8005d42 <_dtoa_r+0x9b2>
 8005d3c:	d1de      	bne.n	8005cfc <_dtoa_r+0x96c>
 8005d3e:	07da      	lsls	r2, r3, #31
 8005d40:	d5dc      	bpl.n	8005cfc <_dtoa_r+0x96c>
 8005d42:	2b39      	cmp	r3, #57	; 0x39
 8005d44:	d1d8      	bne.n	8005cf8 <_dtoa_r+0x968>
 8005d46:	9a02      	ldr	r2, [sp, #8]
 8005d48:	2339      	movs	r3, #57	; 0x39
 8005d4a:	7013      	strb	r3, [r2, #0]
 8005d4c:	4643      	mov	r3, r8
 8005d4e:	4698      	mov	r8, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8005d56:	2a39      	cmp	r2, #57	; 0x39
 8005d58:	d051      	beq.n	8005dfe <_dtoa_r+0xa6e>
 8005d5a:	3201      	adds	r2, #1
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	e746      	b.n	8005bee <_dtoa_r+0x85e>
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	dd03      	ble.n	8005d6c <_dtoa_r+0x9dc>
 8005d64:	2b39      	cmp	r3, #57	; 0x39
 8005d66:	d0ee      	beq.n	8005d46 <_dtoa_r+0x9b6>
 8005d68:	3301      	adds	r3, #1
 8005d6a:	e7c7      	b.n	8005cfc <_dtoa_r+0x96c>
 8005d6c:	9a04      	ldr	r2, [sp, #16]
 8005d6e:	9908      	ldr	r1, [sp, #32]
 8005d70:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005d74:	428a      	cmp	r2, r1
 8005d76:	d02b      	beq.n	8005dd0 <_dtoa_r+0xa40>
 8005d78:	4629      	mov	r1, r5
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	220a      	movs	r2, #10
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f000 f9d4 	bl	800612c <__multadd>
 8005d84:	45b9      	cmp	r9, r7
 8005d86:	4605      	mov	r5, r0
 8005d88:	f04f 0300 	mov.w	r3, #0
 8005d8c:	f04f 020a 	mov.w	r2, #10
 8005d90:	4649      	mov	r1, r9
 8005d92:	4630      	mov	r0, r6
 8005d94:	d107      	bne.n	8005da6 <_dtoa_r+0xa16>
 8005d96:	f000 f9c9 	bl	800612c <__multadd>
 8005d9a:	4681      	mov	r9, r0
 8005d9c:	4607      	mov	r7, r0
 8005d9e:	9b04      	ldr	r3, [sp, #16]
 8005da0:	3301      	adds	r3, #1
 8005da2:	9304      	str	r3, [sp, #16]
 8005da4:	e774      	b.n	8005c90 <_dtoa_r+0x900>
 8005da6:	f000 f9c1 	bl	800612c <__multadd>
 8005daa:	4639      	mov	r1, r7
 8005dac:	4681      	mov	r9, r0
 8005dae:	2300      	movs	r3, #0
 8005db0:	220a      	movs	r2, #10
 8005db2:	4630      	mov	r0, r6
 8005db4:	f000 f9ba 	bl	800612c <__multadd>
 8005db8:	4607      	mov	r7, r0
 8005dba:	e7f0      	b.n	8005d9e <_dtoa_r+0xa0e>
 8005dbc:	f1ba 0f00 	cmp.w	sl, #0
 8005dc0:	9a01      	ldr	r2, [sp, #4]
 8005dc2:	bfcc      	ite	gt
 8005dc4:	46d0      	movgt	r8, sl
 8005dc6:	f04f 0801 	movle.w	r8, #1
 8005dca:	4490      	add	r8, r2
 8005dcc:	f04f 0900 	mov.w	r9, #0
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	9302      	str	r3, [sp, #8]
 8005dd8:	f000 fba0 	bl	800651c <__lshift>
 8005ddc:	4621      	mov	r1, r4
 8005dde:	4605      	mov	r5, r0
 8005de0:	f000 fc08 	bl	80065f4 <__mcmp>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	dcb1      	bgt.n	8005d4c <_dtoa_r+0x9bc>
 8005de8:	d102      	bne.n	8005df0 <_dtoa_r+0xa60>
 8005dea:	9b02      	ldr	r3, [sp, #8]
 8005dec:	07db      	lsls	r3, r3, #31
 8005dee:	d4ad      	bmi.n	8005d4c <_dtoa_r+0x9bc>
 8005df0:	4643      	mov	r3, r8
 8005df2:	4698      	mov	r8, r3
 8005df4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005df8:	2a30      	cmp	r2, #48	; 0x30
 8005dfa:	d0fa      	beq.n	8005df2 <_dtoa_r+0xa62>
 8005dfc:	e6f7      	b.n	8005bee <_dtoa_r+0x85e>
 8005dfe:	9a01      	ldr	r2, [sp, #4]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d1a4      	bne.n	8005d4e <_dtoa_r+0x9be>
 8005e04:	f10b 0b01 	add.w	fp, fp, #1
 8005e08:	2331      	movs	r3, #49	; 0x31
 8005e0a:	e778      	b.n	8005cfe <_dtoa_r+0x96e>
 8005e0c:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <_dtoa_r+0xad0>)
 8005e0e:	f7ff bb2a 	b.w	8005466 <_dtoa_r+0xd6>
 8005e12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f47f ab05 	bne.w	8005424 <_dtoa_r+0x94>
 8005e1a:	4b12      	ldr	r3, [pc, #72]	; (8005e64 <_dtoa_r+0xad4>)
 8005e1c:	f7ff bb23 	b.w	8005466 <_dtoa_r+0xd6>
 8005e20:	f1ba 0f00 	cmp.w	sl, #0
 8005e24:	dc03      	bgt.n	8005e2e <_dtoa_r+0xa9e>
 8005e26:	9b06      	ldr	r3, [sp, #24]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	f73f aec8 	bgt.w	8005bbe <_dtoa_r+0x82e>
 8005e2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005e32:	4621      	mov	r1, r4
 8005e34:	4628      	mov	r0, r5
 8005e36:	f7ff fa21 	bl	800527c <quorem>
 8005e3a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e3e:	f808 3b01 	strb.w	r3, [r8], #1
 8005e42:	9a01      	ldr	r2, [sp, #4]
 8005e44:	eba8 0202 	sub.w	r2, r8, r2
 8005e48:	4592      	cmp	sl, r2
 8005e4a:	ddb7      	ble.n	8005dbc <_dtoa_r+0xa2c>
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	2300      	movs	r3, #0
 8005e50:	220a      	movs	r2, #10
 8005e52:	4630      	mov	r0, r6
 8005e54:	f000 f96a 	bl	800612c <__multadd>
 8005e58:	4605      	mov	r5, r0
 8005e5a:	e7ea      	b.n	8005e32 <_dtoa_r+0xaa2>
 8005e5c:	0800892d 	.word	0x0800892d
 8005e60:	08008888 	.word	0x08008888
 8005e64:	080088b1 	.word	0x080088b1

08005e68 <_free_r>:
 8005e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e6a:	2900      	cmp	r1, #0
 8005e6c:	d044      	beq.n	8005ef8 <_free_r+0x90>
 8005e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e72:	9001      	str	r0, [sp, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f1a1 0404 	sub.w	r4, r1, #4
 8005e7a:	bfb8      	it	lt
 8005e7c:	18e4      	addlt	r4, r4, r3
 8005e7e:	f000 f8e7 	bl	8006050 <__malloc_lock>
 8005e82:	4a1e      	ldr	r2, [pc, #120]	; (8005efc <_free_r+0x94>)
 8005e84:	9801      	ldr	r0, [sp, #4]
 8005e86:	6813      	ldr	r3, [r2, #0]
 8005e88:	b933      	cbnz	r3, 8005e98 <_free_r+0x30>
 8005e8a:	6063      	str	r3, [r4, #4]
 8005e8c:	6014      	str	r4, [r2, #0]
 8005e8e:	b003      	add	sp, #12
 8005e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e94:	f000 b8e2 	b.w	800605c <__malloc_unlock>
 8005e98:	42a3      	cmp	r3, r4
 8005e9a:	d908      	bls.n	8005eae <_free_r+0x46>
 8005e9c:	6825      	ldr	r5, [r4, #0]
 8005e9e:	1961      	adds	r1, r4, r5
 8005ea0:	428b      	cmp	r3, r1
 8005ea2:	bf01      	itttt	eq
 8005ea4:	6819      	ldreq	r1, [r3, #0]
 8005ea6:	685b      	ldreq	r3, [r3, #4]
 8005ea8:	1949      	addeq	r1, r1, r5
 8005eaa:	6021      	streq	r1, [r4, #0]
 8005eac:	e7ed      	b.n	8005e8a <_free_r+0x22>
 8005eae:	461a      	mov	r2, r3
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	b10b      	cbz	r3, 8005eb8 <_free_r+0x50>
 8005eb4:	42a3      	cmp	r3, r4
 8005eb6:	d9fa      	bls.n	8005eae <_free_r+0x46>
 8005eb8:	6811      	ldr	r1, [r2, #0]
 8005eba:	1855      	adds	r5, r2, r1
 8005ebc:	42a5      	cmp	r5, r4
 8005ebe:	d10b      	bne.n	8005ed8 <_free_r+0x70>
 8005ec0:	6824      	ldr	r4, [r4, #0]
 8005ec2:	4421      	add	r1, r4
 8005ec4:	1854      	adds	r4, r2, r1
 8005ec6:	42a3      	cmp	r3, r4
 8005ec8:	6011      	str	r1, [r2, #0]
 8005eca:	d1e0      	bne.n	8005e8e <_free_r+0x26>
 8005ecc:	681c      	ldr	r4, [r3, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	6053      	str	r3, [r2, #4]
 8005ed2:	440c      	add	r4, r1
 8005ed4:	6014      	str	r4, [r2, #0]
 8005ed6:	e7da      	b.n	8005e8e <_free_r+0x26>
 8005ed8:	d902      	bls.n	8005ee0 <_free_r+0x78>
 8005eda:	230c      	movs	r3, #12
 8005edc:	6003      	str	r3, [r0, #0]
 8005ede:	e7d6      	b.n	8005e8e <_free_r+0x26>
 8005ee0:	6825      	ldr	r5, [r4, #0]
 8005ee2:	1961      	adds	r1, r4, r5
 8005ee4:	428b      	cmp	r3, r1
 8005ee6:	bf04      	itt	eq
 8005ee8:	6819      	ldreq	r1, [r3, #0]
 8005eea:	685b      	ldreq	r3, [r3, #4]
 8005eec:	6063      	str	r3, [r4, #4]
 8005eee:	bf04      	itt	eq
 8005ef0:	1949      	addeq	r1, r1, r5
 8005ef2:	6021      	streq	r1, [r4, #0]
 8005ef4:	6054      	str	r4, [r2, #4]
 8005ef6:	e7ca      	b.n	8005e8e <_free_r+0x26>
 8005ef8:	b003      	add	sp, #12
 8005efa:	bd30      	pop	{r4, r5, pc}
 8005efc:	20000428 	.word	0x20000428

08005f00 <malloc>:
 8005f00:	4b02      	ldr	r3, [pc, #8]	; (8005f0c <malloc+0xc>)
 8005f02:	4601      	mov	r1, r0
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	f000 b823 	b.w	8005f50 <_malloc_r>
 8005f0a:	bf00      	nop
 8005f0c:	2000007c 	.word	0x2000007c

08005f10 <sbrk_aligned>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	4e0e      	ldr	r6, [pc, #56]	; (8005f4c <sbrk_aligned+0x3c>)
 8005f14:	460c      	mov	r4, r1
 8005f16:	6831      	ldr	r1, [r6, #0]
 8005f18:	4605      	mov	r5, r0
 8005f1a:	b911      	cbnz	r1, 8005f22 <sbrk_aligned+0x12>
 8005f1c:	f001 fdd6 	bl	8007acc <_sbrk_r>
 8005f20:	6030      	str	r0, [r6, #0]
 8005f22:	4621      	mov	r1, r4
 8005f24:	4628      	mov	r0, r5
 8005f26:	f001 fdd1 	bl	8007acc <_sbrk_r>
 8005f2a:	1c43      	adds	r3, r0, #1
 8005f2c:	d00a      	beq.n	8005f44 <sbrk_aligned+0x34>
 8005f2e:	1cc4      	adds	r4, r0, #3
 8005f30:	f024 0403 	bic.w	r4, r4, #3
 8005f34:	42a0      	cmp	r0, r4
 8005f36:	d007      	beq.n	8005f48 <sbrk_aligned+0x38>
 8005f38:	1a21      	subs	r1, r4, r0
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f001 fdc6 	bl	8007acc <_sbrk_r>
 8005f40:	3001      	adds	r0, #1
 8005f42:	d101      	bne.n	8005f48 <sbrk_aligned+0x38>
 8005f44:	f04f 34ff 	mov.w	r4, #4294967295
 8005f48:	4620      	mov	r0, r4
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	2000042c 	.word	0x2000042c

08005f50 <_malloc_r>:
 8005f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f54:	1ccd      	adds	r5, r1, #3
 8005f56:	f025 0503 	bic.w	r5, r5, #3
 8005f5a:	3508      	adds	r5, #8
 8005f5c:	2d0c      	cmp	r5, #12
 8005f5e:	bf38      	it	cc
 8005f60:	250c      	movcc	r5, #12
 8005f62:	2d00      	cmp	r5, #0
 8005f64:	4607      	mov	r7, r0
 8005f66:	db01      	blt.n	8005f6c <_malloc_r+0x1c>
 8005f68:	42a9      	cmp	r1, r5
 8005f6a:	d905      	bls.n	8005f78 <_malloc_r+0x28>
 8005f6c:	230c      	movs	r3, #12
 8005f6e:	603b      	str	r3, [r7, #0]
 8005f70:	2600      	movs	r6, #0
 8005f72:	4630      	mov	r0, r6
 8005f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800604c <_malloc_r+0xfc>
 8005f7c:	f000 f868 	bl	8006050 <__malloc_lock>
 8005f80:	f8d8 3000 	ldr.w	r3, [r8]
 8005f84:	461c      	mov	r4, r3
 8005f86:	bb5c      	cbnz	r4, 8005fe0 <_malloc_r+0x90>
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4638      	mov	r0, r7
 8005f8c:	f7ff ffc0 	bl	8005f10 <sbrk_aligned>
 8005f90:	1c43      	adds	r3, r0, #1
 8005f92:	4604      	mov	r4, r0
 8005f94:	d155      	bne.n	8006042 <_malloc_r+0xf2>
 8005f96:	f8d8 4000 	ldr.w	r4, [r8]
 8005f9a:	4626      	mov	r6, r4
 8005f9c:	2e00      	cmp	r6, #0
 8005f9e:	d145      	bne.n	800602c <_malloc_r+0xdc>
 8005fa0:	2c00      	cmp	r4, #0
 8005fa2:	d048      	beq.n	8006036 <_malloc_r+0xe6>
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4638      	mov	r0, r7
 8005faa:	eb04 0903 	add.w	r9, r4, r3
 8005fae:	f001 fd8d 	bl	8007acc <_sbrk_r>
 8005fb2:	4581      	cmp	r9, r0
 8005fb4:	d13f      	bne.n	8006036 <_malloc_r+0xe6>
 8005fb6:	6821      	ldr	r1, [r4, #0]
 8005fb8:	1a6d      	subs	r5, r5, r1
 8005fba:	4629      	mov	r1, r5
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	f7ff ffa7 	bl	8005f10 <sbrk_aligned>
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	d037      	beq.n	8006036 <_malloc_r+0xe6>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	442b      	add	r3, r5
 8005fca:	6023      	str	r3, [r4, #0]
 8005fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d038      	beq.n	8006046 <_malloc_r+0xf6>
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	42a2      	cmp	r2, r4
 8005fd8:	d12b      	bne.n	8006032 <_malloc_r+0xe2>
 8005fda:	2200      	movs	r2, #0
 8005fdc:	605a      	str	r2, [r3, #4]
 8005fde:	e00f      	b.n	8006000 <_malloc_r+0xb0>
 8005fe0:	6822      	ldr	r2, [r4, #0]
 8005fe2:	1b52      	subs	r2, r2, r5
 8005fe4:	d41f      	bmi.n	8006026 <_malloc_r+0xd6>
 8005fe6:	2a0b      	cmp	r2, #11
 8005fe8:	d917      	bls.n	800601a <_malloc_r+0xca>
 8005fea:	1961      	adds	r1, r4, r5
 8005fec:	42a3      	cmp	r3, r4
 8005fee:	6025      	str	r5, [r4, #0]
 8005ff0:	bf18      	it	ne
 8005ff2:	6059      	strne	r1, [r3, #4]
 8005ff4:	6863      	ldr	r3, [r4, #4]
 8005ff6:	bf08      	it	eq
 8005ff8:	f8c8 1000 	streq.w	r1, [r8]
 8005ffc:	5162      	str	r2, [r4, r5]
 8005ffe:	604b      	str	r3, [r1, #4]
 8006000:	4638      	mov	r0, r7
 8006002:	f104 060b 	add.w	r6, r4, #11
 8006006:	f000 f829 	bl	800605c <__malloc_unlock>
 800600a:	f026 0607 	bic.w	r6, r6, #7
 800600e:	1d23      	adds	r3, r4, #4
 8006010:	1af2      	subs	r2, r6, r3
 8006012:	d0ae      	beq.n	8005f72 <_malloc_r+0x22>
 8006014:	1b9b      	subs	r3, r3, r6
 8006016:	50a3      	str	r3, [r4, r2]
 8006018:	e7ab      	b.n	8005f72 <_malloc_r+0x22>
 800601a:	42a3      	cmp	r3, r4
 800601c:	6862      	ldr	r2, [r4, #4]
 800601e:	d1dd      	bne.n	8005fdc <_malloc_r+0x8c>
 8006020:	f8c8 2000 	str.w	r2, [r8]
 8006024:	e7ec      	b.n	8006000 <_malloc_r+0xb0>
 8006026:	4623      	mov	r3, r4
 8006028:	6864      	ldr	r4, [r4, #4]
 800602a:	e7ac      	b.n	8005f86 <_malloc_r+0x36>
 800602c:	4634      	mov	r4, r6
 800602e:	6876      	ldr	r6, [r6, #4]
 8006030:	e7b4      	b.n	8005f9c <_malloc_r+0x4c>
 8006032:	4613      	mov	r3, r2
 8006034:	e7cc      	b.n	8005fd0 <_malloc_r+0x80>
 8006036:	230c      	movs	r3, #12
 8006038:	603b      	str	r3, [r7, #0]
 800603a:	4638      	mov	r0, r7
 800603c:	f000 f80e 	bl	800605c <__malloc_unlock>
 8006040:	e797      	b.n	8005f72 <_malloc_r+0x22>
 8006042:	6025      	str	r5, [r4, #0]
 8006044:	e7dc      	b.n	8006000 <_malloc_r+0xb0>
 8006046:	605b      	str	r3, [r3, #4]
 8006048:	deff      	udf	#255	; 0xff
 800604a:	bf00      	nop
 800604c:	20000428 	.word	0x20000428

08006050 <__malloc_lock>:
 8006050:	4801      	ldr	r0, [pc, #4]	; (8006058 <__malloc_lock+0x8>)
 8006052:	f7ff b90a 	b.w	800526a <__retarget_lock_acquire_recursive>
 8006056:	bf00      	nop
 8006058:	20000424 	.word	0x20000424

0800605c <__malloc_unlock>:
 800605c:	4801      	ldr	r0, [pc, #4]	; (8006064 <__malloc_unlock+0x8>)
 800605e:	f7ff b905 	b.w	800526c <__retarget_lock_release_recursive>
 8006062:	bf00      	nop
 8006064:	20000424 	.word	0x20000424

08006068 <_Balloc>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	69c6      	ldr	r6, [r0, #28]
 800606c:	4604      	mov	r4, r0
 800606e:	460d      	mov	r5, r1
 8006070:	b976      	cbnz	r6, 8006090 <_Balloc+0x28>
 8006072:	2010      	movs	r0, #16
 8006074:	f7ff ff44 	bl	8005f00 <malloc>
 8006078:	4602      	mov	r2, r0
 800607a:	61e0      	str	r0, [r4, #28]
 800607c:	b920      	cbnz	r0, 8006088 <_Balloc+0x20>
 800607e:	4b18      	ldr	r3, [pc, #96]	; (80060e0 <_Balloc+0x78>)
 8006080:	4818      	ldr	r0, [pc, #96]	; (80060e4 <_Balloc+0x7c>)
 8006082:	216b      	movs	r1, #107	; 0x6b
 8006084:	f001 fd48 	bl	8007b18 <__assert_func>
 8006088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800608c:	6006      	str	r6, [r0, #0]
 800608e:	60c6      	str	r6, [r0, #12]
 8006090:	69e6      	ldr	r6, [r4, #28]
 8006092:	68f3      	ldr	r3, [r6, #12]
 8006094:	b183      	cbz	r3, 80060b8 <_Balloc+0x50>
 8006096:	69e3      	ldr	r3, [r4, #28]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800609e:	b9b8      	cbnz	r0, 80060d0 <_Balloc+0x68>
 80060a0:	2101      	movs	r1, #1
 80060a2:	fa01 f605 	lsl.w	r6, r1, r5
 80060a6:	1d72      	adds	r2, r6, #5
 80060a8:	0092      	lsls	r2, r2, #2
 80060aa:	4620      	mov	r0, r4
 80060ac:	f001 fd52 	bl	8007b54 <_calloc_r>
 80060b0:	b160      	cbz	r0, 80060cc <_Balloc+0x64>
 80060b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060b6:	e00e      	b.n	80060d6 <_Balloc+0x6e>
 80060b8:	2221      	movs	r2, #33	; 0x21
 80060ba:	2104      	movs	r1, #4
 80060bc:	4620      	mov	r0, r4
 80060be:	f001 fd49 	bl	8007b54 <_calloc_r>
 80060c2:	69e3      	ldr	r3, [r4, #28]
 80060c4:	60f0      	str	r0, [r6, #12]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e4      	bne.n	8006096 <_Balloc+0x2e>
 80060cc:	2000      	movs	r0, #0
 80060ce:	bd70      	pop	{r4, r5, r6, pc}
 80060d0:	6802      	ldr	r2, [r0, #0]
 80060d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060d6:	2300      	movs	r3, #0
 80060d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060dc:	e7f7      	b.n	80060ce <_Balloc+0x66>
 80060de:	bf00      	nop
 80060e0:	080088be 	.word	0x080088be
 80060e4:	0800893e 	.word	0x0800893e

080060e8 <_Bfree>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	69c6      	ldr	r6, [r0, #28]
 80060ec:	4605      	mov	r5, r0
 80060ee:	460c      	mov	r4, r1
 80060f0:	b976      	cbnz	r6, 8006110 <_Bfree+0x28>
 80060f2:	2010      	movs	r0, #16
 80060f4:	f7ff ff04 	bl	8005f00 <malloc>
 80060f8:	4602      	mov	r2, r0
 80060fa:	61e8      	str	r0, [r5, #28]
 80060fc:	b920      	cbnz	r0, 8006108 <_Bfree+0x20>
 80060fe:	4b09      	ldr	r3, [pc, #36]	; (8006124 <_Bfree+0x3c>)
 8006100:	4809      	ldr	r0, [pc, #36]	; (8006128 <_Bfree+0x40>)
 8006102:	218f      	movs	r1, #143	; 0x8f
 8006104:	f001 fd08 	bl	8007b18 <__assert_func>
 8006108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800610c:	6006      	str	r6, [r0, #0]
 800610e:	60c6      	str	r6, [r0, #12]
 8006110:	b13c      	cbz	r4, 8006122 <_Bfree+0x3a>
 8006112:	69eb      	ldr	r3, [r5, #28]
 8006114:	6862      	ldr	r2, [r4, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800611c:	6021      	str	r1, [r4, #0]
 800611e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006122:	bd70      	pop	{r4, r5, r6, pc}
 8006124:	080088be 	.word	0x080088be
 8006128:	0800893e 	.word	0x0800893e

0800612c <__multadd>:
 800612c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006130:	690d      	ldr	r5, [r1, #16]
 8006132:	4607      	mov	r7, r0
 8006134:	460c      	mov	r4, r1
 8006136:	461e      	mov	r6, r3
 8006138:	f101 0c14 	add.w	ip, r1, #20
 800613c:	2000      	movs	r0, #0
 800613e:	f8dc 3000 	ldr.w	r3, [ip]
 8006142:	b299      	uxth	r1, r3
 8006144:	fb02 6101 	mla	r1, r2, r1, r6
 8006148:	0c1e      	lsrs	r6, r3, #16
 800614a:	0c0b      	lsrs	r3, r1, #16
 800614c:	fb02 3306 	mla	r3, r2, r6, r3
 8006150:	b289      	uxth	r1, r1
 8006152:	3001      	adds	r0, #1
 8006154:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006158:	4285      	cmp	r5, r0
 800615a:	f84c 1b04 	str.w	r1, [ip], #4
 800615e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006162:	dcec      	bgt.n	800613e <__multadd+0x12>
 8006164:	b30e      	cbz	r6, 80061aa <__multadd+0x7e>
 8006166:	68a3      	ldr	r3, [r4, #8]
 8006168:	42ab      	cmp	r3, r5
 800616a:	dc19      	bgt.n	80061a0 <__multadd+0x74>
 800616c:	6861      	ldr	r1, [r4, #4]
 800616e:	4638      	mov	r0, r7
 8006170:	3101      	adds	r1, #1
 8006172:	f7ff ff79 	bl	8006068 <_Balloc>
 8006176:	4680      	mov	r8, r0
 8006178:	b928      	cbnz	r0, 8006186 <__multadd+0x5a>
 800617a:	4602      	mov	r2, r0
 800617c:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <__multadd+0x84>)
 800617e:	480d      	ldr	r0, [pc, #52]	; (80061b4 <__multadd+0x88>)
 8006180:	21ba      	movs	r1, #186	; 0xba
 8006182:	f001 fcc9 	bl	8007b18 <__assert_func>
 8006186:	6922      	ldr	r2, [r4, #16]
 8006188:	3202      	adds	r2, #2
 800618a:	f104 010c 	add.w	r1, r4, #12
 800618e:	0092      	lsls	r2, r2, #2
 8006190:	300c      	adds	r0, #12
 8006192:	f001 fcab 	bl	8007aec <memcpy>
 8006196:	4621      	mov	r1, r4
 8006198:	4638      	mov	r0, r7
 800619a:	f7ff ffa5 	bl	80060e8 <_Bfree>
 800619e:	4644      	mov	r4, r8
 80061a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061a4:	3501      	adds	r5, #1
 80061a6:	615e      	str	r6, [r3, #20]
 80061a8:	6125      	str	r5, [r4, #16]
 80061aa:	4620      	mov	r0, r4
 80061ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061b0:	0800892d 	.word	0x0800892d
 80061b4:	0800893e 	.word	0x0800893e

080061b8 <__s2b>:
 80061b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061bc:	460c      	mov	r4, r1
 80061be:	4615      	mov	r5, r2
 80061c0:	461f      	mov	r7, r3
 80061c2:	2209      	movs	r2, #9
 80061c4:	3308      	adds	r3, #8
 80061c6:	4606      	mov	r6, r0
 80061c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80061cc:	2100      	movs	r1, #0
 80061ce:	2201      	movs	r2, #1
 80061d0:	429a      	cmp	r2, r3
 80061d2:	db09      	blt.n	80061e8 <__s2b+0x30>
 80061d4:	4630      	mov	r0, r6
 80061d6:	f7ff ff47 	bl	8006068 <_Balloc>
 80061da:	b940      	cbnz	r0, 80061ee <__s2b+0x36>
 80061dc:	4602      	mov	r2, r0
 80061de:	4b19      	ldr	r3, [pc, #100]	; (8006244 <__s2b+0x8c>)
 80061e0:	4819      	ldr	r0, [pc, #100]	; (8006248 <__s2b+0x90>)
 80061e2:	21d3      	movs	r1, #211	; 0xd3
 80061e4:	f001 fc98 	bl	8007b18 <__assert_func>
 80061e8:	0052      	lsls	r2, r2, #1
 80061ea:	3101      	adds	r1, #1
 80061ec:	e7f0      	b.n	80061d0 <__s2b+0x18>
 80061ee:	9b08      	ldr	r3, [sp, #32]
 80061f0:	6143      	str	r3, [r0, #20]
 80061f2:	2d09      	cmp	r5, #9
 80061f4:	f04f 0301 	mov.w	r3, #1
 80061f8:	6103      	str	r3, [r0, #16]
 80061fa:	dd16      	ble.n	800622a <__s2b+0x72>
 80061fc:	f104 0909 	add.w	r9, r4, #9
 8006200:	46c8      	mov	r8, r9
 8006202:	442c      	add	r4, r5
 8006204:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006208:	4601      	mov	r1, r0
 800620a:	3b30      	subs	r3, #48	; 0x30
 800620c:	220a      	movs	r2, #10
 800620e:	4630      	mov	r0, r6
 8006210:	f7ff ff8c 	bl	800612c <__multadd>
 8006214:	45a0      	cmp	r8, r4
 8006216:	d1f5      	bne.n	8006204 <__s2b+0x4c>
 8006218:	f1a5 0408 	sub.w	r4, r5, #8
 800621c:	444c      	add	r4, r9
 800621e:	1b2d      	subs	r5, r5, r4
 8006220:	1963      	adds	r3, r4, r5
 8006222:	42bb      	cmp	r3, r7
 8006224:	db04      	blt.n	8006230 <__s2b+0x78>
 8006226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800622a:	340a      	adds	r4, #10
 800622c:	2509      	movs	r5, #9
 800622e:	e7f6      	b.n	800621e <__s2b+0x66>
 8006230:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006234:	4601      	mov	r1, r0
 8006236:	3b30      	subs	r3, #48	; 0x30
 8006238:	220a      	movs	r2, #10
 800623a:	4630      	mov	r0, r6
 800623c:	f7ff ff76 	bl	800612c <__multadd>
 8006240:	e7ee      	b.n	8006220 <__s2b+0x68>
 8006242:	bf00      	nop
 8006244:	0800892d 	.word	0x0800892d
 8006248:	0800893e 	.word	0x0800893e

0800624c <__hi0bits>:
 800624c:	0c03      	lsrs	r3, r0, #16
 800624e:	041b      	lsls	r3, r3, #16
 8006250:	b9d3      	cbnz	r3, 8006288 <__hi0bits+0x3c>
 8006252:	0400      	lsls	r0, r0, #16
 8006254:	2310      	movs	r3, #16
 8006256:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800625a:	bf04      	itt	eq
 800625c:	0200      	lsleq	r0, r0, #8
 800625e:	3308      	addeq	r3, #8
 8006260:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006264:	bf04      	itt	eq
 8006266:	0100      	lsleq	r0, r0, #4
 8006268:	3304      	addeq	r3, #4
 800626a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800626e:	bf04      	itt	eq
 8006270:	0080      	lsleq	r0, r0, #2
 8006272:	3302      	addeq	r3, #2
 8006274:	2800      	cmp	r0, #0
 8006276:	db05      	blt.n	8006284 <__hi0bits+0x38>
 8006278:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800627c:	f103 0301 	add.w	r3, r3, #1
 8006280:	bf08      	it	eq
 8006282:	2320      	moveq	r3, #32
 8006284:	4618      	mov	r0, r3
 8006286:	4770      	bx	lr
 8006288:	2300      	movs	r3, #0
 800628a:	e7e4      	b.n	8006256 <__hi0bits+0xa>

0800628c <__lo0bits>:
 800628c:	6803      	ldr	r3, [r0, #0]
 800628e:	f013 0207 	ands.w	r2, r3, #7
 8006292:	d00c      	beq.n	80062ae <__lo0bits+0x22>
 8006294:	07d9      	lsls	r1, r3, #31
 8006296:	d422      	bmi.n	80062de <__lo0bits+0x52>
 8006298:	079a      	lsls	r2, r3, #30
 800629a:	bf49      	itett	mi
 800629c:	085b      	lsrmi	r3, r3, #1
 800629e:	089b      	lsrpl	r3, r3, #2
 80062a0:	6003      	strmi	r3, [r0, #0]
 80062a2:	2201      	movmi	r2, #1
 80062a4:	bf5c      	itt	pl
 80062a6:	6003      	strpl	r3, [r0, #0]
 80062a8:	2202      	movpl	r2, #2
 80062aa:	4610      	mov	r0, r2
 80062ac:	4770      	bx	lr
 80062ae:	b299      	uxth	r1, r3
 80062b0:	b909      	cbnz	r1, 80062b6 <__lo0bits+0x2a>
 80062b2:	0c1b      	lsrs	r3, r3, #16
 80062b4:	2210      	movs	r2, #16
 80062b6:	b2d9      	uxtb	r1, r3
 80062b8:	b909      	cbnz	r1, 80062be <__lo0bits+0x32>
 80062ba:	3208      	adds	r2, #8
 80062bc:	0a1b      	lsrs	r3, r3, #8
 80062be:	0719      	lsls	r1, r3, #28
 80062c0:	bf04      	itt	eq
 80062c2:	091b      	lsreq	r3, r3, #4
 80062c4:	3204      	addeq	r2, #4
 80062c6:	0799      	lsls	r1, r3, #30
 80062c8:	bf04      	itt	eq
 80062ca:	089b      	lsreq	r3, r3, #2
 80062cc:	3202      	addeq	r2, #2
 80062ce:	07d9      	lsls	r1, r3, #31
 80062d0:	d403      	bmi.n	80062da <__lo0bits+0x4e>
 80062d2:	085b      	lsrs	r3, r3, #1
 80062d4:	f102 0201 	add.w	r2, r2, #1
 80062d8:	d003      	beq.n	80062e2 <__lo0bits+0x56>
 80062da:	6003      	str	r3, [r0, #0]
 80062dc:	e7e5      	b.n	80062aa <__lo0bits+0x1e>
 80062de:	2200      	movs	r2, #0
 80062e0:	e7e3      	b.n	80062aa <__lo0bits+0x1e>
 80062e2:	2220      	movs	r2, #32
 80062e4:	e7e1      	b.n	80062aa <__lo0bits+0x1e>
	...

080062e8 <__i2b>:
 80062e8:	b510      	push	{r4, lr}
 80062ea:	460c      	mov	r4, r1
 80062ec:	2101      	movs	r1, #1
 80062ee:	f7ff febb 	bl	8006068 <_Balloc>
 80062f2:	4602      	mov	r2, r0
 80062f4:	b928      	cbnz	r0, 8006302 <__i2b+0x1a>
 80062f6:	4b05      	ldr	r3, [pc, #20]	; (800630c <__i2b+0x24>)
 80062f8:	4805      	ldr	r0, [pc, #20]	; (8006310 <__i2b+0x28>)
 80062fa:	f240 1145 	movw	r1, #325	; 0x145
 80062fe:	f001 fc0b 	bl	8007b18 <__assert_func>
 8006302:	2301      	movs	r3, #1
 8006304:	6144      	str	r4, [r0, #20]
 8006306:	6103      	str	r3, [r0, #16]
 8006308:	bd10      	pop	{r4, pc}
 800630a:	bf00      	nop
 800630c:	0800892d 	.word	0x0800892d
 8006310:	0800893e 	.word	0x0800893e

08006314 <__multiply>:
 8006314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006318:	4691      	mov	r9, r2
 800631a:	690a      	ldr	r2, [r1, #16]
 800631c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006320:	429a      	cmp	r2, r3
 8006322:	bfb8      	it	lt
 8006324:	460b      	movlt	r3, r1
 8006326:	460c      	mov	r4, r1
 8006328:	bfbc      	itt	lt
 800632a:	464c      	movlt	r4, r9
 800632c:	4699      	movlt	r9, r3
 800632e:	6927      	ldr	r7, [r4, #16]
 8006330:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006334:	68a3      	ldr	r3, [r4, #8]
 8006336:	6861      	ldr	r1, [r4, #4]
 8006338:	eb07 060a 	add.w	r6, r7, sl
 800633c:	42b3      	cmp	r3, r6
 800633e:	b085      	sub	sp, #20
 8006340:	bfb8      	it	lt
 8006342:	3101      	addlt	r1, #1
 8006344:	f7ff fe90 	bl	8006068 <_Balloc>
 8006348:	b930      	cbnz	r0, 8006358 <__multiply+0x44>
 800634a:	4602      	mov	r2, r0
 800634c:	4b44      	ldr	r3, [pc, #272]	; (8006460 <__multiply+0x14c>)
 800634e:	4845      	ldr	r0, [pc, #276]	; (8006464 <__multiply+0x150>)
 8006350:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006354:	f001 fbe0 	bl	8007b18 <__assert_func>
 8006358:	f100 0514 	add.w	r5, r0, #20
 800635c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006360:	462b      	mov	r3, r5
 8006362:	2200      	movs	r2, #0
 8006364:	4543      	cmp	r3, r8
 8006366:	d321      	bcc.n	80063ac <__multiply+0x98>
 8006368:	f104 0314 	add.w	r3, r4, #20
 800636c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006370:	f109 0314 	add.w	r3, r9, #20
 8006374:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006378:	9202      	str	r2, [sp, #8]
 800637a:	1b3a      	subs	r2, r7, r4
 800637c:	3a15      	subs	r2, #21
 800637e:	f022 0203 	bic.w	r2, r2, #3
 8006382:	3204      	adds	r2, #4
 8006384:	f104 0115 	add.w	r1, r4, #21
 8006388:	428f      	cmp	r7, r1
 800638a:	bf38      	it	cc
 800638c:	2204      	movcc	r2, #4
 800638e:	9201      	str	r2, [sp, #4]
 8006390:	9a02      	ldr	r2, [sp, #8]
 8006392:	9303      	str	r3, [sp, #12]
 8006394:	429a      	cmp	r2, r3
 8006396:	d80c      	bhi.n	80063b2 <__multiply+0x9e>
 8006398:	2e00      	cmp	r6, #0
 800639a:	dd03      	ble.n	80063a4 <__multiply+0x90>
 800639c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d05b      	beq.n	800645c <__multiply+0x148>
 80063a4:	6106      	str	r6, [r0, #16]
 80063a6:	b005      	add	sp, #20
 80063a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ac:	f843 2b04 	str.w	r2, [r3], #4
 80063b0:	e7d8      	b.n	8006364 <__multiply+0x50>
 80063b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80063b6:	f1ba 0f00 	cmp.w	sl, #0
 80063ba:	d024      	beq.n	8006406 <__multiply+0xf2>
 80063bc:	f104 0e14 	add.w	lr, r4, #20
 80063c0:	46a9      	mov	r9, r5
 80063c2:	f04f 0c00 	mov.w	ip, #0
 80063c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80063ca:	f8d9 1000 	ldr.w	r1, [r9]
 80063ce:	fa1f fb82 	uxth.w	fp, r2
 80063d2:	b289      	uxth	r1, r1
 80063d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80063d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80063dc:	f8d9 2000 	ldr.w	r2, [r9]
 80063e0:	4461      	add	r1, ip
 80063e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80063ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063ee:	b289      	uxth	r1, r1
 80063f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063f4:	4577      	cmp	r7, lr
 80063f6:	f849 1b04 	str.w	r1, [r9], #4
 80063fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063fe:	d8e2      	bhi.n	80063c6 <__multiply+0xb2>
 8006400:	9a01      	ldr	r2, [sp, #4]
 8006402:	f845 c002 	str.w	ip, [r5, r2]
 8006406:	9a03      	ldr	r2, [sp, #12]
 8006408:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800640c:	3304      	adds	r3, #4
 800640e:	f1b9 0f00 	cmp.w	r9, #0
 8006412:	d021      	beq.n	8006458 <__multiply+0x144>
 8006414:	6829      	ldr	r1, [r5, #0]
 8006416:	f104 0c14 	add.w	ip, r4, #20
 800641a:	46ae      	mov	lr, r5
 800641c:	f04f 0a00 	mov.w	sl, #0
 8006420:	f8bc b000 	ldrh.w	fp, [ip]
 8006424:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006428:	fb09 220b 	mla	r2, r9, fp, r2
 800642c:	4452      	add	r2, sl
 800642e:	b289      	uxth	r1, r1
 8006430:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006434:	f84e 1b04 	str.w	r1, [lr], #4
 8006438:	f85c 1b04 	ldr.w	r1, [ip], #4
 800643c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006440:	f8be 1000 	ldrh.w	r1, [lr]
 8006444:	fb09 110a 	mla	r1, r9, sl, r1
 8006448:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800644c:	4567      	cmp	r7, ip
 800644e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006452:	d8e5      	bhi.n	8006420 <__multiply+0x10c>
 8006454:	9a01      	ldr	r2, [sp, #4]
 8006456:	50a9      	str	r1, [r5, r2]
 8006458:	3504      	adds	r5, #4
 800645a:	e799      	b.n	8006390 <__multiply+0x7c>
 800645c:	3e01      	subs	r6, #1
 800645e:	e79b      	b.n	8006398 <__multiply+0x84>
 8006460:	0800892d 	.word	0x0800892d
 8006464:	0800893e 	.word	0x0800893e

08006468 <__pow5mult>:
 8006468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800646c:	4615      	mov	r5, r2
 800646e:	f012 0203 	ands.w	r2, r2, #3
 8006472:	4606      	mov	r6, r0
 8006474:	460f      	mov	r7, r1
 8006476:	d007      	beq.n	8006488 <__pow5mult+0x20>
 8006478:	4c25      	ldr	r4, [pc, #148]	; (8006510 <__pow5mult+0xa8>)
 800647a:	3a01      	subs	r2, #1
 800647c:	2300      	movs	r3, #0
 800647e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006482:	f7ff fe53 	bl	800612c <__multadd>
 8006486:	4607      	mov	r7, r0
 8006488:	10ad      	asrs	r5, r5, #2
 800648a:	d03d      	beq.n	8006508 <__pow5mult+0xa0>
 800648c:	69f4      	ldr	r4, [r6, #28]
 800648e:	b97c      	cbnz	r4, 80064b0 <__pow5mult+0x48>
 8006490:	2010      	movs	r0, #16
 8006492:	f7ff fd35 	bl	8005f00 <malloc>
 8006496:	4602      	mov	r2, r0
 8006498:	61f0      	str	r0, [r6, #28]
 800649a:	b928      	cbnz	r0, 80064a8 <__pow5mult+0x40>
 800649c:	4b1d      	ldr	r3, [pc, #116]	; (8006514 <__pow5mult+0xac>)
 800649e:	481e      	ldr	r0, [pc, #120]	; (8006518 <__pow5mult+0xb0>)
 80064a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80064a4:	f001 fb38 	bl	8007b18 <__assert_func>
 80064a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064ac:	6004      	str	r4, [r0, #0]
 80064ae:	60c4      	str	r4, [r0, #12]
 80064b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80064b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064b8:	b94c      	cbnz	r4, 80064ce <__pow5mult+0x66>
 80064ba:	f240 2171 	movw	r1, #625	; 0x271
 80064be:	4630      	mov	r0, r6
 80064c0:	f7ff ff12 	bl	80062e8 <__i2b>
 80064c4:	2300      	movs	r3, #0
 80064c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80064ca:	4604      	mov	r4, r0
 80064cc:	6003      	str	r3, [r0, #0]
 80064ce:	f04f 0900 	mov.w	r9, #0
 80064d2:	07eb      	lsls	r3, r5, #31
 80064d4:	d50a      	bpl.n	80064ec <__pow5mult+0x84>
 80064d6:	4639      	mov	r1, r7
 80064d8:	4622      	mov	r2, r4
 80064da:	4630      	mov	r0, r6
 80064dc:	f7ff ff1a 	bl	8006314 <__multiply>
 80064e0:	4639      	mov	r1, r7
 80064e2:	4680      	mov	r8, r0
 80064e4:	4630      	mov	r0, r6
 80064e6:	f7ff fdff 	bl	80060e8 <_Bfree>
 80064ea:	4647      	mov	r7, r8
 80064ec:	106d      	asrs	r5, r5, #1
 80064ee:	d00b      	beq.n	8006508 <__pow5mult+0xa0>
 80064f0:	6820      	ldr	r0, [r4, #0]
 80064f2:	b938      	cbnz	r0, 8006504 <__pow5mult+0x9c>
 80064f4:	4622      	mov	r2, r4
 80064f6:	4621      	mov	r1, r4
 80064f8:	4630      	mov	r0, r6
 80064fa:	f7ff ff0b 	bl	8006314 <__multiply>
 80064fe:	6020      	str	r0, [r4, #0]
 8006500:	f8c0 9000 	str.w	r9, [r0]
 8006504:	4604      	mov	r4, r0
 8006506:	e7e4      	b.n	80064d2 <__pow5mult+0x6a>
 8006508:	4638      	mov	r0, r7
 800650a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800650e:	bf00      	nop
 8006510:	08008a88 	.word	0x08008a88
 8006514:	080088be 	.word	0x080088be
 8006518:	0800893e 	.word	0x0800893e

0800651c <__lshift>:
 800651c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006520:	460c      	mov	r4, r1
 8006522:	6849      	ldr	r1, [r1, #4]
 8006524:	6923      	ldr	r3, [r4, #16]
 8006526:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800652a:	68a3      	ldr	r3, [r4, #8]
 800652c:	4607      	mov	r7, r0
 800652e:	4691      	mov	r9, r2
 8006530:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006534:	f108 0601 	add.w	r6, r8, #1
 8006538:	42b3      	cmp	r3, r6
 800653a:	db0b      	blt.n	8006554 <__lshift+0x38>
 800653c:	4638      	mov	r0, r7
 800653e:	f7ff fd93 	bl	8006068 <_Balloc>
 8006542:	4605      	mov	r5, r0
 8006544:	b948      	cbnz	r0, 800655a <__lshift+0x3e>
 8006546:	4602      	mov	r2, r0
 8006548:	4b28      	ldr	r3, [pc, #160]	; (80065ec <__lshift+0xd0>)
 800654a:	4829      	ldr	r0, [pc, #164]	; (80065f0 <__lshift+0xd4>)
 800654c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006550:	f001 fae2 	bl	8007b18 <__assert_func>
 8006554:	3101      	adds	r1, #1
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	e7ee      	b.n	8006538 <__lshift+0x1c>
 800655a:	2300      	movs	r3, #0
 800655c:	f100 0114 	add.w	r1, r0, #20
 8006560:	f100 0210 	add.w	r2, r0, #16
 8006564:	4618      	mov	r0, r3
 8006566:	4553      	cmp	r3, sl
 8006568:	db33      	blt.n	80065d2 <__lshift+0xb6>
 800656a:	6920      	ldr	r0, [r4, #16]
 800656c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006570:	f104 0314 	add.w	r3, r4, #20
 8006574:	f019 091f 	ands.w	r9, r9, #31
 8006578:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800657c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006580:	d02b      	beq.n	80065da <__lshift+0xbe>
 8006582:	f1c9 0e20 	rsb	lr, r9, #32
 8006586:	468a      	mov	sl, r1
 8006588:	2200      	movs	r2, #0
 800658a:	6818      	ldr	r0, [r3, #0]
 800658c:	fa00 f009 	lsl.w	r0, r0, r9
 8006590:	4310      	orrs	r0, r2
 8006592:	f84a 0b04 	str.w	r0, [sl], #4
 8006596:	f853 2b04 	ldr.w	r2, [r3], #4
 800659a:	459c      	cmp	ip, r3
 800659c:	fa22 f20e 	lsr.w	r2, r2, lr
 80065a0:	d8f3      	bhi.n	800658a <__lshift+0x6e>
 80065a2:	ebac 0304 	sub.w	r3, ip, r4
 80065a6:	3b15      	subs	r3, #21
 80065a8:	f023 0303 	bic.w	r3, r3, #3
 80065ac:	3304      	adds	r3, #4
 80065ae:	f104 0015 	add.w	r0, r4, #21
 80065b2:	4584      	cmp	ip, r0
 80065b4:	bf38      	it	cc
 80065b6:	2304      	movcc	r3, #4
 80065b8:	50ca      	str	r2, [r1, r3]
 80065ba:	b10a      	cbz	r2, 80065c0 <__lshift+0xa4>
 80065bc:	f108 0602 	add.w	r6, r8, #2
 80065c0:	3e01      	subs	r6, #1
 80065c2:	4638      	mov	r0, r7
 80065c4:	612e      	str	r6, [r5, #16]
 80065c6:	4621      	mov	r1, r4
 80065c8:	f7ff fd8e 	bl	80060e8 <_Bfree>
 80065cc:	4628      	mov	r0, r5
 80065ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80065d6:	3301      	adds	r3, #1
 80065d8:	e7c5      	b.n	8006566 <__lshift+0x4a>
 80065da:	3904      	subs	r1, #4
 80065dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80065e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80065e4:	459c      	cmp	ip, r3
 80065e6:	d8f9      	bhi.n	80065dc <__lshift+0xc0>
 80065e8:	e7ea      	b.n	80065c0 <__lshift+0xa4>
 80065ea:	bf00      	nop
 80065ec:	0800892d 	.word	0x0800892d
 80065f0:	0800893e 	.word	0x0800893e

080065f4 <__mcmp>:
 80065f4:	b530      	push	{r4, r5, lr}
 80065f6:	6902      	ldr	r2, [r0, #16]
 80065f8:	690c      	ldr	r4, [r1, #16]
 80065fa:	1b12      	subs	r2, r2, r4
 80065fc:	d10e      	bne.n	800661c <__mcmp+0x28>
 80065fe:	f100 0314 	add.w	r3, r0, #20
 8006602:	3114      	adds	r1, #20
 8006604:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006608:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800660c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006610:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006614:	42a5      	cmp	r5, r4
 8006616:	d003      	beq.n	8006620 <__mcmp+0x2c>
 8006618:	d305      	bcc.n	8006626 <__mcmp+0x32>
 800661a:	2201      	movs	r2, #1
 800661c:	4610      	mov	r0, r2
 800661e:	bd30      	pop	{r4, r5, pc}
 8006620:	4283      	cmp	r3, r0
 8006622:	d3f3      	bcc.n	800660c <__mcmp+0x18>
 8006624:	e7fa      	b.n	800661c <__mcmp+0x28>
 8006626:	f04f 32ff 	mov.w	r2, #4294967295
 800662a:	e7f7      	b.n	800661c <__mcmp+0x28>

0800662c <__mdiff>:
 800662c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	460c      	mov	r4, r1
 8006632:	4606      	mov	r6, r0
 8006634:	4611      	mov	r1, r2
 8006636:	4620      	mov	r0, r4
 8006638:	4690      	mov	r8, r2
 800663a:	f7ff ffdb 	bl	80065f4 <__mcmp>
 800663e:	1e05      	subs	r5, r0, #0
 8006640:	d110      	bne.n	8006664 <__mdiff+0x38>
 8006642:	4629      	mov	r1, r5
 8006644:	4630      	mov	r0, r6
 8006646:	f7ff fd0f 	bl	8006068 <_Balloc>
 800664a:	b930      	cbnz	r0, 800665a <__mdiff+0x2e>
 800664c:	4b3a      	ldr	r3, [pc, #232]	; (8006738 <__mdiff+0x10c>)
 800664e:	4602      	mov	r2, r0
 8006650:	f240 2137 	movw	r1, #567	; 0x237
 8006654:	4839      	ldr	r0, [pc, #228]	; (800673c <__mdiff+0x110>)
 8006656:	f001 fa5f 	bl	8007b18 <__assert_func>
 800665a:	2301      	movs	r3, #1
 800665c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006660:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006664:	bfa4      	itt	ge
 8006666:	4643      	movge	r3, r8
 8006668:	46a0      	movge	r8, r4
 800666a:	4630      	mov	r0, r6
 800666c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006670:	bfa6      	itte	ge
 8006672:	461c      	movge	r4, r3
 8006674:	2500      	movge	r5, #0
 8006676:	2501      	movlt	r5, #1
 8006678:	f7ff fcf6 	bl	8006068 <_Balloc>
 800667c:	b920      	cbnz	r0, 8006688 <__mdiff+0x5c>
 800667e:	4b2e      	ldr	r3, [pc, #184]	; (8006738 <__mdiff+0x10c>)
 8006680:	4602      	mov	r2, r0
 8006682:	f240 2145 	movw	r1, #581	; 0x245
 8006686:	e7e5      	b.n	8006654 <__mdiff+0x28>
 8006688:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800668c:	6926      	ldr	r6, [r4, #16]
 800668e:	60c5      	str	r5, [r0, #12]
 8006690:	f104 0914 	add.w	r9, r4, #20
 8006694:	f108 0514 	add.w	r5, r8, #20
 8006698:	f100 0e14 	add.w	lr, r0, #20
 800669c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80066a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80066a4:	f108 0210 	add.w	r2, r8, #16
 80066a8:	46f2      	mov	sl, lr
 80066aa:	2100      	movs	r1, #0
 80066ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80066b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80066b4:	fa11 f88b 	uxtah	r8, r1, fp
 80066b8:	b299      	uxth	r1, r3
 80066ba:	0c1b      	lsrs	r3, r3, #16
 80066bc:	eba8 0801 	sub.w	r8, r8, r1
 80066c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80066c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80066c8:	fa1f f888 	uxth.w	r8, r8
 80066cc:	1419      	asrs	r1, r3, #16
 80066ce:	454e      	cmp	r6, r9
 80066d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80066d4:	f84a 3b04 	str.w	r3, [sl], #4
 80066d8:	d8e8      	bhi.n	80066ac <__mdiff+0x80>
 80066da:	1b33      	subs	r3, r6, r4
 80066dc:	3b15      	subs	r3, #21
 80066de:	f023 0303 	bic.w	r3, r3, #3
 80066e2:	3304      	adds	r3, #4
 80066e4:	3415      	adds	r4, #21
 80066e6:	42a6      	cmp	r6, r4
 80066e8:	bf38      	it	cc
 80066ea:	2304      	movcc	r3, #4
 80066ec:	441d      	add	r5, r3
 80066ee:	4473      	add	r3, lr
 80066f0:	469e      	mov	lr, r3
 80066f2:	462e      	mov	r6, r5
 80066f4:	4566      	cmp	r6, ip
 80066f6:	d30e      	bcc.n	8006716 <__mdiff+0xea>
 80066f8:	f10c 0203 	add.w	r2, ip, #3
 80066fc:	1b52      	subs	r2, r2, r5
 80066fe:	f022 0203 	bic.w	r2, r2, #3
 8006702:	3d03      	subs	r5, #3
 8006704:	45ac      	cmp	ip, r5
 8006706:	bf38      	it	cc
 8006708:	2200      	movcc	r2, #0
 800670a:	4413      	add	r3, r2
 800670c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006710:	b17a      	cbz	r2, 8006732 <__mdiff+0x106>
 8006712:	6107      	str	r7, [r0, #16]
 8006714:	e7a4      	b.n	8006660 <__mdiff+0x34>
 8006716:	f856 8b04 	ldr.w	r8, [r6], #4
 800671a:	fa11 f288 	uxtah	r2, r1, r8
 800671e:	1414      	asrs	r4, r2, #16
 8006720:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006724:	b292      	uxth	r2, r2
 8006726:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800672a:	f84e 2b04 	str.w	r2, [lr], #4
 800672e:	1421      	asrs	r1, r4, #16
 8006730:	e7e0      	b.n	80066f4 <__mdiff+0xc8>
 8006732:	3f01      	subs	r7, #1
 8006734:	e7ea      	b.n	800670c <__mdiff+0xe0>
 8006736:	bf00      	nop
 8006738:	0800892d 	.word	0x0800892d
 800673c:	0800893e 	.word	0x0800893e

08006740 <__ulp>:
 8006740:	b082      	sub	sp, #8
 8006742:	ed8d 0b00 	vstr	d0, [sp]
 8006746:	9a01      	ldr	r2, [sp, #4]
 8006748:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <__ulp+0x48>)
 800674a:	4013      	ands	r3, r2
 800674c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006750:	2b00      	cmp	r3, #0
 8006752:	dc08      	bgt.n	8006766 <__ulp+0x26>
 8006754:	425b      	negs	r3, r3
 8006756:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800675a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800675e:	da04      	bge.n	800676a <__ulp+0x2a>
 8006760:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006764:	4113      	asrs	r3, r2
 8006766:	2200      	movs	r2, #0
 8006768:	e008      	b.n	800677c <__ulp+0x3c>
 800676a:	f1a2 0314 	sub.w	r3, r2, #20
 800676e:	2b1e      	cmp	r3, #30
 8006770:	bfda      	itte	le
 8006772:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006776:	40da      	lsrle	r2, r3
 8006778:	2201      	movgt	r2, #1
 800677a:	2300      	movs	r3, #0
 800677c:	4619      	mov	r1, r3
 800677e:	4610      	mov	r0, r2
 8006780:	ec41 0b10 	vmov	d0, r0, r1
 8006784:	b002      	add	sp, #8
 8006786:	4770      	bx	lr
 8006788:	7ff00000 	.word	0x7ff00000

0800678c <__b2d>:
 800678c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006790:	6906      	ldr	r6, [r0, #16]
 8006792:	f100 0814 	add.w	r8, r0, #20
 8006796:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800679a:	1f37      	subs	r7, r6, #4
 800679c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80067a0:	4610      	mov	r0, r2
 80067a2:	f7ff fd53 	bl	800624c <__hi0bits>
 80067a6:	f1c0 0320 	rsb	r3, r0, #32
 80067aa:	280a      	cmp	r0, #10
 80067ac:	600b      	str	r3, [r1, #0]
 80067ae:	491b      	ldr	r1, [pc, #108]	; (800681c <__b2d+0x90>)
 80067b0:	dc15      	bgt.n	80067de <__b2d+0x52>
 80067b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80067b6:	fa22 f30c 	lsr.w	r3, r2, ip
 80067ba:	45b8      	cmp	r8, r7
 80067bc:	ea43 0501 	orr.w	r5, r3, r1
 80067c0:	bf34      	ite	cc
 80067c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80067c6:	2300      	movcs	r3, #0
 80067c8:	3015      	adds	r0, #21
 80067ca:	fa02 f000 	lsl.w	r0, r2, r0
 80067ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80067d2:	4303      	orrs	r3, r0
 80067d4:	461c      	mov	r4, r3
 80067d6:	ec45 4b10 	vmov	d0, r4, r5
 80067da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067de:	45b8      	cmp	r8, r7
 80067e0:	bf3a      	itte	cc
 80067e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80067e6:	f1a6 0708 	subcc.w	r7, r6, #8
 80067ea:	2300      	movcs	r3, #0
 80067ec:	380b      	subs	r0, #11
 80067ee:	d012      	beq.n	8006816 <__b2d+0x8a>
 80067f0:	f1c0 0120 	rsb	r1, r0, #32
 80067f4:	fa23 f401 	lsr.w	r4, r3, r1
 80067f8:	4082      	lsls	r2, r0
 80067fa:	4322      	orrs	r2, r4
 80067fc:	4547      	cmp	r7, r8
 80067fe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006802:	bf8c      	ite	hi
 8006804:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006808:	2200      	movls	r2, #0
 800680a:	4083      	lsls	r3, r0
 800680c:	40ca      	lsrs	r2, r1
 800680e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006812:	4313      	orrs	r3, r2
 8006814:	e7de      	b.n	80067d4 <__b2d+0x48>
 8006816:	ea42 0501 	orr.w	r5, r2, r1
 800681a:	e7db      	b.n	80067d4 <__b2d+0x48>
 800681c:	3ff00000 	.word	0x3ff00000

08006820 <__d2b>:
 8006820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006824:	460f      	mov	r7, r1
 8006826:	2101      	movs	r1, #1
 8006828:	ec59 8b10 	vmov	r8, r9, d0
 800682c:	4616      	mov	r6, r2
 800682e:	f7ff fc1b 	bl	8006068 <_Balloc>
 8006832:	4604      	mov	r4, r0
 8006834:	b930      	cbnz	r0, 8006844 <__d2b+0x24>
 8006836:	4602      	mov	r2, r0
 8006838:	4b24      	ldr	r3, [pc, #144]	; (80068cc <__d2b+0xac>)
 800683a:	4825      	ldr	r0, [pc, #148]	; (80068d0 <__d2b+0xb0>)
 800683c:	f240 310f 	movw	r1, #783	; 0x30f
 8006840:	f001 f96a 	bl	8007b18 <__assert_func>
 8006844:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006848:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800684c:	bb2d      	cbnz	r5, 800689a <__d2b+0x7a>
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	f1b8 0300 	subs.w	r3, r8, #0
 8006854:	d026      	beq.n	80068a4 <__d2b+0x84>
 8006856:	4668      	mov	r0, sp
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	f7ff fd17 	bl	800628c <__lo0bits>
 800685e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006862:	b1e8      	cbz	r0, 80068a0 <__d2b+0x80>
 8006864:	f1c0 0320 	rsb	r3, r0, #32
 8006868:	fa02 f303 	lsl.w	r3, r2, r3
 800686c:	430b      	orrs	r3, r1
 800686e:	40c2      	lsrs	r2, r0
 8006870:	6163      	str	r3, [r4, #20]
 8006872:	9201      	str	r2, [sp, #4]
 8006874:	9b01      	ldr	r3, [sp, #4]
 8006876:	61a3      	str	r3, [r4, #24]
 8006878:	2b00      	cmp	r3, #0
 800687a:	bf14      	ite	ne
 800687c:	2202      	movne	r2, #2
 800687e:	2201      	moveq	r2, #1
 8006880:	6122      	str	r2, [r4, #16]
 8006882:	b1bd      	cbz	r5, 80068b4 <__d2b+0x94>
 8006884:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006888:	4405      	add	r5, r0
 800688a:	603d      	str	r5, [r7, #0]
 800688c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006890:	6030      	str	r0, [r6, #0]
 8006892:	4620      	mov	r0, r4
 8006894:	b003      	add	sp, #12
 8006896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800689a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800689e:	e7d6      	b.n	800684e <__d2b+0x2e>
 80068a0:	6161      	str	r1, [r4, #20]
 80068a2:	e7e7      	b.n	8006874 <__d2b+0x54>
 80068a4:	a801      	add	r0, sp, #4
 80068a6:	f7ff fcf1 	bl	800628c <__lo0bits>
 80068aa:	9b01      	ldr	r3, [sp, #4]
 80068ac:	6163      	str	r3, [r4, #20]
 80068ae:	3020      	adds	r0, #32
 80068b0:	2201      	movs	r2, #1
 80068b2:	e7e5      	b.n	8006880 <__d2b+0x60>
 80068b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80068b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068bc:	6038      	str	r0, [r7, #0]
 80068be:	6918      	ldr	r0, [r3, #16]
 80068c0:	f7ff fcc4 	bl	800624c <__hi0bits>
 80068c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80068c8:	e7e2      	b.n	8006890 <__d2b+0x70>
 80068ca:	bf00      	nop
 80068cc:	0800892d 	.word	0x0800892d
 80068d0:	0800893e 	.word	0x0800893e

080068d4 <__ratio>:
 80068d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d8:	4688      	mov	r8, r1
 80068da:	4669      	mov	r1, sp
 80068dc:	4681      	mov	r9, r0
 80068de:	f7ff ff55 	bl	800678c <__b2d>
 80068e2:	a901      	add	r1, sp, #4
 80068e4:	4640      	mov	r0, r8
 80068e6:	ec55 4b10 	vmov	r4, r5, d0
 80068ea:	ee10 aa10 	vmov	sl, s0
 80068ee:	f7ff ff4d 	bl	800678c <__b2d>
 80068f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80068f6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80068fa:	1ad2      	subs	r2, r2, r3
 80068fc:	e9dd 3100 	ldrd	r3, r1, [sp]
 8006900:	1a5b      	subs	r3, r3, r1
 8006902:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8006906:	ec57 6b10 	vmov	r6, r7, d0
 800690a:	2b00      	cmp	r3, #0
 800690c:	bfd6      	itet	le
 800690e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006912:	462a      	movgt	r2, r5
 8006914:	463a      	movle	r2, r7
 8006916:	46ab      	mov	fp, r5
 8006918:	bfd6      	itet	le
 800691a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800691e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006922:	ee00 3a90 	vmovle	s1, r3
 8006926:	ec4b ab17 	vmov	d7, sl, fp
 800692a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800692e:	b003      	add	sp, #12
 8006930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006934 <__copybits>:
 8006934:	3901      	subs	r1, #1
 8006936:	b570      	push	{r4, r5, r6, lr}
 8006938:	1149      	asrs	r1, r1, #5
 800693a:	6914      	ldr	r4, [r2, #16]
 800693c:	3101      	adds	r1, #1
 800693e:	f102 0314 	add.w	r3, r2, #20
 8006942:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006946:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800694a:	1f05      	subs	r5, r0, #4
 800694c:	42a3      	cmp	r3, r4
 800694e:	d30c      	bcc.n	800696a <__copybits+0x36>
 8006950:	1aa3      	subs	r3, r4, r2
 8006952:	3b11      	subs	r3, #17
 8006954:	f023 0303 	bic.w	r3, r3, #3
 8006958:	3211      	adds	r2, #17
 800695a:	42a2      	cmp	r2, r4
 800695c:	bf88      	it	hi
 800695e:	2300      	movhi	r3, #0
 8006960:	4418      	add	r0, r3
 8006962:	2300      	movs	r3, #0
 8006964:	4288      	cmp	r0, r1
 8006966:	d305      	bcc.n	8006974 <__copybits+0x40>
 8006968:	bd70      	pop	{r4, r5, r6, pc}
 800696a:	f853 6b04 	ldr.w	r6, [r3], #4
 800696e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006972:	e7eb      	b.n	800694c <__copybits+0x18>
 8006974:	f840 3b04 	str.w	r3, [r0], #4
 8006978:	e7f4      	b.n	8006964 <__copybits+0x30>

0800697a <__any_on>:
 800697a:	f100 0214 	add.w	r2, r0, #20
 800697e:	6900      	ldr	r0, [r0, #16]
 8006980:	114b      	asrs	r3, r1, #5
 8006982:	4298      	cmp	r0, r3
 8006984:	b510      	push	{r4, lr}
 8006986:	db11      	blt.n	80069ac <__any_on+0x32>
 8006988:	dd0a      	ble.n	80069a0 <__any_on+0x26>
 800698a:	f011 011f 	ands.w	r1, r1, #31
 800698e:	d007      	beq.n	80069a0 <__any_on+0x26>
 8006990:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006994:	fa24 f001 	lsr.w	r0, r4, r1
 8006998:	fa00 f101 	lsl.w	r1, r0, r1
 800699c:	428c      	cmp	r4, r1
 800699e:	d10b      	bne.n	80069b8 <__any_on+0x3e>
 80069a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d803      	bhi.n	80069b0 <__any_on+0x36>
 80069a8:	2000      	movs	r0, #0
 80069aa:	bd10      	pop	{r4, pc}
 80069ac:	4603      	mov	r3, r0
 80069ae:	e7f7      	b.n	80069a0 <__any_on+0x26>
 80069b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069b4:	2900      	cmp	r1, #0
 80069b6:	d0f5      	beq.n	80069a4 <__any_on+0x2a>
 80069b8:	2001      	movs	r0, #1
 80069ba:	e7f6      	b.n	80069aa <__any_on+0x30>

080069bc <sulp>:
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	4604      	mov	r4, r0
 80069c0:	460d      	mov	r5, r1
 80069c2:	4616      	mov	r6, r2
 80069c4:	ec45 4b10 	vmov	d0, r4, r5
 80069c8:	f7ff feba 	bl	8006740 <__ulp>
 80069cc:	b17e      	cbz	r6, 80069ee <sulp+0x32>
 80069ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80069d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	dd09      	ble.n	80069ee <sulp+0x32>
 80069da:	051b      	lsls	r3, r3, #20
 80069dc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80069e0:	2000      	movs	r0, #0
 80069e2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80069e6:	ec41 0b17 	vmov	d7, r0, r1
 80069ea:	ee20 0b07 	vmul.f64	d0, d0, d7
 80069ee:	bd70      	pop	{r4, r5, r6, pc}

080069f0 <_strtod_l>:
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	ed2d 8b0e 	vpush	{d8-d14}
 80069f8:	b097      	sub	sp, #92	; 0x5c
 80069fa:	4604      	mov	r4, r0
 80069fc:	920d      	str	r2, [sp, #52]	; 0x34
 80069fe:	2200      	movs	r2, #0
 8006a00:	9212      	str	r2, [sp, #72]	; 0x48
 8006a02:	468a      	mov	sl, r1
 8006a04:	f04f 0800 	mov.w	r8, #0
 8006a08:	f04f 0900 	mov.w	r9, #0
 8006a0c:	460a      	mov	r2, r1
 8006a0e:	9211      	str	r2, [sp, #68]	; 0x44
 8006a10:	7811      	ldrb	r1, [r2, #0]
 8006a12:	292b      	cmp	r1, #43	; 0x2b
 8006a14:	d04c      	beq.n	8006ab0 <_strtod_l+0xc0>
 8006a16:	d839      	bhi.n	8006a8c <_strtod_l+0x9c>
 8006a18:	290d      	cmp	r1, #13
 8006a1a:	d833      	bhi.n	8006a84 <_strtod_l+0x94>
 8006a1c:	2908      	cmp	r1, #8
 8006a1e:	d833      	bhi.n	8006a88 <_strtod_l+0x98>
 8006a20:	2900      	cmp	r1, #0
 8006a22:	d03c      	beq.n	8006a9e <_strtod_l+0xae>
 8006a24:	2200      	movs	r2, #0
 8006a26:	9208      	str	r2, [sp, #32]
 8006a28:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006a2a:	7832      	ldrb	r2, [r6, #0]
 8006a2c:	2a30      	cmp	r2, #48	; 0x30
 8006a2e:	f040 80b8 	bne.w	8006ba2 <_strtod_l+0x1b2>
 8006a32:	7872      	ldrb	r2, [r6, #1]
 8006a34:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006a38:	2a58      	cmp	r2, #88	; 0x58
 8006a3a:	d170      	bne.n	8006b1e <_strtod_l+0x12e>
 8006a3c:	9302      	str	r3, [sp, #8]
 8006a3e:	9b08      	ldr	r3, [sp, #32]
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	ab12      	add	r3, sp, #72	; 0x48
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	4a91      	ldr	r2, [pc, #580]	; (8006c8c <_strtod_l+0x29c>)
 8006a48:	ab13      	add	r3, sp, #76	; 0x4c
 8006a4a:	a911      	add	r1, sp, #68	; 0x44
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f001 f8ff 	bl	8007c50 <__gethex>
 8006a52:	f010 070f 	ands.w	r7, r0, #15
 8006a56:	4605      	mov	r5, r0
 8006a58:	d005      	beq.n	8006a66 <_strtod_l+0x76>
 8006a5a:	2f06      	cmp	r7, #6
 8006a5c:	d12a      	bne.n	8006ab4 <_strtod_l+0xc4>
 8006a5e:	3601      	adds	r6, #1
 8006a60:	2300      	movs	r3, #0
 8006a62:	9611      	str	r6, [sp, #68]	; 0x44
 8006a64:	9308      	str	r3, [sp, #32]
 8006a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f040 8555 	bne.w	8007518 <_strtod_l+0xb28>
 8006a6e:	9b08      	ldr	r3, [sp, #32]
 8006a70:	ec49 8b10 	vmov	d0, r8, r9
 8006a74:	b1cb      	cbz	r3, 8006aaa <_strtod_l+0xba>
 8006a76:	eeb1 0b40 	vneg.f64	d0, d0
 8006a7a:	b017      	add	sp, #92	; 0x5c
 8006a7c:	ecbd 8b0e 	vpop	{d8-d14}
 8006a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a84:	2920      	cmp	r1, #32
 8006a86:	d1cd      	bne.n	8006a24 <_strtod_l+0x34>
 8006a88:	3201      	adds	r2, #1
 8006a8a:	e7c0      	b.n	8006a0e <_strtod_l+0x1e>
 8006a8c:	292d      	cmp	r1, #45	; 0x2d
 8006a8e:	d1c9      	bne.n	8006a24 <_strtod_l+0x34>
 8006a90:	2101      	movs	r1, #1
 8006a92:	9108      	str	r1, [sp, #32]
 8006a94:	1c51      	adds	r1, r2, #1
 8006a96:	9111      	str	r1, [sp, #68]	; 0x44
 8006a98:	7852      	ldrb	r2, [r2, #1]
 8006a9a:	2a00      	cmp	r2, #0
 8006a9c:	d1c4      	bne.n	8006a28 <_strtod_l+0x38>
 8006a9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aa0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f040 8535 	bne.w	8007514 <_strtod_l+0xb24>
 8006aaa:	ec49 8b10 	vmov	d0, r8, r9
 8006aae:	e7e4      	b.n	8006a7a <_strtod_l+0x8a>
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	e7ee      	b.n	8006a92 <_strtod_l+0xa2>
 8006ab4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ab6:	b13a      	cbz	r2, 8006ac8 <_strtod_l+0xd8>
 8006ab8:	2135      	movs	r1, #53	; 0x35
 8006aba:	a814      	add	r0, sp, #80	; 0x50
 8006abc:	f7ff ff3a 	bl	8006934 <__copybits>
 8006ac0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f7ff fb10 	bl	80060e8 <_Bfree>
 8006ac8:	1e7b      	subs	r3, r7, #1
 8006aca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006acc:	2b04      	cmp	r3, #4
 8006ace:	d806      	bhi.n	8006ade <_strtod_l+0xee>
 8006ad0:	e8df f003 	tbb	[pc, r3]
 8006ad4:	201d0314 	.word	0x201d0314
 8006ad8:	14          	.byte	0x14
 8006ad9:	00          	.byte	0x00
 8006ada:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8006ade:	05eb      	lsls	r3, r5, #23
 8006ae0:	bf48      	it	mi
 8006ae2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006ae6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006aea:	0d1b      	lsrs	r3, r3, #20
 8006aec:	051b      	lsls	r3, r3, #20
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1b9      	bne.n	8006a66 <_strtod_l+0x76>
 8006af2:	f7fe fb8f 	bl	8005214 <__errno>
 8006af6:	2322      	movs	r3, #34	; 0x22
 8006af8:	6003      	str	r3, [r0, #0]
 8006afa:	e7b4      	b.n	8006a66 <_strtod_l+0x76>
 8006afc:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8006b00:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006b04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b08:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006b0c:	e7e7      	b.n	8006ade <_strtod_l+0xee>
 8006b0e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8006c94 <_strtod_l+0x2a4>
 8006b12:	e7e4      	b.n	8006ade <_strtod_l+0xee>
 8006b14:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006b18:	f04f 38ff 	mov.w	r8, #4294967295
 8006b1c:	e7df      	b.n	8006ade <_strtod_l+0xee>
 8006b1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b20:	1c5a      	adds	r2, r3, #1
 8006b22:	9211      	str	r2, [sp, #68]	; 0x44
 8006b24:	785b      	ldrb	r3, [r3, #1]
 8006b26:	2b30      	cmp	r3, #48	; 0x30
 8006b28:	d0f9      	beq.n	8006b1e <_strtod_l+0x12e>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d09b      	beq.n	8006a66 <_strtod_l+0x76>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	9306      	str	r3, [sp, #24]
 8006b32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b34:	9309      	str	r3, [sp, #36]	; 0x24
 8006b36:	2300      	movs	r3, #0
 8006b38:	9305      	str	r3, [sp, #20]
 8006b3a:	9307      	str	r3, [sp, #28]
 8006b3c:	461e      	mov	r6, r3
 8006b3e:	220a      	movs	r2, #10
 8006b40:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006b42:	7805      	ldrb	r5, [r0, #0]
 8006b44:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006b48:	b2d9      	uxtb	r1, r3
 8006b4a:	2909      	cmp	r1, #9
 8006b4c:	d92b      	bls.n	8006ba6 <_strtod_l+0x1b6>
 8006b4e:	4950      	ldr	r1, [pc, #320]	; (8006c90 <_strtod_l+0x2a0>)
 8006b50:	2201      	movs	r2, #1
 8006b52:	f000 ffa9 	bl	8007aa8 <strncmp>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d035      	beq.n	8006bc6 <_strtod_l+0x1d6>
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	462a      	mov	r2, r5
 8006b5e:	4633      	mov	r3, r6
 8006b60:	4683      	mov	fp, r0
 8006b62:	4601      	mov	r1, r0
 8006b64:	2a65      	cmp	r2, #101	; 0x65
 8006b66:	d001      	beq.n	8006b6c <_strtod_l+0x17c>
 8006b68:	2a45      	cmp	r2, #69	; 0x45
 8006b6a:	d118      	bne.n	8006b9e <_strtod_l+0x1ae>
 8006b6c:	b91b      	cbnz	r3, 8006b76 <_strtod_l+0x186>
 8006b6e:	9b06      	ldr	r3, [sp, #24]
 8006b70:	4303      	orrs	r3, r0
 8006b72:	d094      	beq.n	8006a9e <_strtod_l+0xae>
 8006b74:	2300      	movs	r3, #0
 8006b76:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8006b7a:	f10a 0201 	add.w	r2, sl, #1
 8006b7e:	9211      	str	r2, [sp, #68]	; 0x44
 8006b80:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8006b84:	2a2b      	cmp	r2, #43	; 0x2b
 8006b86:	d075      	beq.n	8006c74 <_strtod_l+0x284>
 8006b88:	2a2d      	cmp	r2, #45	; 0x2d
 8006b8a:	d07b      	beq.n	8006c84 <_strtod_l+0x294>
 8006b8c:	f04f 0e00 	mov.w	lr, #0
 8006b90:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006b94:	2d09      	cmp	r5, #9
 8006b96:	f240 8083 	bls.w	8006ca0 <_strtod_l+0x2b0>
 8006b9a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8006b9e:	2500      	movs	r5, #0
 8006ba0:	e09e      	b.n	8006ce0 <_strtod_l+0x2f0>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e7c4      	b.n	8006b30 <_strtod_l+0x140>
 8006ba6:	2e08      	cmp	r6, #8
 8006ba8:	bfd5      	itete	le
 8006baa:	9907      	ldrle	r1, [sp, #28]
 8006bac:	9905      	ldrgt	r1, [sp, #20]
 8006bae:	fb02 3301 	mlale	r3, r2, r1, r3
 8006bb2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006bb6:	f100 0001 	add.w	r0, r0, #1
 8006bba:	bfd4      	ite	le
 8006bbc:	9307      	strle	r3, [sp, #28]
 8006bbe:	9305      	strgt	r3, [sp, #20]
 8006bc0:	3601      	adds	r6, #1
 8006bc2:	9011      	str	r0, [sp, #68]	; 0x44
 8006bc4:	e7bc      	b.n	8006b40 <_strtod_l+0x150>
 8006bc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	9211      	str	r2, [sp, #68]	; 0x44
 8006bcc:	785a      	ldrb	r2, [r3, #1]
 8006bce:	b3ae      	cbz	r6, 8006c3c <_strtod_l+0x24c>
 8006bd0:	4683      	mov	fp, r0
 8006bd2:	4633      	mov	r3, r6
 8006bd4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006bd8:	2909      	cmp	r1, #9
 8006bda:	d912      	bls.n	8006c02 <_strtod_l+0x212>
 8006bdc:	2101      	movs	r1, #1
 8006bde:	e7c1      	b.n	8006b64 <_strtod_l+0x174>
 8006be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	9211      	str	r2, [sp, #68]	; 0x44
 8006be6:	785a      	ldrb	r2, [r3, #1]
 8006be8:	3001      	adds	r0, #1
 8006bea:	2a30      	cmp	r2, #48	; 0x30
 8006bec:	d0f8      	beq.n	8006be0 <_strtod_l+0x1f0>
 8006bee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006bf2:	2b08      	cmp	r3, #8
 8006bf4:	f200 8495 	bhi.w	8007522 <_strtod_l+0xb32>
 8006bf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8006bfc:	4683      	mov	fp, r0
 8006bfe:	2000      	movs	r0, #0
 8006c00:	4603      	mov	r3, r0
 8006c02:	3a30      	subs	r2, #48	; 0x30
 8006c04:	f100 0101 	add.w	r1, r0, #1
 8006c08:	d012      	beq.n	8006c30 <_strtod_l+0x240>
 8006c0a:	448b      	add	fp, r1
 8006c0c:	eb00 0c03 	add.w	ip, r0, r3
 8006c10:	4619      	mov	r1, r3
 8006c12:	250a      	movs	r5, #10
 8006c14:	4561      	cmp	r1, ip
 8006c16:	d113      	bne.n	8006c40 <_strtod_l+0x250>
 8006c18:	1819      	adds	r1, r3, r0
 8006c1a:	2908      	cmp	r1, #8
 8006c1c:	f103 0301 	add.w	r3, r3, #1
 8006c20:	4403      	add	r3, r0
 8006c22:	dc1b      	bgt.n	8006c5c <_strtod_l+0x26c>
 8006c24:	9807      	ldr	r0, [sp, #28]
 8006c26:	210a      	movs	r1, #10
 8006c28:	fb01 2200 	mla	r2, r1, r0, r2
 8006c2c:	9207      	str	r2, [sp, #28]
 8006c2e:	2100      	movs	r1, #0
 8006c30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c32:	1c50      	adds	r0, r2, #1
 8006c34:	9011      	str	r0, [sp, #68]	; 0x44
 8006c36:	7852      	ldrb	r2, [r2, #1]
 8006c38:	4608      	mov	r0, r1
 8006c3a:	e7cb      	b.n	8006bd4 <_strtod_l+0x1e4>
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	e7d4      	b.n	8006bea <_strtod_l+0x1fa>
 8006c40:	2908      	cmp	r1, #8
 8006c42:	f101 0101 	add.w	r1, r1, #1
 8006c46:	dc03      	bgt.n	8006c50 <_strtod_l+0x260>
 8006c48:	9f07      	ldr	r7, [sp, #28]
 8006c4a:	436f      	muls	r7, r5
 8006c4c:	9707      	str	r7, [sp, #28]
 8006c4e:	e7e1      	b.n	8006c14 <_strtod_l+0x224>
 8006c50:	2910      	cmp	r1, #16
 8006c52:	bfde      	ittt	le
 8006c54:	9f05      	ldrle	r7, [sp, #20]
 8006c56:	436f      	mulle	r7, r5
 8006c58:	9705      	strle	r7, [sp, #20]
 8006c5a:	e7db      	b.n	8006c14 <_strtod_l+0x224>
 8006c5c:	2b10      	cmp	r3, #16
 8006c5e:	bfdf      	itttt	le
 8006c60:	9805      	ldrle	r0, [sp, #20]
 8006c62:	210a      	movle	r1, #10
 8006c64:	fb01 2200 	mlale	r2, r1, r0, r2
 8006c68:	9205      	strle	r2, [sp, #20]
 8006c6a:	e7e0      	b.n	8006c2e <_strtod_l+0x23e>
 8006c6c:	f04f 0b00 	mov.w	fp, #0
 8006c70:	2101      	movs	r1, #1
 8006c72:	e77c      	b.n	8006b6e <_strtod_l+0x17e>
 8006c74:	f04f 0e00 	mov.w	lr, #0
 8006c78:	f10a 0202 	add.w	r2, sl, #2
 8006c7c:	9211      	str	r2, [sp, #68]	; 0x44
 8006c7e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8006c82:	e785      	b.n	8006b90 <_strtod_l+0x1a0>
 8006c84:	f04f 0e01 	mov.w	lr, #1
 8006c88:	e7f6      	b.n	8006c78 <_strtod_l+0x288>
 8006c8a:	bf00      	nop
 8006c8c:	08008a98 	.word	0x08008a98
 8006c90:	08008a94 	.word	0x08008a94
 8006c94:	7ff00000 	.word	0x7ff00000
 8006c98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c9a:	1c55      	adds	r5, r2, #1
 8006c9c:	9511      	str	r5, [sp, #68]	; 0x44
 8006c9e:	7852      	ldrb	r2, [r2, #1]
 8006ca0:	2a30      	cmp	r2, #48	; 0x30
 8006ca2:	d0f9      	beq.n	8006c98 <_strtod_l+0x2a8>
 8006ca4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8006ca8:	2d08      	cmp	r5, #8
 8006caa:	f63f af78 	bhi.w	8006b9e <_strtod_l+0x1ae>
 8006cae:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006cb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006cb4:	920a      	str	r2, [sp, #40]	; 0x28
 8006cb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006cb8:	1c55      	adds	r5, r2, #1
 8006cba:	9511      	str	r5, [sp, #68]	; 0x44
 8006cbc:	7852      	ldrb	r2, [r2, #1]
 8006cbe:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8006cc2:	2f09      	cmp	r7, #9
 8006cc4:	d937      	bls.n	8006d36 <_strtod_l+0x346>
 8006cc6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006cc8:	1bed      	subs	r5, r5, r7
 8006cca:	2d08      	cmp	r5, #8
 8006ccc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006cd0:	dc02      	bgt.n	8006cd8 <_strtod_l+0x2e8>
 8006cd2:	4565      	cmp	r5, ip
 8006cd4:	bfa8      	it	ge
 8006cd6:	4665      	movge	r5, ip
 8006cd8:	f1be 0f00 	cmp.w	lr, #0
 8006cdc:	d000      	beq.n	8006ce0 <_strtod_l+0x2f0>
 8006cde:	426d      	negs	r5, r5
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d14d      	bne.n	8006d80 <_strtod_l+0x390>
 8006ce4:	9b06      	ldr	r3, [sp, #24]
 8006ce6:	4303      	orrs	r3, r0
 8006ce8:	f47f aebd 	bne.w	8006a66 <_strtod_l+0x76>
 8006cec:	2900      	cmp	r1, #0
 8006cee:	f47f aed6 	bne.w	8006a9e <_strtod_l+0xae>
 8006cf2:	2a69      	cmp	r2, #105	; 0x69
 8006cf4:	d027      	beq.n	8006d46 <_strtod_l+0x356>
 8006cf6:	dc24      	bgt.n	8006d42 <_strtod_l+0x352>
 8006cf8:	2a49      	cmp	r2, #73	; 0x49
 8006cfa:	d024      	beq.n	8006d46 <_strtod_l+0x356>
 8006cfc:	2a4e      	cmp	r2, #78	; 0x4e
 8006cfe:	f47f aece 	bne.w	8006a9e <_strtod_l+0xae>
 8006d02:	4995      	ldr	r1, [pc, #596]	; (8006f58 <_strtod_l+0x568>)
 8006d04:	a811      	add	r0, sp, #68	; 0x44
 8006d06:	f001 f9e3 	bl	80080d0 <__match>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	f43f aec7 	beq.w	8006a9e <_strtod_l+0xae>
 8006d10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	2b28      	cmp	r3, #40	; 0x28
 8006d16:	d12d      	bne.n	8006d74 <_strtod_l+0x384>
 8006d18:	4990      	ldr	r1, [pc, #576]	; (8006f5c <_strtod_l+0x56c>)
 8006d1a:	aa14      	add	r2, sp, #80	; 0x50
 8006d1c:	a811      	add	r0, sp, #68	; 0x44
 8006d1e:	f001 f9eb 	bl	80080f8 <__hexnan>
 8006d22:	2805      	cmp	r0, #5
 8006d24:	d126      	bne.n	8006d74 <_strtod_l+0x384>
 8006d26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d28:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006d2c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006d30:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006d34:	e697      	b.n	8006a66 <_strtod_l+0x76>
 8006d36:	250a      	movs	r5, #10
 8006d38:	fb05 2c0c 	mla	ip, r5, ip, r2
 8006d3c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006d40:	e7b9      	b.n	8006cb6 <_strtod_l+0x2c6>
 8006d42:	2a6e      	cmp	r2, #110	; 0x6e
 8006d44:	e7db      	b.n	8006cfe <_strtod_l+0x30e>
 8006d46:	4986      	ldr	r1, [pc, #536]	; (8006f60 <_strtod_l+0x570>)
 8006d48:	a811      	add	r0, sp, #68	; 0x44
 8006d4a:	f001 f9c1 	bl	80080d0 <__match>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	f43f aea5 	beq.w	8006a9e <_strtod_l+0xae>
 8006d54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d56:	4983      	ldr	r1, [pc, #524]	; (8006f64 <_strtod_l+0x574>)
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	a811      	add	r0, sp, #68	; 0x44
 8006d5c:	9311      	str	r3, [sp, #68]	; 0x44
 8006d5e:	f001 f9b7 	bl	80080d0 <__match>
 8006d62:	b910      	cbnz	r0, 8006d6a <_strtod_l+0x37a>
 8006d64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d66:	3301      	adds	r3, #1
 8006d68:	9311      	str	r3, [sp, #68]	; 0x44
 8006d6a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8006f78 <_strtod_l+0x588>
 8006d6e:	f04f 0800 	mov.w	r8, #0
 8006d72:	e678      	b.n	8006a66 <_strtod_l+0x76>
 8006d74:	487c      	ldr	r0, [pc, #496]	; (8006f68 <_strtod_l+0x578>)
 8006d76:	f000 fec7 	bl	8007b08 <nan>
 8006d7a:	ec59 8b10 	vmov	r8, r9, d0
 8006d7e:	e672      	b.n	8006a66 <_strtod_l+0x76>
 8006d80:	eddd 7a07 	vldr	s15, [sp, #28]
 8006d84:	eba5 020b 	sub.w	r2, r5, fp
 8006d88:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006d8c:	2e00      	cmp	r6, #0
 8006d8e:	bf08      	it	eq
 8006d90:	461e      	moveq	r6, r3
 8006d92:	2b10      	cmp	r3, #16
 8006d94:	9206      	str	r2, [sp, #24]
 8006d96:	461a      	mov	r2, r3
 8006d98:	bfa8      	it	ge
 8006d9a:	2210      	movge	r2, #16
 8006d9c:	2b09      	cmp	r3, #9
 8006d9e:	ec59 8b17 	vmov	r8, r9, d7
 8006da2:	dd0c      	ble.n	8006dbe <_strtod_l+0x3ce>
 8006da4:	4971      	ldr	r1, [pc, #452]	; (8006f6c <_strtod_l+0x57c>)
 8006da6:	eddd 6a05 	vldr	s13, [sp, #20]
 8006daa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006dae:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8006db2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8006db6:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006dba:	ec59 8b16 	vmov	r8, r9, d6
 8006dbe:	2b0f      	cmp	r3, #15
 8006dc0:	dc37      	bgt.n	8006e32 <_strtod_l+0x442>
 8006dc2:	9906      	ldr	r1, [sp, #24]
 8006dc4:	2900      	cmp	r1, #0
 8006dc6:	f43f ae4e 	beq.w	8006a66 <_strtod_l+0x76>
 8006dca:	dd23      	ble.n	8006e14 <_strtod_l+0x424>
 8006dcc:	2916      	cmp	r1, #22
 8006dce:	dc0b      	bgt.n	8006de8 <_strtod_l+0x3f8>
 8006dd0:	4b66      	ldr	r3, [pc, #408]	; (8006f6c <_strtod_l+0x57c>)
 8006dd2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006dd6:	ed93 7b00 	vldr	d7, [r3]
 8006dda:	ec49 8b16 	vmov	d6, r8, r9
 8006dde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006de2:	ec59 8b17 	vmov	r8, r9, d7
 8006de6:	e63e      	b.n	8006a66 <_strtod_l+0x76>
 8006de8:	9806      	ldr	r0, [sp, #24]
 8006dea:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8006dee:	4281      	cmp	r1, r0
 8006df0:	db1f      	blt.n	8006e32 <_strtod_l+0x442>
 8006df2:	4a5e      	ldr	r2, [pc, #376]	; (8006f6c <_strtod_l+0x57c>)
 8006df4:	f1c3 030f 	rsb	r3, r3, #15
 8006df8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006dfc:	ed91 7b00 	vldr	d7, [r1]
 8006e00:	ec49 8b16 	vmov	d6, r8, r9
 8006e04:	1ac3      	subs	r3, r0, r3
 8006e06:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006e0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e0e:	ed92 6b00 	vldr	d6, [r2]
 8006e12:	e7e4      	b.n	8006dde <_strtod_l+0x3ee>
 8006e14:	9906      	ldr	r1, [sp, #24]
 8006e16:	3116      	adds	r1, #22
 8006e18:	db0b      	blt.n	8006e32 <_strtod_l+0x442>
 8006e1a:	4b54      	ldr	r3, [pc, #336]	; (8006f6c <_strtod_l+0x57c>)
 8006e1c:	ebab 0505 	sub.w	r5, fp, r5
 8006e20:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006e24:	ed95 7b00 	vldr	d7, [r5]
 8006e28:	ec49 8b16 	vmov	d6, r8, r9
 8006e2c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006e30:	e7d7      	b.n	8006de2 <_strtod_l+0x3f2>
 8006e32:	9906      	ldr	r1, [sp, #24]
 8006e34:	1a9a      	subs	r2, r3, r2
 8006e36:	440a      	add	r2, r1
 8006e38:	2a00      	cmp	r2, #0
 8006e3a:	dd6e      	ble.n	8006f1a <_strtod_l+0x52a>
 8006e3c:	f012 000f 	ands.w	r0, r2, #15
 8006e40:	d00a      	beq.n	8006e58 <_strtod_l+0x468>
 8006e42:	494a      	ldr	r1, [pc, #296]	; (8006f6c <_strtod_l+0x57c>)
 8006e44:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006e48:	ed91 7b00 	vldr	d7, [r1]
 8006e4c:	ec49 8b16 	vmov	d6, r8, r9
 8006e50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e54:	ec59 8b17 	vmov	r8, r9, d7
 8006e58:	f032 020f 	bics.w	r2, r2, #15
 8006e5c:	d04e      	beq.n	8006efc <_strtod_l+0x50c>
 8006e5e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8006e62:	dd22      	ble.n	8006eaa <_strtod_l+0x4ba>
 8006e64:	2500      	movs	r5, #0
 8006e66:	462e      	mov	r6, r5
 8006e68:	9507      	str	r5, [sp, #28]
 8006e6a:	462f      	mov	r7, r5
 8006e6c:	2322      	movs	r3, #34	; 0x22
 8006e6e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006f78 <_strtod_l+0x588>
 8006e72:	6023      	str	r3, [r4, #0]
 8006e74:	f04f 0800 	mov.w	r8, #0
 8006e78:	9b07      	ldr	r3, [sp, #28]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f43f adf3 	beq.w	8006a66 <_strtod_l+0x76>
 8006e80:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006e82:	4620      	mov	r0, r4
 8006e84:	f7ff f930 	bl	80060e8 <_Bfree>
 8006e88:	4639      	mov	r1, r7
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f7ff f92c 	bl	80060e8 <_Bfree>
 8006e90:	4631      	mov	r1, r6
 8006e92:	4620      	mov	r0, r4
 8006e94:	f7ff f928 	bl	80060e8 <_Bfree>
 8006e98:	9907      	ldr	r1, [sp, #28]
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f7ff f924 	bl	80060e8 <_Bfree>
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f7ff f920 	bl	80060e8 <_Bfree>
 8006ea8:	e5dd      	b.n	8006a66 <_strtod_l+0x76>
 8006eaa:	2000      	movs	r0, #0
 8006eac:	ec49 8b17 	vmov	d7, r8, r9
 8006eb0:	4f2f      	ldr	r7, [pc, #188]	; (8006f70 <_strtod_l+0x580>)
 8006eb2:	1112      	asrs	r2, r2, #4
 8006eb4:	4601      	mov	r1, r0
 8006eb6:	2a01      	cmp	r2, #1
 8006eb8:	dc23      	bgt.n	8006f02 <_strtod_l+0x512>
 8006eba:	b108      	cbz	r0, 8006ec0 <_strtod_l+0x4d0>
 8006ebc:	ec59 8b17 	vmov	r8, r9, d7
 8006ec0:	4a2b      	ldr	r2, [pc, #172]	; (8006f70 <_strtod_l+0x580>)
 8006ec2:	482c      	ldr	r0, [pc, #176]	; (8006f74 <_strtod_l+0x584>)
 8006ec4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006ec8:	ed92 7b00 	vldr	d7, [r2]
 8006ecc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006ed0:	ec49 8b16 	vmov	d6, r8, r9
 8006ed4:	4a28      	ldr	r2, [pc, #160]	; (8006f78 <_strtod_l+0x588>)
 8006ed6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006eda:	ee17 1a90 	vmov	r1, s15
 8006ede:	400a      	ands	r2, r1
 8006ee0:	4282      	cmp	r2, r0
 8006ee2:	ec59 8b17 	vmov	r8, r9, d7
 8006ee6:	d8bd      	bhi.n	8006e64 <_strtod_l+0x474>
 8006ee8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8006eec:	4282      	cmp	r2, r0
 8006eee:	bf86      	itte	hi
 8006ef0:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8006f7c <_strtod_l+0x58c>
 8006ef4:	f04f 38ff 	movhi.w	r8, #4294967295
 8006ef8:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8006efc:	2200      	movs	r2, #0
 8006efe:	9205      	str	r2, [sp, #20]
 8006f00:	e076      	b.n	8006ff0 <_strtod_l+0x600>
 8006f02:	f012 0f01 	tst.w	r2, #1
 8006f06:	d004      	beq.n	8006f12 <_strtod_l+0x522>
 8006f08:	ed97 6b00 	vldr	d6, [r7]
 8006f0c:	2001      	movs	r0, #1
 8006f0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f12:	3101      	adds	r1, #1
 8006f14:	1052      	asrs	r2, r2, #1
 8006f16:	3708      	adds	r7, #8
 8006f18:	e7cd      	b.n	8006eb6 <_strtod_l+0x4c6>
 8006f1a:	d0ef      	beq.n	8006efc <_strtod_l+0x50c>
 8006f1c:	4252      	negs	r2, r2
 8006f1e:	f012 000f 	ands.w	r0, r2, #15
 8006f22:	d00a      	beq.n	8006f3a <_strtod_l+0x54a>
 8006f24:	4911      	ldr	r1, [pc, #68]	; (8006f6c <_strtod_l+0x57c>)
 8006f26:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006f2a:	ed91 7b00 	vldr	d7, [r1]
 8006f2e:	ec49 8b16 	vmov	d6, r8, r9
 8006f32:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006f36:	ec59 8b17 	vmov	r8, r9, d7
 8006f3a:	1112      	asrs	r2, r2, #4
 8006f3c:	d0de      	beq.n	8006efc <_strtod_l+0x50c>
 8006f3e:	2a1f      	cmp	r2, #31
 8006f40:	dd1e      	ble.n	8006f80 <_strtod_l+0x590>
 8006f42:	2500      	movs	r5, #0
 8006f44:	462e      	mov	r6, r5
 8006f46:	9507      	str	r5, [sp, #28]
 8006f48:	462f      	mov	r7, r5
 8006f4a:	2322      	movs	r3, #34	; 0x22
 8006f4c:	f04f 0800 	mov.w	r8, #0
 8006f50:	f04f 0900 	mov.w	r9, #0
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	e78f      	b.n	8006e78 <_strtod_l+0x488>
 8006f58:	08008885 	.word	0x08008885
 8006f5c:	08008aac 	.word	0x08008aac
 8006f60:	0800887d 	.word	0x0800887d
 8006f64:	080088b4 	.word	0x080088b4
 8006f68:	08008c3d 	.word	0x08008c3d
 8006f6c:	080089c0 	.word	0x080089c0
 8006f70:	08008998 	.word	0x08008998
 8006f74:	7ca00000 	.word	0x7ca00000
 8006f78:	7ff00000 	.word	0x7ff00000
 8006f7c:	7fefffff 	.word	0x7fefffff
 8006f80:	f012 0110 	ands.w	r1, r2, #16
 8006f84:	bf18      	it	ne
 8006f86:	216a      	movne	r1, #106	; 0x6a
 8006f88:	9105      	str	r1, [sp, #20]
 8006f8a:	ec49 8b17 	vmov	d7, r8, r9
 8006f8e:	49be      	ldr	r1, [pc, #760]	; (8007288 <_strtod_l+0x898>)
 8006f90:	2000      	movs	r0, #0
 8006f92:	07d7      	lsls	r7, r2, #31
 8006f94:	d504      	bpl.n	8006fa0 <_strtod_l+0x5b0>
 8006f96:	ed91 6b00 	vldr	d6, [r1]
 8006f9a:	2001      	movs	r0, #1
 8006f9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fa0:	1052      	asrs	r2, r2, #1
 8006fa2:	f101 0108 	add.w	r1, r1, #8
 8006fa6:	d1f4      	bne.n	8006f92 <_strtod_l+0x5a2>
 8006fa8:	b108      	cbz	r0, 8006fae <_strtod_l+0x5be>
 8006faa:	ec59 8b17 	vmov	r8, r9, d7
 8006fae:	9a05      	ldr	r2, [sp, #20]
 8006fb0:	b1ba      	cbz	r2, 8006fe2 <_strtod_l+0x5f2>
 8006fb2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8006fb6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8006fba:	2a00      	cmp	r2, #0
 8006fbc:	4648      	mov	r0, r9
 8006fbe:	dd10      	ble.n	8006fe2 <_strtod_l+0x5f2>
 8006fc0:	2a1f      	cmp	r2, #31
 8006fc2:	f340 812c 	ble.w	800721e <_strtod_l+0x82e>
 8006fc6:	2a34      	cmp	r2, #52	; 0x34
 8006fc8:	bfde      	ittt	le
 8006fca:	f04f 32ff 	movle.w	r2, #4294967295
 8006fce:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8006fd2:	408a      	lslle	r2, r1
 8006fd4:	f04f 0800 	mov.w	r8, #0
 8006fd8:	bfcc      	ite	gt
 8006fda:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006fde:	ea02 0900 	andle.w	r9, r2, r0
 8006fe2:	ec49 8b17 	vmov	d7, r8, r9
 8006fe6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fee:	d0a8      	beq.n	8006f42 <_strtod_l+0x552>
 8006ff0:	9a07      	ldr	r2, [sp, #28]
 8006ff2:	9200      	str	r2, [sp, #0]
 8006ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ff6:	4632      	mov	r2, r6
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f7ff f8dd 	bl	80061b8 <__s2b>
 8006ffe:	9007      	str	r0, [sp, #28]
 8007000:	2800      	cmp	r0, #0
 8007002:	f43f af2f 	beq.w	8006e64 <_strtod_l+0x474>
 8007006:	9a06      	ldr	r2, [sp, #24]
 8007008:	2a00      	cmp	r2, #0
 800700a:	ebab 0305 	sub.w	r3, fp, r5
 800700e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8007268 <_strtod_l+0x878>
 8007012:	bfa8      	it	ge
 8007014:	2300      	movge	r3, #0
 8007016:	ed9f ab96 	vldr	d10, [pc, #600]	; 8007270 <_strtod_l+0x880>
 800701a:	ed9f bb97 	vldr	d11, [pc, #604]	; 8007278 <_strtod_l+0x888>
 800701e:	9309      	str	r3, [sp, #36]	; 0x24
 8007020:	2500      	movs	r5, #0
 8007022:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007026:	930c      	str	r3, [sp, #48]	; 0x30
 8007028:	462e      	mov	r6, r5
 800702a:	9b07      	ldr	r3, [sp, #28]
 800702c:	4620      	mov	r0, r4
 800702e:	6859      	ldr	r1, [r3, #4]
 8007030:	f7ff f81a 	bl	8006068 <_Balloc>
 8007034:	4607      	mov	r7, r0
 8007036:	2800      	cmp	r0, #0
 8007038:	f43f af18 	beq.w	8006e6c <_strtod_l+0x47c>
 800703c:	9b07      	ldr	r3, [sp, #28]
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	3202      	adds	r2, #2
 8007042:	f103 010c 	add.w	r1, r3, #12
 8007046:	0092      	lsls	r2, r2, #2
 8007048:	300c      	adds	r0, #12
 800704a:	f000 fd4f 	bl	8007aec <memcpy>
 800704e:	ec49 8b10 	vmov	d0, r8, r9
 8007052:	aa14      	add	r2, sp, #80	; 0x50
 8007054:	a913      	add	r1, sp, #76	; 0x4c
 8007056:	4620      	mov	r0, r4
 8007058:	f7ff fbe2 	bl	8006820 <__d2b>
 800705c:	ec49 8b18 	vmov	d8, r8, r9
 8007060:	9012      	str	r0, [sp, #72]	; 0x48
 8007062:	2800      	cmp	r0, #0
 8007064:	f43f af02 	beq.w	8006e6c <_strtod_l+0x47c>
 8007068:	2101      	movs	r1, #1
 800706a:	4620      	mov	r0, r4
 800706c:	f7ff f93c 	bl	80062e8 <__i2b>
 8007070:	4606      	mov	r6, r0
 8007072:	2800      	cmp	r0, #0
 8007074:	f43f aefa 	beq.w	8006e6c <_strtod_l+0x47c>
 8007078:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800707a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800707c:	2b00      	cmp	r3, #0
 800707e:	bfab      	itete	ge
 8007080:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8007082:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8007084:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8007088:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800708c:	bfac      	ite	ge
 800708e:	eb03 0b02 	addge.w	fp, r3, r2
 8007092:	eba2 0a03 	sublt.w	sl, r2, r3
 8007096:	9a05      	ldr	r2, [sp, #20]
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	440b      	add	r3, r1
 800709c:	4a7b      	ldr	r2, [pc, #492]	; (800728c <_strtod_l+0x89c>)
 800709e:	3b01      	subs	r3, #1
 80070a0:	4293      	cmp	r3, r2
 80070a2:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80070a6:	f280 80cd 	bge.w	8007244 <_strtod_l+0x854>
 80070aa:	1ad2      	subs	r2, r2, r3
 80070ac:	2a1f      	cmp	r2, #31
 80070ae:	eba1 0102 	sub.w	r1, r1, r2
 80070b2:	f04f 0001 	mov.w	r0, #1
 80070b6:	f300 80b9 	bgt.w	800722c <_strtod_l+0x83c>
 80070ba:	fa00 f302 	lsl.w	r3, r0, r2
 80070be:	930b      	str	r3, [sp, #44]	; 0x2c
 80070c0:	2300      	movs	r3, #0
 80070c2:	930a      	str	r3, [sp, #40]	; 0x28
 80070c4:	eb0b 0301 	add.w	r3, fp, r1
 80070c8:	9a05      	ldr	r2, [sp, #20]
 80070ca:	459b      	cmp	fp, r3
 80070cc:	448a      	add	sl, r1
 80070ce:	4492      	add	sl, r2
 80070d0:	465a      	mov	r2, fp
 80070d2:	bfa8      	it	ge
 80070d4:	461a      	movge	r2, r3
 80070d6:	4552      	cmp	r2, sl
 80070d8:	bfa8      	it	ge
 80070da:	4652      	movge	r2, sl
 80070dc:	2a00      	cmp	r2, #0
 80070de:	bfc2      	ittt	gt
 80070e0:	1a9b      	subgt	r3, r3, r2
 80070e2:	ebaa 0a02 	subgt.w	sl, sl, r2
 80070e6:	ebab 0b02 	subgt.w	fp, fp, r2
 80070ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ec:	2a00      	cmp	r2, #0
 80070ee:	dd18      	ble.n	8007122 <_strtod_l+0x732>
 80070f0:	4631      	mov	r1, r6
 80070f2:	4620      	mov	r0, r4
 80070f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80070f6:	f7ff f9b7 	bl	8006468 <__pow5mult>
 80070fa:	4606      	mov	r6, r0
 80070fc:	2800      	cmp	r0, #0
 80070fe:	f43f aeb5 	beq.w	8006e6c <_strtod_l+0x47c>
 8007102:	4601      	mov	r1, r0
 8007104:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007106:	4620      	mov	r0, r4
 8007108:	f7ff f904 	bl	8006314 <__multiply>
 800710c:	900e      	str	r0, [sp, #56]	; 0x38
 800710e:	2800      	cmp	r0, #0
 8007110:	f43f aeac 	beq.w	8006e6c <_strtod_l+0x47c>
 8007114:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007116:	4620      	mov	r0, r4
 8007118:	f7fe ffe6 	bl	80060e8 <_Bfree>
 800711c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800711e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007120:	9212      	str	r2, [sp, #72]	; 0x48
 8007122:	2b00      	cmp	r3, #0
 8007124:	f300 8093 	bgt.w	800724e <_strtod_l+0x85e>
 8007128:	9b06      	ldr	r3, [sp, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	dd08      	ble.n	8007140 <_strtod_l+0x750>
 800712e:	4639      	mov	r1, r7
 8007130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007132:	4620      	mov	r0, r4
 8007134:	f7ff f998 	bl	8006468 <__pow5mult>
 8007138:	4607      	mov	r7, r0
 800713a:	2800      	cmp	r0, #0
 800713c:	f43f ae96 	beq.w	8006e6c <_strtod_l+0x47c>
 8007140:	f1ba 0f00 	cmp.w	sl, #0
 8007144:	dd08      	ble.n	8007158 <_strtod_l+0x768>
 8007146:	4639      	mov	r1, r7
 8007148:	4652      	mov	r2, sl
 800714a:	4620      	mov	r0, r4
 800714c:	f7ff f9e6 	bl	800651c <__lshift>
 8007150:	4607      	mov	r7, r0
 8007152:	2800      	cmp	r0, #0
 8007154:	f43f ae8a 	beq.w	8006e6c <_strtod_l+0x47c>
 8007158:	f1bb 0f00 	cmp.w	fp, #0
 800715c:	dd08      	ble.n	8007170 <_strtod_l+0x780>
 800715e:	4631      	mov	r1, r6
 8007160:	465a      	mov	r2, fp
 8007162:	4620      	mov	r0, r4
 8007164:	f7ff f9da 	bl	800651c <__lshift>
 8007168:	4606      	mov	r6, r0
 800716a:	2800      	cmp	r0, #0
 800716c:	f43f ae7e 	beq.w	8006e6c <_strtod_l+0x47c>
 8007170:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007172:	463a      	mov	r2, r7
 8007174:	4620      	mov	r0, r4
 8007176:	f7ff fa59 	bl	800662c <__mdiff>
 800717a:	4605      	mov	r5, r0
 800717c:	2800      	cmp	r0, #0
 800717e:	f43f ae75 	beq.w	8006e6c <_strtod_l+0x47c>
 8007182:	2300      	movs	r3, #0
 8007184:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8007188:	60c3      	str	r3, [r0, #12]
 800718a:	4631      	mov	r1, r6
 800718c:	f7ff fa32 	bl	80065f4 <__mcmp>
 8007190:	2800      	cmp	r0, #0
 8007192:	da7f      	bge.n	8007294 <_strtod_l+0x8a4>
 8007194:	ea5a 0a08 	orrs.w	sl, sl, r8
 8007198:	f040 80a5 	bne.w	80072e6 <_strtod_l+0x8f6>
 800719c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f040 80a0 	bne.w	80072e6 <_strtod_l+0x8f6>
 80071a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071aa:	0d1b      	lsrs	r3, r3, #20
 80071ac:	051b      	lsls	r3, r3, #20
 80071ae:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80071b2:	f240 8098 	bls.w	80072e6 <_strtod_l+0x8f6>
 80071b6:	696b      	ldr	r3, [r5, #20]
 80071b8:	b91b      	cbnz	r3, 80071c2 <_strtod_l+0x7d2>
 80071ba:	692b      	ldr	r3, [r5, #16]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	f340 8092 	ble.w	80072e6 <_strtod_l+0x8f6>
 80071c2:	4629      	mov	r1, r5
 80071c4:	2201      	movs	r2, #1
 80071c6:	4620      	mov	r0, r4
 80071c8:	f7ff f9a8 	bl	800651c <__lshift>
 80071cc:	4631      	mov	r1, r6
 80071ce:	4605      	mov	r5, r0
 80071d0:	f7ff fa10 	bl	80065f4 <__mcmp>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	f340 8086 	ble.w	80072e6 <_strtod_l+0x8f6>
 80071da:	9905      	ldr	r1, [sp, #20]
 80071dc:	4a2c      	ldr	r2, [pc, #176]	; (8007290 <_strtod_l+0x8a0>)
 80071de:	464b      	mov	r3, r9
 80071e0:	2900      	cmp	r1, #0
 80071e2:	f000 809f 	beq.w	8007324 <_strtod_l+0x934>
 80071e6:	ea02 0109 	and.w	r1, r2, r9
 80071ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80071ee:	f300 8099 	bgt.w	8007324 <_strtod_l+0x934>
 80071f2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80071f6:	f77f aea8 	ble.w	8006f4a <_strtod_l+0x55a>
 80071fa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007280 <_strtod_l+0x890>
 80071fe:	ec49 8b16 	vmov	d6, r8, r9
 8007202:	4b23      	ldr	r3, [pc, #140]	; (8007290 <_strtod_l+0x8a0>)
 8007204:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007208:	ee17 2a90 	vmov	r2, s15
 800720c:	4013      	ands	r3, r2
 800720e:	ec59 8b17 	vmov	r8, r9, d7
 8007212:	2b00      	cmp	r3, #0
 8007214:	f47f ae34 	bne.w	8006e80 <_strtod_l+0x490>
 8007218:	2322      	movs	r3, #34	; 0x22
 800721a:	6023      	str	r3, [r4, #0]
 800721c:	e630      	b.n	8006e80 <_strtod_l+0x490>
 800721e:	f04f 31ff 	mov.w	r1, #4294967295
 8007222:	fa01 f202 	lsl.w	r2, r1, r2
 8007226:	ea02 0808 	and.w	r8, r2, r8
 800722a:	e6da      	b.n	8006fe2 <_strtod_l+0x5f2>
 800722c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8007230:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007234:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007238:	33e2      	adds	r3, #226	; 0xe2
 800723a:	fa00 f303 	lsl.w	r3, r0, r3
 800723e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8007242:	e73f      	b.n	80070c4 <_strtod_l+0x6d4>
 8007244:	2200      	movs	r2, #0
 8007246:	2301      	movs	r3, #1
 8007248:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800724c:	e73a      	b.n	80070c4 <_strtod_l+0x6d4>
 800724e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007250:	461a      	mov	r2, r3
 8007252:	4620      	mov	r0, r4
 8007254:	f7ff f962 	bl	800651c <__lshift>
 8007258:	9012      	str	r0, [sp, #72]	; 0x48
 800725a:	2800      	cmp	r0, #0
 800725c:	f47f af64 	bne.w	8007128 <_strtod_l+0x738>
 8007260:	e604      	b.n	8006e6c <_strtod_l+0x47c>
 8007262:	bf00      	nop
 8007264:	f3af 8000 	nop.w
 8007268:	94a03595 	.word	0x94a03595
 800726c:	3fcfffff 	.word	0x3fcfffff
 8007270:	94a03595 	.word	0x94a03595
 8007274:	3fdfffff 	.word	0x3fdfffff
 8007278:	35afe535 	.word	0x35afe535
 800727c:	3fe00000 	.word	0x3fe00000
 8007280:	00000000 	.word	0x00000000
 8007284:	39500000 	.word	0x39500000
 8007288:	08008ac0 	.word	0x08008ac0
 800728c:	fffffc02 	.word	0xfffffc02
 8007290:	7ff00000 	.word	0x7ff00000
 8007294:	46cb      	mov	fp, r9
 8007296:	d15f      	bne.n	8007358 <_strtod_l+0x968>
 8007298:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800729c:	f1ba 0f00 	cmp.w	sl, #0
 80072a0:	d02a      	beq.n	80072f8 <_strtod_l+0x908>
 80072a2:	4aa7      	ldr	r2, [pc, #668]	; (8007540 <_strtod_l+0xb50>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d12b      	bne.n	8007300 <_strtod_l+0x910>
 80072a8:	9b05      	ldr	r3, [sp, #20]
 80072aa:	4642      	mov	r2, r8
 80072ac:	b1fb      	cbz	r3, 80072ee <_strtod_l+0x8fe>
 80072ae:	4ba5      	ldr	r3, [pc, #660]	; (8007544 <_strtod_l+0xb54>)
 80072b0:	ea09 0303 	and.w	r3, r9, r3
 80072b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80072b8:	f04f 31ff 	mov.w	r1, #4294967295
 80072bc:	d81a      	bhi.n	80072f4 <_strtod_l+0x904>
 80072be:	0d1b      	lsrs	r3, r3, #20
 80072c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072c4:	fa01 f303 	lsl.w	r3, r1, r3
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d119      	bne.n	8007300 <_strtod_l+0x910>
 80072cc:	4b9e      	ldr	r3, [pc, #632]	; (8007548 <_strtod_l+0xb58>)
 80072ce:	459b      	cmp	fp, r3
 80072d0:	d102      	bne.n	80072d8 <_strtod_l+0x8e8>
 80072d2:	3201      	adds	r2, #1
 80072d4:	f43f adca 	beq.w	8006e6c <_strtod_l+0x47c>
 80072d8:	4b9a      	ldr	r3, [pc, #616]	; (8007544 <_strtod_l+0xb54>)
 80072da:	ea0b 0303 	and.w	r3, fp, r3
 80072de:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80072e2:	f04f 0800 	mov.w	r8, #0
 80072e6:	9b05      	ldr	r3, [sp, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d186      	bne.n	80071fa <_strtod_l+0x80a>
 80072ec:	e5c8      	b.n	8006e80 <_strtod_l+0x490>
 80072ee:	f04f 33ff 	mov.w	r3, #4294967295
 80072f2:	e7e9      	b.n	80072c8 <_strtod_l+0x8d8>
 80072f4:	460b      	mov	r3, r1
 80072f6:	e7e7      	b.n	80072c8 <_strtod_l+0x8d8>
 80072f8:	ea53 0308 	orrs.w	r3, r3, r8
 80072fc:	f43f af6d 	beq.w	80071da <_strtod_l+0x7ea>
 8007300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007302:	b1cb      	cbz	r3, 8007338 <_strtod_l+0x948>
 8007304:	ea13 0f0b 	tst.w	r3, fp
 8007308:	d0ed      	beq.n	80072e6 <_strtod_l+0x8f6>
 800730a:	9a05      	ldr	r2, [sp, #20]
 800730c:	4640      	mov	r0, r8
 800730e:	4649      	mov	r1, r9
 8007310:	f1ba 0f00 	cmp.w	sl, #0
 8007314:	d014      	beq.n	8007340 <_strtod_l+0x950>
 8007316:	f7ff fb51 	bl	80069bc <sulp>
 800731a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800731e:	ec59 8b17 	vmov	r8, r9, d7
 8007322:	e7e0      	b.n	80072e6 <_strtod_l+0x8f6>
 8007324:	4013      	ands	r3, r2
 8007326:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800732a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800732e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007332:	f04f 38ff 	mov.w	r8, #4294967295
 8007336:	e7d6      	b.n	80072e6 <_strtod_l+0x8f6>
 8007338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800733a:	ea13 0f08 	tst.w	r3, r8
 800733e:	e7e3      	b.n	8007308 <_strtod_l+0x918>
 8007340:	f7ff fb3c 	bl	80069bc <sulp>
 8007344:	ee38 0b40 	vsub.f64	d0, d8, d0
 8007348:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800734c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007350:	ec59 8b10 	vmov	r8, r9, d0
 8007354:	d1c7      	bne.n	80072e6 <_strtod_l+0x8f6>
 8007356:	e5f8      	b.n	8006f4a <_strtod_l+0x55a>
 8007358:	4631      	mov	r1, r6
 800735a:	4628      	mov	r0, r5
 800735c:	f7ff faba 	bl	80068d4 <__ratio>
 8007360:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007364:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800736c:	d85f      	bhi.n	800742e <_strtod_l+0xa3e>
 800736e:	f1ba 0f00 	cmp.w	sl, #0
 8007372:	d166      	bne.n	8007442 <_strtod_l+0xa52>
 8007374:	f1b8 0f00 	cmp.w	r8, #0
 8007378:	d14d      	bne.n	8007416 <_strtod_l+0xa26>
 800737a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800737e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d162      	bne.n	800744c <_strtod_l+0xa5c>
 8007386:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800738a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800738e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007392:	d401      	bmi.n	8007398 <_strtod_l+0x9a8>
 8007394:	ee20 db0d 	vmul.f64	d13, d0, d13
 8007398:	eeb1 cb4d 	vneg.f64	d12, d13
 800739c:	4869      	ldr	r0, [pc, #420]	; (8007544 <_strtod_l+0xb54>)
 800739e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8007550 <_strtod_l+0xb60>
 80073a2:	ea0b 0100 	and.w	r1, fp, r0
 80073a6:	4561      	cmp	r1, ip
 80073a8:	ec53 2b1c 	vmov	r2, r3, d12
 80073ac:	d17a      	bne.n	80074a4 <_strtod_l+0xab4>
 80073ae:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80073b2:	ec49 8b10 	vmov	d0, r8, r9
 80073b6:	910a      	str	r1, [sp, #40]	; 0x28
 80073b8:	f7ff f9c2 	bl	8006740 <__ulp>
 80073bc:	ec49 8b1e 	vmov	d14, r8, r9
 80073c0:	4860      	ldr	r0, [pc, #384]	; (8007544 <_strtod_l+0xb54>)
 80073c2:	eea0 eb0c 	vfma.f64	d14, d0, d12
 80073c6:	ee1e 3a90 	vmov	r3, s29
 80073ca:	4a60      	ldr	r2, [pc, #384]	; (800754c <_strtod_l+0xb5c>)
 80073cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073ce:	4018      	ands	r0, r3
 80073d0:	4290      	cmp	r0, r2
 80073d2:	ec59 8b1e 	vmov	r8, r9, d14
 80073d6:	d93c      	bls.n	8007452 <_strtod_l+0xa62>
 80073d8:	ee18 2a90 	vmov	r2, s17
 80073dc:	4b5a      	ldr	r3, [pc, #360]	; (8007548 <_strtod_l+0xb58>)
 80073de:	429a      	cmp	r2, r3
 80073e0:	d104      	bne.n	80073ec <_strtod_l+0x9fc>
 80073e2:	ee18 3a10 	vmov	r3, s16
 80073e6:	3301      	adds	r3, #1
 80073e8:	f43f ad40 	beq.w	8006e6c <_strtod_l+0x47c>
 80073ec:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8007548 <_strtod_l+0xb58>
 80073f0:	f04f 38ff 	mov.w	r8, #4294967295
 80073f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80073f6:	4620      	mov	r0, r4
 80073f8:	f7fe fe76 	bl	80060e8 <_Bfree>
 80073fc:	4639      	mov	r1, r7
 80073fe:	4620      	mov	r0, r4
 8007400:	f7fe fe72 	bl	80060e8 <_Bfree>
 8007404:	4631      	mov	r1, r6
 8007406:	4620      	mov	r0, r4
 8007408:	f7fe fe6e 	bl	80060e8 <_Bfree>
 800740c:	4629      	mov	r1, r5
 800740e:	4620      	mov	r0, r4
 8007410:	f7fe fe6a 	bl	80060e8 <_Bfree>
 8007414:	e609      	b.n	800702a <_strtod_l+0x63a>
 8007416:	f1b8 0f01 	cmp.w	r8, #1
 800741a:	d103      	bne.n	8007424 <_strtod_l+0xa34>
 800741c:	f1b9 0f00 	cmp.w	r9, #0
 8007420:	f43f ad93 	beq.w	8006f4a <_strtod_l+0x55a>
 8007424:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8007428:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800742c:	e7b6      	b.n	800739c <_strtod_l+0x9ac>
 800742e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8007432:	ee20 db0d 	vmul.f64	d13, d0, d13
 8007436:	f1ba 0f00 	cmp.w	sl, #0
 800743a:	d0ad      	beq.n	8007398 <_strtod_l+0x9a8>
 800743c:	eeb0 cb4d 	vmov.f64	d12, d13
 8007440:	e7ac      	b.n	800739c <_strtod_l+0x9ac>
 8007442:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8007446:	eeb0 db4c 	vmov.f64	d13, d12
 800744a:	e7a7      	b.n	800739c <_strtod_l+0x9ac>
 800744c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8007450:	e7a4      	b.n	800739c <_strtod_l+0x9ac>
 8007452:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007456:	9b05      	ldr	r3, [sp, #20]
 8007458:	46cb      	mov	fp, r9
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1ca      	bne.n	80073f4 <_strtod_l+0xa04>
 800745e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007462:	0d1b      	lsrs	r3, r3, #20
 8007464:	051b      	lsls	r3, r3, #20
 8007466:	4299      	cmp	r1, r3
 8007468:	d1c4      	bne.n	80073f4 <_strtod_l+0xa04>
 800746a:	ec51 0b1d 	vmov	r0, r1, d13
 800746e:	f7f9 f913 	bl	8000698 <__aeabi_d2lz>
 8007472:	f7f9 f8cb 	bl	800060c <__aeabi_l2d>
 8007476:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800747a:	ec41 0b17 	vmov	d7, r0, r1
 800747e:	ea4b 0b08 	orr.w	fp, fp, r8
 8007482:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8007486:	ee3d db47 	vsub.f64	d13, d13, d7
 800748a:	d03c      	beq.n	8007506 <_strtod_l+0xb16>
 800748c:	eeb4 dbca 	vcmpe.f64	d13, d10
 8007490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007494:	f53f acf4 	bmi.w	8006e80 <_strtod_l+0x490>
 8007498:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800749c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a0:	dda8      	ble.n	80073f4 <_strtod_l+0xa04>
 80074a2:	e4ed      	b.n	8006e80 <_strtod_l+0x490>
 80074a4:	9805      	ldr	r0, [sp, #20]
 80074a6:	b1f0      	cbz	r0, 80074e6 <_strtod_l+0xaf6>
 80074a8:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80074ac:	d81b      	bhi.n	80074e6 <_strtod_l+0xaf6>
 80074ae:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007538 <_strtod_l+0xb48>
 80074b2:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80074b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ba:	d811      	bhi.n	80074e0 <_strtod_l+0xaf0>
 80074bc:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80074c0:	ee1d 3a10 	vmov	r3, s26
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	bf38      	it	cc
 80074c8:	2301      	movcc	r3, #1
 80074ca:	ee0d 3a10 	vmov	s26, r3
 80074ce:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80074d2:	f1ba 0f00 	cmp.w	sl, #0
 80074d6:	d113      	bne.n	8007500 <_strtod_l+0xb10>
 80074d8:	eeb1 7b4d 	vneg.f64	d7, d13
 80074dc:	ec53 2b17 	vmov	r2, r3, d7
 80074e0:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80074e4:	1a43      	subs	r3, r0, r1
 80074e6:	eeb0 0b48 	vmov.f64	d0, d8
 80074ea:	ec43 2b1c 	vmov	d12, r2, r3
 80074ee:	910a      	str	r1, [sp, #40]	; 0x28
 80074f0:	f7ff f926 	bl	8006740 <__ulp>
 80074f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074f6:	eeac 8b00 	vfma.f64	d8, d12, d0
 80074fa:	ec59 8b18 	vmov	r8, r9, d8
 80074fe:	e7aa      	b.n	8007456 <_strtod_l+0xa66>
 8007500:	eeb0 7b4d 	vmov.f64	d7, d13
 8007504:	e7ea      	b.n	80074dc <_strtod_l+0xaec>
 8007506:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800750a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750e:	f57f af71 	bpl.w	80073f4 <_strtod_l+0xa04>
 8007512:	e4b5      	b.n	8006e80 <_strtod_l+0x490>
 8007514:	2300      	movs	r3, #0
 8007516:	9308      	str	r3, [sp, #32]
 8007518:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800751a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	f7ff baa6 	b.w	8006a6e <_strtod_l+0x7e>
 8007522:	2a65      	cmp	r2, #101	; 0x65
 8007524:	f43f aba2 	beq.w	8006c6c <_strtod_l+0x27c>
 8007528:	2a45      	cmp	r2, #69	; 0x45
 800752a:	f43f ab9f 	beq.w	8006c6c <_strtod_l+0x27c>
 800752e:	2101      	movs	r1, #1
 8007530:	f7ff bbd8 	b.w	8006ce4 <_strtod_l+0x2f4>
 8007534:	f3af 8000 	nop.w
 8007538:	ffc00000 	.word	0xffc00000
 800753c:	41dfffff 	.word	0x41dfffff
 8007540:	000fffff 	.word	0x000fffff
 8007544:	7ff00000 	.word	0x7ff00000
 8007548:	7fefffff 	.word	0x7fefffff
 800754c:	7c9fffff 	.word	0x7c9fffff
 8007550:	7fe00000 	.word	0x7fe00000

08007554 <_strtod_r>:
 8007554:	4b01      	ldr	r3, [pc, #4]	; (800755c <_strtod_r+0x8>)
 8007556:	f7ff ba4b 	b.w	80069f0 <_strtod_l>
 800755a:	bf00      	nop
 800755c:	20000080 	.word	0x20000080

08007560 <_strtol_l.constprop.0>:
 8007560:	2b01      	cmp	r3, #1
 8007562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007566:	d001      	beq.n	800756c <_strtol_l.constprop.0+0xc>
 8007568:	2b24      	cmp	r3, #36	; 0x24
 800756a:	d906      	bls.n	800757a <_strtol_l.constprop.0+0x1a>
 800756c:	f7fd fe52 	bl	8005214 <__errno>
 8007570:	2316      	movs	r3, #22
 8007572:	6003      	str	r3, [r0, #0]
 8007574:	2000      	movs	r0, #0
 8007576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800757a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007660 <_strtol_l.constprop.0+0x100>
 800757e:	460d      	mov	r5, r1
 8007580:	462e      	mov	r6, r5
 8007582:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007586:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800758a:	f017 0708 	ands.w	r7, r7, #8
 800758e:	d1f7      	bne.n	8007580 <_strtol_l.constprop.0+0x20>
 8007590:	2c2d      	cmp	r4, #45	; 0x2d
 8007592:	d132      	bne.n	80075fa <_strtol_l.constprop.0+0x9a>
 8007594:	782c      	ldrb	r4, [r5, #0]
 8007596:	2701      	movs	r7, #1
 8007598:	1cb5      	adds	r5, r6, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d05b      	beq.n	8007656 <_strtol_l.constprop.0+0xf6>
 800759e:	2b10      	cmp	r3, #16
 80075a0:	d109      	bne.n	80075b6 <_strtol_l.constprop.0+0x56>
 80075a2:	2c30      	cmp	r4, #48	; 0x30
 80075a4:	d107      	bne.n	80075b6 <_strtol_l.constprop.0+0x56>
 80075a6:	782c      	ldrb	r4, [r5, #0]
 80075a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80075ac:	2c58      	cmp	r4, #88	; 0x58
 80075ae:	d14d      	bne.n	800764c <_strtol_l.constprop.0+0xec>
 80075b0:	786c      	ldrb	r4, [r5, #1]
 80075b2:	2310      	movs	r3, #16
 80075b4:	3502      	adds	r5, #2
 80075b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80075ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80075be:	f04f 0e00 	mov.w	lr, #0
 80075c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80075c6:	4676      	mov	r6, lr
 80075c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80075cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80075d0:	f1bc 0f09 	cmp.w	ip, #9
 80075d4:	d816      	bhi.n	8007604 <_strtol_l.constprop.0+0xa4>
 80075d6:	4664      	mov	r4, ip
 80075d8:	42a3      	cmp	r3, r4
 80075da:	dd24      	ble.n	8007626 <_strtol_l.constprop.0+0xc6>
 80075dc:	f1be 3fff 	cmp.w	lr, #4294967295
 80075e0:	d008      	beq.n	80075f4 <_strtol_l.constprop.0+0x94>
 80075e2:	45b1      	cmp	r9, r6
 80075e4:	d31c      	bcc.n	8007620 <_strtol_l.constprop.0+0xc0>
 80075e6:	d101      	bne.n	80075ec <_strtol_l.constprop.0+0x8c>
 80075e8:	45a2      	cmp	sl, r4
 80075ea:	db19      	blt.n	8007620 <_strtol_l.constprop.0+0xc0>
 80075ec:	fb06 4603 	mla	r6, r6, r3, r4
 80075f0:	f04f 0e01 	mov.w	lr, #1
 80075f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075f8:	e7e8      	b.n	80075cc <_strtol_l.constprop.0+0x6c>
 80075fa:	2c2b      	cmp	r4, #43	; 0x2b
 80075fc:	bf04      	itt	eq
 80075fe:	782c      	ldrbeq	r4, [r5, #0]
 8007600:	1cb5      	addeq	r5, r6, #2
 8007602:	e7ca      	b.n	800759a <_strtol_l.constprop.0+0x3a>
 8007604:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007608:	f1bc 0f19 	cmp.w	ip, #25
 800760c:	d801      	bhi.n	8007612 <_strtol_l.constprop.0+0xb2>
 800760e:	3c37      	subs	r4, #55	; 0x37
 8007610:	e7e2      	b.n	80075d8 <_strtol_l.constprop.0+0x78>
 8007612:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007616:	f1bc 0f19 	cmp.w	ip, #25
 800761a:	d804      	bhi.n	8007626 <_strtol_l.constprop.0+0xc6>
 800761c:	3c57      	subs	r4, #87	; 0x57
 800761e:	e7db      	b.n	80075d8 <_strtol_l.constprop.0+0x78>
 8007620:	f04f 3eff 	mov.w	lr, #4294967295
 8007624:	e7e6      	b.n	80075f4 <_strtol_l.constprop.0+0x94>
 8007626:	f1be 3fff 	cmp.w	lr, #4294967295
 800762a:	d105      	bne.n	8007638 <_strtol_l.constprop.0+0xd8>
 800762c:	2322      	movs	r3, #34	; 0x22
 800762e:	6003      	str	r3, [r0, #0]
 8007630:	4646      	mov	r6, r8
 8007632:	b942      	cbnz	r2, 8007646 <_strtol_l.constprop.0+0xe6>
 8007634:	4630      	mov	r0, r6
 8007636:	e79e      	b.n	8007576 <_strtol_l.constprop.0+0x16>
 8007638:	b107      	cbz	r7, 800763c <_strtol_l.constprop.0+0xdc>
 800763a:	4276      	negs	r6, r6
 800763c:	2a00      	cmp	r2, #0
 800763e:	d0f9      	beq.n	8007634 <_strtol_l.constprop.0+0xd4>
 8007640:	f1be 0f00 	cmp.w	lr, #0
 8007644:	d000      	beq.n	8007648 <_strtol_l.constprop.0+0xe8>
 8007646:	1e69      	subs	r1, r5, #1
 8007648:	6011      	str	r1, [r2, #0]
 800764a:	e7f3      	b.n	8007634 <_strtol_l.constprop.0+0xd4>
 800764c:	2430      	movs	r4, #48	; 0x30
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1b1      	bne.n	80075b6 <_strtol_l.constprop.0+0x56>
 8007652:	2308      	movs	r3, #8
 8007654:	e7af      	b.n	80075b6 <_strtol_l.constprop.0+0x56>
 8007656:	2c30      	cmp	r4, #48	; 0x30
 8007658:	d0a5      	beq.n	80075a6 <_strtol_l.constprop.0+0x46>
 800765a:	230a      	movs	r3, #10
 800765c:	e7ab      	b.n	80075b6 <_strtol_l.constprop.0+0x56>
 800765e:	bf00      	nop
 8007660:	08008ae9 	.word	0x08008ae9

08007664 <_strtol_r>:
 8007664:	f7ff bf7c 	b.w	8007560 <_strtol_l.constprop.0>

08007668 <__ssputs_r>:
 8007668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800766c:	688e      	ldr	r6, [r1, #8]
 800766e:	461f      	mov	r7, r3
 8007670:	42be      	cmp	r6, r7
 8007672:	680b      	ldr	r3, [r1, #0]
 8007674:	4682      	mov	sl, r0
 8007676:	460c      	mov	r4, r1
 8007678:	4690      	mov	r8, r2
 800767a:	d82c      	bhi.n	80076d6 <__ssputs_r+0x6e>
 800767c:	898a      	ldrh	r2, [r1, #12]
 800767e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007682:	d026      	beq.n	80076d2 <__ssputs_r+0x6a>
 8007684:	6965      	ldr	r5, [r4, #20]
 8007686:	6909      	ldr	r1, [r1, #16]
 8007688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800768c:	eba3 0901 	sub.w	r9, r3, r1
 8007690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007694:	1c7b      	adds	r3, r7, #1
 8007696:	444b      	add	r3, r9
 8007698:	106d      	asrs	r5, r5, #1
 800769a:	429d      	cmp	r5, r3
 800769c:	bf38      	it	cc
 800769e:	461d      	movcc	r5, r3
 80076a0:	0553      	lsls	r3, r2, #21
 80076a2:	d527      	bpl.n	80076f4 <__ssputs_r+0x8c>
 80076a4:	4629      	mov	r1, r5
 80076a6:	f7fe fc53 	bl	8005f50 <_malloc_r>
 80076aa:	4606      	mov	r6, r0
 80076ac:	b360      	cbz	r0, 8007708 <__ssputs_r+0xa0>
 80076ae:	6921      	ldr	r1, [r4, #16]
 80076b0:	464a      	mov	r2, r9
 80076b2:	f000 fa1b 	bl	8007aec <memcpy>
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c0:	81a3      	strh	r3, [r4, #12]
 80076c2:	6126      	str	r6, [r4, #16]
 80076c4:	6165      	str	r5, [r4, #20]
 80076c6:	444e      	add	r6, r9
 80076c8:	eba5 0509 	sub.w	r5, r5, r9
 80076cc:	6026      	str	r6, [r4, #0]
 80076ce:	60a5      	str	r5, [r4, #8]
 80076d0:	463e      	mov	r6, r7
 80076d2:	42be      	cmp	r6, r7
 80076d4:	d900      	bls.n	80076d8 <__ssputs_r+0x70>
 80076d6:	463e      	mov	r6, r7
 80076d8:	6820      	ldr	r0, [r4, #0]
 80076da:	4632      	mov	r2, r6
 80076dc:	4641      	mov	r1, r8
 80076de:	f000 f9c9 	bl	8007a74 <memmove>
 80076e2:	68a3      	ldr	r3, [r4, #8]
 80076e4:	1b9b      	subs	r3, r3, r6
 80076e6:	60a3      	str	r3, [r4, #8]
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	4433      	add	r3, r6
 80076ec:	6023      	str	r3, [r4, #0]
 80076ee:	2000      	movs	r0, #0
 80076f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f4:	462a      	mov	r2, r5
 80076f6:	f000 fdac 	bl	8008252 <_realloc_r>
 80076fa:	4606      	mov	r6, r0
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d1e0      	bne.n	80076c2 <__ssputs_r+0x5a>
 8007700:	6921      	ldr	r1, [r4, #16]
 8007702:	4650      	mov	r0, sl
 8007704:	f7fe fbb0 	bl	8005e68 <_free_r>
 8007708:	230c      	movs	r3, #12
 800770a:	f8ca 3000 	str.w	r3, [sl]
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007714:	81a3      	strh	r3, [r4, #12]
 8007716:	f04f 30ff 	mov.w	r0, #4294967295
 800771a:	e7e9      	b.n	80076f0 <__ssputs_r+0x88>

0800771c <_svfiprintf_r>:
 800771c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007720:	4698      	mov	r8, r3
 8007722:	898b      	ldrh	r3, [r1, #12]
 8007724:	061b      	lsls	r3, r3, #24
 8007726:	b09d      	sub	sp, #116	; 0x74
 8007728:	4607      	mov	r7, r0
 800772a:	460d      	mov	r5, r1
 800772c:	4614      	mov	r4, r2
 800772e:	d50e      	bpl.n	800774e <_svfiprintf_r+0x32>
 8007730:	690b      	ldr	r3, [r1, #16]
 8007732:	b963      	cbnz	r3, 800774e <_svfiprintf_r+0x32>
 8007734:	2140      	movs	r1, #64	; 0x40
 8007736:	f7fe fc0b 	bl	8005f50 <_malloc_r>
 800773a:	6028      	str	r0, [r5, #0]
 800773c:	6128      	str	r0, [r5, #16]
 800773e:	b920      	cbnz	r0, 800774a <_svfiprintf_r+0x2e>
 8007740:	230c      	movs	r3, #12
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	f04f 30ff 	mov.w	r0, #4294967295
 8007748:	e0d0      	b.n	80078ec <_svfiprintf_r+0x1d0>
 800774a:	2340      	movs	r3, #64	; 0x40
 800774c:	616b      	str	r3, [r5, #20]
 800774e:	2300      	movs	r3, #0
 8007750:	9309      	str	r3, [sp, #36]	; 0x24
 8007752:	2320      	movs	r3, #32
 8007754:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007758:	f8cd 800c 	str.w	r8, [sp, #12]
 800775c:	2330      	movs	r3, #48	; 0x30
 800775e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007904 <_svfiprintf_r+0x1e8>
 8007762:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007766:	f04f 0901 	mov.w	r9, #1
 800776a:	4623      	mov	r3, r4
 800776c:	469a      	mov	sl, r3
 800776e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007772:	b10a      	cbz	r2, 8007778 <_svfiprintf_r+0x5c>
 8007774:	2a25      	cmp	r2, #37	; 0x25
 8007776:	d1f9      	bne.n	800776c <_svfiprintf_r+0x50>
 8007778:	ebba 0b04 	subs.w	fp, sl, r4
 800777c:	d00b      	beq.n	8007796 <_svfiprintf_r+0x7a>
 800777e:	465b      	mov	r3, fp
 8007780:	4622      	mov	r2, r4
 8007782:	4629      	mov	r1, r5
 8007784:	4638      	mov	r0, r7
 8007786:	f7ff ff6f 	bl	8007668 <__ssputs_r>
 800778a:	3001      	adds	r0, #1
 800778c:	f000 80a9 	beq.w	80078e2 <_svfiprintf_r+0x1c6>
 8007790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007792:	445a      	add	r2, fp
 8007794:	9209      	str	r2, [sp, #36]	; 0x24
 8007796:	f89a 3000 	ldrb.w	r3, [sl]
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 80a1 	beq.w	80078e2 <_svfiprintf_r+0x1c6>
 80077a0:	2300      	movs	r3, #0
 80077a2:	f04f 32ff 	mov.w	r2, #4294967295
 80077a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077aa:	f10a 0a01 	add.w	sl, sl, #1
 80077ae:	9304      	str	r3, [sp, #16]
 80077b0:	9307      	str	r3, [sp, #28]
 80077b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077b6:	931a      	str	r3, [sp, #104]	; 0x68
 80077b8:	4654      	mov	r4, sl
 80077ba:	2205      	movs	r2, #5
 80077bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c0:	4850      	ldr	r0, [pc, #320]	; (8007904 <_svfiprintf_r+0x1e8>)
 80077c2:	f7f8 fd3d 	bl	8000240 <memchr>
 80077c6:	9a04      	ldr	r2, [sp, #16]
 80077c8:	b9d8      	cbnz	r0, 8007802 <_svfiprintf_r+0xe6>
 80077ca:	06d0      	lsls	r0, r2, #27
 80077cc:	bf44      	itt	mi
 80077ce:	2320      	movmi	r3, #32
 80077d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077d4:	0711      	lsls	r1, r2, #28
 80077d6:	bf44      	itt	mi
 80077d8:	232b      	movmi	r3, #43	; 0x2b
 80077da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077de:	f89a 3000 	ldrb.w	r3, [sl]
 80077e2:	2b2a      	cmp	r3, #42	; 0x2a
 80077e4:	d015      	beq.n	8007812 <_svfiprintf_r+0xf6>
 80077e6:	9a07      	ldr	r2, [sp, #28]
 80077e8:	4654      	mov	r4, sl
 80077ea:	2000      	movs	r0, #0
 80077ec:	f04f 0c0a 	mov.w	ip, #10
 80077f0:	4621      	mov	r1, r4
 80077f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077f6:	3b30      	subs	r3, #48	; 0x30
 80077f8:	2b09      	cmp	r3, #9
 80077fa:	d94d      	bls.n	8007898 <_svfiprintf_r+0x17c>
 80077fc:	b1b0      	cbz	r0, 800782c <_svfiprintf_r+0x110>
 80077fe:	9207      	str	r2, [sp, #28]
 8007800:	e014      	b.n	800782c <_svfiprintf_r+0x110>
 8007802:	eba0 0308 	sub.w	r3, r0, r8
 8007806:	fa09 f303 	lsl.w	r3, r9, r3
 800780a:	4313      	orrs	r3, r2
 800780c:	9304      	str	r3, [sp, #16]
 800780e:	46a2      	mov	sl, r4
 8007810:	e7d2      	b.n	80077b8 <_svfiprintf_r+0x9c>
 8007812:	9b03      	ldr	r3, [sp, #12]
 8007814:	1d19      	adds	r1, r3, #4
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	9103      	str	r1, [sp, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	bfbb      	ittet	lt
 800781e:	425b      	neglt	r3, r3
 8007820:	f042 0202 	orrlt.w	r2, r2, #2
 8007824:	9307      	strge	r3, [sp, #28]
 8007826:	9307      	strlt	r3, [sp, #28]
 8007828:	bfb8      	it	lt
 800782a:	9204      	strlt	r2, [sp, #16]
 800782c:	7823      	ldrb	r3, [r4, #0]
 800782e:	2b2e      	cmp	r3, #46	; 0x2e
 8007830:	d10c      	bne.n	800784c <_svfiprintf_r+0x130>
 8007832:	7863      	ldrb	r3, [r4, #1]
 8007834:	2b2a      	cmp	r3, #42	; 0x2a
 8007836:	d134      	bne.n	80078a2 <_svfiprintf_r+0x186>
 8007838:	9b03      	ldr	r3, [sp, #12]
 800783a:	1d1a      	adds	r2, r3, #4
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	9203      	str	r2, [sp, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	bfb8      	it	lt
 8007844:	f04f 33ff 	movlt.w	r3, #4294967295
 8007848:	3402      	adds	r4, #2
 800784a:	9305      	str	r3, [sp, #20]
 800784c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007914 <_svfiprintf_r+0x1f8>
 8007850:	7821      	ldrb	r1, [r4, #0]
 8007852:	2203      	movs	r2, #3
 8007854:	4650      	mov	r0, sl
 8007856:	f7f8 fcf3 	bl	8000240 <memchr>
 800785a:	b138      	cbz	r0, 800786c <_svfiprintf_r+0x150>
 800785c:	9b04      	ldr	r3, [sp, #16]
 800785e:	eba0 000a 	sub.w	r0, r0, sl
 8007862:	2240      	movs	r2, #64	; 0x40
 8007864:	4082      	lsls	r2, r0
 8007866:	4313      	orrs	r3, r2
 8007868:	3401      	adds	r4, #1
 800786a:	9304      	str	r3, [sp, #16]
 800786c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007870:	4825      	ldr	r0, [pc, #148]	; (8007908 <_svfiprintf_r+0x1ec>)
 8007872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007876:	2206      	movs	r2, #6
 8007878:	f7f8 fce2 	bl	8000240 <memchr>
 800787c:	2800      	cmp	r0, #0
 800787e:	d038      	beq.n	80078f2 <_svfiprintf_r+0x1d6>
 8007880:	4b22      	ldr	r3, [pc, #136]	; (800790c <_svfiprintf_r+0x1f0>)
 8007882:	bb1b      	cbnz	r3, 80078cc <_svfiprintf_r+0x1b0>
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	3307      	adds	r3, #7
 8007888:	f023 0307 	bic.w	r3, r3, #7
 800788c:	3308      	adds	r3, #8
 800788e:	9303      	str	r3, [sp, #12]
 8007890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007892:	4433      	add	r3, r6
 8007894:	9309      	str	r3, [sp, #36]	; 0x24
 8007896:	e768      	b.n	800776a <_svfiprintf_r+0x4e>
 8007898:	fb0c 3202 	mla	r2, ip, r2, r3
 800789c:	460c      	mov	r4, r1
 800789e:	2001      	movs	r0, #1
 80078a0:	e7a6      	b.n	80077f0 <_svfiprintf_r+0xd4>
 80078a2:	2300      	movs	r3, #0
 80078a4:	3401      	adds	r4, #1
 80078a6:	9305      	str	r3, [sp, #20]
 80078a8:	4619      	mov	r1, r3
 80078aa:	f04f 0c0a 	mov.w	ip, #10
 80078ae:	4620      	mov	r0, r4
 80078b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078b4:	3a30      	subs	r2, #48	; 0x30
 80078b6:	2a09      	cmp	r2, #9
 80078b8:	d903      	bls.n	80078c2 <_svfiprintf_r+0x1a6>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0c6      	beq.n	800784c <_svfiprintf_r+0x130>
 80078be:	9105      	str	r1, [sp, #20]
 80078c0:	e7c4      	b.n	800784c <_svfiprintf_r+0x130>
 80078c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80078c6:	4604      	mov	r4, r0
 80078c8:	2301      	movs	r3, #1
 80078ca:	e7f0      	b.n	80078ae <_svfiprintf_r+0x192>
 80078cc:	ab03      	add	r3, sp, #12
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	462a      	mov	r2, r5
 80078d2:	4b0f      	ldr	r3, [pc, #60]	; (8007910 <_svfiprintf_r+0x1f4>)
 80078d4:	a904      	add	r1, sp, #16
 80078d6:	4638      	mov	r0, r7
 80078d8:	f7fc fd76 	bl	80043c8 <_printf_float>
 80078dc:	1c42      	adds	r2, r0, #1
 80078de:	4606      	mov	r6, r0
 80078e0:	d1d6      	bne.n	8007890 <_svfiprintf_r+0x174>
 80078e2:	89ab      	ldrh	r3, [r5, #12]
 80078e4:	065b      	lsls	r3, r3, #25
 80078e6:	f53f af2d 	bmi.w	8007744 <_svfiprintf_r+0x28>
 80078ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078ec:	b01d      	add	sp, #116	; 0x74
 80078ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f2:	ab03      	add	r3, sp, #12
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	462a      	mov	r2, r5
 80078f8:	4b05      	ldr	r3, [pc, #20]	; (8007910 <_svfiprintf_r+0x1f4>)
 80078fa:	a904      	add	r1, sp, #16
 80078fc:	4638      	mov	r0, r7
 80078fe:	f7fc ffeb 	bl	80048d8 <_printf_i>
 8007902:	e7eb      	b.n	80078dc <_svfiprintf_r+0x1c0>
 8007904:	08008be9 	.word	0x08008be9
 8007908:	08008bf3 	.word	0x08008bf3
 800790c:	080043c9 	.word	0x080043c9
 8007910:	08007669 	.word	0x08007669
 8007914:	08008bef 	.word	0x08008bef

08007918 <__sflush_r>:
 8007918:	898a      	ldrh	r2, [r1, #12]
 800791a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800791e:	4605      	mov	r5, r0
 8007920:	0710      	lsls	r0, r2, #28
 8007922:	460c      	mov	r4, r1
 8007924:	d458      	bmi.n	80079d8 <__sflush_r+0xc0>
 8007926:	684b      	ldr	r3, [r1, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	dc05      	bgt.n	8007938 <__sflush_r+0x20>
 800792c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800792e:	2b00      	cmp	r3, #0
 8007930:	dc02      	bgt.n	8007938 <__sflush_r+0x20>
 8007932:	2000      	movs	r0, #0
 8007934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800793a:	2e00      	cmp	r6, #0
 800793c:	d0f9      	beq.n	8007932 <__sflush_r+0x1a>
 800793e:	2300      	movs	r3, #0
 8007940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007944:	682f      	ldr	r7, [r5, #0]
 8007946:	6a21      	ldr	r1, [r4, #32]
 8007948:	602b      	str	r3, [r5, #0]
 800794a:	d032      	beq.n	80079b2 <__sflush_r+0x9a>
 800794c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	075a      	lsls	r2, r3, #29
 8007952:	d505      	bpl.n	8007960 <__sflush_r+0x48>
 8007954:	6863      	ldr	r3, [r4, #4]
 8007956:	1ac0      	subs	r0, r0, r3
 8007958:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800795a:	b10b      	cbz	r3, 8007960 <__sflush_r+0x48>
 800795c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800795e:	1ac0      	subs	r0, r0, r3
 8007960:	2300      	movs	r3, #0
 8007962:	4602      	mov	r2, r0
 8007964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007966:	6a21      	ldr	r1, [r4, #32]
 8007968:	4628      	mov	r0, r5
 800796a:	47b0      	blx	r6
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	d106      	bne.n	8007980 <__sflush_r+0x68>
 8007972:	6829      	ldr	r1, [r5, #0]
 8007974:	291d      	cmp	r1, #29
 8007976:	d82b      	bhi.n	80079d0 <__sflush_r+0xb8>
 8007978:	4a29      	ldr	r2, [pc, #164]	; (8007a20 <__sflush_r+0x108>)
 800797a:	410a      	asrs	r2, r1
 800797c:	07d6      	lsls	r6, r2, #31
 800797e:	d427      	bmi.n	80079d0 <__sflush_r+0xb8>
 8007980:	2200      	movs	r2, #0
 8007982:	6062      	str	r2, [r4, #4]
 8007984:	04d9      	lsls	r1, r3, #19
 8007986:	6922      	ldr	r2, [r4, #16]
 8007988:	6022      	str	r2, [r4, #0]
 800798a:	d504      	bpl.n	8007996 <__sflush_r+0x7e>
 800798c:	1c42      	adds	r2, r0, #1
 800798e:	d101      	bne.n	8007994 <__sflush_r+0x7c>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	b903      	cbnz	r3, 8007996 <__sflush_r+0x7e>
 8007994:	6560      	str	r0, [r4, #84]	; 0x54
 8007996:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007998:	602f      	str	r7, [r5, #0]
 800799a:	2900      	cmp	r1, #0
 800799c:	d0c9      	beq.n	8007932 <__sflush_r+0x1a>
 800799e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079a2:	4299      	cmp	r1, r3
 80079a4:	d002      	beq.n	80079ac <__sflush_r+0x94>
 80079a6:	4628      	mov	r0, r5
 80079a8:	f7fe fa5e 	bl	8005e68 <_free_r>
 80079ac:	2000      	movs	r0, #0
 80079ae:	6360      	str	r0, [r4, #52]	; 0x34
 80079b0:	e7c0      	b.n	8007934 <__sflush_r+0x1c>
 80079b2:	2301      	movs	r3, #1
 80079b4:	4628      	mov	r0, r5
 80079b6:	47b0      	blx	r6
 80079b8:	1c41      	adds	r1, r0, #1
 80079ba:	d1c8      	bne.n	800794e <__sflush_r+0x36>
 80079bc:	682b      	ldr	r3, [r5, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d0c5      	beq.n	800794e <__sflush_r+0x36>
 80079c2:	2b1d      	cmp	r3, #29
 80079c4:	d001      	beq.n	80079ca <__sflush_r+0xb2>
 80079c6:	2b16      	cmp	r3, #22
 80079c8:	d101      	bne.n	80079ce <__sflush_r+0xb6>
 80079ca:	602f      	str	r7, [r5, #0]
 80079cc:	e7b1      	b.n	8007932 <__sflush_r+0x1a>
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079d4:	81a3      	strh	r3, [r4, #12]
 80079d6:	e7ad      	b.n	8007934 <__sflush_r+0x1c>
 80079d8:	690f      	ldr	r7, [r1, #16]
 80079da:	2f00      	cmp	r7, #0
 80079dc:	d0a9      	beq.n	8007932 <__sflush_r+0x1a>
 80079de:	0793      	lsls	r3, r2, #30
 80079e0:	680e      	ldr	r6, [r1, #0]
 80079e2:	bf08      	it	eq
 80079e4:	694b      	ldreq	r3, [r1, #20]
 80079e6:	600f      	str	r7, [r1, #0]
 80079e8:	bf18      	it	ne
 80079ea:	2300      	movne	r3, #0
 80079ec:	eba6 0807 	sub.w	r8, r6, r7
 80079f0:	608b      	str	r3, [r1, #8]
 80079f2:	f1b8 0f00 	cmp.w	r8, #0
 80079f6:	dd9c      	ble.n	8007932 <__sflush_r+0x1a>
 80079f8:	6a21      	ldr	r1, [r4, #32]
 80079fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079fc:	4643      	mov	r3, r8
 80079fe:	463a      	mov	r2, r7
 8007a00:	4628      	mov	r0, r5
 8007a02:	47b0      	blx	r6
 8007a04:	2800      	cmp	r0, #0
 8007a06:	dc06      	bgt.n	8007a16 <__sflush_r+0xfe>
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a0e:	81a3      	strh	r3, [r4, #12]
 8007a10:	f04f 30ff 	mov.w	r0, #4294967295
 8007a14:	e78e      	b.n	8007934 <__sflush_r+0x1c>
 8007a16:	4407      	add	r7, r0
 8007a18:	eba8 0800 	sub.w	r8, r8, r0
 8007a1c:	e7e9      	b.n	80079f2 <__sflush_r+0xda>
 8007a1e:	bf00      	nop
 8007a20:	dfbffffe 	.word	0xdfbffffe

08007a24 <_fflush_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	690b      	ldr	r3, [r1, #16]
 8007a28:	4605      	mov	r5, r0
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	b913      	cbnz	r3, 8007a34 <_fflush_r+0x10>
 8007a2e:	2500      	movs	r5, #0
 8007a30:	4628      	mov	r0, r5
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	b118      	cbz	r0, 8007a3e <_fflush_r+0x1a>
 8007a36:	6a03      	ldr	r3, [r0, #32]
 8007a38:	b90b      	cbnz	r3, 8007a3e <_fflush_r+0x1a>
 8007a3a:	f7fd faff 	bl	800503c <__sinit>
 8007a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0f3      	beq.n	8007a2e <_fflush_r+0xa>
 8007a46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a48:	07d0      	lsls	r0, r2, #31
 8007a4a:	d404      	bmi.n	8007a56 <_fflush_r+0x32>
 8007a4c:	0599      	lsls	r1, r3, #22
 8007a4e:	d402      	bmi.n	8007a56 <_fflush_r+0x32>
 8007a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a52:	f7fd fc0a 	bl	800526a <__retarget_lock_acquire_recursive>
 8007a56:	4628      	mov	r0, r5
 8007a58:	4621      	mov	r1, r4
 8007a5a:	f7ff ff5d 	bl	8007918 <__sflush_r>
 8007a5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a60:	07da      	lsls	r2, r3, #31
 8007a62:	4605      	mov	r5, r0
 8007a64:	d4e4      	bmi.n	8007a30 <_fflush_r+0xc>
 8007a66:	89a3      	ldrh	r3, [r4, #12]
 8007a68:	059b      	lsls	r3, r3, #22
 8007a6a:	d4e1      	bmi.n	8007a30 <_fflush_r+0xc>
 8007a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a6e:	f7fd fbfd 	bl	800526c <__retarget_lock_release_recursive>
 8007a72:	e7dd      	b.n	8007a30 <_fflush_r+0xc>

08007a74 <memmove>:
 8007a74:	4288      	cmp	r0, r1
 8007a76:	b510      	push	{r4, lr}
 8007a78:	eb01 0402 	add.w	r4, r1, r2
 8007a7c:	d902      	bls.n	8007a84 <memmove+0x10>
 8007a7e:	4284      	cmp	r4, r0
 8007a80:	4623      	mov	r3, r4
 8007a82:	d807      	bhi.n	8007a94 <memmove+0x20>
 8007a84:	1e43      	subs	r3, r0, #1
 8007a86:	42a1      	cmp	r1, r4
 8007a88:	d008      	beq.n	8007a9c <memmove+0x28>
 8007a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a92:	e7f8      	b.n	8007a86 <memmove+0x12>
 8007a94:	4402      	add	r2, r0
 8007a96:	4601      	mov	r1, r0
 8007a98:	428a      	cmp	r2, r1
 8007a9a:	d100      	bne.n	8007a9e <memmove+0x2a>
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007aa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007aa6:	e7f7      	b.n	8007a98 <memmove+0x24>

08007aa8 <strncmp>:
 8007aa8:	b510      	push	{r4, lr}
 8007aaa:	b16a      	cbz	r2, 8007ac8 <strncmp+0x20>
 8007aac:	3901      	subs	r1, #1
 8007aae:	1884      	adds	r4, r0, r2
 8007ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ab4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d103      	bne.n	8007ac4 <strncmp+0x1c>
 8007abc:	42a0      	cmp	r0, r4
 8007abe:	d001      	beq.n	8007ac4 <strncmp+0x1c>
 8007ac0:	2a00      	cmp	r2, #0
 8007ac2:	d1f5      	bne.n	8007ab0 <strncmp+0x8>
 8007ac4:	1ad0      	subs	r0, r2, r3
 8007ac6:	bd10      	pop	{r4, pc}
 8007ac8:	4610      	mov	r0, r2
 8007aca:	e7fc      	b.n	8007ac6 <strncmp+0x1e>

08007acc <_sbrk_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	4d06      	ldr	r5, [pc, #24]	; (8007ae8 <_sbrk_r+0x1c>)
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	4608      	mov	r0, r1
 8007ad6:	602b      	str	r3, [r5, #0]
 8007ad8:	f7fa f898 	bl	8001c0c <_sbrk>
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	d102      	bne.n	8007ae6 <_sbrk_r+0x1a>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	b103      	cbz	r3, 8007ae6 <_sbrk_r+0x1a>
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	bd38      	pop	{r3, r4, r5, pc}
 8007ae8:	20000420 	.word	0x20000420

08007aec <memcpy>:
 8007aec:	440a      	add	r2, r1
 8007aee:	4291      	cmp	r1, r2
 8007af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007af4:	d100      	bne.n	8007af8 <memcpy+0xc>
 8007af6:	4770      	bx	lr
 8007af8:	b510      	push	{r4, lr}
 8007afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007afe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b02:	4291      	cmp	r1, r2
 8007b04:	d1f9      	bne.n	8007afa <memcpy+0xe>
 8007b06:	bd10      	pop	{r4, pc}

08007b08 <nan>:
 8007b08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007b10 <nan+0x8>
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	00000000 	.word	0x00000000
 8007b14:	7ff80000 	.word	0x7ff80000

08007b18 <__assert_func>:
 8007b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b1a:	4614      	mov	r4, r2
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <__assert_func+0x2c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4605      	mov	r5, r0
 8007b24:	68d8      	ldr	r0, [r3, #12]
 8007b26:	b14c      	cbz	r4, 8007b3c <__assert_func+0x24>
 8007b28:	4b07      	ldr	r3, [pc, #28]	; (8007b48 <__assert_func+0x30>)
 8007b2a:	9100      	str	r1, [sp, #0]
 8007b2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b30:	4906      	ldr	r1, [pc, #24]	; (8007b4c <__assert_func+0x34>)
 8007b32:	462b      	mov	r3, r5
 8007b34:	f000 fbca 	bl	80082cc <fiprintf>
 8007b38:	f000 fbda 	bl	80082f0 <abort>
 8007b3c:	4b04      	ldr	r3, [pc, #16]	; (8007b50 <__assert_func+0x38>)
 8007b3e:	461c      	mov	r4, r3
 8007b40:	e7f3      	b.n	8007b2a <__assert_func+0x12>
 8007b42:	bf00      	nop
 8007b44:	2000007c 	.word	0x2000007c
 8007b48:	08008c02 	.word	0x08008c02
 8007b4c:	08008c0f 	.word	0x08008c0f
 8007b50:	08008c3d 	.word	0x08008c3d

08007b54 <_calloc_r>:
 8007b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b56:	fba1 2402 	umull	r2, r4, r1, r2
 8007b5a:	b94c      	cbnz	r4, 8007b70 <_calloc_r+0x1c>
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	9201      	str	r2, [sp, #4]
 8007b60:	f7fe f9f6 	bl	8005f50 <_malloc_r>
 8007b64:	9a01      	ldr	r2, [sp, #4]
 8007b66:	4605      	mov	r5, r0
 8007b68:	b930      	cbnz	r0, 8007b78 <_calloc_r+0x24>
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	b003      	add	sp, #12
 8007b6e:	bd30      	pop	{r4, r5, pc}
 8007b70:	220c      	movs	r2, #12
 8007b72:	6002      	str	r2, [r0, #0]
 8007b74:	2500      	movs	r5, #0
 8007b76:	e7f8      	b.n	8007b6a <_calloc_r+0x16>
 8007b78:	4621      	mov	r1, r4
 8007b7a:	f7fd faf8 	bl	800516e <memset>
 8007b7e:	e7f4      	b.n	8007b6a <_calloc_r+0x16>

08007b80 <rshift>:
 8007b80:	6903      	ldr	r3, [r0, #16]
 8007b82:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007b86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b8a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007b8e:	f100 0414 	add.w	r4, r0, #20
 8007b92:	dd45      	ble.n	8007c20 <rshift+0xa0>
 8007b94:	f011 011f 	ands.w	r1, r1, #31
 8007b98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007b9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ba0:	d10c      	bne.n	8007bbc <rshift+0x3c>
 8007ba2:	f100 0710 	add.w	r7, r0, #16
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	42b1      	cmp	r1, r6
 8007baa:	d334      	bcc.n	8007c16 <rshift+0x96>
 8007bac:	1a9b      	subs	r3, r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	1eea      	subs	r2, r5, #3
 8007bb2:	4296      	cmp	r6, r2
 8007bb4:	bf38      	it	cc
 8007bb6:	2300      	movcc	r3, #0
 8007bb8:	4423      	add	r3, r4
 8007bba:	e015      	b.n	8007be8 <rshift+0x68>
 8007bbc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007bc0:	f1c1 0820 	rsb	r8, r1, #32
 8007bc4:	40cf      	lsrs	r7, r1
 8007bc6:	f105 0e04 	add.w	lr, r5, #4
 8007bca:	46a1      	mov	r9, r4
 8007bcc:	4576      	cmp	r6, lr
 8007bce:	46f4      	mov	ip, lr
 8007bd0:	d815      	bhi.n	8007bfe <rshift+0x7e>
 8007bd2:	1a9a      	subs	r2, r3, r2
 8007bd4:	0092      	lsls	r2, r2, #2
 8007bd6:	3a04      	subs	r2, #4
 8007bd8:	3501      	adds	r5, #1
 8007bda:	42ae      	cmp	r6, r5
 8007bdc:	bf38      	it	cc
 8007bde:	2200      	movcc	r2, #0
 8007be0:	18a3      	adds	r3, r4, r2
 8007be2:	50a7      	str	r7, [r4, r2]
 8007be4:	b107      	cbz	r7, 8007be8 <rshift+0x68>
 8007be6:	3304      	adds	r3, #4
 8007be8:	1b1a      	subs	r2, r3, r4
 8007bea:	42a3      	cmp	r3, r4
 8007bec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007bf0:	bf08      	it	eq
 8007bf2:	2300      	moveq	r3, #0
 8007bf4:	6102      	str	r2, [r0, #16]
 8007bf6:	bf08      	it	eq
 8007bf8:	6143      	streq	r3, [r0, #20]
 8007bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bfe:	f8dc c000 	ldr.w	ip, [ip]
 8007c02:	fa0c fc08 	lsl.w	ip, ip, r8
 8007c06:	ea4c 0707 	orr.w	r7, ip, r7
 8007c0a:	f849 7b04 	str.w	r7, [r9], #4
 8007c0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c12:	40cf      	lsrs	r7, r1
 8007c14:	e7da      	b.n	8007bcc <rshift+0x4c>
 8007c16:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c1a:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c1e:	e7c3      	b.n	8007ba8 <rshift+0x28>
 8007c20:	4623      	mov	r3, r4
 8007c22:	e7e1      	b.n	8007be8 <rshift+0x68>

08007c24 <__hexdig_fun>:
 8007c24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007c28:	2b09      	cmp	r3, #9
 8007c2a:	d802      	bhi.n	8007c32 <__hexdig_fun+0xe>
 8007c2c:	3820      	subs	r0, #32
 8007c2e:	b2c0      	uxtb	r0, r0
 8007c30:	4770      	bx	lr
 8007c32:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007c36:	2b05      	cmp	r3, #5
 8007c38:	d801      	bhi.n	8007c3e <__hexdig_fun+0x1a>
 8007c3a:	3847      	subs	r0, #71	; 0x47
 8007c3c:	e7f7      	b.n	8007c2e <__hexdig_fun+0xa>
 8007c3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007c42:	2b05      	cmp	r3, #5
 8007c44:	d801      	bhi.n	8007c4a <__hexdig_fun+0x26>
 8007c46:	3827      	subs	r0, #39	; 0x27
 8007c48:	e7f1      	b.n	8007c2e <__hexdig_fun+0xa>
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	4770      	bx	lr
	...

08007c50 <__gethex>:
 8007c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c54:	4617      	mov	r7, r2
 8007c56:	680a      	ldr	r2, [r1, #0]
 8007c58:	b085      	sub	sp, #20
 8007c5a:	f102 0b02 	add.w	fp, r2, #2
 8007c5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007c62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007c66:	4681      	mov	r9, r0
 8007c68:	468a      	mov	sl, r1
 8007c6a:	9302      	str	r3, [sp, #8]
 8007c6c:	32fe      	adds	r2, #254	; 0xfe
 8007c6e:	eb02 030b 	add.w	r3, r2, fp
 8007c72:	46d8      	mov	r8, fp
 8007c74:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	2830      	cmp	r0, #48	; 0x30
 8007c7c:	d0f7      	beq.n	8007c6e <__gethex+0x1e>
 8007c7e:	f7ff ffd1 	bl	8007c24 <__hexdig_fun>
 8007c82:	4604      	mov	r4, r0
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d138      	bne.n	8007cfa <__gethex+0xaa>
 8007c88:	49a7      	ldr	r1, [pc, #668]	; (8007f28 <__gethex+0x2d8>)
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	f7ff ff0b 	bl	8007aa8 <strncmp>
 8007c92:	4606      	mov	r6, r0
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d169      	bne.n	8007d6c <__gethex+0x11c>
 8007c98:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007c9c:	465d      	mov	r5, fp
 8007c9e:	f7ff ffc1 	bl	8007c24 <__hexdig_fun>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d064      	beq.n	8007d70 <__gethex+0x120>
 8007ca6:	465a      	mov	r2, fp
 8007ca8:	7810      	ldrb	r0, [r2, #0]
 8007caa:	2830      	cmp	r0, #48	; 0x30
 8007cac:	4690      	mov	r8, r2
 8007cae:	f102 0201 	add.w	r2, r2, #1
 8007cb2:	d0f9      	beq.n	8007ca8 <__gethex+0x58>
 8007cb4:	f7ff ffb6 	bl	8007c24 <__hexdig_fun>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	fab0 f480 	clz	r4, r0
 8007cbe:	0964      	lsrs	r4, r4, #5
 8007cc0:	465e      	mov	r6, fp
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	4615      	mov	r5, r2
 8007cc8:	3201      	adds	r2, #1
 8007cca:	7828      	ldrb	r0, [r5, #0]
 8007ccc:	f7ff ffaa 	bl	8007c24 <__hexdig_fun>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d1f8      	bne.n	8007cc6 <__gethex+0x76>
 8007cd4:	4994      	ldr	r1, [pc, #592]	; (8007f28 <__gethex+0x2d8>)
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f7ff fee5 	bl	8007aa8 <strncmp>
 8007cde:	b978      	cbnz	r0, 8007d00 <__gethex+0xb0>
 8007ce0:	b946      	cbnz	r6, 8007cf4 <__gethex+0xa4>
 8007ce2:	1c6e      	adds	r6, r5, #1
 8007ce4:	4632      	mov	r2, r6
 8007ce6:	4615      	mov	r5, r2
 8007ce8:	3201      	adds	r2, #1
 8007cea:	7828      	ldrb	r0, [r5, #0]
 8007cec:	f7ff ff9a 	bl	8007c24 <__hexdig_fun>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d1f8      	bne.n	8007ce6 <__gethex+0x96>
 8007cf4:	1b73      	subs	r3, r6, r5
 8007cf6:	009e      	lsls	r6, r3, #2
 8007cf8:	e004      	b.n	8007d04 <__gethex+0xb4>
 8007cfa:	2400      	movs	r4, #0
 8007cfc:	4626      	mov	r6, r4
 8007cfe:	e7e1      	b.n	8007cc4 <__gethex+0x74>
 8007d00:	2e00      	cmp	r6, #0
 8007d02:	d1f7      	bne.n	8007cf4 <__gethex+0xa4>
 8007d04:	782b      	ldrb	r3, [r5, #0]
 8007d06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d0a:	2b50      	cmp	r3, #80	; 0x50
 8007d0c:	d13d      	bne.n	8007d8a <__gethex+0x13a>
 8007d0e:	786b      	ldrb	r3, [r5, #1]
 8007d10:	2b2b      	cmp	r3, #43	; 0x2b
 8007d12:	d02f      	beq.n	8007d74 <__gethex+0x124>
 8007d14:	2b2d      	cmp	r3, #45	; 0x2d
 8007d16:	d031      	beq.n	8007d7c <__gethex+0x12c>
 8007d18:	1c69      	adds	r1, r5, #1
 8007d1a:	f04f 0b00 	mov.w	fp, #0
 8007d1e:	7808      	ldrb	r0, [r1, #0]
 8007d20:	f7ff ff80 	bl	8007c24 <__hexdig_fun>
 8007d24:	1e42      	subs	r2, r0, #1
 8007d26:	b2d2      	uxtb	r2, r2
 8007d28:	2a18      	cmp	r2, #24
 8007d2a:	d82e      	bhi.n	8007d8a <__gethex+0x13a>
 8007d2c:	f1a0 0210 	sub.w	r2, r0, #16
 8007d30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d34:	f7ff ff76 	bl	8007c24 <__hexdig_fun>
 8007d38:	f100 3cff 	add.w	ip, r0, #4294967295
 8007d3c:	fa5f fc8c 	uxtb.w	ip, ip
 8007d40:	f1bc 0f18 	cmp.w	ip, #24
 8007d44:	d91d      	bls.n	8007d82 <__gethex+0x132>
 8007d46:	f1bb 0f00 	cmp.w	fp, #0
 8007d4a:	d000      	beq.n	8007d4e <__gethex+0xfe>
 8007d4c:	4252      	negs	r2, r2
 8007d4e:	4416      	add	r6, r2
 8007d50:	f8ca 1000 	str.w	r1, [sl]
 8007d54:	b1dc      	cbz	r4, 8007d8e <__gethex+0x13e>
 8007d56:	9b01      	ldr	r3, [sp, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	bf14      	ite	ne
 8007d5c:	f04f 0800 	movne.w	r8, #0
 8007d60:	f04f 0806 	moveq.w	r8, #6
 8007d64:	4640      	mov	r0, r8
 8007d66:	b005      	add	sp, #20
 8007d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6c:	4645      	mov	r5, r8
 8007d6e:	4626      	mov	r6, r4
 8007d70:	2401      	movs	r4, #1
 8007d72:	e7c7      	b.n	8007d04 <__gethex+0xb4>
 8007d74:	f04f 0b00 	mov.w	fp, #0
 8007d78:	1ca9      	adds	r1, r5, #2
 8007d7a:	e7d0      	b.n	8007d1e <__gethex+0xce>
 8007d7c:	f04f 0b01 	mov.w	fp, #1
 8007d80:	e7fa      	b.n	8007d78 <__gethex+0x128>
 8007d82:	230a      	movs	r3, #10
 8007d84:	fb03 0002 	mla	r0, r3, r2, r0
 8007d88:	e7d0      	b.n	8007d2c <__gethex+0xdc>
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	e7e0      	b.n	8007d50 <__gethex+0x100>
 8007d8e:	eba5 0308 	sub.w	r3, r5, r8
 8007d92:	3b01      	subs	r3, #1
 8007d94:	4621      	mov	r1, r4
 8007d96:	2b07      	cmp	r3, #7
 8007d98:	dc0a      	bgt.n	8007db0 <__gethex+0x160>
 8007d9a:	4648      	mov	r0, r9
 8007d9c:	f7fe f964 	bl	8006068 <_Balloc>
 8007da0:	4604      	mov	r4, r0
 8007da2:	b940      	cbnz	r0, 8007db6 <__gethex+0x166>
 8007da4:	4b61      	ldr	r3, [pc, #388]	; (8007f2c <__gethex+0x2dc>)
 8007da6:	4602      	mov	r2, r0
 8007da8:	21e4      	movs	r1, #228	; 0xe4
 8007daa:	4861      	ldr	r0, [pc, #388]	; (8007f30 <__gethex+0x2e0>)
 8007dac:	f7ff feb4 	bl	8007b18 <__assert_func>
 8007db0:	3101      	adds	r1, #1
 8007db2:	105b      	asrs	r3, r3, #1
 8007db4:	e7ef      	b.n	8007d96 <__gethex+0x146>
 8007db6:	f100 0a14 	add.w	sl, r0, #20
 8007dba:	2300      	movs	r3, #0
 8007dbc:	495a      	ldr	r1, [pc, #360]	; (8007f28 <__gethex+0x2d8>)
 8007dbe:	f8cd a004 	str.w	sl, [sp, #4]
 8007dc2:	469b      	mov	fp, r3
 8007dc4:	45a8      	cmp	r8, r5
 8007dc6:	d342      	bcc.n	8007e4e <__gethex+0x1fe>
 8007dc8:	9801      	ldr	r0, [sp, #4]
 8007dca:	f840 bb04 	str.w	fp, [r0], #4
 8007dce:	eba0 000a 	sub.w	r0, r0, sl
 8007dd2:	1080      	asrs	r0, r0, #2
 8007dd4:	6120      	str	r0, [r4, #16]
 8007dd6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8007dda:	4658      	mov	r0, fp
 8007ddc:	f7fe fa36 	bl	800624c <__hi0bits>
 8007de0:	683d      	ldr	r5, [r7, #0]
 8007de2:	eba8 0000 	sub.w	r0, r8, r0
 8007de6:	42a8      	cmp	r0, r5
 8007de8:	dd59      	ble.n	8007e9e <__gethex+0x24e>
 8007dea:	eba0 0805 	sub.w	r8, r0, r5
 8007dee:	4641      	mov	r1, r8
 8007df0:	4620      	mov	r0, r4
 8007df2:	f7fe fdc2 	bl	800697a <__any_on>
 8007df6:	4683      	mov	fp, r0
 8007df8:	b1b8      	cbz	r0, 8007e2a <__gethex+0x1da>
 8007dfa:	f108 33ff 	add.w	r3, r8, #4294967295
 8007dfe:	1159      	asrs	r1, r3, #5
 8007e00:	f003 021f 	and.w	r2, r3, #31
 8007e04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007e08:	f04f 0b01 	mov.w	fp, #1
 8007e0c:	fa0b f202 	lsl.w	r2, fp, r2
 8007e10:	420a      	tst	r2, r1
 8007e12:	d00a      	beq.n	8007e2a <__gethex+0x1da>
 8007e14:	455b      	cmp	r3, fp
 8007e16:	dd06      	ble.n	8007e26 <__gethex+0x1d6>
 8007e18:	f1a8 0102 	sub.w	r1, r8, #2
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f7fe fdac 	bl	800697a <__any_on>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d138      	bne.n	8007e98 <__gethex+0x248>
 8007e26:	f04f 0b02 	mov.w	fp, #2
 8007e2a:	4641      	mov	r1, r8
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f7ff fea7 	bl	8007b80 <rshift>
 8007e32:	4446      	add	r6, r8
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	42b3      	cmp	r3, r6
 8007e38:	da41      	bge.n	8007ebe <__gethex+0x26e>
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	4648      	mov	r0, r9
 8007e3e:	f7fe f953 	bl	80060e8 <_Bfree>
 8007e42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e44:	2300      	movs	r3, #0
 8007e46:	6013      	str	r3, [r2, #0]
 8007e48:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007e4c:	e78a      	b.n	8007d64 <__gethex+0x114>
 8007e4e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007e52:	2a2e      	cmp	r2, #46	; 0x2e
 8007e54:	d014      	beq.n	8007e80 <__gethex+0x230>
 8007e56:	2b20      	cmp	r3, #32
 8007e58:	d106      	bne.n	8007e68 <__gethex+0x218>
 8007e5a:	9b01      	ldr	r3, [sp, #4]
 8007e5c:	f843 bb04 	str.w	fp, [r3], #4
 8007e60:	f04f 0b00 	mov.w	fp, #0
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	465b      	mov	r3, fp
 8007e68:	7828      	ldrb	r0, [r5, #0]
 8007e6a:	9303      	str	r3, [sp, #12]
 8007e6c:	f7ff feda 	bl	8007c24 <__hexdig_fun>
 8007e70:	9b03      	ldr	r3, [sp, #12]
 8007e72:	f000 000f 	and.w	r0, r0, #15
 8007e76:	4098      	lsls	r0, r3
 8007e78:	ea4b 0b00 	orr.w	fp, fp, r0
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	e7a1      	b.n	8007dc4 <__gethex+0x174>
 8007e80:	45a8      	cmp	r8, r5
 8007e82:	d8e8      	bhi.n	8007e56 <__gethex+0x206>
 8007e84:	2201      	movs	r2, #1
 8007e86:	4628      	mov	r0, r5
 8007e88:	9303      	str	r3, [sp, #12]
 8007e8a:	f7ff fe0d 	bl	8007aa8 <strncmp>
 8007e8e:	4926      	ldr	r1, [pc, #152]	; (8007f28 <__gethex+0x2d8>)
 8007e90:	9b03      	ldr	r3, [sp, #12]
 8007e92:	2800      	cmp	r0, #0
 8007e94:	d1df      	bne.n	8007e56 <__gethex+0x206>
 8007e96:	e795      	b.n	8007dc4 <__gethex+0x174>
 8007e98:	f04f 0b03 	mov.w	fp, #3
 8007e9c:	e7c5      	b.n	8007e2a <__gethex+0x1da>
 8007e9e:	da0b      	bge.n	8007eb8 <__gethex+0x268>
 8007ea0:	eba5 0800 	sub.w	r8, r5, r0
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	4642      	mov	r2, r8
 8007ea8:	4648      	mov	r0, r9
 8007eaa:	f7fe fb37 	bl	800651c <__lshift>
 8007eae:	eba6 0608 	sub.w	r6, r6, r8
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	f100 0a14 	add.w	sl, r0, #20
 8007eb8:	f04f 0b00 	mov.w	fp, #0
 8007ebc:	e7ba      	b.n	8007e34 <__gethex+0x1e4>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	42b3      	cmp	r3, r6
 8007ec2:	dd73      	ble.n	8007fac <__gethex+0x35c>
 8007ec4:	1b9e      	subs	r6, r3, r6
 8007ec6:	42b5      	cmp	r5, r6
 8007ec8:	dc34      	bgt.n	8007f34 <__gethex+0x2e4>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d023      	beq.n	8007f18 <__gethex+0x2c8>
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d025      	beq.n	8007f20 <__gethex+0x2d0>
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d115      	bne.n	8007f04 <__gethex+0x2b4>
 8007ed8:	42b5      	cmp	r5, r6
 8007eda:	d113      	bne.n	8007f04 <__gethex+0x2b4>
 8007edc:	2d01      	cmp	r5, #1
 8007ede:	d10b      	bne.n	8007ef8 <__gethex+0x2a8>
 8007ee0:	9a02      	ldr	r2, [sp, #8]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6013      	str	r3, [r2, #0]
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	6123      	str	r3, [r4, #16]
 8007eea:	f8ca 3000 	str.w	r3, [sl]
 8007eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ef0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007ef4:	601c      	str	r4, [r3, #0]
 8007ef6:	e735      	b.n	8007d64 <__gethex+0x114>
 8007ef8:	1e69      	subs	r1, r5, #1
 8007efa:	4620      	mov	r0, r4
 8007efc:	f7fe fd3d 	bl	800697a <__any_on>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d1ed      	bne.n	8007ee0 <__gethex+0x290>
 8007f04:	4621      	mov	r1, r4
 8007f06:	4648      	mov	r0, r9
 8007f08:	f7fe f8ee 	bl	80060e8 <_Bfree>
 8007f0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f0e:	2300      	movs	r3, #0
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007f16:	e725      	b.n	8007d64 <__gethex+0x114>
 8007f18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1f2      	bne.n	8007f04 <__gethex+0x2b4>
 8007f1e:	e7df      	b.n	8007ee0 <__gethex+0x290>
 8007f20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1dc      	bne.n	8007ee0 <__gethex+0x290>
 8007f26:	e7ed      	b.n	8007f04 <__gethex+0x2b4>
 8007f28:	08008a94 	.word	0x08008a94
 8007f2c:	0800892d 	.word	0x0800892d
 8007f30:	08008c3e 	.word	0x08008c3e
 8007f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8007f38:	f1bb 0f00 	cmp.w	fp, #0
 8007f3c:	d133      	bne.n	8007fa6 <__gethex+0x356>
 8007f3e:	f1b8 0f00 	cmp.w	r8, #0
 8007f42:	d004      	beq.n	8007f4e <__gethex+0x2fe>
 8007f44:	4641      	mov	r1, r8
 8007f46:	4620      	mov	r0, r4
 8007f48:	f7fe fd17 	bl	800697a <__any_on>
 8007f4c:	4683      	mov	fp, r0
 8007f4e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007f52:	2301      	movs	r3, #1
 8007f54:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007f58:	f008 081f 	and.w	r8, r8, #31
 8007f5c:	fa03 f308 	lsl.w	r3, r3, r8
 8007f60:	4213      	tst	r3, r2
 8007f62:	4631      	mov	r1, r6
 8007f64:	4620      	mov	r0, r4
 8007f66:	bf18      	it	ne
 8007f68:	f04b 0b02 	orrne.w	fp, fp, #2
 8007f6c:	1bad      	subs	r5, r5, r6
 8007f6e:	f7ff fe07 	bl	8007b80 <rshift>
 8007f72:	687e      	ldr	r6, [r7, #4]
 8007f74:	f04f 0802 	mov.w	r8, #2
 8007f78:	f1bb 0f00 	cmp.w	fp, #0
 8007f7c:	d04a      	beq.n	8008014 <__gethex+0x3c4>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d016      	beq.n	8007fb2 <__gethex+0x362>
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d018      	beq.n	8007fba <__gethex+0x36a>
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d109      	bne.n	8007fa0 <__gethex+0x350>
 8007f8c:	f01b 0f02 	tst.w	fp, #2
 8007f90:	d006      	beq.n	8007fa0 <__gethex+0x350>
 8007f92:	f8da 3000 	ldr.w	r3, [sl]
 8007f96:	ea4b 0b03 	orr.w	fp, fp, r3
 8007f9a:	f01b 0f01 	tst.w	fp, #1
 8007f9e:	d10f      	bne.n	8007fc0 <__gethex+0x370>
 8007fa0:	f048 0810 	orr.w	r8, r8, #16
 8007fa4:	e036      	b.n	8008014 <__gethex+0x3c4>
 8007fa6:	f04f 0b01 	mov.w	fp, #1
 8007faa:	e7d0      	b.n	8007f4e <__gethex+0x2fe>
 8007fac:	f04f 0801 	mov.w	r8, #1
 8007fb0:	e7e2      	b.n	8007f78 <__gethex+0x328>
 8007fb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fb4:	f1c3 0301 	rsb	r3, r3, #1
 8007fb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d0ef      	beq.n	8007fa0 <__gethex+0x350>
 8007fc0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007fc4:	f104 0214 	add.w	r2, r4, #20
 8007fc8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007fcc:	9301      	str	r3, [sp, #4]
 8007fce:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4694      	mov	ip, r2
 8007fd6:	f852 1b04 	ldr.w	r1, [r2], #4
 8007fda:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007fde:	d01e      	beq.n	800801e <__gethex+0x3ce>
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	f8cc 1000 	str.w	r1, [ip]
 8007fe6:	f1b8 0f02 	cmp.w	r8, #2
 8007fea:	f104 0214 	add.w	r2, r4, #20
 8007fee:	d13d      	bne.n	800806c <__gethex+0x41c>
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	42ab      	cmp	r3, r5
 8007ff6:	d10b      	bne.n	8008010 <__gethex+0x3c0>
 8007ff8:	1169      	asrs	r1, r5, #5
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	f005 051f 	and.w	r5, r5, #31
 8008000:	fa03 f505 	lsl.w	r5, r3, r5
 8008004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008008:	421d      	tst	r5, r3
 800800a:	bf18      	it	ne
 800800c:	f04f 0801 	movne.w	r8, #1
 8008010:	f048 0820 	orr.w	r8, r8, #32
 8008014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008016:	601c      	str	r4, [r3, #0]
 8008018:	9b02      	ldr	r3, [sp, #8]
 800801a:	601e      	str	r6, [r3, #0]
 800801c:	e6a2      	b.n	8007d64 <__gethex+0x114>
 800801e:	4290      	cmp	r0, r2
 8008020:	f842 3c04 	str.w	r3, [r2, #-4]
 8008024:	d8d6      	bhi.n	8007fd4 <__gethex+0x384>
 8008026:	68a2      	ldr	r2, [r4, #8]
 8008028:	4593      	cmp	fp, r2
 800802a:	db17      	blt.n	800805c <__gethex+0x40c>
 800802c:	6861      	ldr	r1, [r4, #4]
 800802e:	4648      	mov	r0, r9
 8008030:	3101      	adds	r1, #1
 8008032:	f7fe f819 	bl	8006068 <_Balloc>
 8008036:	4682      	mov	sl, r0
 8008038:	b918      	cbnz	r0, 8008042 <__gethex+0x3f2>
 800803a:	4b1b      	ldr	r3, [pc, #108]	; (80080a8 <__gethex+0x458>)
 800803c:	4602      	mov	r2, r0
 800803e:	2184      	movs	r1, #132	; 0x84
 8008040:	e6b3      	b.n	8007daa <__gethex+0x15a>
 8008042:	6922      	ldr	r2, [r4, #16]
 8008044:	3202      	adds	r2, #2
 8008046:	f104 010c 	add.w	r1, r4, #12
 800804a:	0092      	lsls	r2, r2, #2
 800804c:	300c      	adds	r0, #12
 800804e:	f7ff fd4d 	bl	8007aec <memcpy>
 8008052:	4621      	mov	r1, r4
 8008054:	4648      	mov	r0, r9
 8008056:	f7fe f847 	bl	80060e8 <_Bfree>
 800805a:	4654      	mov	r4, sl
 800805c:	6922      	ldr	r2, [r4, #16]
 800805e:	1c51      	adds	r1, r2, #1
 8008060:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008064:	6121      	str	r1, [r4, #16]
 8008066:	2101      	movs	r1, #1
 8008068:	6151      	str	r1, [r2, #20]
 800806a:	e7bc      	b.n	8007fe6 <__gethex+0x396>
 800806c:	6921      	ldr	r1, [r4, #16]
 800806e:	4559      	cmp	r1, fp
 8008070:	dd0b      	ble.n	800808a <__gethex+0x43a>
 8008072:	2101      	movs	r1, #1
 8008074:	4620      	mov	r0, r4
 8008076:	f7ff fd83 	bl	8007b80 <rshift>
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	3601      	adds	r6, #1
 800807e:	42b3      	cmp	r3, r6
 8008080:	f6ff aedb 	blt.w	8007e3a <__gethex+0x1ea>
 8008084:	f04f 0801 	mov.w	r8, #1
 8008088:	e7c2      	b.n	8008010 <__gethex+0x3c0>
 800808a:	f015 051f 	ands.w	r5, r5, #31
 800808e:	d0f9      	beq.n	8008084 <__gethex+0x434>
 8008090:	9b01      	ldr	r3, [sp, #4]
 8008092:	441a      	add	r2, r3
 8008094:	f1c5 0520 	rsb	r5, r5, #32
 8008098:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800809c:	f7fe f8d6 	bl	800624c <__hi0bits>
 80080a0:	42a8      	cmp	r0, r5
 80080a2:	dbe6      	blt.n	8008072 <__gethex+0x422>
 80080a4:	e7ee      	b.n	8008084 <__gethex+0x434>
 80080a6:	bf00      	nop
 80080a8:	0800892d 	.word	0x0800892d

080080ac <L_shift>:
 80080ac:	f1c2 0208 	rsb	r2, r2, #8
 80080b0:	0092      	lsls	r2, r2, #2
 80080b2:	b570      	push	{r4, r5, r6, lr}
 80080b4:	f1c2 0620 	rsb	r6, r2, #32
 80080b8:	6843      	ldr	r3, [r0, #4]
 80080ba:	6804      	ldr	r4, [r0, #0]
 80080bc:	fa03 f506 	lsl.w	r5, r3, r6
 80080c0:	432c      	orrs	r4, r5
 80080c2:	40d3      	lsrs	r3, r2
 80080c4:	6004      	str	r4, [r0, #0]
 80080c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80080ca:	4288      	cmp	r0, r1
 80080cc:	d3f4      	bcc.n	80080b8 <L_shift+0xc>
 80080ce:	bd70      	pop	{r4, r5, r6, pc}

080080d0 <__match>:
 80080d0:	b530      	push	{r4, r5, lr}
 80080d2:	6803      	ldr	r3, [r0, #0]
 80080d4:	3301      	adds	r3, #1
 80080d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080da:	b914      	cbnz	r4, 80080e2 <__match+0x12>
 80080dc:	6003      	str	r3, [r0, #0]
 80080de:	2001      	movs	r0, #1
 80080e0:	bd30      	pop	{r4, r5, pc}
 80080e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80080ea:	2d19      	cmp	r5, #25
 80080ec:	bf98      	it	ls
 80080ee:	3220      	addls	r2, #32
 80080f0:	42a2      	cmp	r2, r4
 80080f2:	d0f0      	beq.n	80080d6 <__match+0x6>
 80080f4:	2000      	movs	r0, #0
 80080f6:	e7f3      	b.n	80080e0 <__match+0x10>

080080f8 <__hexnan>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	680b      	ldr	r3, [r1, #0]
 80080fe:	6801      	ldr	r1, [r0, #0]
 8008100:	115e      	asrs	r6, r3, #5
 8008102:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008106:	f013 031f 	ands.w	r3, r3, #31
 800810a:	b087      	sub	sp, #28
 800810c:	bf18      	it	ne
 800810e:	3604      	addne	r6, #4
 8008110:	2500      	movs	r5, #0
 8008112:	1f37      	subs	r7, r6, #4
 8008114:	4682      	mov	sl, r0
 8008116:	4690      	mov	r8, r2
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	f846 5c04 	str.w	r5, [r6, #-4]
 800811e:	46b9      	mov	r9, r7
 8008120:	463c      	mov	r4, r7
 8008122:	9502      	str	r5, [sp, #8]
 8008124:	46ab      	mov	fp, r5
 8008126:	784a      	ldrb	r2, [r1, #1]
 8008128:	1c4b      	adds	r3, r1, #1
 800812a:	9303      	str	r3, [sp, #12]
 800812c:	b342      	cbz	r2, 8008180 <__hexnan+0x88>
 800812e:	4610      	mov	r0, r2
 8008130:	9105      	str	r1, [sp, #20]
 8008132:	9204      	str	r2, [sp, #16]
 8008134:	f7ff fd76 	bl	8007c24 <__hexdig_fun>
 8008138:	2800      	cmp	r0, #0
 800813a:	d14f      	bne.n	80081dc <__hexnan+0xe4>
 800813c:	9a04      	ldr	r2, [sp, #16]
 800813e:	9905      	ldr	r1, [sp, #20]
 8008140:	2a20      	cmp	r2, #32
 8008142:	d818      	bhi.n	8008176 <__hexnan+0x7e>
 8008144:	9b02      	ldr	r3, [sp, #8]
 8008146:	459b      	cmp	fp, r3
 8008148:	dd13      	ble.n	8008172 <__hexnan+0x7a>
 800814a:	454c      	cmp	r4, r9
 800814c:	d206      	bcs.n	800815c <__hexnan+0x64>
 800814e:	2d07      	cmp	r5, #7
 8008150:	dc04      	bgt.n	800815c <__hexnan+0x64>
 8008152:	462a      	mov	r2, r5
 8008154:	4649      	mov	r1, r9
 8008156:	4620      	mov	r0, r4
 8008158:	f7ff ffa8 	bl	80080ac <L_shift>
 800815c:	4544      	cmp	r4, r8
 800815e:	d950      	bls.n	8008202 <__hexnan+0x10a>
 8008160:	2300      	movs	r3, #0
 8008162:	f1a4 0904 	sub.w	r9, r4, #4
 8008166:	f844 3c04 	str.w	r3, [r4, #-4]
 800816a:	f8cd b008 	str.w	fp, [sp, #8]
 800816e:	464c      	mov	r4, r9
 8008170:	461d      	mov	r5, r3
 8008172:	9903      	ldr	r1, [sp, #12]
 8008174:	e7d7      	b.n	8008126 <__hexnan+0x2e>
 8008176:	2a29      	cmp	r2, #41	; 0x29
 8008178:	d155      	bne.n	8008226 <__hexnan+0x12e>
 800817a:	3102      	adds	r1, #2
 800817c:	f8ca 1000 	str.w	r1, [sl]
 8008180:	f1bb 0f00 	cmp.w	fp, #0
 8008184:	d04f      	beq.n	8008226 <__hexnan+0x12e>
 8008186:	454c      	cmp	r4, r9
 8008188:	d206      	bcs.n	8008198 <__hexnan+0xa0>
 800818a:	2d07      	cmp	r5, #7
 800818c:	dc04      	bgt.n	8008198 <__hexnan+0xa0>
 800818e:	462a      	mov	r2, r5
 8008190:	4649      	mov	r1, r9
 8008192:	4620      	mov	r0, r4
 8008194:	f7ff ff8a 	bl	80080ac <L_shift>
 8008198:	4544      	cmp	r4, r8
 800819a:	d934      	bls.n	8008206 <__hexnan+0x10e>
 800819c:	f1a8 0204 	sub.w	r2, r8, #4
 80081a0:	4623      	mov	r3, r4
 80081a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80081a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80081aa:	429f      	cmp	r7, r3
 80081ac:	d2f9      	bcs.n	80081a2 <__hexnan+0xaa>
 80081ae:	1b3b      	subs	r3, r7, r4
 80081b0:	f023 0303 	bic.w	r3, r3, #3
 80081b4:	3304      	adds	r3, #4
 80081b6:	3e03      	subs	r6, #3
 80081b8:	3401      	adds	r4, #1
 80081ba:	42a6      	cmp	r6, r4
 80081bc:	bf38      	it	cc
 80081be:	2304      	movcc	r3, #4
 80081c0:	4443      	add	r3, r8
 80081c2:	2200      	movs	r2, #0
 80081c4:	f843 2b04 	str.w	r2, [r3], #4
 80081c8:	429f      	cmp	r7, r3
 80081ca:	d2fb      	bcs.n	80081c4 <__hexnan+0xcc>
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	b91b      	cbnz	r3, 80081d8 <__hexnan+0xe0>
 80081d0:	4547      	cmp	r7, r8
 80081d2:	d126      	bne.n	8008222 <__hexnan+0x12a>
 80081d4:	2301      	movs	r3, #1
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	2005      	movs	r0, #5
 80081da:	e025      	b.n	8008228 <__hexnan+0x130>
 80081dc:	3501      	adds	r5, #1
 80081de:	2d08      	cmp	r5, #8
 80081e0:	f10b 0b01 	add.w	fp, fp, #1
 80081e4:	dd06      	ble.n	80081f4 <__hexnan+0xfc>
 80081e6:	4544      	cmp	r4, r8
 80081e8:	d9c3      	bls.n	8008172 <__hexnan+0x7a>
 80081ea:	2300      	movs	r3, #0
 80081ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80081f0:	2501      	movs	r5, #1
 80081f2:	3c04      	subs	r4, #4
 80081f4:	6822      	ldr	r2, [r4, #0]
 80081f6:	f000 000f 	and.w	r0, r0, #15
 80081fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80081fe:	6020      	str	r0, [r4, #0]
 8008200:	e7b7      	b.n	8008172 <__hexnan+0x7a>
 8008202:	2508      	movs	r5, #8
 8008204:	e7b5      	b.n	8008172 <__hexnan+0x7a>
 8008206:	9b01      	ldr	r3, [sp, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d0df      	beq.n	80081cc <__hexnan+0xd4>
 800820c:	f1c3 0320 	rsb	r3, r3, #32
 8008210:	f04f 32ff 	mov.w	r2, #4294967295
 8008214:	40da      	lsrs	r2, r3
 8008216:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800821a:	4013      	ands	r3, r2
 800821c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008220:	e7d4      	b.n	80081cc <__hexnan+0xd4>
 8008222:	3f04      	subs	r7, #4
 8008224:	e7d2      	b.n	80081cc <__hexnan+0xd4>
 8008226:	2004      	movs	r0, #4
 8008228:	b007      	add	sp, #28
 800822a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800822e <__ascii_mbtowc>:
 800822e:	b082      	sub	sp, #8
 8008230:	b901      	cbnz	r1, 8008234 <__ascii_mbtowc+0x6>
 8008232:	a901      	add	r1, sp, #4
 8008234:	b142      	cbz	r2, 8008248 <__ascii_mbtowc+0x1a>
 8008236:	b14b      	cbz	r3, 800824c <__ascii_mbtowc+0x1e>
 8008238:	7813      	ldrb	r3, [r2, #0]
 800823a:	600b      	str	r3, [r1, #0]
 800823c:	7812      	ldrb	r2, [r2, #0]
 800823e:	1e10      	subs	r0, r2, #0
 8008240:	bf18      	it	ne
 8008242:	2001      	movne	r0, #1
 8008244:	b002      	add	sp, #8
 8008246:	4770      	bx	lr
 8008248:	4610      	mov	r0, r2
 800824a:	e7fb      	b.n	8008244 <__ascii_mbtowc+0x16>
 800824c:	f06f 0001 	mvn.w	r0, #1
 8008250:	e7f8      	b.n	8008244 <__ascii_mbtowc+0x16>

08008252 <_realloc_r>:
 8008252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008256:	4680      	mov	r8, r0
 8008258:	4614      	mov	r4, r2
 800825a:	460e      	mov	r6, r1
 800825c:	b921      	cbnz	r1, 8008268 <_realloc_r+0x16>
 800825e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008262:	4611      	mov	r1, r2
 8008264:	f7fd be74 	b.w	8005f50 <_malloc_r>
 8008268:	b92a      	cbnz	r2, 8008276 <_realloc_r+0x24>
 800826a:	f7fd fdfd 	bl	8005e68 <_free_r>
 800826e:	4625      	mov	r5, r4
 8008270:	4628      	mov	r0, r5
 8008272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008276:	f000 f842 	bl	80082fe <_malloc_usable_size_r>
 800827a:	4284      	cmp	r4, r0
 800827c:	4607      	mov	r7, r0
 800827e:	d802      	bhi.n	8008286 <_realloc_r+0x34>
 8008280:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008284:	d812      	bhi.n	80082ac <_realloc_r+0x5a>
 8008286:	4621      	mov	r1, r4
 8008288:	4640      	mov	r0, r8
 800828a:	f7fd fe61 	bl	8005f50 <_malloc_r>
 800828e:	4605      	mov	r5, r0
 8008290:	2800      	cmp	r0, #0
 8008292:	d0ed      	beq.n	8008270 <_realloc_r+0x1e>
 8008294:	42bc      	cmp	r4, r7
 8008296:	4622      	mov	r2, r4
 8008298:	4631      	mov	r1, r6
 800829a:	bf28      	it	cs
 800829c:	463a      	movcs	r2, r7
 800829e:	f7ff fc25 	bl	8007aec <memcpy>
 80082a2:	4631      	mov	r1, r6
 80082a4:	4640      	mov	r0, r8
 80082a6:	f7fd fddf 	bl	8005e68 <_free_r>
 80082aa:	e7e1      	b.n	8008270 <_realloc_r+0x1e>
 80082ac:	4635      	mov	r5, r6
 80082ae:	e7df      	b.n	8008270 <_realloc_r+0x1e>

080082b0 <__ascii_wctomb>:
 80082b0:	b149      	cbz	r1, 80082c6 <__ascii_wctomb+0x16>
 80082b2:	2aff      	cmp	r2, #255	; 0xff
 80082b4:	bf85      	ittet	hi
 80082b6:	238a      	movhi	r3, #138	; 0x8a
 80082b8:	6003      	strhi	r3, [r0, #0]
 80082ba:	700a      	strbls	r2, [r1, #0]
 80082bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80082c0:	bf98      	it	ls
 80082c2:	2001      	movls	r0, #1
 80082c4:	4770      	bx	lr
 80082c6:	4608      	mov	r0, r1
 80082c8:	4770      	bx	lr
	...

080082cc <fiprintf>:
 80082cc:	b40e      	push	{r1, r2, r3}
 80082ce:	b503      	push	{r0, r1, lr}
 80082d0:	4601      	mov	r1, r0
 80082d2:	ab03      	add	r3, sp, #12
 80082d4:	4805      	ldr	r0, [pc, #20]	; (80082ec <fiprintf+0x20>)
 80082d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80082da:	6800      	ldr	r0, [r0, #0]
 80082dc:	9301      	str	r3, [sp, #4]
 80082de:	f000 f83f 	bl	8008360 <_vfiprintf_r>
 80082e2:	b002      	add	sp, #8
 80082e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e8:	b003      	add	sp, #12
 80082ea:	4770      	bx	lr
 80082ec:	2000007c 	.word	0x2000007c

080082f0 <abort>:
 80082f0:	b508      	push	{r3, lr}
 80082f2:	2006      	movs	r0, #6
 80082f4:	f000 fa0c 	bl	8008710 <raise>
 80082f8:	2001      	movs	r0, #1
 80082fa:	f7f9 fc0f 	bl	8001b1c <_exit>

080082fe <_malloc_usable_size_r>:
 80082fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008302:	1f18      	subs	r0, r3, #4
 8008304:	2b00      	cmp	r3, #0
 8008306:	bfbc      	itt	lt
 8008308:	580b      	ldrlt	r3, [r1, r0]
 800830a:	18c0      	addlt	r0, r0, r3
 800830c:	4770      	bx	lr

0800830e <__sfputc_r>:
 800830e:	6893      	ldr	r3, [r2, #8]
 8008310:	3b01      	subs	r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	b410      	push	{r4}
 8008316:	6093      	str	r3, [r2, #8]
 8008318:	da08      	bge.n	800832c <__sfputc_r+0x1e>
 800831a:	6994      	ldr	r4, [r2, #24]
 800831c:	42a3      	cmp	r3, r4
 800831e:	db01      	blt.n	8008324 <__sfputc_r+0x16>
 8008320:	290a      	cmp	r1, #10
 8008322:	d103      	bne.n	800832c <__sfputc_r+0x1e>
 8008324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008328:	f000 b934 	b.w	8008594 <__swbuf_r>
 800832c:	6813      	ldr	r3, [r2, #0]
 800832e:	1c58      	adds	r0, r3, #1
 8008330:	6010      	str	r0, [r2, #0]
 8008332:	7019      	strb	r1, [r3, #0]
 8008334:	4608      	mov	r0, r1
 8008336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800833a:	4770      	bx	lr

0800833c <__sfputs_r>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	4606      	mov	r6, r0
 8008340:	460f      	mov	r7, r1
 8008342:	4614      	mov	r4, r2
 8008344:	18d5      	adds	r5, r2, r3
 8008346:	42ac      	cmp	r4, r5
 8008348:	d101      	bne.n	800834e <__sfputs_r+0x12>
 800834a:	2000      	movs	r0, #0
 800834c:	e007      	b.n	800835e <__sfputs_r+0x22>
 800834e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008352:	463a      	mov	r2, r7
 8008354:	4630      	mov	r0, r6
 8008356:	f7ff ffda 	bl	800830e <__sfputc_r>
 800835a:	1c43      	adds	r3, r0, #1
 800835c:	d1f3      	bne.n	8008346 <__sfputs_r+0xa>
 800835e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008360 <_vfiprintf_r>:
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	460d      	mov	r5, r1
 8008366:	b09d      	sub	sp, #116	; 0x74
 8008368:	4614      	mov	r4, r2
 800836a:	4698      	mov	r8, r3
 800836c:	4606      	mov	r6, r0
 800836e:	b118      	cbz	r0, 8008378 <_vfiprintf_r+0x18>
 8008370:	6a03      	ldr	r3, [r0, #32]
 8008372:	b90b      	cbnz	r3, 8008378 <_vfiprintf_r+0x18>
 8008374:	f7fc fe62 	bl	800503c <__sinit>
 8008378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800837a:	07d9      	lsls	r1, r3, #31
 800837c:	d405      	bmi.n	800838a <_vfiprintf_r+0x2a>
 800837e:	89ab      	ldrh	r3, [r5, #12]
 8008380:	059a      	lsls	r2, r3, #22
 8008382:	d402      	bmi.n	800838a <_vfiprintf_r+0x2a>
 8008384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008386:	f7fc ff70 	bl	800526a <__retarget_lock_acquire_recursive>
 800838a:	89ab      	ldrh	r3, [r5, #12]
 800838c:	071b      	lsls	r3, r3, #28
 800838e:	d501      	bpl.n	8008394 <_vfiprintf_r+0x34>
 8008390:	692b      	ldr	r3, [r5, #16]
 8008392:	b99b      	cbnz	r3, 80083bc <_vfiprintf_r+0x5c>
 8008394:	4629      	mov	r1, r5
 8008396:	4630      	mov	r0, r6
 8008398:	f000 f93a 	bl	8008610 <__swsetup_r>
 800839c:	b170      	cbz	r0, 80083bc <_vfiprintf_r+0x5c>
 800839e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083a0:	07dc      	lsls	r4, r3, #31
 80083a2:	d504      	bpl.n	80083ae <_vfiprintf_r+0x4e>
 80083a4:	f04f 30ff 	mov.w	r0, #4294967295
 80083a8:	b01d      	add	sp, #116	; 0x74
 80083aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ae:	89ab      	ldrh	r3, [r5, #12]
 80083b0:	0598      	lsls	r0, r3, #22
 80083b2:	d4f7      	bmi.n	80083a4 <_vfiprintf_r+0x44>
 80083b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083b6:	f7fc ff59 	bl	800526c <__retarget_lock_release_recursive>
 80083ba:	e7f3      	b.n	80083a4 <_vfiprintf_r+0x44>
 80083bc:	2300      	movs	r3, #0
 80083be:	9309      	str	r3, [sp, #36]	; 0x24
 80083c0:	2320      	movs	r3, #32
 80083c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80083ca:	2330      	movs	r3, #48	; 0x30
 80083cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008580 <_vfiprintf_r+0x220>
 80083d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083d4:	f04f 0901 	mov.w	r9, #1
 80083d8:	4623      	mov	r3, r4
 80083da:	469a      	mov	sl, r3
 80083dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083e0:	b10a      	cbz	r2, 80083e6 <_vfiprintf_r+0x86>
 80083e2:	2a25      	cmp	r2, #37	; 0x25
 80083e4:	d1f9      	bne.n	80083da <_vfiprintf_r+0x7a>
 80083e6:	ebba 0b04 	subs.w	fp, sl, r4
 80083ea:	d00b      	beq.n	8008404 <_vfiprintf_r+0xa4>
 80083ec:	465b      	mov	r3, fp
 80083ee:	4622      	mov	r2, r4
 80083f0:	4629      	mov	r1, r5
 80083f2:	4630      	mov	r0, r6
 80083f4:	f7ff ffa2 	bl	800833c <__sfputs_r>
 80083f8:	3001      	adds	r0, #1
 80083fa:	f000 80a9 	beq.w	8008550 <_vfiprintf_r+0x1f0>
 80083fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008400:	445a      	add	r2, fp
 8008402:	9209      	str	r2, [sp, #36]	; 0x24
 8008404:	f89a 3000 	ldrb.w	r3, [sl]
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 80a1 	beq.w	8008550 <_vfiprintf_r+0x1f0>
 800840e:	2300      	movs	r3, #0
 8008410:	f04f 32ff 	mov.w	r2, #4294967295
 8008414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008418:	f10a 0a01 	add.w	sl, sl, #1
 800841c:	9304      	str	r3, [sp, #16]
 800841e:	9307      	str	r3, [sp, #28]
 8008420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008424:	931a      	str	r3, [sp, #104]	; 0x68
 8008426:	4654      	mov	r4, sl
 8008428:	2205      	movs	r2, #5
 800842a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800842e:	4854      	ldr	r0, [pc, #336]	; (8008580 <_vfiprintf_r+0x220>)
 8008430:	f7f7 ff06 	bl	8000240 <memchr>
 8008434:	9a04      	ldr	r2, [sp, #16]
 8008436:	b9d8      	cbnz	r0, 8008470 <_vfiprintf_r+0x110>
 8008438:	06d1      	lsls	r1, r2, #27
 800843a:	bf44      	itt	mi
 800843c:	2320      	movmi	r3, #32
 800843e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008442:	0713      	lsls	r3, r2, #28
 8008444:	bf44      	itt	mi
 8008446:	232b      	movmi	r3, #43	; 0x2b
 8008448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800844c:	f89a 3000 	ldrb.w	r3, [sl]
 8008450:	2b2a      	cmp	r3, #42	; 0x2a
 8008452:	d015      	beq.n	8008480 <_vfiprintf_r+0x120>
 8008454:	9a07      	ldr	r2, [sp, #28]
 8008456:	4654      	mov	r4, sl
 8008458:	2000      	movs	r0, #0
 800845a:	f04f 0c0a 	mov.w	ip, #10
 800845e:	4621      	mov	r1, r4
 8008460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008464:	3b30      	subs	r3, #48	; 0x30
 8008466:	2b09      	cmp	r3, #9
 8008468:	d94d      	bls.n	8008506 <_vfiprintf_r+0x1a6>
 800846a:	b1b0      	cbz	r0, 800849a <_vfiprintf_r+0x13a>
 800846c:	9207      	str	r2, [sp, #28]
 800846e:	e014      	b.n	800849a <_vfiprintf_r+0x13a>
 8008470:	eba0 0308 	sub.w	r3, r0, r8
 8008474:	fa09 f303 	lsl.w	r3, r9, r3
 8008478:	4313      	orrs	r3, r2
 800847a:	9304      	str	r3, [sp, #16]
 800847c:	46a2      	mov	sl, r4
 800847e:	e7d2      	b.n	8008426 <_vfiprintf_r+0xc6>
 8008480:	9b03      	ldr	r3, [sp, #12]
 8008482:	1d19      	adds	r1, r3, #4
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	9103      	str	r1, [sp, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	bfbb      	ittet	lt
 800848c:	425b      	neglt	r3, r3
 800848e:	f042 0202 	orrlt.w	r2, r2, #2
 8008492:	9307      	strge	r3, [sp, #28]
 8008494:	9307      	strlt	r3, [sp, #28]
 8008496:	bfb8      	it	lt
 8008498:	9204      	strlt	r2, [sp, #16]
 800849a:	7823      	ldrb	r3, [r4, #0]
 800849c:	2b2e      	cmp	r3, #46	; 0x2e
 800849e:	d10c      	bne.n	80084ba <_vfiprintf_r+0x15a>
 80084a0:	7863      	ldrb	r3, [r4, #1]
 80084a2:	2b2a      	cmp	r3, #42	; 0x2a
 80084a4:	d134      	bne.n	8008510 <_vfiprintf_r+0x1b0>
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	1d1a      	adds	r2, r3, #4
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	9203      	str	r2, [sp, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	bfb8      	it	lt
 80084b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80084b6:	3402      	adds	r4, #2
 80084b8:	9305      	str	r3, [sp, #20]
 80084ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008590 <_vfiprintf_r+0x230>
 80084be:	7821      	ldrb	r1, [r4, #0]
 80084c0:	2203      	movs	r2, #3
 80084c2:	4650      	mov	r0, sl
 80084c4:	f7f7 febc 	bl	8000240 <memchr>
 80084c8:	b138      	cbz	r0, 80084da <_vfiprintf_r+0x17a>
 80084ca:	9b04      	ldr	r3, [sp, #16]
 80084cc:	eba0 000a 	sub.w	r0, r0, sl
 80084d0:	2240      	movs	r2, #64	; 0x40
 80084d2:	4082      	lsls	r2, r0
 80084d4:	4313      	orrs	r3, r2
 80084d6:	3401      	adds	r4, #1
 80084d8:	9304      	str	r3, [sp, #16]
 80084da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084de:	4829      	ldr	r0, [pc, #164]	; (8008584 <_vfiprintf_r+0x224>)
 80084e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084e4:	2206      	movs	r2, #6
 80084e6:	f7f7 feab 	bl	8000240 <memchr>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d03f      	beq.n	800856e <_vfiprintf_r+0x20e>
 80084ee:	4b26      	ldr	r3, [pc, #152]	; (8008588 <_vfiprintf_r+0x228>)
 80084f0:	bb1b      	cbnz	r3, 800853a <_vfiprintf_r+0x1da>
 80084f2:	9b03      	ldr	r3, [sp, #12]
 80084f4:	3307      	adds	r3, #7
 80084f6:	f023 0307 	bic.w	r3, r3, #7
 80084fa:	3308      	adds	r3, #8
 80084fc:	9303      	str	r3, [sp, #12]
 80084fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008500:	443b      	add	r3, r7
 8008502:	9309      	str	r3, [sp, #36]	; 0x24
 8008504:	e768      	b.n	80083d8 <_vfiprintf_r+0x78>
 8008506:	fb0c 3202 	mla	r2, ip, r2, r3
 800850a:	460c      	mov	r4, r1
 800850c:	2001      	movs	r0, #1
 800850e:	e7a6      	b.n	800845e <_vfiprintf_r+0xfe>
 8008510:	2300      	movs	r3, #0
 8008512:	3401      	adds	r4, #1
 8008514:	9305      	str	r3, [sp, #20]
 8008516:	4619      	mov	r1, r3
 8008518:	f04f 0c0a 	mov.w	ip, #10
 800851c:	4620      	mov	r0, r4
 800851e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008522:	3a30      	subs	r2, #48	; 0x30
 8008524:	2a09      	cmp	r2, #9
 8008526:	d903      	bls.n	8008530 <_vfiprintf_r+0x1d0>
 8008528:	2b00      	cmp	r3, #0
 800852a:	d0c6      	beq.n	80084ba <_vfiprintf_r+0x15a>
 800852c:	9105      	str	r1, [sp, #20]
 800852e:	e7c4      	b.n	80084ba <_vfiprintf_r+0x15a>
 8008530:	fb0c 2101 	mla	r1, ip, r1, r2
 8008534:	4604      	mov	r4, r0
 8008536:	2301      	movs	r3, #1
 8008538:	e7f0      	b.n	800851c <_vfiprintf_r+0x1bc>
 800853a:	ab03      	add	r3, sp, #12
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	462a      	mov	r2, r5
 8008540:	4b12      	ldr	r3, [pc, #72]	; (800858c <_vfiprintf_r+0x22c>)
 8008542:	a904      	add	r1, sp, #16
 8008544:	4630      	mov	r0, r6
 8008546:	f7fb ff3f 	bl	80043c8 <_printf_float>
 800854a:	4607      	mov	r7, r0
 800854c:	1c78      	adds	r0, r7, #1
 800854e:	d1d6      	bne.n	80084fe <_vfiprintf_r+0x19e>
 8008550:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008552:	07d9      	lsls	r1, r3, #31
 8008554:	d405      	bmi.n	8008562 <_vfiprintf_r+0x202>
 8008556:	89ab      	ldrh	r3, [r5, #12]
 8008558:	059a      	lsls	r2, r3, #22
 800855a:	d402      	bmi.n	8008562 <_vfiprintf_r+0x202>
 800855c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800855e:	f7fc fe85 	bl	800526c <__retarget_lock_release_recursive>
 8008562:	89ab      	ldrh	r3, [r5, #12]
 8008564:	065b      	lsls	r3, r3, #25
 8008566:	f53f af1d 	bmi.w	80083a4 <_vfiprintf_r+0x44>
 800856a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800856c:	e71c      	b.n	80083a8 <_vfiprintf_r+0x48>
 800856e:	ab03      	add	r3, sp, #12
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	462a      	mov	r2, r5
 8008574:	4b05      	ldr	r3, [pc, #20]	; (800858c <_vfiprintf_r+0x22c>)
 8008576:	a904      	add	r1, sp, #16
 8008578:	4630      	mov	r0, r6
 800857a:	f7fc f9ad 	bl	80048d8 <_printf_i>
 800857e:	e7e4      	b.n	800854a <_vfiprintf_r+0x1ea>
 8008580:	08008be9 	.word	0x08008be9
 8008584:	08008bf3 	.word	0x08008bf3
 8008588:	080043c9 	.word	0x080043c9
 800858c:	0800833d 	.word	0x0800833d
 8008590:	08008bef 	.word	0x08008bef

08008594 <__swbuf_r>:
 8008594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008596:	460e      	mov	r6, r1
 8008598:	4614      	mov	r4, r2
 800859a:	4605      	mov	r5, r0
 800859c:	b118      	cbz	r0, 80085a6 <__swbuf_r+0x12>
 800859e:	6a03      	ldr	r3, [r0, #32]
 80085a0:	b90b      	cbnz	r3, 80085a6 <__swbuf_r+0x12>
 80085a2:	f7fc fd4b 	bl	800503c <__sinit>
 80085a6:	69a3      	ldr	r3, [r4, #24]
 80085a8:	60a3      	str	r3, [r4, #8]
 80085aa:	89a3      	ldrh	r3, [r4, #12]
 80085ac:	071a      	lsls	r2, r3, #28
 80085ae:	d525      	bpl.n	80085fc <__swbuf_r+0x68>
 80085b0:	6923      	ldr	r3, [r4, #16]
 80085b2:	b31b      	cbz	r3, 80085fc <__swbuf_r+0x68>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	6922      	ldr	r2, [r4, #16]
 80085b8:	1a98      	subs	r0, r3, r2
 80085ba:	6963      	ldr	r3, [r4, #20]
 80085bc:	b2f6      	uxtb	r6, r6
 80085be:	4283      	cmp	r3, r0
 80085c0:	4637      	mov	r7, r6
 80085c2:	dc04      	bgt.n	80085ce <__swbuf_r+0x3a>
 80085c4:	4621      	mov	r1, r4
 80085c6:	4628      	mov	r0, r5
 80085c8:	f7ff fa2c 	bl	8007a24 <_fflush_r>
 80085cc:	b9e0      	cbnz	r0, 8008608 <__swbuf_r+0x74>
 80085ce:	68a3      	ldr	r3, [r4, #8]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	60a3      	str	r3, [r4, #8]
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	1c5a      	adds	r2, r3, #1
 80085d8:	6022      	str	r2, [r4, #0]
 80085da:	701e      	strb	r6, [r3, #0]
 80085dc:	6962      	ldr	r2, [r4, #20]
 80085de:	1c43      	adds	r3, r0, #1
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d004      	beq.n	80085ee <__swbuf_r+0x5a>
 80085e4:	89a3      	ldrh	r3, [r4, #12]
 80085e6:	07db      	lsls	r3, r3, #31
 80085e8:	d506      	bpl.n	80085f8 <__swbuf_r+0x64>
 80085ea:	2e0a      	cmp	r6, #10
 80085ec:	d104      	bne.n	80085f8 <__swbuf_r+0x64>
 80085ee:	4621      	mov	r1, r4
 80085f0:	4628      	mov	r0, r5
 80085f2:	f7ff fa17 	bl	8007a24 <_fflush_r>
 80085f6:	b938      	cbnz	r0, 8008608 <__swbuf_r+0x74>
 80085f8:	4638      	mov	r0, r7
 80085fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085fc:	4621      	mov	r1, r4
 80085fe:	4628      	mov	r0, r5
 8008600:	f000 f806 	bl	8008610 <__swsetup_r>
 8008604:	2800      	cmp	r0, #0
 8008606:	d0d5      	beq.n	80085b4 <__swbuf_r+0x20>
 8008608:	f04f 37ff 	mov.w	r7, #4294967295
 800860c:	e7f4      	b.n	80085f8 <__swbuf_r+0x64>
	...

08008610 <__swsetup_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4b2a      	ldr	r3, [pc, #168]	; (80086bc <__swsetup_r+0xac>)
 8008614:	4605      	mov	r5, r0
 8008616:	6818      	ldr	r0, [r3, #0]
 8008618:	460c      	mov	r4, r1
 800861a:	b118      	cbz	r0, 8008624 <__swsetup_r+0x14>
 800861c:	6a03      	ldr	r3, [r0, #32]
 800861e:	b90b      	cbnz	r3, 8008624 <__swsetup_r+0x14>
 8008620:	f7fc fd0c 	bl	800503c <__sinit>
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800862a:	0718      	lsls	r0, r3, #28
 800862c:	d422      	bmi.n	8008674 <__swsetup_r+0x64>
 800862e:	06d9      	lsls	r1, r3, #27
 8008630:	d407      	bmi.n	8008642 <__swsetup_r+0x32>
 8008632:	2309      	movs	r3, #9
 8008634:	602b      	str	r3, [r5, #0]
 8008636:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800863a:	81a3      	strh	r3, [r4, #12]
 800863c:	f04f 30ff 	mov.w	r0, #4294967295
 8008640:	e034      	b.n	80086ac <__swsetup_r+0x9c>
 8008642:	0758      	lsls	r0, r3, #29
 8008644:	d512      	bpl.n	800866c <__swsetup_r+0x5c>
 8008646:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008648:	b141      	cbz	r1, 800865c <__swsetup_r+0x4c>
 800864a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800864e:	4299      	cmp	r1, r3
 8008650:	d002      	beq.n	8008658 <__swsetup_r+0x48>
 8008652:	4628      	mov	r0, r5
 8008654:	f7fd fc08 	bl	8005e68 <_free_r>
 8008658:	2300      	movs	r3, #0
 800865a:	6363      	str	r3, [r4, #52]	; 0x34
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008662:	81a3      	strh	r3, [r4, #12]
 8008664:	2300      	movs	r3, #0
 8008666:	6063      	str	r3, [r4, #4]
 8008668:	6923      	ldr	r3, [r4, #16]
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	f043 0308 	orr.w	r3, r3, #8
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	6923      	ldr	r3, [r4, #16]
 8008676:	b94b      	cbnz	r3, 800868c <__swsetup_r+0x7c>
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800867e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008682:	d003      	beq.n	800868c <__swsetup_r+0x7c>
 8008684:	4621      	mov	r1, r4
 8008686:	4628      	mov	r0, r5
 8008688:	f000 f884 	bl	8008794 <__smakebuf_r>
 800868c:	89a0      	ldrh	r0, [r4, #12]
 800868e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008692:	f010 0301 	ands.w	r3, r0, #1
 8008696:	d00a      	beq.n	80086ae <__swsetup_r+0x9e>
 8008698:	2300      	movs	r3, #0
 800869a:	60a3      	str	r3, [r4, #8]
 800869c:	6963      	ldr	r3, [r4, #20]
 800869e:	425b      	negs	r3, r3
 80086a0:	61a3      	str	r3, [r4, #24]
 80086a2:	6923      	ldr	r3, [r4, #16]
 80086a4:	b943      	cbnz	r3, 80086b8 <__swsetup_r+0xa8>
 80086a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086aa:	d1c4      	bne.n	8008636 <__swsetup_r+0x26>
 80086ac:	bd38      	pop	{r3, r4, r5, pc}
 80086ae:	0781      	lsls	r1, r0, #30
 80086b0:	bf58      	it	pl
 80086b2:	6963      	ldrpl	r3, [r4, #20]
 80086b4:	60a3      	str	r3, [r4, #8]
 80086b6:	e7f4      	b.n	80086a2 <__swsetup_r+0x92>
 80086b8:	2000      	movs	r0, #0
 80086ba:	e7f7      	b.n	80086ac <__swsetup_r+0x9c>
 80086bc:	2000007c 	.word	0x2000007c

080086c0 <_raise_r>:
 80086c0:	291f      	cmp	r1, #31
 80086c2:	b538      	push	{r3, r4, r5, lr}
 80086c4:	4604      	mov	r4, r0
 80086c6:	460d      	mov	r5, r1
 80086c8:	d904      	bls.n	80086d4 <_raise_r+0x14>
 80086ca:	2316      	movs	r3, #22
 80086cc:	6003      	str	r3, [r0, #0]
 80086ce:	f04f 30ff 	mov.w	r0, #4294967295
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80086d6:	b112      	cbz	r2, 80086de <_raise_r+0x1e>
 80086d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086dc:	b94b      	cbnz	r3, 80086f2 <_raise_r+0x32>
 80086de:	4620      	mov	r0, r4
 80086e0:	f000 f830 	bl	8008744 <_getpid_r>
 80086e4:	462a      	mov	r2, r5
 80086e6:	4601      	mov	r1, r0
 80086e8:	4620      	mov	r0, r4
 80086ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086ee:	f000 b817 	b.w	8008720 <_kill_r>
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d00a      	beq.n	800870c <_raise_r+0x4c>
 80086f6:	1c59      	adds	r1, r3, #1
 80086f8:	d103      	bne.n	8008702 <_raise_r+0x42>
 80086fa:	2316      	movs	r3, #22
 80086fc:	6003      	str	r3, [r0, #0]
 80086fe:	2001      	movs	r0, #1
 8008700:	e7e7      	b.n	80086d2 <_raise_r+0x12>
 8008702:	2400      	movs	r4, #0
 8008704:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008708:	4628      	mov	r0, r5
 800870a:	4798      	blx	r3
 800870c:	2000      	movs	r0, #0
 800870e:	e7e0      	b.n	80086d2 <_raise_r+0x12>

08008710 <raise>:
 8008710:	4b02      	ldr	r3, [pc, #8]	; (800871c <raise+0xc>)
 8008712:	4601      	mov	r1, r0
 8008714:	6818      	ldr	r0, [r3, #0]
 8008716:	f7ff bfd3 	b.w	80086c0 <_raise_r>
 800871a:	bf00      	nop
 800871c:	2000007c 	.word	0x2000007c

08008720 <_kill_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4d07      	ldr	r5, [pc, #28]	; (8008740 <_kill_r+0x20>)
 8008724:	2300      	movs	r3, #0
 8008726:	4604      	mov	r4, r0
 8008728:	4608      	mov	r0, r1
 800872a:	4611      	mov	r1, r2
 800872c:	602b      	str	r3, [r5, #0]
 800872e:	f7f9 f9e5 	bl	8001afc <_kill>
 8008732:	1c43      	adds	r3, r0, #1
 8008734:	d102      	bne.n	800873c <_kill_r+0x1c>
 8008736:	682b      	ldr	r3, [r5, #0]
 8008738:	b103      	cbz	r3, 800873c <_kill_r+0x1c>
 800873a:	6023      	str	r3, [r4, #0]
 800873c:	bd38      	pop	{r3, r4, r5, pc}
 800873e:	bf00      	nop
 8008740:	20000420 	.word	0x20000420

08008744 <_getpid_r>:
 8008744:	f7f9 b9d2 	b.w	8001aec <_getpid>

08008748 <__swhatbuf_r>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	460c      	mov	r4, r1
 800874c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008750:	2900      	cmp	r1, #0
 8008752:	b096      	sub	sp, #88	; 0x58
 8008754:	4615      	mov	r5, r2
 8008756:	461e      	mov	r6, r3
 8008758:	da0d      	bge.n	8008776 <__swhatbuf_r+0x2e>
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008760:	f04f 0100 	mov.w	r1, #0
 8008764:	bf0c      	ite	eq
 8008766:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800876a:	2340      	movne	r3, #64	; 0x40
 800876c:	2000      	movs	r0, #0
 800876e:	6031      	str	r1, [r6, #0]
 8008770:	602b      	str	r3, [r5, #0]
 8008772:	b016      	add	sp, #88	; 0x58
 8008774:	bd70      	pop	{r4, r5, r6, pc}
 8008776:	466a      	mov	r2, sp
 8008778:	f000 f848 	bl	800880c <_fstat_r>
 800877c:	2800      	cmp	r0, #0
 800877e:	dbec      	blt.n	800875a <__swhatbuf_r+0x12>
 8008780:	9901      	ldr	r1, [sp, #4]
 8008782:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008786:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800878a:	4259      	negs	r1, r3
 800878c:	4159      	adcs	r1, r3
 800878e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008792:	e7eb      	b.n	800876c <__swhatbuf_r+0x24>

08008794 <__smakebuf_r>:
 8008794:	898b      	ldrh	r3, [r1, #12]
 8008796:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008798:	079d      	lsls	r5, r3, #30
 800879a:	4606      	mov	r6, r0
 800879c:	460c      	mov	r4, r1
 800879e:	d507      	bpl.n	80087b0 <__smakebuf_r+0x1c>
 80087a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	6123      	str	r3, [r4, #16]
 80087a8:	2301      	movs	r3, #1
 80087aa:	6163      	str	r3, [r4, #20]
 80087ac:	b002      	add	sp, #8
 80087ae:	bd70      	pop	{r4, r5, r6, pc}
 80087b0:	ab01      	add	r3, sp, #4
 80087b2:	466a      	mov	r2, sp
 80087b4:	f7ff ffc8 	bl	8008748 <__swhatbuf_r>
 80087b8:	9900      	ldr	r1, [sp, #0]
 80087ba:	4605      	mov	r5, r0
 80087bc:	4630      	mov	r0, r6
 80087be:	f7fd fbc7 	bl	8005f50 <_malloc_r>
 80087c2:	b948      	cbnz	r0, 80087d8 <__smakebuf_r+0x44>
 80087c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087c8:	059a      	lsls	r2, r3, #22
 80087ca:	d4ef      	bmi.n	80087ac <__smakebuf_r+0x18>
 80087cc:	f023 0303 	bic.w	r3, r3, #3
 80087d0:	f043 0302 	orr.w	r3, r3, #2
 80087d4:	81a3      	strh	r3, [r4, #12]
 80087d6:	e7e3      	b.n	80087a0 <__smakebuf_r+0xc>
 80087d8:	89a3      	ldrh	r3, [r4, #12]
 80087da:	6020      	str	r0, [r4, #0]
 80087dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e0:	81a3      	strh	r3, [r4, #12]
 80087e2:	9b00      	ldr	r3, [sp, #0]
 80087e4:	6163      	str	r3, [r4, #20]
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	6120      	str	r0, [r4, #16]
 80087ea:	b15b      	cbz	r3, 8008804 <__smakebuf_r+0x70>
 80087ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087f0:	4630      	mov	r0, r6
 80087f2:	f000 f81d 	bl	8008830 <_isatty_r>
 80087f6:	b128      	cbz	r0, 8008804 <__smakebuf_r+0x70>
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	f023 0303 	bic.w	r3, r3, #3
 80087fe:	f043 0301 	orr.w	r3, r3, #1
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	431d      	orrs	r5, r3
 8008808:	81a5      	strh	r5, [r4, #12]
 800880a:	e7cf      	b.n	80087ac <__smakebuf_r+0x18>

0800880c <_fstat_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4d07      	ldr	r5, [pc, #28]	; (800882c <_fstat_r+0x20>)
 8008810:	2300      	movs	r3, #0
 8008812:	4604      	mov	r4, r0
 8008814:	4608      	mov	r0, r1
 8008816:	4611      	mov	r1, r2
 8008818:	602b      	str	r3, [r5, #0]
 800881a:	f7f9 f9ce 	bl	8001bba <_fstat>
 800881e:	1c43      	adds	r3, r0, #1
 8008820:	d102      	bne.n	8008828 <_fstat_r+0x1c>
 8008822:	682b      	ldr	r3, [r5, #0]
 8008824:	b103      	cbz	r3, 8008828 <_fstat_r+0x1c>
 8008826:	6023      	str	r3, [r4, #0]
 8008828:	bd38      	pop	{r3, r4, r5, pc}
 800882a:	bf00      	nop
 800882c:	20000420 	.word	0x20000420

08008830 <_isatty_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4d06      	ldr	r5, [pc, #24]	; (800884c <_isatty_r+0x1c>)
 8008834:	2300      	movs	r3, #0
 8008836:	4604      	mov	r4, r0
 8008838:	4608      	mov	r0, r1
 800883a:	602b      	str	r3, [r5, #0]
 800883c:	f7f9 f9cd 	bl	8001bda <_isatty>
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	d102      	bne.n	800884a <_isatty_r+0x1a>
 8008844:	682b      	ldr	r3, [r5, #0]
 8008846:	b103      	cbz	r3, 800884a <_isatty_r+0x1a>
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	20000420 	.word	0x20000420

08008850 <_init>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	bf00      	nop
 8008854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008856:	bc08      	pop	{r3}
 8008858:	469e      	mov	lr, r3
 800885a:	4770      	bx	lr

0800885c <_fini>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	bf00      	nop
 8008860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008862:	bc08      	pop	{r3}
 8008864:	469e      	mov	lr, r3
 8008866:	4770      	bx	lr
