
Temp_Sproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc70  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f0  0800be70  0800be70  0001be70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c760  0800c760  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c760  0800c760  0001c760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c768  0800c768  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c768  0800c768  0001c768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c76c  0800c76c  0001c76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200001ec  0800c95c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  0800c95c  00020660  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cce3  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025a2  00000000  00000000  0002cf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  0002f4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000940  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d24  00000000  00000000  00030a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f4d  00000000  00000000  0005a79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6b9d  00000000  00000000  0006c6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004410  00000000  00000000  00163288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00167698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ec 	.word	0x200001ec
 800021c:	00000000 	.word	0x00000000
 8000220:	0800be58 	.word	0x0800be58

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f0 	.word	0x200001f0
 800023c:	0800be58 	.word	0x0800be58

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <SELECT>:
/***************************************
 * SPI functions
 **************************************/
/* slave select */
static void SELECT(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2110      	movs	r1, #16
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <SELECT+0x18>)
 80009de:	f002 fa03 	bl	8002de8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f001 fb04 	bl	8001ff0 <HAL_Delay>
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40020000 	.word	0x40020000

080009f0 <DESELECT>:
/* slave deselect */
static void DESELECT(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2110      	movs	r1, #16
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <DESELECT+0x18>)
 80009fa:	f002 f9f5 	bl	8002de8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f001 faf6 	bl	8001ff0 <HAL_Delay>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40020000 	.word	0x40020000

08000a0c <SPI_TxByte>:
/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a16:	bf00      	nop
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <SPI_TxByte+0x30>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d1f8      	bne.n	8000a18 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000a26:	1df9      	adds	r1, r7, #7
 8000a28:	2364      	movs	r3, #100	; 0x64
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <SPI_TxByte+0x30>)
 8000a2e:	f002 ff90 	bl	8003952 <HAL_SPI_Transmit>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000258 	.word	0x20000258

08000a40 <SPI_TxBuffer>:
/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a4c:	bf00      	nop
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <SPI_TxBuffer+0x30>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d1f8      	bne.n	8000a4e <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000a5c:	887a      	ldrh	r2, [r7, #2]
 8000a5e:	2364      	movs	r3, #100	; 0x64
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	4803      	ldr	r0, [pc, #12]	; (8000a70 <SPI_TxBuffer+0x30>)
 8000a64:	f002 ff75 	bl	8003952 <HAL_SPI_Transmit>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000258 	.word	0x20000258

08000a74 <SPI_RxByte>:
/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000a7a:	23ff      	movs	r3, #255	; 0xff
 8000a7c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a7e:	bf00      	nop
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <SPI_RxByte+0x34>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d1f8      	bne.n	8000a80 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000a8e:	1dba      	adds	r2, r7, #6
 8000a90:	1df9      	adds	r1, r7, #7
 8000a92:	2364      	movs	r3, #100	; 0x64
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2301      	movs	r3, #1
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <SPI_RxByte+0x34>)
 8000a9a:	f003 f8c8 	bl	8003c2e <HAL_SPI_TransmitReceive>
  return data;
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000258 	.word	0x20000258

08000aac <SPI_RxBytePtr>:
/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000ab4:	f7ff ffde 	bl	8000a74 <SPI_RxByte>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	701a      	strb	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/
/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <SD_ReadyWait+0x30>)
 8000ad0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ad4:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000ad6:	f7ff ffcd 	bl	8000a74 <SPI_RxByte>
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2bff      	cmp	r3, #255	; 0xff
 8000ae2:	d003      	beq.n	8000aec <SD_ReadyWait+0x24>
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SD_ReadyWait+0x30>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1f4      	bne.n	8000ad6 <SD_ReadyWait+0xe>
  return res;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000020a 	.word	0x2000020a

08000afc <SD_PowerOn>:
/* power on */
static void SD_PowerOn(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8000b02:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000b06:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8000b08:	f7ff ff72 	bl	80009f0 <DESELECT>
  for(int i = 0; i < 10; i++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	e005      	b.n	8000b1e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000b12:	20ff      	movs	r0, #255	; 0xff
 8000b14:	f7ff ff7a 	bl	8000a0c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	2b09      	cmp	r3, #9
 8000b22:	ddf6      	ble.n	8000b12 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8000b24:	f7ff ff56 	bl	80009d4 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000b28:	2340      	movs	r3, #64	; 0x40
 8000b2a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000b3c:	2395      	movs	r3, #149	; 0x95
 8000b3e:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8000b40:	463b      	mov	r3, r7
 8000b42:	2106      	movs	r1, #6
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff7b 	bl	8000a40 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8000b4a:	e002      	b.n	8000b52 <SD_PowerOn+0x56>
  {
    cnt--;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000b52:	f7ff ff8f 	bl	8000a74 <SPI_RxByte>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d002      	beq.n	8000b62 <SD_PowerOn+0x66>
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1f4      	bne.n	8000b4c <SD_PowerOn+0x50>
  }
  DESELECT();
 8000b62:	f7ff ff45 	bl	80009f0 <DESELECT>
  SPI_TxByte(0XFF);
 8000b66:	20ff      	movs	r0, #255	; 0xff
 8000b68:	f7ff ff50 	bl	8000a0c <SPI_TxByte>
  PowerFlag = 1;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <SD_PowerOn+0x80>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000020d 	.word	0x2000020d

08000b80 <SD_PowerOff>:
/* power off */
static void SD_PowerOff(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <SD_PowerOff+0x14>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	2000020d 	.word	0x2000020d

08000b98 <SD_CheckPower>:
/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <SD_CheckPower+0x14>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	2000020d 	.word	0x2000020d

08000bb0 <SD_RxDataBlock>:
/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <SD_RxDataBlock+0x58>)
 8000bbc:	22c8      	movs	r2, #200	; 0xc8
 8000bbe:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000bc0:	f7ff ff58 	bl	8000a74 <SPI_RxByte>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2bff      	cmp	r3, #255	; 0xff
 8000bcc:	d103      	bne.n	8000bd6 <SD_RxDataBlock+0x26>
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <SD_RxDataBlock+0x58>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f4      	bne.n	8000bc0 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	2bfe      	cmp	r3, #254	; 0xfe
 8000bda:	d001      	beq.n	8000be0 <SD_RxDataBlock+0x30>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e00f      	b.n	8000c00 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff60 	bl	8000aac <SPI_RxBytePtr>
  } while(len--);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	1e5a      	subs	r2, r3, #1
 8000bf0:	603a      	str	r2, [r7, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1f4      	bne.n	8000be0 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8000bf6:	f7ff ff3d 	bl	8000a74 <SPI_RxByte>
  SPI_RxByte();
 8000bfa:	f7ff ff3b 	bl	8000a74 <SPI_RxByte>
  return TRUE;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000208 	.word	0x20000208

08000c0c <SD_TxDataBlock>:
/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000c1c:	f7ff ff54 	bl	8000ac8 <SD_ReadyWait>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2bff      	cmp	r3, #255	; 0xff
 8000c24:	d001      	beq.n	8000c2a <SD_TxDataBlock+0x1e>
 8000c26:	2300      	movs	r3, #0
 8000c28:	e02f      	b.n	8000c8a <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8000c2a:	78fb      	ldrb	r3, [r7, #3]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff feed 	bl	8000a0c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	2bfd      	cmp	r3, #253	; 0xfd
 8000c36:	d020      	beq.n	8000c7a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000c38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff feff 	bl	8000a40 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8000c42:	f7ff ff17 	bl	8000a74 <SPI_RxByte>
    SPI_RxByte();
 8000c46:	f7ff ff15 	bl	8000a74 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8000c4a:	e00b      	b.n	8000c64 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000c4c:	f7ff ff12 	bl	8000a74 <SPI_RxByte>
 8000c50:	4603      	mov	r3, r0
 8000c52:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	f003 031f 	and.w	r3, r3, #31
 8000c5a:	2b05      	cmp	r3, #5
 8000c5c:	d006      	beq.n	8000c6c <SD_TxDataBlock+0x60>
      i++;
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	3301      	adds	r3, #1
 8000c62:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	2b40      	cmp	r3, #64	; 0x40
 8000c68:	d9f0      	bls.n	8000c4c <SD_TxDataBlock+0x40>
 8000c6a:	e000      	b.n	8000c6e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000c6c:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8000c6e:	bf00      	nop
 8000c70:	f7ff ff00 	bl	8000a74 <SPI_RxByte>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0fa      	beq.n	8000c70 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	f003 031f 	and.w	r3, r3, #31
 8000c80:	2b05      	cmp	r3, #5
 8000c82:	d101      	bne.n	8000c88 <SD_TxDataBlock+0x7c>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <SD_TxDataBlock+0x7e>
  return FALSE;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <SD_SendCmd>:
#endif /* _USE_WRITE */
/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b084      	sub	sp, #16
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	6039      	str	r1, [r7, #0]
 8000c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000c9e:	f7ff ff13 	bl	8000ac8 <SD_ReadyWait>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2bff      	cmp	r3, #255	; 0xff
 8000ca6:	d001      	beq.n	8000cac <SD_SendCmd+0x1a>
 8000ca8:	23ff      	movs	r3, #255	; 0xff
 8000caa:	e042      	b.n	8000d32 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff feac 	bl	8000a0c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	0e1b      	lsrs	r3, r3, #24
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fea6 	bl	8000a0c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	0c1b      	lsrs	r3, r3, #16
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fea0 	bl	8000a0c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	0a1b      	lsrs	r3, r3, #8
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fe9a 	bl	8000a0c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fe95 	bl	8000a0c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b40      	cmp	r3, #64	; 0x40
 8000ce6:	d102      	bne.n	8000cee <SD_SendCmd+0x5c>
 8000ce8:	2395      	movs	r3, #149	; 0x95
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e007      	b.n	8000cfe <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b48      	cmp	r3, #72	; 0x48
 8000cf2:	d102      	bne.n	8000cfa <SD_SendCmd+0x68>
 8000cf4:	2387      	movs	r3, #135	; 0x87
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e001      	b.n	8000cfe <SD_SendCmd+0x6c>
  else crc = 1;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fe83 	bl	8000a0c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b4c      	cmp	r3, #76	; 0x4c
 8000d0a:	d101      	bne.n	8000d10 <SD_SendCmd+0x7e>
 8000d0c:	f7ff feb2 	bl	8000a74 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8000d10:	230a      	movs	r3, #10
 8000d12:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000d14:	f7ff feae 	bl	8000a74 <SPI_RxByte>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000d1c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	da05      	bge.n	8000d30 <SD_SendCmd+0x9e>
 8000d24:	7bbb      	ldrb	r3, [r7, #14]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	73bb      	strb	r3, [r7, #14]
 8000d2a:	7bbb      	ldrb	r3, [r7, #14]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1f1      	bne.n	8000d14 <SD_SendCmd+0x82>
  return res;
 8000d30:	7b7b      	ldrb	r3, [r7, #13]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SD_disk_initialize+0x14>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e0d1      	b.n	8000ef4 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000d50:	4b6a      	ldr	r3, [pc, #424]	; (8000efc <SD_disk_initialize+0x1c0>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <SD_disk_initialize+0x2a>
 8000d5e:	4b67      	ldr	r3, [pc, #412]	; (8000efc <SD_disk_initialize+0x1c0>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	e0c6      	b.n	8000ef4 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8000d66:	f7ff fec9 	bl	8000afc <SD_PowerOn>
  /* slave select */
  SELECT();
 8000d6a:	f7ff fe33 	bl	80009d4 <SELECT>
  /* check disk type */
  type = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000d72:	2100      	movs	r1, #0
 8000d74:	2040      	movs	r0, #64	; 0x40
 8000d76:	f7ff ff8c 	bl	8000c92 <SD_SendCmd>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	f040 80a1 	bne.w	8000ec4 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000d82:	4b5f      	ldr	r3, [pc, #380]	; (8000f00 <SD_disk_initialize+0x1c4>)
 8000d84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d88:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000d8a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000d8e:	2048      	movs	r0, #72	; 0x48
 8000d90:	f7ff ff7f 	bl	8000c92 <SD_SendCmd>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d155      	bne.n	8000e46 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]
 8000d9e:	e00c      	b.n	8000dba <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000da0:	7bfc      	ldrb	r4, [r7, #15]
 8000da2:	f7ff fe67 	bl	8000a74 <SPI_RxByte>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	f104 0310 	add.w	r3, r4, #16
 8000dae:	443b      	add	r3, r7
 8000db0:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	3301      	adds	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d9ef      	bls.n	8000da0 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000dc0:	7abb      	ldrb	r3, [r7, #10]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d17e      	bne.n	8000ec4 <SD_disk_initialize+0x188>
 8000dc6:	7afb      	ldrb	r3, [r7, #11]
 8000dc8:	2baa      	cmp	r3, #170	; 0xaa
 8000dca:	d17b      	bne.n	8000ec4 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2077      	movs	r0, #119	; 0x77
 8000dd0:	f7ff ff5f 	bl	8000c92 <SD_SendCmd>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d807      	bhi.n	8000dea <SD_disk_initialize+0xae>
 8000dda:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000dde:	2069      	movs	r0, #105	; 0x69
 8000de0:	f7ff ff57 	bl	8000c92 <SD_SendCmd>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d004      	beq.n	8000df4 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000dea:	4b45      	ldr	r3, [pc, #276]	; (8000f00 <SD_disk_initialize+0x1c4>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1ec      	bne.n	8000dcc <SD_disk_initialize+0x90>
 8000df2:	e000      	b.n	8000df6 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000df4:	bf00      	nop
        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000df6:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <SD_disk_initialize+0x1c4>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d062      	beq.n	8000ec4 <SD_disk_initialize+0x188>
 8000dfe:	2100      	movs	r1, #0
 8000e00:	207a      	movs	r0, #122	; 0x7a
 8000e02:	f7ff ff46 	bl	8000c92 <SD_SendCmd>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d15b      	bne.n	8000ec4 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	e00c      	b.n	8000e2c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8000e12:	7bfc      	ldrb	r4, [r7, #15]
 8000e14:	f7ff fe2e 	bl	8000a74 <SPI_RxByte>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	f104 0310 	add.w	r3, r4, #16
 8000e20:	443b      	add	r3, r7
 8000e22:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d9ef      	bls.n	8000e12 <SD_disk_initialize+0xd6>
          }
          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000e32:	7a3b      	ldrb	r3, [r7, #8]
 8000e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SD_disk_initialize+0x104>
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	e000      	b.n	8000e42 <SD_disk_initialize+0x106>
 8000e40:	2304      	movs	r3, #4
 8000e42:	73bb      	strb	r3, [r7, #14]
 8000e44:	e03e      	b.n	8000ec4 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000e46:	2100      	movs	r1, #0
 8000e48:	2077      	movs	r0, #119	; 0x77
 8000e4a:	f7ff ff22 	bl	8000c92 <SD_SendCmd>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d808      	bhi.n	8000e66 <SD_disk_initialize+0x12a>
 8000e54:	2100      	movs	r1, #0
 8000e56:	2069      	movs	r0, #105	; 0x69
 8000e58:	f7ff ff1b 	bl	8000c92 <SD_SendCmd>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d801      	bhi.n	8000e66 <SD_disk_initialize+0x12a>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e000      	b.n	8000e68 <SD_disk_initialize+0x12c>
 8000e66:	2301      	movs	r3, #1
 8000e68:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8000e6a:	7bbb      	ldrb	r3, [r7, #14]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d10e      	bne.n	8000e8e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000e70:	2100      	movs	r1, #0
 8000e72:	2077      	movs	r0, #119	; 0x77
 8000e74:	f7ff ff0d 	bl	8000c92 <SD_SendCmd>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d80e      	bhi.n	8000e9c <SD_disk_initialize+0x160>
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2069      	movs	r0, #105	; 0x69
 8000e82:	f7ff ff06 	bl	8000c92 <SD_SendCmd>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d107      	bne.n	8000e9c <SD_disk_initialize+0x160>
 8000e8c:	e00c      	b.n	8000ea8 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2041      	movs	r0, #65	; 0x41
 8000e92:	f7ff fefe 	bl	8000c92 <SD_SendCmd>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d004      	beq.n	8000ea6 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <SD_disk_initialize+0x1c4>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1e2      	bne.n	8000e6a <SD_disk_initialize+0x12e>
 8000ea4:	e000      	b.n	8000ea8 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000ea6:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <SD_disk_initialize+0x1c4>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d007      	beq.n	8000ec0 <SD_disk_initialize+0x184>
 8000eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb4:	2050      	movs	r0, #80	; 0x50
 8000eb6:	f7ff feec 	bl	8000c92 <SD_SendCmd>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SD_disk_initialize+0x188>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8000ec4:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <SD_disk_initialize+0x1c8>)
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8000eca:	f7ff fd91 	bl	80009f0 <DESELECT>
  SPI_RxByte();
 8000ece:	f7ff fdd1 	bl	8000a74 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d008      	beq.n	8000eea <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <SD_disk_initialize+0x1c0>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SD_disk_initialize+0x1c0>)
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	e001      	b.n	8000eee <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000eea:	f7ff fe49 	bl	8000b80 <SD_PowerOff>
  }
  return Stat;
 8000eee:	4b03      	ldr	r3, [pc, #12]	; (8000efc <SD_disk_initialize+0x1c0>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b2db      	uxtb	r3, r3
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd90      	pop	{r4, r7, pc}
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000208 	.word	0x20000208
 8000f04:	2000020c 	.word	0x2000020c

08000f08 <SD_disk_status>:
/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SD_disk_status+0x14>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e002      	b.n	8000f22 <SD_disk_status+0x1a>
  return Stat;
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SD_disk_status+0x28>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000000 	.word	0x20000000

08000f34 <SD_disk_read>:
/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <SD_disk_read+0x1c>
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <SD_disk_read+0x20>
 8000f50:	2304      	movs	r3, #4
 8000f52:	e051      	b.n	8000ff8 <SD_disk_read+0xc4>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f54:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <SD_disk_read+0xcc>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SD_disk_read+0x32>
 8000f62:	2303      	movs	r3, #3
 8000f64:	e048      	b.n	8000ff8 <SD_disk_read+0xc4>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <SD_disk_read+0xd0>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d102      	bne.n	8000f78 <SD_disk_read+0x44>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	025b      	lsls	r3, r3, #9
 8000f76:	607b      	str	r3, [r7, #4]
  SELECT();
 8000f78:	f7ff fd2c 	bl	80009d4 <SELECT>
  if (count == 1)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d111      	bne.n	8000fa6 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	2051      	movs	r0, #81	; 0x51
 8000f86:	f7ff fe84 	bl	8000c92 <SD_SendCmd>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d129      	bne.n	8000fe4 <SD_disk_read+0xb0>
 8000f90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f94:	68b8      	ldr	r0, [r7, #8]
 8000f96:	f7ff fe0b 	bl	8000bb0 <SD_RxDataBlock>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d021      	beq.n	8000fe4 <SD_disk_read+0xb0>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	e01e      	b.n	8000fe4 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	2052      	movs	r0, #82	; 0x52
 8000faa:	f7ff fe72 	bl	8000c92 <SD_SendCmd>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d117      	bne.n	8000fe4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb8:	68b8      	ldr	r0, [r7, #8]
 8000fba:	f7ff fdf9 	bl	8000bb0 <SD_RxDataBlock>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00a      	beq.n	8000fda <SD_disk_read+0xa6>
        buff += 512;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000fca:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1ed      	bne.n	8000fb4 <SD_disk_read+0x80>
 8000fd8:	e000      	b.n	8000fdc <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000fda:	bf00      	nop
      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	204c      	movs	r0, #76	; 0x4c
 8000fe0:	f7ff fe57 	bl	8000c92 <SD_SendCmd>
    }
  }
  /* Idle */
  DESELECT();
 8000fe4:	f7ff fd04 	bl	80009f0 <DESELECT>
  SPI_RxByte();
 8000fe8:	f7ff fd44 	bl	8000a74 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	bf14      	ite	ne
 8000ff2:	2301      	movne	r3, #1
 8000ff4:	2300      	moveq	r3, #0
 8000ff6:	b2db      	uxtb	r3, r3
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000000 	.word	0x20000000
 8001004:	2000020c 	.word	0x2000020c

08001008 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	4603      	mov	r3, r0
 8001016:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d102      	bne.n	8001024 <SD_disk_write+0x1c>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <SD_disk_write+0x20>
 8001024:	2304      	movs	r3, #4
 8001026:	e06b      	b.n	8001100 <SD_disk_write+0xf8>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001028:	4b37      	ldr	r3, [pc, #220]	; (8001108 <SD_disk_write+0x100>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SD_disk_write+0x32>
 8001036:	2303      	movs	r3, #3
 8001038:	e062      	b.n	8001100 <SD_disk_write+0xf8>
  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800103a:	4b33      	ldr	r3, [pc, #204]	; (8001108 <SD_disk_write+0x100>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SD_disk_write+0x44>
 8001048:	2302      	movs	r3, #2
 800104a:	e059      	b.n	8001100 <SD_disk_write+0xf8>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800104c:	4b2f      	ldr	r3, [pc, #188]	; (800110c <SD_disk_write+0x104>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <SD_disk_write+0x56>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	025b      	lsls	r3, r3, #9
 800105c:	607b      	str	r3, [r7, #4]
  SELECT();
 800105e:	f7ff fcb9 	bl	80009d4 <SELECT>
  if (count == 1)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d110      	bne.n	800108a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	2058      	movs	r0, #88	; 0x58
 800106c:	f7ff fe11 	bl	8000c92 <SD_SendCmd>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d13a      	bne.n	80010ec <SD_disk_write+0xe4>
 8001076:	21fe      	movs	r1, #254	; 0xfe
 8001078:	68b8      	ldr	r0, [r7, #8]
 800107a:	f7ff fdc7 	bl	8000c0c <SD_TxDataBlock>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d033      	beq.n	80010ec <SD_disk_write+0xe4>
      count = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	e030      	b.n	80010ec <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <SD_disk_write+0x104>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d007      	beq.n	80010a6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001096:	2100      	movs	r1, #0
 8001098:	2077      	movs	r0, #119	; 0x77
 800109a:	f7ff fdfa 	bl	8000c92 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800109e:	6839      	ldr	r1, [r7, #0]
 80010a0:	2057      	movs	r0, #87	; 0x57
 80010a2:	f7ff fdf6 	bl	8000c92 <SD_SendCmd>
    }
    if (SD_SendCmd(CMD25, sector) == 0)
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	2059      	movs	r0, #89	; 0x59
 80010aa:	f7ff fdf2 	bl	8000c92 <SD_SendCmd>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d11b      	bne.n	80010ec <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80010b4:	21fc      	movs	r1, #252	; 0xfc
 80010b6:	68b8      	ldr	r0, [r7, #8]
 80010b8:	f7ff fda8 	bl	8000c0c <SD_TxDataBlock>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00a      	beq.n	80010d8 <SD_disk_write+0xd0>
        buff += 512;
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80010c8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1ee      	bne.n	80010b4 <SD_disk_write+0xac>
 80010d6:	e000      	b.n	80010da <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80010d8:	bf00      	nop
      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80010da:	21fd      	movs	r1, #253	; 0xfd
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fd95 	bl	8000c0c <SD_TxDataBlock>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <SD_disk_write+0xe4>
      {
        count = 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	603b      	str	r3, [r7, #0]
      }
    }
  }
  /* Idle */
  DESELECT();
 80010ec:	f7ff fc80 	bl	80009f0 <DESELECT>
  SPI_RxByte();
 80010f0:	f7ff fcc0 	bl	8000a74 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bf14      	ite	ne
 80010fa:	2301      	movne	r3, #1
 80010fc:	2300      	moveq	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000000 	.word	0x20000000
 800110c:	2000020c 	.word	0x2000020c

08001110 <SD_disk_ioctl>:
#endif /* _USE_WRITE */
/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b08b      	sub	sp, #44	; 0x2c
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	603a      	str	r2, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	460b      	mov	r3, r1
 800111e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	623b      	str	r3, [r7, #32]
  WORD csize;
  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SD_disk_ioctl+0x1e>
 800112a:	2304      	movs	r3, #4
 800112c:	e115      	b.n	800135a <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (ctrl == CTRL_POWER)
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	2b05      	cmp	r3, #5
 8001138:	d124      	bne.n	8001184 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800113a:	6a3b      	ldr	r3, [r7, #32]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d012      	beq.n	8001168 <SD_disk_ioctl+0x58>
 8001142:	2b02      	cmp	r3, #2
 8001144:	dc1a      	bgt.n	800117c <SD_disk_ioctl+0x6c>
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <SD_disk_ioctl+0x40>
 800114a:	2b01      	cmp	r3, #1
 800114c:	d006      	beq.n	800115c <SD_disk_ioctl+0x4c>
 800114e:	e015      	b.n	800117c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001150:	f7ff fd16 	bl	8000b80 <SD_PowerOff>
      res = RES_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800115a:	e0fc      	b.n	8001356 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 800115c:	f7ff fcce 	bl	8000afc <SD_PowerOn>
      res = RES_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001166:	e0f6      	b.n	8001356 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	1c5c      	adds	r4, r3, #1
 800116c:	f7ff fd14 	bl	8000b98 <SD_CheckPower>
 8001170:	4603      	mov	r3, r0
 8001172:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800117a:	e0ec      	b.n	8001356 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 800117c:	2304      	movs	r3, #4
 800117e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001182:	e0e8      	b.n	8001356 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001184:	4b77      	ldr	r3, [pc, #476]	; (8001364 <SD_disk_ioctl+0x254>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SD_disk_ioctl+0x86>
 8001192:	2303      	movs	r3, #3
 8001194:	e0e1      	b.n	800135a <SD_disk_ioctl+0x24a>
    SELECT();
 8001196:	f7ff fc1d 	bl	80009d4 <SELECT>
    switch (ctrl)
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	2b0d      	cmp	r3, #13
 800119e:	f200 80cb 	bhi.w	8001338 <SD_disk_ioctl+0x228>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <SD_disk_ioctl+0x98>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	080012a3 	.word	0x080012a3
 80011ac:	080011e1 	.word	0x080011e1
 80011b0:	08001293 	.word	0x08001293
 80011b4:	08001339 	.word	0x08001339
 80011b8:	08001339 	.word	0x08001339
 80011bc:	08001339 	.word	0x08001339
 80011c0:	08001339 	.word	0x08001339
 80011c4:	08001339 	.word	0x08001339
 80011c8:	08001339 	.word	0x08001339
 80011cc:	08001339 	.word	0x08001339
 80011d0:	08001339 	.word	0x08001339
 80011d4:	080012b5 	.word	0x080012b5
 80011d8:	080012d9 	.word	0x080012d9
 80011dc:	080012fd 	.word	0x080012fd
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80011e0:	2100      	movs	r1, #0
 80011e2:	2049      	movs	r0, #73	; 0x49
 80011e4:	f7ff fd55 	bl	8000c92 <SD_SendCmd>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 80a8 	bne.w	8001340 <SD_disk_ioctl+0x230>
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2110      	movs	r1, #16
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fcda 	bl	8000bb0 <SD_RxDataBlock>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 809e 	beq.w	8001340 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8001204:	7b3b      	ldrb	r3, [r7, #12]
 8001206:	099b      	lsrs	r3, r3, #6
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d10e      	bne.n	800122c <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800120e:	7d7b      	ldrb	r3, [r7, #21]
 8001210:	b29a      	uxth	r2, r3
 8001212:	7d3b      	ldrb	r3, [r7, #20]
 8001214:	b29b      	uxth	r3, r3
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b29b      	uxth	r3, r3
 800121a:	4413      	add	r3, r2
 800121c:	b29b      	uxth	r3, r3
 800121e:	3301      	adds	r3, #1
 8001220:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001222:	8bfb      	ldrh	r3, [r7, #30]
 8001224:	029a      	lsls	r2, r3, #10
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e02e      	b.n	800128a <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800122c:	7c7b      	ldrb	r3, [r7, #17]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	b2da      	uxtb	r2, r3
 8001234:	7dbb      	ldrb	r3, [r7, #22]
 8001236:	09db      	lsrs	r3, r3, #7
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4413      	add	r3, r2
 800123c:	b2da      	uxtb	r2, r3
 800123e:	7d7b      	ldrb	r3, [r7, #21]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f003 0306 	and.w	r3, r3, #6
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b2db      	uxtb	r3, r3
 800124e:	3302      	adds	r3, #2
 8001250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001254:	7d3b      	ldrb	r3, [r7, #20]
 8001256:	099b      	lsrs	r3, r3, #6
 8001258:	b2db      	uxtb	r3, r3
 800125a:	b29a      	uxth	r2, r3
 800125c:	7cfb      	ldrb	r3, [r7, #19]
 800125e:	b29b      	uxth	r3, r3
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	b29b      	uxth	r3, r3
 8001264:	4413      	add	r3, r2
 8001266:	b29a      	uxth	r2, r3
 8001268:	7cbb      	ldrb	r3, [r7, #18]
 800126a:	029b      	lsls	r3, r3, #10
 800126c:	b29b      	uxth	r3, r3
 800126e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001272:	b29b      	uxth	r3, r3
 8001274:	4413      	add	r3, r2
 8001276:	b29b      	uxth	r3, r3
 8001278:	3301      	adds	r3, #1
 800127a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800127c:	8bfa      	ldrh	r2, [r7, #30]
 800127e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001282:	3b09      	subs	r3, #9
 8001284:	409a      	lsls	r2, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001290:	e056      	b.n	8001340 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001298:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012a0:	e055      	b.n	800134e <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80012a2:	f7ff fc11 	bl	8000ac8 <SD_ReadyWait>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2bff      	cmp	r3, #255	; 0xff
 80012aa:	d14b      	bne.n	8001344 <SD_disk_ioctl+0x234>
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012b2:	e047      	b.n	8001344 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80012b4:	2100      	movs	r1, #0
 80012b6:	2049      	movs	r0, #73	; 0x49
 80012b8:	f7ff fceb 	bl	8000c92 <SD_SendCmd>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d142      	bne.n	8001348 <SD_disk_ioctl+0x238>
 80012c2:	2110      	movs	r1, #16
 80012c4:	6a38      	ldr	r0, [r7, #32]
 80012c6:	f7ff fc73 	bl	8000bb0 <SD_RxDataBlock>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d03b      	beq.n	8001348 <SD_disk_ioctl+0x238>
 80012d0:	2300      	movs	r3, #0
 80012d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012d6:	e037      	b.n	8001348 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80012d8:	2100      	movs	r1, #0
 80012da:	204a      	movs	r0, #74	; 0x4a
 80012dc:	f7ff fcd9 	bl	8000c92 <SD_SendCmd>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d132      	bne.n	800134c <SD_disk_ioctl+0x23c>
 80012e6:	2110      	movs	r1, #16
 80012e8:	6a38      	ldr	r0, [r7, #32]
 80012ea:	f7ff fc61 	bl	8000bb0 <SD_RxDataBlock>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d02b      	beq.n	800134c <SD_disk_ioctl+0x23c>
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012fa:	e027      	b.n	800134c <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80012fc:	2100      	movs	r1, #0
 80012fe:	207a      	movs	r0, #122	; 0x7a
 8001300:	f7ff fcc7 	bl	8000c92 <SD_SendCmd>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d116      	bne.n	8001338 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 800130a:	2300      	movs	r3, #0
 800130c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001310:	e00b      	b.n	800132a <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8001312:	6a3c      	ldr	r4, [r7, #32]
 8001314:	1c63      	adds	r3, r4, #1
 8001316:	623b      	str	r3, [r7, #32]
 8001318:	f7ff fbac 	bl	8000a74 <SPI_RxByte>
 800131c:	4603      	mov	r3, r0
 800131e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001324:	3301      	adds	r3, #1
 8001326:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800132a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800132e:	2b03      	cmp	r3, #3
 8001330:	d9ef      	bls.n	8001312 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8001338:	2304      	movs	r3, #4
 800133a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800133e:	e006      	b.n	800134e <SD_disk_ioctl+0x23e>
      break;
 8001340:	bf00      	nop
 8001342:	e004      	b.n	800134e <SD_disk_ioctl+0x23e>
      break;
 8001344:	bf00      	nop
 8001346:	e002      	b.n	800134e <SD_disk_ioctl+0x23e>
      break;
 8001348:	bf00      	nop
 800134a:	e000      	b.n	800134e <SD_disk_ioctl+0x23e>
      break;
 800134c:	bf00      	nop
    }
    DESELECT();
 800134e:	f7ff fb4f 	bl	80009f0 <DESELECT>
    SPI_RxByte();
 8001352:	f7ff fb8f 	bl	8000a74 <SPI_RxByte>
  }
  return res;
 8001356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800135a:	4618      	mov	r0, r3
 800135c:	372c      	adds	r7, #44	; 0x2c
 800135e:	46bd      	mov	sp, r7
 8001360:	bd90      	pop	{r4, r7, pc}
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000

08001368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136c:	f000 fde3 	bl	8001f36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001370:	f000 f858 	bl	8001424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001374:	f000 f956 	bl	8001624 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001378:	f000 f916 	bl	80015a8 <MX_SPI1_Init>
  MX_FATFS_Init();
 800137c:	f002 fff2 	bl	8004364 <MX_FATFS_Init>
  MX_ADC1_Init();
 8001380:	f000 f8c0 	bl	8001504 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Measurement_of_ADC_Voltage_18650();
 8001384:	f000 fb76 	bl	8001a74 <Measurement_of_ADC_Voltage_18650>
	  seconds_since_start++;
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <main+0xac>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4a21      	ldr	r2, [pc, #132]	; (8001414 <main+0xac>)
 8001390:	6013      	str	r3, [r2, #0]
	  process_SD_card();
 8001392:	f000 fa05 	bl	80017a0 <process_SD_card>

	  if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET)
 8001396:	2101      	movs	r1, #1
 8001398:	481f      	ldr	r0, [pc, #124]	; (8001418 <main+0xb0>)
 800139a:	f001 fd0d 	bl	8002db8 <HAL_GPIO_ReadPin>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d105      	bne.n	80013b0 <main+0x48>
	  	  	  {
		  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2108      	movs	r1, #8
 80013a8:	481b      	ldr	r0, [pc, #108]	; (8001418 <main+0xb0>)
 80013aa:	f001 fd1d 	bl	8002de8 <HAL_GPIO_WritePin>
 80013ae:	e010      	b.n	80013d2 <main+0x6a>
	  	  	  }

	  	  else if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_RESET) {
 80013b0:	2101      	movs	r1, #1
 80013b2:	4819      	ldr	r0, [pc, #100]	; (8001418 <main+0xb0>)
 80013b4:	f001 fd00 	bl	8002db8 <HAL_GPIO_ReadPin>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d109      	bne.n	80013d2 <main+0x6a>
	  		HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2108      	movs	r1, #8
 80013c2:	4815      	ldr	r0, [pc, #84]	; (8001418 <main+0xb0>)
 80013c4:	f001 fd10 	bl	8002de8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2101      	movs	r1, #1
 80013cc:	4813      	ldr	r0, [pc, #76]	; (800141c <main+0xb4>)
 80013ce:	f001 fd0b 	bl	8002de8 <HAL_GPIO_WritePin>
	  	  }

	  //Testing Load Switch at 2 seconds
	  	HAL_GPIO_WritePin(Load_Switch_CMOS_GPIO_Port, Load_Switch_CMOS_Pin, GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d8:	4811      	ldr	r0, [pc, #68]	; (8001420 <main+0xb8>)
 80013da:	f001 fd05 	bl	8002de8 <HAL_GPIO_WritePin>
	  	HAL_Delay(3000);
 80013de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013e2:	f000 fe05 	bl	8001ff0 <HAL_Delay>
	  	HAL_GPIO_WritePin(Load_Switch_CMOS_GPIO_Port, Load_Switch_CMOS_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <main+0xb8>)
 80013ee:	f001 fcfb 	bl	8002de8 <HAL_GPIO_WritePin>

	  	HAL_GPIO_WritePin(Load_Switch_18650_GPIO_Port, Load_Switch_18650_Pin, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <main+0xb8>)
 80013fa:	f001 fcf5 	bl	8002de8 <HAL_GPIO_WritePin>
	  	HAL_Delay(3000);
 80013fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001402:	f000 fdf5 	bl	8001ff0 <HAL_Delay>
	  	HAL_GPIO_WritePin(Load_Switch_18650_GPIO_Port, Load_Switch_18650_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <main+0xb8>)
 800140e:	f001 fceb 	bl	8002de8 <HAL_GPIO_WritePin>
	  Measurement_of_ADC_Voltage_18650();
 8001412:	e7b7      	b.n	8001384 <main+0x1c>
 8001414:	200002cc 	.word	0x200002cc
 8001418:	40020800 	.word	0x40020800
 800141c:	40021800 	.word	0x40021800
 8001420:	40020400 	.word	0x40020400

08001424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b094      	sub	sp, #80	; 0x50
 8001428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	2234      	movs	r2, #52	; 0x34
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f007 f99f 	bl	8008776 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001448:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <SystemClock_Config+0xd8>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	4a2b      	ldr	r2, [pc, #172]	; (80014fc <SystemClock_Config+0xd8>)
 800144e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001452:	6413      	str	r3, [r2, #64]	; 0x40
 8001454:	4b29      	ldr	r3, [pc, #164]	; (80014fc <SystemClock_Config+0xd8>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <SystemClock_Config+0xdc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001468:	4a25      	ldr	r2, [pc, #148]	; (8001500 <SystemClock_Config+0xdc>)
 800146a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <SystemClock_Config+0xdc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800147c:	2302      	movs	r3, #2
 800147e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001480:	2301      	movs	r3, #1
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001484:	2310      	movs	r3, #16
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001488:	2302      	movs	r3, #2
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800148c:	2300      	movs	r3, #0
 800148e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001490:	2308      	movs	r3, #8
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001494:	2360      	movs	r3, #96	; 0x60
 8001496:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001498:	2302      	movs	r3, #2
 800149a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800149c:	2304      	movs	r3, #4
 800149e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 fd07 	bl	8002ebc <HAL_RCC_OscConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014b4:	f000 fb4e 	bl	8001b54 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014b8:	f001 fcb0 	bl	8002e1c <HAL_PWREx_EnableOverDrive>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80014c2:	f000 fb47 	bl	8001b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c6:	230f      	movs	r3, #15
 80014c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ca:	2302      	movs	r3, #2
 80014cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	2103      	movs	r1, #3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 ff98 	bl	8003418 <HAL_RCC_ClockConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80014ee:	f000 fb31 	bl	8001b54 <Error_Handler>
  }
}
 80014f2:	bf00      	nop
 80014f4:	3750      	adds	r7, #80	; 0x50
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40007000 	.word	0x40007000

08001504 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800150a:	463b      	mov	r3, r7
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <MX_ADC1_Init+0x98>)
 8001518:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <MX_ADC1_Init+0x9c>)
 800151a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800151c:	4b1f      	ldr	r3, [pc, #124]	; (800159c <MX_ADC1_Init+0x98>)
 800151e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <MX_ADC1_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <MX_ADC1_Init+0x98>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_ADC1_Init+0x98>)
 8001532:	2201      	movs	r2, #1
 8001534:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <MX_ADC1_Init+0x98>)
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <MX_ADC1_Init+0x98>)
 8001540:	2200      	movs	r2, #0
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_ADC1_Init+0x98>)
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <MX_ADC1_Init+0xa0>)
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_ADC1_Init+0x98>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_ADC1_Init+0x98>)
 8001552:	2201      	movs	r2, #1
 8001554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_ADC1_Init+0x98>)
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_ADC1_Init+0x98>)
 8001560:	2201      	movs	r2, #1
 8001562:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001564:	480d      	ldr	r0, [pc, #52]	; (800159c <MX_ADC1_Init+0x98>)
 8001566:	f000 fd67 	bl	8002038 <HAL_ADC_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001570:	f000 faf0 	bl	8001b54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001574:	2303      	movs	r3, #3
 8001576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001578:	2301      	movs	r3, #1
 800157a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_ADC1_Init+0x98>)
 8001586:	f000 ff35 	bl	80023f4 <HAL_ADC_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001590:	f000 fae0 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000210 	.word	0x20000210
 80015a0:	40012000 	.word	0x40012000
 80015a4:	0f000001 	.word	0x0f000001

080015a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_SPI1_Init+0x74>)
 80015ae:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <MX_SPI1_Init+0x78>)
 80015b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_SPI1_Init+0x74>)
 80015b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_SPI1_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <MX_SPI1_Init+0x74>)
 80015c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_SPI1_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <MX_SPI1_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_SPI1_Init+0x74>)
 80015d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_SPI1_Init+0x74>)
 80015de:	2210      	movs	r2, #16
 80015e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_SPI1_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_SPI1_Init+0x74>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_SPI1_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_SPI1_Init+0x74>)
 80015f6:	2207      	movs	r2, #7
 80015f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_SPI1_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_SPI1_Init+0x74>)
 8001602:	2208      	movs	r2, #8
 8001604:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_SPI1_Init+0x74>)
 8001608:	f002 f8f8 	bl	80037fc <HAL_SPI_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001612:	f000 fa9f 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000258 	.word	0x20000258
 8001620:	40013000 	.word	0x40013000

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800163a:	4b53      	ldr	r3, [pc, #332]	; (8001788 <MX_GPIO_Init+0x164>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a52      	ldr	r2, [pc, #328]	; (8001788 <MX_GPIO_Init+0x164>)
 8001640:	f043 0320 	orr.w	r3, r3, #32
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b50      	ldr	r3, [pc, #320]	; (8001788 <MX_GPIO_Init+0x164>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0320 	and.w	r3, r3, #32
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <MX_GPIO_Init+0x164>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a4c      	ldr	r2, [pc, #304]	; (8001788 <MX_GPIO_Init+0x164>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b4a      	ldr	r3, [pc, #296]	; (8001788 <MX_GPIO_Init+0x164>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b47      	ldr	r3, [pc, #284]	; (8001788 <MX_GPIO_Init+0x164>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a46      	ldr	r2, [pc, #280]	; (8001788 <MX_GPIO_Init+0x164>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b44      	ldr	r3, [pc, #272]	; (8001788 <MX_GPIO_Init+0x164>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001682:	4b41      	ldr	r3, [pc, #260]	; (8001788 <MX_GPIO_Init+0x164>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a40      	ldr	r2, [pc, #256]	; (8001788 <MX_GPIO_Init+0x164>)
 8001688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <MX_GPIO_Init+0x164>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <MX_GPIO_Init+0x164>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a3a      	ldr	r2, [pc, #232]	; (8001788 <MX_GPIO_Init+0x164>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b38      	ldr	r3, [pc, #224]	; (8001788 <MX_GPIO_Init+0x164>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2108      	movs	r1, #8
 80016b6:	4835      	ldr	r0, [pc, #212]	; (800178c <MX_GPIO_Init+0x168>)
 80016b8:	f001 fb96 	bl	8002de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	2110      	movs	r1, #16
 80016c0:	4833      	ldr	r0, [pc, #204]	; (8001790 <MX_GPIO_Init+0x16c>)
 80016c2:	f001 fb91 	bl	8002de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2101      	movs	r1, #1
 80016ca:	4832      	ldr	r0, [pc, #200]	; (8001794 <MX_GPIO_Init+0x170>)
 80016cc:	f001 fb8c 	bl	8002de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Load_Switch_CMOS_Pin|Load_Switch_18650_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80016d6:	4830      	ldr	r0, [pc, #192]	; (8001798 <MX_GPIO_Init+0x174>)
 80016d8:	f001 fb86 	bl	8002de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_Write_Button_Pin */
  GPIO_InitStruct.Pin = SD_Write_Button_Pin;
 80016dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Write_Button_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	482a      	ldr	r0, [pc, #168]	; (800179c <MX_GPIO_Init+0x178>)
 80016f2:	f001 f9b5 	bl	8002a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CardDetect_Input_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Input_Pin;
 80016f6:	2301      	movs	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CardDetect_Input_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4820      	ldr	r0, [pc, #128]	; (800178c <MX_GPIO_Init+0x168>)
 800170a:	f001 f9a9 	bl	8002a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CardDetect_Output_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Output_Pin;
 800170e:	2308      	movs	r3, #8
 8001710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CardDetect_Output_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4819      	ldr	r0, [pc, #100]	; (800178c <MX_GPIO_Init+0x168>)
 8001726:	f001 f99b 	bl	8002a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800172a:	2310      	movs	r3, #16
 800172c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	4813      	ldr	r0, [pc, #76]	; (8001790 <MX_GPIO_Init+0x16c>)
 8001742:	f001 f98d 	bl	8002a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001746:	2301      	movs	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	480d      	ldr	r0, [pc, #52]	; (8001794 <MX_GPIO_Init+0x170>)
 800175e:	f001 f97f 	bl	8002a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : Load_Switch_CMOS_Pin Load_Switch_18650_Pin */
  GPIO_InitStruct.Pin = Load_Switch_CMOS_Pin|Load_Switch_18650_Pin;
 8001762:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	4807      	ldr	r0, [pc, #28]	; (8001798 <MX_GPIO_Init+0x174>)
 800177c:	f001 f970 	bl	8002a60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	; 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40023800 	.word	0x40023800
 800178c:	40020800 	.word	0x40020800
 8001790:	40020000 	.word	0x40020000
 8001794:	40021800 	.word	0x40021800
 8001798:	40020400 	.word	0x40020400
 800179c:	40021400 	.word	0x40021400

080017a0 <process_SD_card>:

/* USER CODE BEGIN 4 */
void process_SD_card( void )
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
  char res_time[32];

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 80017aa:	4b9e      	ldr	r3, [pc, #632]	; (8001a24 <process_SD_card+0x284>)
 80017ac:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80017b0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80017b4:	443b      	add	r3, r7
 80017b6:	2201      	movs	r2, #1
 80017b8:	499b      	ldr	r1, [pc, #620]	; (8001a28 <process_SD_card+0x288>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f005 f81a 	bl	80067f4 <f_mount>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f242 1227 	movw	r2, #8487	; 0x2127
 80017c6:	443a      	add	r2, r7
 80017c8:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 80017ca:	f242 1327 	movw	r3, #8487	; 0x2127
 80017ce:	443b      	add	r3, r7
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 8118 	bne.w	8001a08 <process_SD_card+0x268>
    //printf("SD Card Mounted Successfully!!!\r\n");
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;
    f_getfree("", &fre_clust, &pfs);
 80017d8:	4a94      	ldr	r2, [pc, #592]	; (8001a2c <process_SD_card+0x28c>)
 80017da:	f242 1328 	movw	r3, #8488	; 0x2128
 80017de:	4413      	add	r3, r2
 80017e0:	19da      	adds	r2, r3, r7
 80017e2:	4b93      	ldr	r3, [pc, #588]	; (8001a30 <process_SD_card+0x290>)
 80017e4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80017e8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80017ec:	443b      	add	r3, r7
 80017ee:	4619      	mov	r1, r3
 80017f0:	488d      	ldr	r0, [pc, #564]	; (8001a28 <process_SD_card+0x288>)
 80017f2:	f005 fdac 	bl	800734e <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80017f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	3b02      	subs	r3, #2
 8001804:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001808:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	8952      	ldrh	r2, [r2, #10]
 8001810:	fb02 f303 	mul.w	r3, r2, r3
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800181c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001820:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001824:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001828:	ee17 3a90 	vmov	r3, s15
 800182c:	f242 1220 	movw	r2, #8480	; 0x2120
 8001830:	443a      	add	r2, r7
 8001832:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001834:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001838:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	895b      	ldrh	r3, [r3, #10]
 8001840:	461a      	mov	r2, r3
 8001842:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001846:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	fb02 f303 	mul.w	r3, r2, r3
 8001850:	ee07 3a90 	vmov	s15, r3
 8001854:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001858:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800185c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001860:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001864:	ee17 3a90 	vmov	r3, s15
 8001868:	f242 121c 	movw	r2, #8476	; 0x211c
 800186c:	443a      	add	r2, r7
 800186e:	6013      	str	r3, [r2, #0]
    //printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
    //Open the file
    fres = f_open(&fil, "TestingReadings.csv", FA_WRITE | FA_READ | FA_OPEN_APPEND);
 8001870:	4b70      	ldr	r3, [pc, #448]	; (8001a34 <process_SD_card+0x294>)
 8001872:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001876:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800187a:	443b      	add	r3, r7
 800187c:	2233      	movs	r2, #51	; 0x33
 800187e:	496e      	ldr	r1, [pc, #440]	; (8001a38 <process_SD_card+0x298>)
 8001880:	4618      	mov	r0, r3
 8001882:	f004 fffd 	bl	8006880 <f_open>
 8001886:	4603      	mov	r3, r0
 8001888:	f242 1227 	movw	r2, #8487	; 0x2127
 800188c:	443a      	add	r2, r7
 800188e:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8001890:	f242 1327 	movw	r3, #8487	; 0x2127
 8001894:	443b      	add	r3, r7
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f040 80b7 	bne.w	8001a0c <process_SD_card+0x26c>
    }
    //printf("Writing data!!!\r\n");
    //write the data

    //Write the Time for each write
    sprintf(res_time,"%u,", seconds_since_start);
 800189e:	4b67      	ldr	r3, [pc, #412]	; (8001a3c <process_SD_card+0x29c>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b67      	ldr	r3, [pc, #412]	; (8001a40 <process_SD_card+0x2a0>)
 80018a4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80018a8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80018ac:	443b      	add	r3, r7
 80018ae:	4965      	ldr	r1, [pc, #404]	; (8001a44 <process_SD_card+0x2a4>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f006 fefd 	bl	80086b0 <siprintf>
    f_puts(res_time, &fil);
 80018b6:	4a5f      	ldr	r2, [pc, #380]	; (8001a34 <process_SD_card+0x294>)
 80018b8:	f242 1328 	movw	r3, #8488	; 0x2128
 80018bc:	4413      	add	r3, r2
 80018be:	19da      	adds	r2, r3, r7
 80018c0:	4b5f      	ldr	r3, [pc, #380]	; (8001a40 <process_SD_card+0x2a0>)
 80018c2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80018c6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80018ca:	443b      	add	r3, r7
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f005 fea6 	bl	8007620 <f_puts>

    //Write the 18650 Voltage Readings
    sprintf(res_18650, "%.3f,", V_18650);
 80018d4:	4b5c      	ldr	r3, [pc, #368]	; (8001a48 <process_SD_card+0x2a8>)
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018de:	485b      	ldr	r0, [pc, #364]	; (8001a4c <process_SD_card+0x2ac>)
 80018e0:	f242 1328 	movw	r3, #8488	; 0x2128
 80018e4:	4403      	add	r3, r0
 80018e6:	19d8      	adds	r0, r3, r7
 80018e8:	ec53 2b17 	vmov	r2, r3, d7
 80018ec:	4958      	ldr	r1, [pc, #352]	; (8001a50 <process_SD_card+0x2b0>)
 80018ee:	f006 fedf 	bl	80086b0 <siprintf>
    f_puts(res_18650, &fil);
 80018f2:	4a50      	ldr	r2, [pc, #320]	; (8001a34 <process_SD_card+0x294>)
 80018f4:	f242 1328 	movw	r3, #8488	; 0x2128
 80018f8:	4413      	add	r3, r2
 80018fa:	19da      	adds	r2, r3, r7
 80018fc:	4b53      	ldr	r3, [pc, #332]	; (8001a4c <process_SD_card+0x2ac>)
 80018fe:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001902:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001906:	443b      	add	r3, r7
 8001908:	4611      	mov	r1, r2
 800190a:	4618      	mov	r0, r3
 800190c:	f005 fe88 	bl	8007620 <f_puts>

    //Write the 18650 Current Readings
    sprintf(res_C18650, "%.3f,", C_18650);
 8001910:	4b50      	ldr	r3, [pc, #320]	; (8001a54 <process_SD_card+0x2b4>)
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800191a:	484f      	ldr	r0, [pc, #316]	; (8001a58 <process_SD_card+0x2b8>)
 800191c:	f242 1328 	movw	r3, #8488	; 0x2128
 8001920:	4403      	add	r3, r0
 8001922:	19d8      	adds	r0, r3, r7
 8001924:	ec53 2b17 	vmov	r2, r3, d7
 8001928:	4949      	ldr	r1, [pc, #292]	; (8001a50 <process_SD_card+0x2b0>)
 800192a:	f006 fec1 	bl	80086b0 <siprintf>
    f_puts(res_C18650, &fil);
 800192e:	4a41      	ldr	r2, [pc, #260]	; (8001a34 <process_SD_card+0x294>)
 8001930:	f242 1328 	movw	r3, #8488	; 0x2128
 8001934:	4413      	add	r3, r2
 8001936:	19da      	adds	r2, r3, r7
 8001938:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <process_SD_card+0x2b8>)
 800193a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800193e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001942:	443b      	add	r3, r7
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f005 fe6a 	bl	8007620 <f_puts>

    //Write the CMOS Voltage Readings
    sprintf(res_CMOS, "%.3f,", V_CMOS);
 800194c:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <process_SD_card+0x2bc>)
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001956:	4842      	ldr	r0, [pc, #264]	; (8001a60 <process_SD_card+0x2c0>)
 8001958:	f242 1328 	movw	r3, #8488	; 0x2128
 800195c:	4403      	add	r3, r0
 800195e:	19d8      	adds	r0, r3, r7
 8001960:	ec53 2b17 	vmov	r2, r3, d7
 8001964:	493a      	ldr	r1, [pc, #232]	; (8001a50 <process_SD_card+0x2b0>)
 8001966:	f006 fea3 	bl	80086b0 <siprintf>
    f_puts(res_CMOS,&fil);
 800196a:	4a32      	ldr	r2, [pc, #200]	; (8001a34 <process_SD_card+0x294>)
 800196c:	f242 1328 	movw	r3, #8488	; 0x2128
 8001970:	4413      	add	r3, r2
 8001972:	19da      	adds	r2, r3, r7
 8001974:	4b3a      	ldr	r3, [pc, #232]	; (8001a60 <process_SD_card+0x2c0>)
 8001976:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800197a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800197e:	443b      	add	r3, r7
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f005 fe4c 	bl	8007620 <f_puts>

    //Write the 18650 Current Readings
    sprintf(res_CCMOS, "%.3f, \n", C_CMOS);
 8001988:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <process_SD_card+0x2c4>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001992:	4835      	ldr	r0, [pc, #212]	; (8001a68 <process_SD_card+0x2c8>)
 8001994:	f242 1328 	movw	r3, #8488	; 0x2128
 8001998:	4403      	add	r3, r0
 800199a:	19d8      	adds	r0, r3, r7
 800199c:	ec53 2b17 	vmov	r2, r3, d7
 80019a0:	4932      	ldr	r1, [pc, #200]	; (8001a6c <process_SD_card+0x2cc>)
 80019a2:	f006 fe85 	bl	80086b0 <siprintf>
    f_puts(res_CCMOS, &fil);
 80019a6:	4a23      	ldr	r2, [pc, #140]	; (8001a34 <process_SD_card+0x294>)
 80019a8:	f242 1328 	movw	r3, #8488	; 0x2128
 80019ac:	4413      	add	r3, r2
 80019ae:	19da      	adds	r2, r3, r7
 80019b0:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <process_SD_card+0x2c8>)
 80019b2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80019b6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80019ba:	443b      	add	r3, r7
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f005 fe2e 	bl	8007620 <f_puts>



    //close your file
    f_close(&fil);
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <process_SD_card+0x294>)
 80019c6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80019ca:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80019ce:	443b      	add	r3, r7
 80019d0:	4618      	mov	r0, r3
 80019d2:	f005 fc92 	bl	80072fa <f_close>
    //Open the file
    //read the data
    f_gets(buf, sizeof(buf), &fil);
 80019d6:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <process_SD_card+0x294>)
 80019d8:	f242 1328 	movw	r3, #8488	; 0x2128
 80019dc:	4413      	add	r3, r2
 80019de:	19da      	adds	r2, r3, r7
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <process_SD_card+0x2d0>)
 80019e2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80019e6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80019ea:	443b      	add	r3, r7
 80019ec:	2164      	movs	r1, #100	; 0x64
 80019ee:	4618      	mov	r0, r3
 80019f0:	f005 fd62 	bl	80074b8 <f_gets>
    //printf("Read Data : %s\n", buf);
    //close your file
    f_close(&fil);
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <process_SD_card+0x294>)
 80019f6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80019fa:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80019fe:	443b      	add	r3, r7
 8001a00:	4618      	mov	r0, r3
 8001a02:	f005 fc7a 	bl	80072fa <f_close>
 8001a06:	e002      	b.n	8001a0e <process_SD_card+0x26e>
      break;
 8001a08:	bf00      	nop
 8001a0a:	e000      	b.n	8001a0e <process_SD_card+0x26e>
      break;
 8001a0c:	bf00      	nop
      //printf("Cannot able to delete the file\n");
    }
#endif
  } while(0);
  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4905      	ldr	r1, [pc, #20]	; (8001a28 <process_SD_card+0x288>)
 8001a12:	2000      	movs	r0, #0
 8001a14:	f004 feee 	bl	80067f4 <f_mount>
  //printf("SD Card Unmounted Successfully!!!\r\n");
}
 8001a18:	bf00      	nop
 8001a1a:	f507 5704 	add.w	r7, r7, #8448	; 0x2100
 8001a1e:	3728      	adds	r7, #40	; 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	ffffefbc 	.word	0xffffefbc
 8001a28:	0800be70 	.word	0x0800be70
 8001a2c:	ffffdee0 	.word	0xffffdee0
 8001a30:	ffffdedc 	.word	0xffffdedc
 8001a34:	ffffdf8c 	.word	0xffffdf8c
 8001a38:	0800be74 	.word	0x0800be74
 8001a3c:	200002cc 	.word	0x200002cc
 8001a40:	ffffdee4 	.word	0xffffdee4
 8001a44:	0800be88 	.word	0x0800be88
 8001a48:	200002bc 	.word	0x200002bc
 8001a4c:	ffffdf20 	.word	0xffffdf20
 8001a50:	0800be8c 	.word	0x0800be8c
 8001a54:	200002c8 	.word	0x200002c8
 8001a58:	ffffdf18 	.word	0xffffdf18
 8001a5c:	200002c0 	.word	0x200002c0
 8001a60:	ffffdf04 	.word	0xffffdf04
 8001a64:	200002c4 	.word	0x200002c4
 8001a68:	ffffdf0c 	.word	0xffffdf0c
 8001a6c:	0800be94 	.word	0x0800be94
 8001a70:	ffffdf28 	.word	0xffffdf28

08001a74 <Measurement_of_ADC_Voltage_18650>:


void Measurement_of_ADC_Voltage_18650(){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
	float V_ref = 3.3;  // This is known for each micro controller from data
 8001a7a:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <Measurement_of_ADC_Voltage_18650+0x94>)
 8001a7c:	60fb      	str	r3, [r7, #12]
		// sheet, V_ref = power supply in
		float ADC_resolution = (4096 - 1);  // 2^12 - 1
 8001a7e:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <Measurement_of_ADC_Voltage_18650+0x98>)
 8001a80:	60bb      	str	r3, [r7, #8]
		float V_stepSize = V_ref / ADC_resolution;
 8001a82:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a86:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a8e:	edc7 7a01 	vstr	s15, [r7, #4]

		//char msg[20];


	    /* Start ADC Conversion for ADC1 */
	    ADC_Select_Voltage18650();
 8001a92:	f000 f843 	bl	8001b1c <ADC_Select_Voltage18650>
	    HAL_ADC_Start(&hadc1);
 8001a96:	481e      	ldr	r0, [pc, #120]	; (8001b10 <Measurement_of_ADC_Voltage_18650+0x9c>)
 8001a98:	f000 fb12 	bl	80020c0 <HAL_ADC_Start>
	    uint16_t rawValue1;
	       if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	481b      	ldr	r0, [pc, #108]	; (8001b10 <Measurement_of_ADC_Voltage_18650+0x9c>)
 8001aa2:	f000 fc0f 	bl	80022c4 <HAL_ADC_PollForConversion>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d125      	bne.n	8001af8 <Measurement_of_ADC_Voltage_18650+0x84>
	           /* Read the ADC1 value */
	           rawValue1 = HAL_ADC_GetValue(&hadc1);
 8001aac:	4818      	ldr	r0, [pc, #96]	; (8001b10 <Measurement_of_ADC_Voltage_18650+0x9c>)
 8001aae:	f000 fc94 	bl	80023da <HAL_ADC_GetValue>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	807b      	strh	r3, [r7, #2]
	           // write a current get and map the voltage to a current
//	           sprintf("%f", (int)rawValue1);
//	           HAL_UART_Transmit(&hlpuart1, (uint16_t*)msg, strlen(msg), HAL_MAX_DELAY);


	           V_18650 = rawValue1 * V_stepSize;  // You might want to use a different name
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	ee07 3a90 	vmov	s15, r3
 8001abc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <Measurement_of_ADC_Voltage_18650+0xa0>)
 8001aca:	edc3 7a00 	vstr	s15, [r3]
	                                        // for this variable
	           // write to sD card
	           // pass to buffer
	           // SD_write(time, voltage, current)
	           /* Check if the value corresponds to 3.3V */
	           if (V_18650 > 2.0)  // Slight tolerance might be needed depending on
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <Measurement_of_ADC_Voltage_18650+0xa0>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae0:	dd05      	ble.n	8001aee <Measurement_of_ADC_Voltage_18650+0x7a>
                   // your application's accuracy requirements.
	           {
   /* Turn ON the B_18650_LoadSwitch_Pin */
	        	   HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	480c      	ldr	r0, [pc, #48]	; (8001b18 <Measurement_of_ADC_Voltage_18650+0xa4>)
 8001ae8:	f001 f97e 	bl	8002de8 <HAL_GPIO_WritePin>
 8001aec:	e004      	b.n	8001af8 <Measurement_of_ADC_Voltage_18650+0x84>
	           } else {
   /* Turn OFF the B_18650_LoadSwitch_Pin */
	        	   HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2101      	movs	r1, #1
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <Measurement_of_ADC_Voltage_18650+0xa4>)
 8001af4:	f001 f978 	bl	8002de8 <HAL_GPIO_WritePin>
	           }
	       }

	    HAL_ADC_Stop(&hadc1);
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <Measurement_of_ADC_Voltage_18650+0x9c>)
 8001afa:	f000 fbaf 	bl	800225c <HAL_ADC_Stop>
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40533333 	.word	0x40533333
 8001b0c:	457ff000 	.word	0x457ff000
 8001b10:	20000210 	.word	0x20000210
 8001b14:	200002bc 	.word	0x200002bc
 8001b18:	40021800 	.word	0x40021800

08001b1c <ADC_Select_Voltage18650>:

void ADC_Select_Voltage18650(void){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
ADC_ChannelConfTypeDef sConfig = {0};
 8001b22:	463b      	mov	r3, r7
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
sConfig.Channel = ADC_CHANNEL_3;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	603b      	str	r3, [r7, #0]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b32:	463b      	mov	r3, r7
 8001b34:	4619      	mov	r1, r3
 8001b36:	4806      	ldr	r0, [pc, #24]	; (8001b50 <ADC_Select_Voltage18650+0x34>)
 8001b38:	f000 fc5c 	bl	80023f4 <HAL_ADC_ConfigChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <ADC_Select_Voltage18650+0x2a>
{
  Error_Handler();
 8001b42:	f000 f807 	bl	8001b54 <Error_Handler>
}
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000210 	.word	0x20000210

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
}
 8001b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <Error_Handler+0x8>
	...

08001b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b88:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800

08001ba8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <HAL_ADC_MspInit+0x74>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d123      	bne.n	8001c12 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_ADC_MspInit+0x78>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <HAL_ADC_MspInit+0x78>)
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_ADC_MspInit+0x78>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_ADC_MspInit+0x78>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <HAL_ADC_MspInit+0x78>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_ADC_MspInit+0x78>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = Voltage_ADC_18650_Pin;
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Voltage_ADC_18650_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <HAL_ADC_MspInit+0x7c>)
 8001c0e:	f000 ff27 	bl	8002a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	; 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40012000 	.word	0x40012000
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020000 	.word	0x40020000

08001c28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_SPI_MspInit+0x7c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d127      	bne.n	8001c9a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_SPI_MspInit+0x80>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <HAL_SPI_MspInit+0x80>)
 8001c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <HAL_SPI_MspInit+0x80>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_SPI_MspInit+0x80>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <HAL_SPI_MspInit+0x80>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_SPI_MspInit+0x80>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c7a:	23e0      	movs	r3, #224	; 0xe0
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	; (8001cac <HAL_SPI_MspInit+0x84>)
 8001c96:	f000 fee3 	bl	8002a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	; 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40013000 	.word	0x40013000
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40020000 	.word	0x40020000

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <HardFault_Handler+0x4>

08001cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <MemManage_Handler+0x4>

08001cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <SysTick_Handler+0x34>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <SysTick_Handler+0x18>
		  Timer1--;
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <SysTick_Handler+0x34>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <SysTick_Handler+0x34>)
 8001d0e:	801a      	strh	r2, [r3, #0]
		if(Timer2 > 0)
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <SysTick_Handler+0x38>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <SysTick_Handler+0x2c>
		  Timer2--;
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SysTick_Handler+0x38>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <SysTick_Handler+0x38>)
 8001d22:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d24:	f000 f944 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000208 	.word	0x20000208
 8001d30:	2000020a 	.word	0x2000020a

08001d34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return 1;
 8001d38:	2301      	movs	r3, #1
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_kill>:

int _kill(int pid, int sig)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d4e:	f006 fd65 	bl	800881c <__errno>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2216      	movs	r2, #22
 8001d56:	601a      	str	r2, [r3, #0]
  return -1;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_exit>:

void _exit (int status)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ffe7 	bl	8001d44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d76:	e7fe      	b.n	8001d76 <_exit+0x12>

08001d78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e00a      	b.n	8001da0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d8a:	f3af 8000 	nop.w
 8001d8e:	4601      	mov	r1, r0
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	60ba      	str	r2, [r7, #8]
 8001d96:	b2ca      	uxtb	r2, r1
 8001d98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	dbf0      	blt.n	8001d8a <_read+0x12>
  }

  return len;
 8001da8:	687b      	ldr	r3, [r7, #4]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	e009      	b.n	8001dd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	60ba      	str	r2, [r7, #8]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	dbf1      	blt.n	8001dc4 <_write+0x12>
  }
  return len;
 8001de0:	687b      	ldr	r3, [r7, #4]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <_close>:

int _close(int file)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e12:	605a      	str	r2, [r3, #4]
  return 0;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <_isatty>:

int _isatty(int file)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e2a:	2301      	movs	r3, #1
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e5c:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <_sbrk+0x5c>)
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <_sbrk+0x60>)
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <_sbrk+0x64>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <_sbrk+0x68>)
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d207      	bcs.n	8001e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e84:	f006 fcca 	bl	800881c <__errno>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	e009      	b.n	8001ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <_sbrk+0x64>)
 8001ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20080000 	.word	0x20080000
 8001eb4:	00000400 	.word	0x00000400
 8001eb8:	200002d0 	.word	0x200002d0
 8001ebc:	20000660 	.word	0x20000660

08001ec0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <SystemInit+0x20>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <SystemInit+0x20>)
 8001ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee8:	480d      	ldr	r0, [pc, #52]	; (8001f20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eea:	490e      	ldr	r1, [pc, #56]	; (8001f24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eec:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef0:	e002      	b.n	8001ef8 <LoopCopyDataInit>

08001ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef6:	3304      	adds	r3, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001efc:	d3f9      	bcc.n	8001ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f00:	4c0b      	ldr	r4, [pc, #44]	; (8001f30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f04:	e001      	b.n	8001f0a <LoopFillZerobss>

08001f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f08:	3204      	adds	r2, #4

08001f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f0c:	d3fb      	bcc.n	8001f06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f0e:	f7ff ffd7 	bl	8001ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f12:	f006 fc89 	bl	8008828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7ff fa27 	bl	8001368 <main>
  bx  lr    
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f1c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001f28:	0800c770 	.word	0x0800c770
  ldr r2, =_sbss
 8001f2c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001f30:	20000660 	.word	0x20000660

08001f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC_IRQHandler>

08001f36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3a:	2003      	movs	r0, #3
 8001f3c:	f000 fd5c 	bl	80029f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f000 f805 	bl	8001f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f46:	f7ff fe0b 	bl	8001b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_InitTick+0x54>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_InitTick+0x58>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fd69 	bl	8002a46 <HAL_SYSTICK_Config>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00e      	b.n	8001f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b0f      	cmp	r3, #15
 8001f82:	d80a      	bhi.n	8001f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f000 fd3f 	bl	8002a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f90:	4a06      	ldr	r2, [pc, #24]	; (8001fac <HAL_InitTick+0x5c>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e000      	b.n	8001f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000004 	.word	0x20000004
 8001fa8:	2000000c 	.word	0x2000000c
 8001fac:	20000008 	.word	0x20000008

08001fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_IncTick+0x20>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	2000000c 	.word	0x2000000c
 8001fd4:	200002d4 	.word	0x200002d4

08001fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return uwTick;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_GetTick+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	200002d4 	.word	0x200002d4

08001ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff ffee 	bl	8001fd8 <HAL_GetTick>
 8001ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d005      	beq.n	8002016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_Delay+0x44>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002016:	bf00      	nop
 8002018:	f7ff ffde 	bl	8001fd8 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	429a      	cmp	r2, r3
 8002026:	d8f7      	bhi.n	8002018 <HAL_Delay+0x28>
  {
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000000c 	.word	0x2000000c

08002038 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e031      	b.n	80020b2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fda6 	bl	8001ba8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	d116      	bne.n	80020a4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_ADC_Init+0x84>)
 800207c:	4013      	ands	r3, r2
 800207e:	f043 0202 	orr.w	r2, r3, #2
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fb0a 	bl	80026a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f023 0303 	bic.w	r3, r3, #3
 800209a:	f043 0201 	orr.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
 80020a2:	e001      	b.n	80020a8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	ffffeefd 	.word	0xffffeefd

080020c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_ADC_Start+0x1a>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e0ad      	b.n	8002236 <HAL_ADC_Start+0x176>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d018      	beq.n	8002122 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002100:	4b50      	ldr	r3, [pc, #320]	; (8002244 <HAL_ADC_Start+0x184>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a50      	ldr	r2, [pc, #320]	; (8002248 <HAL_ADC_Start+0x188>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0c9a      	lsrs	r2, r3, #18
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002114:	e002      	b.n	800211c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3b01      	subs	r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f9      	bne.n	8002116 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	d175      	bne.n	800221c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002134:	4b45      	ldr	r3, [pc, #276]	; (800224c <HAL_ADC_Start+0x18c>)
 8002136:	4013      	ands	r3, r2
 8002138:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002156:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800216a:	d106      	bne.n	800217a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	f023 0206 	bic.w	r2, r3, #6
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	645a      	str	r2, [r3, #68]	; 0x44
 8002178:	e002      	b.n	8002180 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002190:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002192:	4b2f      	ldr	r3, [pc, #188]	; (8002250 <HAL_ADC_Start+0x190>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10f      	bne.n	80021be <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d143      	bne.n	8002234 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	e03a      	b.n	8002234 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a24      	ldr	r2, [pc, #144]	; (8002254 <HAL_ADC_Start+0x194>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d10e      	bne.n	80021e6 <HAL_ADC_Start+0x126>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d107      	bne.n	80021e6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021e4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <HAL_ADC_Start+0x190>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d120      	bne.n	8002234 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a18      	ldr	r2, [pc, #96]	; (8002258 <HAL_ADC_Start+0x198>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d11b      	bne.n	8002234 <HAL_ADC_Start+0x174>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d114      	bne.n	8002234 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	e00b      	b.n	8002234 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f043 0210 	orr.w	r2, r3, #16
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	f043 0201 	orr.w	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000004 	.word	0x20000004
 8002248:	431bde83 	.word	0x431bde83
 800224c:	fffff8fe 	.word	0xfffff8fe
 8002250:	40012300 	.word	0x40012300
 8002254:	40012000 	.word	0x40012000
 8002258:	40012200 	.word	0x40012200

0800225c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_ADC_Stop+0x16>
 800226e:	2302      	movs	r3, #2
 8002270:	e01f      	b.n	80022b2 <HAL_ADC_Stop+0x56>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d107      	bne.n	80022a8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_ADC_Stop+0x64>)
 800229e:	4013      	ands	r3, r2
 80022a0:	f043 0201 	orr.w	r2, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	ffffeefe 	.word	0xffffeefe

080022c4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e0:	d113      	bne.n	800230a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f0:	d10b      	bne.n	800230a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f043 0220 	orr.w	r2, r3, #32
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e063      	b.n	80023d2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800230a:	f7ff fe65 	bl	8001fd8 <HAL_GetTick>
 800230e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002310:	e021      	b.n	8002356 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002318:	d01d      	beq.n	8002356 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d007      	beq.n	8002330 <HAL_ADC_PollForConversion+0x6c>
 8002320:	f7ff fe5a 	bl	8001fd8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d212      	bcs.n	8002356 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b02      	cmp	r3, #2
 800233c:	d00b      	beq.n	8002356 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f043 0204 	orr.w	r2, r3, #4
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e03d      	b.n	80023d2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b02      	cmp	r3, #2
 8002362:	d1d6      	bne.n	8002312 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0212 	mvn.w	r2, #18
 800236c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d123      	bne.n	80023d0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800238c:	2b00      	cmp	r3, #0
 800238e:	d11f      	bne.n	80023d0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800239a:	2b00      	cmp	r3, #0
 800239c:	d006      	beq.n	80023ac <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d111      	bne.n	80023d0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x1c>
 800240c:	2302      	movs	r3, #2
 800240e:	e136      	b.n	800267e <HAL_ADC_ConfigChannel+0x28a>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b09      	cmp	r3, #9
 800241e:	d93a      	bls.n	8002496 <HAL_ADC_ConfigChannel+0xa2>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002428:	d035      	beq.n	8002496 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68d9      	ldr	r1, [r3, #12]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	3b1e      	subs	r3, #30
 8002440:	2207      	movs	r2, #7
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	400a      	ands	r2, r1
 800244e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a8d      	ldr	r2, [pc, #564]	; (800268c <HAL_ADC_ConfigChannel+0x298>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d10a      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68d9      	ldr	r1, [r3, #12]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	061a      	lsls	r2, r3, #24
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800246e:	e035      	b.n	80024dc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68d9      	ldr	r1, [r3, #12]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	4618      	mov	r0, r3
 8002482:	4603      	mov	r3, r0
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4403      	add	r3, r0
 8002488:	3b1e      	subs	r3, #30
 800248a:	409a      	lsls	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002494:	e022      	b.n	80024dc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6919      	ldr	r1, [r3, #16]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	4613      	mov	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	2207      	movs	r2, #7
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43da      	mvns	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	400a      	ands	r2, r1
 80024b8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6919      	ldr	r1, [r3, #16]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	4618      	mov	r0, r3
 80024cc:	4603      	mov	r3, r0
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4403      	add	r3, r0
 80024d2:	409a      	lsls	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b06      	cmp	r3, #6
 80024e2:	d824      	bhi.n	800252e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	3b05      	subs	r3, #5
 80024f6:	221f      	movs	r2, #31
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43da      	mvns	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	400a      	ands	r2, r1
 8002504:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	b29b      	uxth	r3, r3
 8002512:	4618      	mov	r0, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	3b05      	subs	r3, #5
 8002520:	fa00 f203 	lsl.w	r2, r0, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	635a      	str	r2, [r3, #52]	; 0x34
 800252c:	e04c      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d824      	bhi.n	8002580 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	3b23      	subs	r3, #35	; 0x23
 8002548:	221f      	movs	r2, #31
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43da      	mvns	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	400a      	ands	r2, r1
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	4618      	mov	r0, r3
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	3b23      	subs	r3, #35	; 0x23
 8002572:	fa00 f203 	lsl.w	r2, r0, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	631a      	str	r2, [r3, #48]	; 0x30
 800257e:	e023      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	3b41      	subs	r3, #65	; 0x41
 8002592:	221f      	movs	r2, #31
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43da      	mvns	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	400a      	ands	r2, r1
 80025a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	4618      	mov	r0, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	3b41      	subs	r3, #65	; 0x41
 80025bc:	fa00 f203 	lsl.w	r2, r0, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a30      	ldr	r2, [pc, #192]	; (8002690 <HAL_ADC_ConfigChannel+0x29c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d10a      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x1f4>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025da:	d105      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80025dc:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <HAL_ADC_ConfigChannel+0x2a0>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a2c      	ldr	r2, [pc, #176]	; (8002694 <HAL_ADC_ConfigChannel+0x2a0>)
 80025e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a28      	ldr	r2, [pc, #160]	; (8002690 <HAL_ADC_ConfigChannel+0x29c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d10f      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x21e>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b12      	cmp	r3, #18
 80025f8:	d10b      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <HAL_ADC_ConfigChannel+0x2a0>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a25      	ldr	r2, [pc, #148]	; (8002694 <HAL_ADC_ConfigChannel+0x2a0>)
 8002600:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002604:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <HAL_ADC_ConfigChannel+0x2a0>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a22      	ldr	r2, [pc, #136]	; (8002694 <HAL_ADC_ConfigChannel+0x2a0>)
 800260c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002610:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <HAL_ADC_ConfigChannel+0x29c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d12b      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x280>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a1a      	ldr	r2, [pc, #104]	; (800268c <HAL_ADC_ConfigChannel+0x298>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d003      	beq.n	800262e <HAL_ADC_ConfigChannel+0x23a>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b11      	cmp	r3, #17
 800262c:	d122      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_ADC_ConfigChannel+0x2a0>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4a18      	ldr	r2, [pc, #96]	; (8002694 <HAL_ADC_ConfigChannel+0x2a0>)
 8002634:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002638:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800263a:	4b16      	ldr	r3, [pc, #88]	; (8002694 <HAL_ADC_ConfigChannel+0x2a0>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4a15      	ldr	r2, [pc, #84]	; (8002694 <HAL_ADC_ConfigChannel+0x2a0>)
 8002640:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002644:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a10      	ldr	r2, [pc, #64]	; (800268c <HAL_ADC_ConfigChannel+0x298>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d111      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_ADC_ConfigChannel+0x2a4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a11      	ldr	r2, [pc, #68]	; (800269c <HAL_ADC_ConfigChannel+0x2a8>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	0c9a      	lsrs	r2, r3, #18
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002666:	e002      	b.n	800266e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3b01      	subs	r3, #1
 800266c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f9      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	10000012 	.word	0x10000012
 8002690:	40012000 	.word	0x40012000
 8002694:	40012300 	.word	0x40012300
 8002698:	20000004 	.word	0x20000004
 800269c:	431bde83 	.word	0x431bde83

080026a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80026a8:	4b78      	ldr	r3, [pc, #480]	; (800288c <ADC_Init+0x1ec>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a77      	ldr	r2, [pc, #476]	; (800288c <ADC_Init+0x1ec>)
 80026ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80026b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80026b4:	4b75      	ldr	r3, [pc, #468]	; (800288c <ADC_Init+0x1ec>)
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4973      	ldr	r1, [pc, #460]	; (800288c <ADC_Init+0x1ec>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	021a      	lsls	r2, r3, #8
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002716:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6899      	ldr	r1, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	4a58      	ldr	r2, [pc, #352]	; (8002890 <ADC_Init+0x1f0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d022      	beq.n	800277a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002742:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6899      	ldr	r1, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002764:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6899      	ldr	r1, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	e00f      	b.n	800279a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002788:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002798:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0202 	bic.w	r2, r2, #2
 80027a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6899      	ldr	r1, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	005a      	lsls	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d01b      	beq.n	8002800 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6859      	ldr	r1, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	3b01      	subs	r3, #1
 80027f4:	035a      	lsls	r2, r3, #13
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	e007      	b.n	8002810 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	3b01      	subs	r3, #1
 800282c:	051a      	lsls	r2, r3, #20
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002844:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6899      	ldr	r1, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002852:	025a      	lsls	r2, r3, #9
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800286a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6899      	ldr	r1, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	029a      	lsls	r2, r3, #10
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	609a      	str	r2, [r3, #8]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40012300 	.word	0x40012300
 8002890:	0f000001 	.word	0x0f000001

08002894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <__NVIC_SetPriorityGrouping+0x40>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b0:	4013      	ands	r3, r2
 80028b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <__NVIC_SetPriorityGrouping+0x40>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00
 80028d8:	05fa0000 	.word	0x05fa0000

080028dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <__NVIC_GetPriorityGrouping+0x18>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	f003 0307 	and.w	r3, r3, #7
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	6039      	str	r1, [r7, #0]
 8002902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002908:	2b00      	cmp	r3, #0
 800290a:	db0a      	blt.n	8002922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	b2da      	uxtb	r2, r3
 8002910:	490c      	ldr	r1, [pc, #48]	; (8002944 <__NVIC_SetPriority+0x4c>)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	0112      	lsls	r2, r2, #4
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	440b      	add	r3, r1
 800291c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002920:	e00a      	b.n	8002938 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4908      	ldr	r1, [pc, #32]	; (8002948 <__NVIC_SetPriority+0x50>)
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	3b04      	subs	r3, #4
 8002930:	0112      	lsls	r2, r2, #4
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	440b      	add	r3, r1
 8002936:	761a      	strb	r2, [r3, #24]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000e100 	.word	0xe000e100
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	; 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f1c3 0307 	rsb	r3, r3, #7
 8002966:	2b04      	cmp	r3, #4
 8002968:	bf28      	it	cs
 800296a:	2304      	movcs	r3, #4
 800296c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3304      	adds	r3, #4
 8002972:	2b06      	cmp	r3, #6
 8002974:	d902      	bls.n	800297c <NVIC_EncodePriority+0x30>
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3b03      	subs	r3, #3
 800297a:	e000      	b.n	800297e <NVIC_EncodePriority+0x32>
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	f04f 32ff 	mov.w	r2, #4294967295
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43da      	mvns	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	401a      	ands	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002994:	f04f 31ff 	mov.w	r1, #4294967295
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	43d9      	mvns	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	4313      	orrs	r3, r2
         );
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3724      	adds	r7, #36	; 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c4:	d301      	bcc.n	80029ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00f      	b.n	80029ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <SysTick_Config+0x40>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d2:	210f      	movs	r1, #15
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295
 80029d8:	f7ff ff8e 	bl	80028f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <SysTick_Config+0x40>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <SysTick_Config+0x40>)
 80029e4:	2207      	movs	r2, #7
 80029e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	e000e010 	.word	0xe000e010

080029f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff47 	bl	8002894 <__NVIC_SetPriorityGrouping>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a20:	f7ff ff5c 	bl	80028dc <__NVIC_GetPriorityGrouping>
 8002a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	6978      	ldr	r0, [r7, #20]
 8002a2c:	f7ff ff8e 	bl	800294c <NVIC_EncodePriority>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff5d 	bl	80028f8 <__NVIC_SetPriority>
}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff ffb0 	bl	80029b4 <SysTick_Config>
 8002a54:	4603      	mov	r3, r0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	; 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	e175      	b.n	8002d6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a80:	2201      	movs	r2, #1
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	f040 8164 	bne.w	8002d66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d005      	beq.n	8002ab6 <HAL_GPIO_Init+0x56>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d130      	bne.n	8002b18 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aec:	2201      	movs	r2, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 0201 	and.w	r2, r3, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d017      	beq.n	8002b54 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	2203      	movs	r2, #3
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d123      	bne.n	8002ba8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	08da      	lsrs	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3208      	adds	r2, #8
 8002b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	220f      	movs	r2, #15
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	08da      	lsrs	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3208      	adds	r2, #8
 8002ba2:	69b9      	ldr	r1, [r7, #24]
 8002ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0203 	and.w	r2, r3, #3
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80be 	beq.w	8002d66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bea:	4b66      	ldr	r3, [pc, #408]	; (8002d84 <HAL_GPIO_Init+0x324>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	4a65      	ldr	r2, [pc, #404]	; (8002d84 <HAL_GPIO_Init+0x324>)
 8002bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf6:	4b63      	ldr	r3, [pc, #396]	; (8002d84 <HAL_GPIO_Init+0x324>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c02:	4a61      	ldr	r2, [pc, #388]	; (8002d88 <HAL_GPIO_Init+0x328>)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	3302      	adds	r3, #2
 8002c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	220f      	movs	r2, #15
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a58      	ldr	r2, [pc, #352]	; (8002d8c <HAL_GPIO_Init+0x32c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d037      	beq.n	8002c9e <HAL_GPIO_Init+0x23e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a57      	ldr	r2, [pc, #348]	; (8002d90 <HAL_GPIO_Init+0x330>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d031      	beq.n	8002c9a <HAL_GPIO_Init+0x23a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a56      	ldr	r2, [pc, #344]	; (8002d94 <HAL_GPIO_Init+0x334>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d02b      	beq.n	8002c96 <HAL_GPIO_Init+0x236>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a55      	ldr	r2, [pc, #340]	; (8002d98 <HAL_GPIO_Init+0x338>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d025      	beq.n	8002c92 <HAL_GPIO_Init+0x232>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a54      	ldr	r2, [pc, #336]	; (8002d9c <HAL_GPIO_Init+0x33c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01f      	beq.n	8002c8e <HAL_GPIO_Init+0x22e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a53      	ldr	r2, [pc, #332]	; (8002da0 <HAL_GPIO_Init+0x340>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d019      	beq.n	8002c8a <HAL_GPIO_Init+0x22a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a52      	ldr	r2, [pc, #328]	; (8002da4 <HAL_GPIO_Init+0x344>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_GPIO_Init+0x226>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a51      	ldr	r2, [pc, #324]	; (8002da8 <HAL_GPIO_Init+0x348>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00d      	beq.n	8002c82 <HAL_GPIO_Init+0x222>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a50      	ldr	r2, [pc, #320]	; (8002dac <HAL_GPIO_Init+0x34c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <HAL_GPIO_Init+0x21e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4f      	ldr	r2, [pc, #316]	; (8002db0 <HAL_GPIO_Init+0x350>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <HAL_GPIO_Init+0x21a>
 8002c76:	2309      	movs	r3, #9
 8002c78:	e012      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c7a:	230a      	movs	r3, #10
 8002c7c:	e010      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c7e:	2308      	movs	r3, #8
 8002c80:	e00e      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c82:	2307      	movs	r3, #7
 8002c84:	e00c      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c86:	2306      	movs	r3, #6
 8002c88:	e00a      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c8a:	2305      	movs	r3, #5
 8002c8c:	e008      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c8e:	2304      	movs	r3, #4
 8002c90:	e006      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c92:	2303      	movs	r3, #3
 8002c94:	e004      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e002      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	f002 0203 	and.w	r2, r2, #3
 8002ca6:	0092      	lsls	r2, r2, #2
 8002ca8:	4093      	lsls	r3, r2
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cb0:	4935      	ldr	r1, [pc, #212]	; (8002d88 <HAL_GPIO_Init+0x328>)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cbe:	4b3d      	ldr	r3, [pc, #244]	; (8002db4 <HAL_GPIO_Init+0x354>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ce2:	4a34      	ldr	r2, [pc, #208]	; (8002db4 <HAL_GPIO_Init+0x354>)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce8:	4b32      	ldr	r3, [pc, #200]	; (8002db4 <HAL_GPIO_Init+0x354>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d0c:	4a29      	ldr	r2, [pc, #164]	; (8002db4 <HAL_GPIO_Init+0x354>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d12:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <HAL_GPIO_Init+0x354>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d36:	4a1f      	ldr	r2, [pc, #124]	; (8002db4 <HAL_GPIO_Init+0x354>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <HAL_GPIO_Init+0x354>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d60:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <HAL_GPIO_Init+0x354>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	2b0f      	cmp	r3, #15
 8002d70:	f67f ae86 	bls.w	8002a80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3724      	adds	r7, #36	; 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40013800 	.word	0x40013800
 8002d8c:	40020000 	.word	0x40020000
 8002d90:	40020400 	.word	0x40020400
 8002d94:	40020800 	.word	0x40020800
 8002d98:	40020c00 	.word	0x40020c00
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40021400 	.word	0x40021400
 8002da4:	40021800 	.word	0x40021800
 8002da8:	40021c00 	.word	0x40021c00
 8002dac:	40022000 	.word	0x40022000
 8002db0:	40022400 	.word	0x40022400
 8002db4:	40013c00 	.word	0x40013c00

08002db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	e001      	b.n	8002dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	807b      	strh	r3, [r7, #2]
 8002df4:	4613      	mov	r3, r2
 8002df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002df8:	787b      	ldrb	r3, [r7, #1]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dfe:	887a      	ldrh	r2, [r7, #2]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e04:	e003      	b.n	8002e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e06:	887b      	ldrh	r3, [r7, #2]
 8002e08:	041a      	lsls	r2, r3, #16
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	619a      	str	r2, [r3, #24]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e3e:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e4a:	f7ff f8c5 	bl	8001fd8 <HAL_GetTick>
 8002e4e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e50:	e009      	b.n	8002e66 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e52:	f7ff f8c1 	bl	8001fd8 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e60:	d901      	bls.n	8002e66 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e022      	b.n	8002eac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e72:	d1ee      	bne.n	8002e52 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e74:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0f      	ldr	r2, [pc, #60]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e80:	f7ff f8aa 	bl	8001fd8 <HAL_GetTick>
 8002e84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e86:	e009      	b.n	8002e9c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e88:	f7ff f8a6 	bl	8001fd8 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e96:	d901      	bls.n	8002e9c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e007      	b.n	8002eac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ea8:	d1ee      	bne.n	8002e88 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40007000 	.word	0x40007000

08002ebc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e29b      	b.n	800340a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8087 	beq.w	8002fee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee0:	4b96      	ldr	r3, [pc, #600]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d00c      	beq.n	8002f06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eec:	4b93      	ldr	r3, [pc, #588]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d112      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62>
 8002ef8:	4b90      	ldr	r3, [pc, #576]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f04:	d10b      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f06:	4b8d      	ldr	r3, [pc, #564]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d06c      	beq.n	8002fec <HAL_RCC_OscConfig+0x130>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d168      	bne.n	8002fec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e275      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f26:	d106      	bne.n	8002f36 <HAL_RCC_OscConfig+0x7a>
 8002f28:	4b84      	ldr	r3, [pc, #528]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a83      	ldr	r2, [pc, #524]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	e02e      	b.n	8002f94 <HAL_RCC_OscConfig+0xd8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x9c>
 8002f3e:	4b7f      	ldr	r3, [pc, #508]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a7e      	ldr	r2, [pc, #504]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b7c      	ldr	r3, [pc, #496]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7b      	ldr	r2, [pc, #492]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e01d      	b.n	8002f94 <HAL_RCC_OscConfig+0xd8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0xc0>
 8002f62:	4b76      	ldr	r3, [pc, #472]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a75      	ldr	r2, [pc, #468]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b73      	ldr	r3, [pc, #460]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a72      	ldr	r2, [pc, #456]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0xd8>
 8002f7c:	4b6f      	ldr	r3, [pc, #444]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a6e      	ldr	r2, [pc, #440]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b6c      	ldr	r3, [pc, #432]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a6b      	ldr	r2, [pc, #428]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7ff f81c 	bl	8001fd8 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7ff f818 	bl	8001fd8 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	; 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e229      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b61      	ldr	r3, [pc, #388]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xe8>
 8002fc2:	e014      	b.n	8002fee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7ff f808 	bl	8001fd8 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7ff f804 	bl	8001fd8 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	; 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e215      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	4b57      	ldr	r3, [pc, #348]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x110>
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d069      	beq.n	80030ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ffa:	4b50      	ldr	r3, [pc, #320]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003006:	4b4d      	ldr	r3, [pc, #308]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b08      	cmp	r3, #8
 8003010:	d11c      	bne.n	800304c <HAL_RCC_OscConfig+0x190>
 8003012:	4b4a      	ldr	r3, [pc, #296]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d116      	bne.n	800304c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_RCC_OscConfig+0x17a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e1e9      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	493d      	ldr	r1, [pc, #244]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	e040      	b.n	80030ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d023      	beq.n	800309c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003054:	4b39      	ldr	r3, [pc, #228]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a38      	ldr	r2, [pc, #224]	; (800313c <HAL_RCC_OscConfig+0x280>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe ffba 	bl	8001fd8 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003068:	f7fe ffb6 	bl	8001fd8 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e1c7      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307a:	4b30      	ldr	r3, [pc, #192]	; (800313c <HAL_RCC_OscConfig+0x280>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003086:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4929      	ldr	r1, [pc, #164]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
 800309a:	e018      	b.n	80030ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800309c:	4b27      	ldr	r3, [pc, #156]	; (800313c <HAL_RCC_OscConfig+0x280>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a26      	ldr	r2, [pc, #152]	; (800313c <HAL_RCC_OscConfig+0x280>)
 80030a2:	f023 0301 	bic.w	r3, r3, #1
 80030a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe ff96 	bl	8001fd8 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b0:	f7fe ff92 	bl	8001fd8 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e1a3      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	4b1e      	ldr	r3, [pc, #120]	; (800313c <HAL_RCC_OscConfig+0x280>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d038      	beq.n	800314c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d019      	beq.n	8003116 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e2:	4b16      	ldr	r3, [pc, #88]	; (800313c <HAL_RCC_OscConfig+0x280>)
 80030e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e6:	4a15      	ldr	r2, [pc, #84]	; (800313c <HAL_RCC_OscConfig+0x280>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fe ff73 	bl	8001fd8 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f6:	f7fe ff6f 	bl	8001fd8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e180      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <HAL_RCC_OscConfig+0x280>)
 800310a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x23a>
 8003114:	e01a      	b.n	800314c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_RCC_OscConfig+0x280>)
 8003118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311a:	4a08      	ldr	r2, [pc, #32]	; (800313c <HAL_RCC_OscConfig+0x280>)
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003122:	f7fe ff59 	bl	8001fd8 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	e00a      	b.n	8003140 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312a:	f7fe ff55 	bl	8001fd8 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d903      	bls.n	8003140 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e166      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
 800313c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003140:	4b92      	ldr	r3, [pc, #584]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1ee      	bne.n	800312a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80a4 	beq.w	80032a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315a:	4b8c      	ldr	r3, [pc, #560]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10d      	bne.n	8003182 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	4b89      	ldr	r3, [pc, #548]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	4a88      	ldr	r2, [pc, #544]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800316c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003170:	6413      	str	r3, [r2, #64]	; 0x40
 8003172:	4b86      	ldr	r3, [pc, #536]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317e:	2301      	movs	r3, #1
 8003180:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003182:	4b83      	ldr	r3, [pc, #524]	; (8003390 <HAL_RCC_OscConfig+0x4d4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d118      	bne.n	80031c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800318e:	4b80      	ldr	r3, [pc, #512]	; (8003390 <HAL_RCC_OscConfig+0x4d4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7f      	ldr	r2, [pc, #508]	; (8003390 <HAL_RCC_OscConfig+0x4d4>)
 8003194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319a:	f7fe ff1d 	bl	8001fd8 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a2:	f7fe ff19 	bl	8001fd8 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b64      	cmp	r3, #100	; 0x64
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e12a      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b4:	4b76      	ldr	r3, [pc, #472]	; (8003390 <HAL_RCC_OscConfig+0x4d4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d106      	bne.n	80031d6 <HAL_RCC_OscConfig+0x31a>
 80031c8:	4b70      	ldr	r3, [pc, #448]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	4a6f      	ldr	r2, [pc, #444]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6713      	str	r3, [r2, #112]	; 0x70
 80031d4:	e02d      	b.n	8003232 <HAL_RCC_OscConfig+0x376>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x33c>
 80031de:	4b6b      	ldr	r3, [pc, #428]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	4a6a      	ldr	r2, [pc, #424]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ea:	4b68      	ldr	r3, [pc, #416]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	4a67      	ldr	r2, [pc, #412]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6713      	str	r3, [r2, #112]	; 0x70
 80031f6:	e01c      	b.n	8003232 <HAL_RCC_OscConfig+0x376>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b05      	cmp	r3, #5
 80031fe:	d10c      	bne.n	800321a <HAL_RCC_OscConfig+0x35e>
 8003200:	4b62      	ldr	r3, [pc, #392]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	4a61      	ldr	r2, [pc, #388]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003206:	f043 0304 	orr.w	r3, r3, #4
 800320a:	6713      	str	r3, [r2, #112]	; 0x70
 800320c:	4b5f      	ldr	r3, [pc, #380]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	4a5e      	ldr	r2, [pc, #376]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6713      	str	r3, [r2, #112]	; 0x70
 8003218:	e00b      	b.n	8003232 <HAL_RCC_OscConfig+0x376>
 800321a:	4b5c      	ldr	r3, [pc, #368]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	4a5b      	ldr	r2, [pc, #364]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6713      	str	r3, [r2, #112]	; 0x70
 8003226:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a58      	ldr	r2, [pc, #352]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800322c:	f023 0304 	bic.w	r3, r3, #4
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d015      	beq.n	8003266 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323a:	f7fe fecd 	bl	8001fd8 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	e00a      	b.n	8003258 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7fe fec9 	bl	8001fd8 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003250:	4293      	cmp	r3, r2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e0d8      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003258:	4b4c      	ldr	r3, [pc, #304]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0ee      	beq.n	8003242 <HAL_RCC_OscConfig+0x386>
 8003264:	e014      	b.n	8003290 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003266:	f7fe feb7 	bl	8001fd8 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fe feb3 	bl	8001fd8 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0c2      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003284:	4b41      	ldr	r3, [pc, #260]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1ee      	bne.n	800326e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003290:	7dfb      	ldrb	r3, [r7, #23]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d105      	bne.n	80032a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	4a3c      	ldr	r2, [pc, #240]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800329c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80ae 	beq.w	8003408 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ac:	4b37      	ldr	r3, [pc, #220]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d06d      	beq.n	8003394 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d14b      	bne.n	8003358 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c0:	4b32      	ldr	r3, [pc, #200]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a31      	ldr	r2, [pc, #196]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80032c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe fe84 	bl	8001fd8 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d4:	f7fe fe80 	bl	8001fd8 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e091      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	4b29      	ldr	r3, [pc, #164]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	3b01      	subs	r3, #1
 800330c:	041b      	lsls	r3, r3, #16
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	071b      	lsls	r3, r3, #28
 800331e:	491b      	ldr	r1, [pc, #108]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003324:	4b19      	ldr	r3, [pc, #100]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a18      	ldr	r2, [pc, #96]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800332a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe fe52 	bl	8001fd8 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003338:	f7fe fe4e 	bl	8001fd8 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e05f      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x47c>
 8003356:	e057      	b.n	8003408 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0b      	ldr	r2, [pc, #44]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 800335e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fe38 	bl	8001fd8 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe fe34 	bl	8001fd8 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e045      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	4b03      	ldr	r3, [pc, #12]	; (800338c <HAL_RCC_OscConfig+0x4d0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x4b0>
 800338a:	e03d      	b.n	8003408 <HAL_RCC_OscConfig+0x54c>
 800338c:	40023800 	.word	0x40023800
 8003390:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003394:	4b1f      	ldr	r3, [pc, #124]	; (8003414 <HAL_RCC_OscConfig+0x558>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d030      	beq.n	8003404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d129      	bne.n	8003404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d122      	bne.n	8003404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d119      	bne.n	8003404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	3b01      	subs	r3, #1
 80033de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d10f      	bne.n	8003404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800

08003418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0d0      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003430:	4b6a      	ldr	r3, [pc, #424]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d910      	bls.n	8003460 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b67      	ldr	r3, [pc, #412]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 020f 	bic.w	r2, r3, #15
 8003446:	4965      	ldr	r1, [pc, #404]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b63      	ldr	r3, [pc, #396]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0b8      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d020      	beq.n	80034ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003478:	4b59      	ldr	r3, [pc, #356]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4a58      	ldr	r2, [pc, #352]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 800347e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003482:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003490:	4b53      	ldr	r3, [pc, #332]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	4a52      	ldr	r2, [pc, #328]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003496:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800349a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800349c:	4b50      	ldr	r3, [pc, #320]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	494d      	ldr	r1, [pc, #308]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d040      	beq.n	800353c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	4b47      	ldr	r3, [pc, #284]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d115      	bne.n	80034fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e07f      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034da:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e073      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ea:	4b3d      	ldr	r3, [pc, #244]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e06b      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fa:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f023 0203 	bic.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4936      	ldr	r1, [pc, #216]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003508:	4313      	orrs	r3, r2
 800350a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800350c:	f7fe fd64 	bl	8001fd8 <HAL_GetTick>
 8003510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	e00a      	b.n	800352a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003514:	f7fe fd60 	bl	8001fd8 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e053      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352a:	4b2d      	ldr	r3, [pc, #180]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 020c 	and.w	r2, r3, #12
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	429a      	cmp	r2, r3
 800353a:	d1eb      	bne.n	8003514 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800353c:	4b27      	ldr	r3, [pc, #156]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d210      	bcs.n	800356c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354a:	4b24      	ldr	r3, [pc, #144]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 020f 	bic.w	r2, r3, #15
 8003552:	4922      	ldr	r1, [pc, #136]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b20      	ldr	r3, [pc, #128]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e032      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003578:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4916      	ldr	r1, [pc, #88]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003596:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	490e      	ldr	r1, [pc, #56]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035aa:	f000 f821 	bl	80035f0 <HAL_RCC_GetSysClockFreq>
 80035ae:	4602      	mov	r2, r0
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	490a      	ldr	r1, [pc, #40]	; (80035e4 <HAL_RCC_ClockConfig+0x1cc>)
 80035bc:	5ccb      	ldrb	r3, [r1, r3]
 80035be:	fa22 f303 	lsr.w	r3, r2, r3
 80035c2:	4a09      	ldr	r2, [pc, #36]	; (80035e8 <HAL_RCC_ClockConfig+0x1d0>)
 80035c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035c6:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_RCC_ClockConfig+0x1d4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe fcc0 	bl	8001f50 <HAL_InitTick>

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40023c00 	.word	0x40023c00
 80035e0:	40023800 	.word	0x40023800
 80035e4:	0800bee4 	.word	0x0800bee4
 80035e8:	20000004 	.word	0x20000004
 80035ec:	20000008 	.word	0x20000008

080035f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f4:	b094      	sub	sp, #80	; 0x50
 80035f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	647b      	str	r3, [r7, #68]	; 0x44
 80035fc:	2300      	movs	r3, #0
 80035fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003600:	2300      	movs	r3, #0
 8003602:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003608:	4b79      	ldr	r3, [pc, #484]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b08      	cmp	r3, #8
 8003612:	d00d      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x40>
 8003614:	2b08      	cmp	r3, #8
 8003616:	f200 80e1 	bhi.w	80037dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0x34>
 800361e:	2b04      	cmp	r3, #4
 8003620:	d003      	beq.n	800362a <HAL_RCC_GetSysClockFreq+0x3a>
 8003622:	e0db      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003624:	4b73      	ldr	r3, [pc, #460]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003626:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003628:	e0db      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800362a:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800362c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800362e:	e0d8      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003630:	4b6f      	ldr	r3, [pc, #444]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003638:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800363a:	4b6d      	ldr	r3, [pc, #436]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d063      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003646:	4b6a      	ldr	r3, [pc, #424]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	099b      	lsrs	r3, r3, #6
 800364c:	2200      	movs	r2, #0
 800364e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003650:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003658:	633b      	str	r3, [r7, #48]	; 0x30
 800365a:	2300      	movs	r3, #0
 800365c:	637b      	str	r3, [r7, #52]	; 0x34
 800365e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003662:	4622      	mov	r2, r4
 8003664:	462b      	mov	r3, r5
 8003666:	f04f 0000 	mov.w	r0, #0
 800366a:	f04f 0100 	mov.w	r1, #0
 800366e:	0159      	lsls	r1, r3, #5
 8003670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003674:	0150      	lsls	r0, r2, #5
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4621      	mov	r1, r4
 800367c:	1a51      	subs	r1, r2, r1
 800367e:	6139      	str	r1, [r7, #16]
 8003680:	4629      	mov	r1, r5
 8003682:	eb63 0301 	sbc.w	r3, r3, r1
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003694:	4659      	mov	r1, fp
 8003696:	018b      	lsls	r3, r1, #6
 8003698:	4651      	mov	r1, sl
 800369a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800369e:	4651      	mov	r1, sl
 80036a0:	018a      	lsls	r2, r1, #6
 80036a2:	4651      	mov	r1, sl
 80036a4:	ebb2 0801 	subs.w	r8, r2, r1
 80036a8:	4659      	mov	r1, fp
 80036aa:	eb63 0901 	sbc.w	r9, r3, r1
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c2:	4690      	mov	r8, r2
 80036c4:	4699      	mov	r9, r3
 80036c6:	4623      	mov	r3, r4
 80036c8:	eb18 0303 	adds.w	r3, r8, r3
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	462b      	mov	r3, r5
 80036d0:	eb49 0303 	adc.w	r3, r9, r3
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036e2:	4629      	mov	r1, r5
 80036e4:	024b      	lsls	r3, r1, #9
 80036e6:	4621      	mov	r1, r4
 80036e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036ec:	4621      	mov	r1, r4
 80036ee:	024a      	lsls	r2, r1, #9
 80036f0:	4610      	mov	r0, r2
 80036f2:	4619      	mov	r1, r3
 80036f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f6:	2200      	movs	r2, #0
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003700:	f7fc ffb2 	bl	8000668 <__aeabi_uldivmod>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4613      	mov	r3, r2
 800370a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800370c:	e058      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370e:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	099b      	lsrs	r3, r3, #6
 8003714:	2200      	movs	r2, #0
 8003716:	4618      	mov	r0, r3
 8003718:	4611      	mov	r1, r2
 800371a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800371e:	623b      	str	r3, [r7, #32]
 8003720:	2300      	movs	r3, #0
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
 8003724:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003728:	4642      	mov	r2, r8
 800372a:	464b      	mov	r3, r9
 800372c:	f04f 0000 	mov.w	r0, #0
 8003730:	f04f 0100 	mov.w	r1, #0
 8003734:	0159      	lsls	r1, r3, #5
 8003736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800373a:	0150      	lsls	r0, r2, #5
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4641      	mov	r1, r8
 8003742:	ebb2 0a01 	subs.w	sl, r2, r1
 8003746:	4649      	mov	r1, r9
 8003748:	eb63 0b01 	sbc.w	fp, r3, r1
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003758:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800375c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003760:	ebb2 040a 	subs.w	r4, r2, sl
 8003764:	eb63 050b 	sbc.w	r5, r3, fp
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	00eb      	lsls	r3, r5, #3
 8003772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003776:	00e2      	lsls	r2, r4, #3
 8003778:	4614      	mov	r4, r2
 800377a:	461d      	mov	r5, r3
 800377c:	4643      	mov	r3, r8
 800377e:	18e3      	adds	r3, r4, r3
 8003780:	603b      	str	r3, [r7, #0]
 8003782:	464b      	mov	r3, r9
 8003784:	eb45 0303 	adc.w	r3, r5, r3
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003796:	4629      	mov	r1, r5
 8003798:	028b      	lsls	r3, r1, #10
 800379a:	4621      	mov	r1, r4
 800379c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a0:	4621      	mov	r1, r4
 80037a2:	028a      	lsls	r2, r1, #10
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037aa:	2200      	movs	r2, #0
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	61fa      	str	r2, [r7, #28]
 80037b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b4:	f7fc ff58 	bl	8000668 <__aeabi_uldivmod>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4613      	mov	r3, r2
 80037be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	3301      	adds	r3, #1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80037d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037da:	e002      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80037de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3750      	adds	r7, #80	; 0x50
 80037e8:	46bd      	mov	sp, r7
 80037ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	00f42400 	.word	0x00f42400
 80037f8:	007a1200 	.word	0x007a1200

080037fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e09d      	b.n	800394a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	2b00      	cmp	r3, #0
 8003814:	d108      	bne.n	8003828 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800381e:	d009      	beq.n	8003834 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	61da      	str	r2, [r3, #28]
 8003826:	e005      	b.n	8003834 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fe f9ea 	bl	8001c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003874:	d902      	bls.n	800387c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	e002      	b.n	8003882 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800387c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003880:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800388a:	d007      	beq.n	800389c <HAL_SPI_Init+0xa0>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003894:	d002      	beq.n	800389c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	ea42 0103 	orr.w	r1, r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	0c1b      	lsrs	r3, r3, #16
 80038f8:	f003 0204 	and.w	r2, r3, #4
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003918:	ea42 0103 	orr.w	r1, r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003938:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b088      	sub	sp, #32
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	603b      	str	r3, [r7, #0]
 800395e:	4613      	mov	r3, r2
 8003960:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_SPI_Transmit+0x22>
 8003970:	2302      	movs	r3, #2
 8003972:	e158      	b.n	8003c26 <HAL_SPI_Transmit+0x2d4>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800397c:	f7fe fb2c 	bl	8001fd8 <HAL_GetTick>
 8003980:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d002      	beq.n	8003998 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003992:	2302      	movs	r3, #2
 8003994:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003996:	e13d      	b.n	8003c14 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <HAL_SPI_Transmit+0x52>
 800399e:	88fb      	ldrh	r3, [r7, #6]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d102      	bne.n	80039aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039a8:	e134      	b.n	8003c14 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2203      	movs	r2, #3
 80039ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	88fa      	ldrh	r2, [r7, #6]
 80039c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	88fa      	ldrh	r2, [r7, #6]
 80039c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f4:	d10f      	bne.n	8003a16 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a20:	2b40      	cmp	r3, #64	; 0x40
 8003a22:	d007      	beq.n	8003a34 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a3c:	d94b      	bls.n	8003ad6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <HAL_SPI_Transmit+0xfa>
 8003a46:	8afb      	ldrh	r3, [r7, #22]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d13e      	bne.n	8003aca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	881a      	ldrh	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	1c9a      	adds	r2, r3, #2
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a70:	e02b      	b.n	8003aca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d112      	bne.n	8003aa6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	881a      	ldrh	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	1c9a      	adds	r2, r3, #2
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aa4:	e011      	b.n	8003aca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aa6:	f7fe fa97 	bl	8001fd8 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d803      	bhi.n	8003abe <HAL_SPI_Transmit+0x16c>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abc:	d102      	bne.n	8003ac4 <HAL_SPI_Transmit+0x172>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ac8:	e0a4      	b.n	8003c14 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1ce      	bne.n	8003a72 <HAL_SPI_Transmit+0x120>
 8003ad4:	e07c      	b.n	8003bd0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_SPI_Transmit+0x192>
 8003ade:	8afb      	ldrh	r3, [r7, #22]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d170      	bne.n	8003bc6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d912      	bls.n	8003b14 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	881a      	ldrh	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	1c9a      	adds	r2, r3, #2
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b02      	subs	r3, #2
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b12:	e058      	b.n	8003bc6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	7812      	ldrb	r2, [r2, #0]
 8003b20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003b3a:	e044      	b.n	8003bc6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d12b      	bne.n	8003ba2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d912      	bls.n	8003b7a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	881a      	ldrh	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	1c9a      	adds	r2, r3, #2
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b02      	subs	r3, #2
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b78:	e025      	b.n	8003bc6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	330c      	adds	r3, #12
 8003b84:	7812      	ldrb	r2, [r2, #0]
 8003b86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ba0:	e011      	b.n	8003bc6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba2:	f7fe fa19 	bl	8001fd8 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d803      	bhi.n	8003bba <HAL_SPI_Transmit+0x268>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d102      	bne.n	8003bc0 <HAL_SPI_Transmit+0x26e>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bc4:	e026      	b.n	8003c14 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1b5      	bne.n	8003b3c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	6839      	ldr	r1, [r7, #0]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fb5b 	bl	8004290 <SPI_EndRxTxTransaction>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bee:	2300      	movs	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e000      	b.n	8003c14 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003c12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c24:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b08a      	sub	sp, #40	; 0x28
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_SPI_TransmitReceive+0x26>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e1fb      	b.n	800404c <HAL_SPI_TransmitReceive+0x41e>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c5c:	f7fe f9bc 	bl	8001fd8 <HAL_GetTick>
 8003c60:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c68:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003c70:	887b      	ldrh	r3, [r7, #2]
 8003c72:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003c74:	887b      	ldrh	r3, [r7, #2]
 8003c76:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c78:	7efb      	ldrb	r3, [r7, #27]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d00e      	beq.n	8003c9c <HAL_SPI_TransmitReceive+0x6e>
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c84:	d106      	bne.n	8003c94 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <HAL_SPI_TransmitReceive+0x66>
 8003c8e:	7efb      	ldrb	r3, [r7, #27]
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d003      	beq.n	8003c9c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003c94:	2302      	movs	r3, #2
 8003c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003c9a:	e1cd      	b.n	8004038 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x80>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_SPI_TransmitReceive+0x80>
 8003ca8:	887b      	ldrh	r3, [r7, #2]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d103      	bne.n	8003cb6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003cb4:	e1c0      	b.n	8004038 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d003      	beq.n	8003cca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2205      	movs	r2, #5
 8003cc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	887a      	ldrh	r2, [r7, #2]
 8003cda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	887a      	ldrh	r2, [r7, #2]
 8003ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	887a      	ldrh	r2, [r7, #2]
 8003cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	887a      	ldrh	r2, [r7, #2]
 8003cf6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d0c:	d802      	bhi.n	8003d14 <HAL_SPI_TransmitReceive+0xe6>
 8003d0e:	8a3b      	ldrh	r3, [r7, #16]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d908      	bls.n	8003d26 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	e007      	b.n	8003d36 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d34:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	d007      	beq.n	8003d54 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d5c:	d97c      	bls.n	8003e58 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_SPI_TransmitReceive+0x13e>
 8003d66:	8a7b      	ldrh	r3, [r7, #18]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d169      	bne.n	8003e40 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	881a      	ldrh	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	1c9a      	adds	r2, r3, #2
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d90:	e056      	b.n	8003e40 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d11b      	bne.n	8003dd8 <HAL_SPI_TransmitReceive+0x1aa>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <HAL_SPI_TransmitReceive+0x1aa>
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d113      	bne.n	8003dd8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	881a      	ldrh	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	1c9a      	adds	r2, r3, #2
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d11c      	bne.n	8003e20 <HAL_SPI_TransmitReceive+0x1f2>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d016      	beq.n	8003e20 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	b292      	uxth	r2, r2
 8003dfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	1c9a      	adds	r2, r3, #2
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e20:	f7fe f8da 	bl	8001fd8 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d807      	bhi.n	8003e40 <HAL_SPI_TransmitReceive+0x212>
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d003      	beq.n	8003e40 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003e3e:	e0fb      	b.n	8004038 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1a3      	bne.n	8003d92 <HAL_SPI_TransmitReceive+0x164>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d19d      	bne.n	8003d92 <HAL_SPI_TransmitReceive+0x164>
 8003e56:	e0df      	b.n	8004018 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0x23a>
 8003e60:	8a7b      	ldrh	r3, [r7, #18]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	f040 80cb 	bne.w	8003ffe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d912      	bls.n	8003e98 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	881a      	ldrh	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	1c9a      	adds	r2, r3, #2
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b02      	subs	r3, #2
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e96:	e0b2      	b.n	8003ffe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	7812      	ldrb	r2, [r2, #0]
 8003ea4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ebe:	e09e      	b.n	8003ffe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d134      	bne.n	8003f38 <HAL_SPI_TransmitReceive+0x30a>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d02f      	beq.n	8003f38 <HAL_SPI_TransmitReceive+0x30a>
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d12c      	bne.n	8003f38 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d912      	bls.n	8003f0e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	881a      	ldrh	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	1c9a      	adds	r2, r3, #2
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b02      	subs	r3, #2
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f0c:	e012      	b.n	8003f34 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	330c      	adds	r3, #12
 8003f18:	7812      	ldrb	r2, [r2, #0]
 8003f1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d148      	bne.n	8003fd8 <HAL_SPI_TransmitReceive+0x3aa>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d042      	beq.n	8003fd8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d923      	bls.n	8003fa6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	b292      	uxth	r2, r2
 8003f6a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	1c9a      	adds	r2, r3, #2
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b02      	subs	r3, #2
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d81f      	bhi.n	8003fd4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fa2:	605a      	str	r2, [r3, #4]
 8003fa4:	e016      	b.n	8003fd4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f103 020c 	add.w	r2, r3, #12
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	7812      	ldrb	r2, [r2, #0]
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fd8:	f7fd fffe 	bl	8001fd8 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d803      	bhi.n	8003ff0 <HAL_SPI_TransmitReceive+0x3c2>
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fee:	d102      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x3c8>
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003ffc:	e01c      	b.n	8004038 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	f47f af5b 	bne.w	8003ec0 <HAL_SPI_TransmitReceive+0x292>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	f47f af54 	bne.w	8003ec0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 f937 	bl	8004290 <SPI_EndRxTxTransaction>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d006      	beq.n	8004036 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	661a      	str	r2, [r3, #96]	; 0x60
 8004034:	e000      	b.n	8004038 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004036:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004048:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800404c:	4618      	mov	r0, r3
 800404e:	3728      	adds	r7, #40	; 0x28
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004064:	f7fd ffb8 	bl	8001fd8 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	4413      	add	r3, r2
 8004072:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004074:	f7fd ffb0 	bl	8001fd8 <HAL_GetTick>
 8004078:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800407a:	4b39      	ldr	r3, [pc, #228]	; (8004160 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	015b      	lsls	r3, r3, #5
 8004080:	0d1b      	lsrs	r3, r3, #20
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800408a:	e054      	b.n	8004136 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d050      	beq.n	8004136 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004094:	f7fd ffa0 	bl	8001fd8 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d902      	bls.n	80040aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d13d      	bne.n	8004126 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040c2:	d111      	bne.n	80040e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040cc:	d004      	beq.n	80040d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d6:	d107      	bne.n	80040e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f0:	d10f      	bne.n	8004112 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e017      	b.n	8004156 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3b01      	subs	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4013      	ands	r3, r2
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	429a      	cmp	r2, r3
 8004144:	bf0c      	ite	eq
 8004146:	2301      	moveq	r3, #1
 8004148:	2300      	movne	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	429a      	cmp	r2, r3
 8004152:	d19b      	bne.n	800408c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000004 	.word	0x20000004

08004164 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	; 0x28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004176:	f7fd ff2f 	bl	8001fd8 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	4413      	add	r3, r2
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004186:	f7fd ff27 	bl	8001fd8 <HAL_GetTick>
 800418a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	330c      	adds	r3, #12
 8004192:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004194:	4b3d      	ldr	r3, [pc, #244]	; (800428c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	00da      	lsls	r2, r3, #3
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	0d1b      	lsrs	r3, r3, #20
 80041a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a6:	fb02 f303 	mul.w	r3, r2, r3
 80041aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80041ac:	e060      	b.n	8004270 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80041b4:	d107      	bne.n	80041c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d104      	bne.n	80041c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d050      	beq.n	8004270 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041ce:	f7fd ff03 	bl	8001fd8 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041da:	429a      	cmp	r2, r3
 80041dc:	d902      	bls.n	80041e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d13d      	bne.n	8004260 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041fc:	d111      	bne.n	8004222 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004206:	d004      	beq.n	8004212 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004210:	d107      	bne.n	8004222 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004220:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422a:	d10f      	bne.n	800424c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800424a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e010      	b.n	8004282 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	3b01      	subs	r3, #1
 800426e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d196      	bne.n	80041ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3728      	adds	r7, #40	; 0x28
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000004 	.word	0x20000004

08004290 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7ff ff5b 	bl	8004164 <SPI_WaitFifoStateUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d007      	beq.n	80042c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b8:	f043 0220 	orr.w	r2, r3, #32
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e046      	b.n	8004352 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042c4:	4b25      	ldr	r3, [pc, #148]	; (800435c <SPI_EndRxTxTransaction+0xcc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a25      	ldr	r2, [pc, #148]	; (8004360 <SPI_EndRxTxTransaction+0xd0>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	0d5b      	lsrs	r3, r3, #21
 80042d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042d4:	fb02 f303 	mul.w	r3, r2, r3
 80042d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042e2:	d112      	bne.n	800430a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2200      	movs	r2, #0
 80042ec:	2180      	movs	r1, #128	; 0x80
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f7ff feb0 	bl	8004054 <SPI_WaitFlagStateUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fe:	f043 0220 	orr.w	r2, r3, #32
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e023      	b.n	8004352 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	3b01      	subs	r3, #1
 8004314:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004320:	2b80      	cmp	r3, #128	; 0x80
 8004322:	d0f2      	beq.n	800430a <SPI_EndRxTxTransaction+0x7a>
 8004324:	e000      	b.n	8004328 <SPI_EndRxTxTransaction+0x98>
        break;
 8004326:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2200      	movs	r2, #0
 8004330:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7ff ff15 	bl	8004164 <SPI_WaitFifoStateUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d007      	beq.n	8004350 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004344:	f043 0220 	orr.w	r2, r3, #32
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e000      	b.n	8004352 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000004 	.word	0x20000004
 8004360:	165e9f81 	.word	0x165e9f81

08004364 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004368:	4904      	ldr	r1, [pc, #16]	; (800437c <MX_FATFS_Init+0x18>)
 800436a:	4805      	ldr	r0, [pc, #20]	; (8004380 <MX_FATFS_Init+0x1c>)
 800436c:	f003 f9c8 	bl	8007700 <FATFS_LinkDriver>
 8004370:	4603      	mov	r3, r0
 8004372:	461a      	mov	r2, r3
 8004374:	4b03      	ldr	r3, [pc, #12]	; (8004384 <MX_FATFS_Init+0x20>)
 8004376:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004378:	bf00      	nop
 800437a:	bd80      	pop	{r7, pc}
 800437c:	200002dc 	.word	0x200002dc
 8004380:	20000010 	.word	0x20000010
 8004384:	200002d8 	.word	0x200002d8

08004388 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800438c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800438e:	4618      	mov	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fc fcc9 	bl	8000d3c <SD_disk_initialize>
 80043aa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fc fda1 	bl	8000f08 <SD_disk_status>
 80043c6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80043e0:	7bf8      	ldrb	r0, [r7, #15]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	f7fc fda4 	bl	8000f34 <SD_disk_read>
 80043ec:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4603      	mov	r3, r0
 8004404:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8004406:	7bf8      	ldrb	r0, [r7, #15]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	f7fc fdfb 	bl	8001008 <SD_disk_write>
 8004412:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	603a      	str	r2, [r7, #0]
 8004426:	71fb      	strb	r3, [r7, #7]
 8004428:	460b      	mov	r3, r1
 800442a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800442c:	79b9      	ldrb	r1, [r7, #6]
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7fc fe6c 	bl	8001110 <SD_disk_ioctl>
 8004438:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	4a08      	ldr	r2, [pc, #32]	; (8004474 <disk_status+0x30>)
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	79fa      	ldrb	r2, [r7, #7]
 800445c:	4905      	ldr	r1, [pc, #20]	; (8004474 <disk_status+0x30>)
 800445e:	440a      	add	r2, r1
 8004460:	7a12      	ldrb	r2, [r2, #8]
 8004462:	4610      	mov	r0, r2
 8004464:	4798      	blx	r3
 8004466:	4603      	mov	r3, r0
 8004468:	73fb      	strb	r3, [r7, #15]
  return stat;
 800446a:	7bfb      	ldrb	r3, [r7, #15]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20000508 	.word	0x20000508

08004478 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	4a0d      	ldr	r2, [pc, #52]	; (80044c0 <disk_initialize+0x48>)
 800448a:	5cd3      	ldrb	r3, [r2, r3]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d111      	bne.n	80044b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <disk_initialize+0x48>)
 8004494:	2101      	movs	r1, #1
 8004496:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004498:	79fb      	ldrb	r3, [r7, #7]
 800449a:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <disk_initialize+0x48>)
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	79fa      	ldrb	r2, [r7, #7]
 80044a6:	4906      	ldr	r1, [pc, #24]	; (80044c0 <disk_initialize+0x48>)
 80044a8:	440a      	add	r2, r1
 80044aa:	7a12      	ldrb	r2, [r2, #8]
 80044ac:	4610      	mov	r0, r2
 80044ae:	4798      	blx	r3
 80044b0:	4603      	mov	r3, r0
 80044b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000508 	.word	0x20000508

080044c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	4603      	mov	r3, r0
 80044d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <disk_read+0x3c>)
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	689c      	ldr	r4, [r3, #8]
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	4a07      	ldr	r2, [pc, #28]	; (8004500 <disk_read+0x3c>)
 80044e4:	4413      	add	r3, r2
 80044e6:	7a18      	ldrb	r0, [r3, #8]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	47a0      	blx	r4
 80044f0:	4603      	mov	r3, r0
 80044f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd90      	pop	{r4, r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000508 	.word	0x20000508

08004504 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	4603      	mov	r3, r0
 8004512:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	4a0a      	ldr	r2, [pc, #40]	; (8004540 <disk_write+0x3c>)
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	68dc      	ldr	r4, [r3, #12]
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	4a07      	ldr	r2, [pc, #28]	; (8004540 <disk_write+0x3c>)
 8004524:	4413      	add	r3, r2
 8004526:	7a18      	ldrb	r0, [r3, #8]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	47a0      	blx	r4
 8004530:	4603      	mov	r3, r0
 8004532:	75fb      	strb	r3, [r7, #23]
  return res;
 8004534:	7dfb      	ldrb	r3, [r7, #23]
}
 8004536:	4618      	mov	r0, r3
 8004538:	371c      	adds	r7, #28
 800453a:	46bd      	mov	sp, r7
 800453c:	bd90      	pop	{r4, r7, pc}
 800453e:	bf00      	nop
 8004540:	20000508 	.word	0x20000508

08004544 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	603a      	str	r2, [r7, #0]
 800454e:	71fb      	strb	r3, [r7, #7]
 8004550:	460b      	mov	r3, r1
 8004552:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	4a09      	ldr	r2, [pc, #36]	; (800457c <disk_ioctl+0x38>)
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	79fa      	ldrb	r2, [r7, #7]
 8004562:	4906      	ldr	r1, [pc, #24]	; (800457c <disk_ioctl+0x38>)
 8004564:	440a      	add	r2, r1
 8004566:	7a10      	ldrb	r0, [r2, #8]
 8004568:	79b9      	ldrb	r1, [r7, #6]
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	4798      	blx	r3
 800456e:	4603      	mov	r3, r0
 8004570:	73fb      	strb	r3, [r7, #15]
  return res;
 8004572:	7bfb      	ldrb	r3, [r7, #15]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20000508 	.word	0x20000508

08004580 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3301      	adds	r3, #1
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004590:	89fb      	ldrh	r3, [r7, #14]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	b21a      	sxth	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	b21b      	sxth	r3, r3
 800459c:	4313      	orrs	r3, r2
 800459e:	b21b      	sxth	r3, r3
 80045a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80045a2:	89fb      	ldrh	r3, [r7, #14]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3303      	adds	r3, #3
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	3202      	adds	r2, #2
 80045c8:	7812      	ldrb	r2, [r2, #0]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	3201      	adds	r2, #1
 80045d6:	7812      	ldrb	r2, [r2, #0]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	7812      	ldrb	r2, [r2, #0]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80045e8:	68fb      	ldr	r3, [r7, #12]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	887a      	ldrh	r2, [r7, #2]
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	887b      	ldrh	r3, [r7, #2]
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	887a      	ldrh	r2, [r7, #2]
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	0a1b      	lsrs	r3, r3, #8
 8004646:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	0a1b      	lsrs	r3, r3, #8
 8004658:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	0a1b      	lsrs	r3, r3, #8
 800466a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	607a      	str	r2, [r7, #4]
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00d      	beq.n	80046ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	1c53      	adds	r3, r2, #1
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	1c59      	adds	r1, r3, #1
 80046a8:	6179      	str	r1, [r7, #20]
 80046aa:	7812      	ldrb	r2, [r2, #0]
 80046ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	607b      	str	r3, [r7, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f1      	bne.n	800469e <mem_cpy+0x1a>
	}
}
 80046ba:	bf00      	nop
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80046c6:	b480      	push	{r7}
 80046c8:	b087      	sub	sp, #28
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	617a      	str	r2, [r7, #20]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	607b      	str	r3, [r7, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f3      	bne.n	80046d6 <mem_set+0x10>
}
 80046ee:	bf00      	nop
 80046f0:	bf00      	nop
 80046f2:	371c      	adds	r7, #28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80046fc:	b480      	push	{r7}
 80046fe:	b089      	sub	sp, #36	; 0x24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	61fb      	str	r3, [r7, #28]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	61fa      	str	r2, [r7, #28]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	4619      	mov	r1, r3
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	61ba      	str	r2, [r7, #24]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	1acb      	subs	r3, r1, r3
 8004728:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3b01      	subs	r3, #1
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <mem_cmp+0x40>
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0eb      	beq.n	8004714 <mem_cmp+0x18>

	return r;
 800473c:	697b      	ldr	r3, [r7, #20]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3724      	adds	r7, #36	; 0x24
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004754:	e002      	b.n	800475c <chk_chr+0x12>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3301      	adds	r3, #1
 800475a:	607b      	str	r3, [r7, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <chk_chr+0x26>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	4293      	cmp	r3, r2
 800476e:	d1f2      	bne.n	8004756 <chk_chr+0xc>
	return *str;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	781b      	ldrb	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	e029      	b.n	80047e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004794:	4a27      	ldr	r2, [pc, #156]	; (8004834 <chk_lock+0xb4>)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	4413      	add	r3, r2
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d01d      	beq.n	80047de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80047a2:	4a24      	ldr	r2, [pc, #144]	; (8004834 <chk_lock+0xb4>)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	4413      	add	r3, r2
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d116      	bne.n	80047e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80047b4:	4a1f      	ldr	r2, [pc, #124]	; (8004834 <chk_lock+0xb4>)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	4413      	add	r3, r2
 80047bc:	3304      	adds	r3, #4
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d10c      	bne.n	80047e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80047c8:	4a1a      	ldr	r2, [pc, #104]	; (8004834 <chk_lock+0xb4>)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	4413      	add	r3, r2
 80047d0:	3308      	adds	r3, #8
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80047d8:	429a      	cmp	r2, r3
 80047da:	d102      	bne.n	80047e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80047dc:	e007      	b.n	80047ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80047de:	2301      	movs	r3, #1
 80047e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3301      	adds	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d9d2      	bls.n	8004794 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d109      	bne.n	8004808 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <chk_lock+0x80>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d101      	bne.n	8004804 <chk_lock+0x84>
 8004800:	2300      	movs	r3, #0
 8004802:	e010      	b.n	8004826 <chk_lock+0xa6>
 8004804:	2312      	movs	r3, #18
 8004806:	e00e      	b.n	8004826 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d108      	bne.n	8004820 <chk_lock+0xa0>
 800480e:	4a09      	ldr	r2, [pc, #36]	; (8004834 <chk_lock+0xb4>)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	4413      	add	r3, r2
 8004816:	330c      	adds	r3, #12
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800481e:	d101      	bne.n	8004824 <chk_lock+0xa4>
 8004820:	2310      	movs	r3, #16
 8004822:	e000      	b.n	8004826 <chk_lock+0xa6>
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	200002e8 	.word	0x200002e8

08004838 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800483e:	2300      	movs	r3, #0
 8004840:	607b      	str	r3, [r7, #4]
 8004842:	e002      	b.n	800484a <enq_lock+0x12>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3301      	adds	r3, #1
 8004848:	607b      	str	r3, [r7, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d806      	bhi.n	800485e <enq_lock+0x26>
 8004850:	4a09      	ldr	r2, [pc, #36]	; (8004878 <enq_lock+0x40>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	4413      	add	r3, r2
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f2      	bne.n	8004844 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b02      	cmp	r3, #2
 8004862:	bf14      	ite	ne
 8004864:	2301      	movne	r3, #1
 8004866:	2300      	moveq	r3, #0
 8004868:	b2db      	uxtb	r3, r3
}
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	200002e8 	.word	0x200002e8

0800487c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	e01f      	b.n	80048cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800488c:	4a41      	ldr	r2, [pc, #260]	; (8004994 <inc_lock+0x118>)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	4413      	add	r3, r2
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d113      	bne.n	80048c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800489e:	4a3d      	ldr	r2, [pc, #244]	; (8004994 <inc_lock+0x118>)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	4413      	add	r3, r2
 80048a6:	3304      	adds	r3, #4
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d109      	bne.n	80048c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80048b2:	4a38      	ldr	r2, [pc, #224]	; (8004994 <inc_lock+0x118>)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	4413      	add	r3, r2
 80048ba:	3308      	adds	r3, #8
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d006      	beq.n	80048d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3301      	adds	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d9dc      	bls.n	800488c <inc_lock+0x10>
 80048d2:	e000      	b.n	80048d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80048d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d132      	bne.n	8004942 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e002      	b.n	80048e8 <inc_lock+0x6c>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3301      	adds	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d806      	bhi.n	80048fc <inc_lock+0x80>
 80048ee:	4a29      	ldr	r2, [pc, #164]	; (8004994 <inc_lock+0x118>)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	4413      	add	r3, r2
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1f2      	bne.n	80048e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d101      	bne.n	8004906 <inc_lock+0x8a>
 8004902:	2300      	movs	r3, #0
 8004904:	e040      	b.n	8004988 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	4922      	ldr	r1, [pc, #136]	; (8004994 <inc_lock+0x118>)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	440b      	add	r3, r1
 8004912:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	491e      	ldr	r1, [pc, #120]	; (8004994 <inc_lock+0x118>)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	440b      	add	r3, r1
 8004920:	3304      	adds	r3, #4
 8004922:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	695a      	ldr	r2, [r3, #20]
 8004928:	491a      	ldr	r1, [pc, #104]	; (8004994 <inc_lock+0x118>)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	440b      	add	r3, r1
 8004930:	3308      	adds	r3, #8
 8004932:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004934:	4a17      	ldr	r2, [pc, #92]	; (8004994 <inc_lock+0x118>)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	4413      	add	r3, r2
 800493c:	330c      	adds	r3, #12
 800493e:	2200      	movs	r2, #0
 8004940:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d009      	beq.n	800495c <inc_lock+0xe0>
 8004948:	4a12      	ldr	r2, [pc, #72]	; (8004994 <inc_lock+0x118>)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	4413      	add	r3, r2
 8004950:	330c      	adds	r3, #12
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <inc_lock+0xe0>
 8004958:	2300      	movs	r3, #0
 800495a:	e015      	b.n	8004988 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d108      	bne.n	8004974 <inc_lock+0xf8>
 8004962:	4a0c      	ldr	r2, [pc, #48]	; (8004994 <inc_lock+0x118>)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	4413      	add	r3, r2
 800496a:	330c      	adds	r3, #12
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	3301      	adds	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	e001      	b.n	8004978 <inc_lock+0xfc>
 8004974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004978:	4906      	ldr	r1, [pc, #24]	; (8004994 <inc_lock+0x118>)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	440b      	add	r3, r1
 8004980:	330c      	adds	r3, #12
 8004982:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3301      	adds	r3, #1
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	200002e8 	.word	0x200002e8

08004998 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	607b      	str	r3, [r7, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d825      	bhi.n	80049f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80049ac:	4a17      	ldr	r2, [pc, #92]	; (8004a0c <dec_lock+0x74>)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	4413      	add	r3, r2
 80049b4:	330c      	adds	r3, #12
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80049ba:	89fb      	ldrh	r3, [r7, #14]
 80049bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c0:	d101      	bne.n	80049c6 <dec_lock+0x2e>
 80049c2:	2300      	movs	r3, #0
 80049c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80049c6:	89fb      	ldrh	r3, [r7, #14]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <dec_lock+0x3a>
 80049cc:	89fb      	ldrh	r3, [r7, #14]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80049d2:	4a0e      	ldr	r2, [pc, #56]	; (8004a0c <dec_lock+0x74>)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	4413      	add	r3, r2
 80049da:	330c      	adds	r3, #12
 80049dc:	89fa      	ldrh	r2, [r7, #14]
 80049de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80049e0:	89fb      	ldrh	r3, [r7, #14]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d105      	bne.n	80049f2 <dec_lock+0x5a>
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <dec_lock+0x74>)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	4413      	add	r3, r2
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	737b      	strb	r3, [r7, #13]
 80049f6:	e001      	b.n	80049fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80049f8:	2302      	movs	r3, #2
 80049fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80049fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	200002e8 	.word	0x200002e8

08004a10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	e010      	b.n	8004a40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004a1e:	4a0d      	ldr	r2, [pc, #52]	; (8004a54 <clear_lock+0x44>)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	4413      	add	r3, r2
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d105      	bne.n	8004a3a <clear_lock+0x2a>
 8004a2e:	4a09      	ldr	r2, [pc, #36]	; (8004a54 <clear_lock+0x44>)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	4413      	add	r3, r2
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d9eb      	bls.n	8004a1e <clear_lock+0xe>
	}
}
 8004a46:	bf00      	nop
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	200002e8 	.word	0x200002e8

08004a58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	78db      	ldrb	r3, [r3, #3]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d034      	beq.n	8004ad6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	7858      	ldrb	r0, [r3, #1]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	f7ff fd40 	bl	8004504 <disk_write>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
 8004a8e:	e022      	b.n	8004ad6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	1ad2      	subs	r2, r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d217      	bcs.n	8004ad6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	789b      	ldrb	r3, [r3, #2]
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	e010      	b.n	8004ad0 <sync_window+0x78>
					wsect += fs->fsize;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	7858      	ldrb	r0, [r3, #1]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	f7ff fd1d 	bl	8004504 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d8eb      	bhi.n	8004aae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d01b      	beq.n	8004b30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff ffad 	bl	8004a58 <sync_window>
 8004afe:	4603      	mov	r3, r0
 8004b00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d113      	bne.n	8004b30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	7858      	ldrb	r0, [r3, #1]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b12:	2301      	movs	r3, #1
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	f7ff fcd5 	bl	80044c4 <disk_read>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d004      	beq.n	8004b2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004b20:	f04f 33ff 	mov.w	r3, #4294967295
 8004b24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff ff87 	bl	8004a58 <sync_window>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d159      	bne.n	8004c08 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d149      	bne.n	8004bf0 <sync_fs+0xb4>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	791b      	ldrb	r3, [r3, #4]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d145      	bne.n	8004bf0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	899b      	ldrh	r3, [r3, #12]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2100      	movs	r1, #0
 8004b72:	f7ff fda8 	bl	80046c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3338      	adds	r3, #56	; 0x38
 8004b7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004b7e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fd37 	bl	80045f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3338      	adds	r3, #56	; 0x38
 8004b8c:	4921      	ldr	r1, [pc, #132]	; (8004c14 <sync_fs+0xd8>)
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fd4c 	bl	800462c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3338      	adds	r3, #56	; 0x38
 8004b98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004b9c:	491e      	ldr	r1, [pc, #120]	; (8004c18 <sync_fs+0xdc>)
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff fd44 	bl	800462c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3338      	adds	r3, #56	; 0x38
 8004ba8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f7ff fd3a 	bl	800462c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3338      	adds	r3, #56	; 0x38
 8004bbc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f7ff fd30 	bl	800462c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	7858      	ldrb	r0, [r3, #1]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004be4:	2301      	movs	r3, #1
 8004be6:	f7ff fc8d 	bl	8004504 <disk_write>
			fs->fsi_flag = 0;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	785b      	ldrb	r3, [r3, #1]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff fca3 	bl	8004544 <disk_ioctl>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <sync_fs+0xcc>
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	41615252 	.word	0x41615252
 8004c18:	61417272 	.word	0x61417272

08004c1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	3b02      	subs	r3, #2
 8004c2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	3b02      	subs	r3, #2
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d301      	bcc.n	8004c3c <clust2sect+0x20>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e008      	b.n	8004c4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	895b      	ldrh	r3, [r3, #10]
 8004c40:	461a      	mov	r2, r3
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	fb03 f202 	mul.w	r2, r3, r2
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	4413      	add	r3, r2
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b086      	sub	sp, #24
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d904      	bls.n	8004c7a <get_fat+0x20>
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d302      	bcc.n	8004c80 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	e0bb      	b.n	8004df8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004c80:	f04f 33ff 	mov.w	r3, #4294967295
 8004c84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	f000 8083 	beq.w	8004d96 <get_fat+0x13c>
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	f300 80a7 	bgt.w	8004de4 <get_fat+0x18a>
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d002      	beq.n	8004ca0 <get_fat+0x46>
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d056      	beq.n	8004d4c <get_fat+0xf2>
 8004c9e:	e0a1      	b.n	8004de4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	899b      	ldrh	r3, [r3, #12]
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cbe:	4413      	add	r3, r2
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	6938      	ldr	r0, [r7, #16]
 8004cc4:	f7ff ff0c 	bl	8004ae0 <move_window>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f040 808d 	bne.w	8004dea <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	60fa      	str	r2, [r7, #12]
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	8992      	ldrh	r2, [r2, #12]
 8004cda:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cde:	fb01 f202 	mul.w	r2, r1, r2
 8004ce2:	1a9b      	subs	r3, r3, r2
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	899b      	ldrh	r3, [r3, #12]
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cfe:	4413      	add	r3, r2
 8004d00:	4619      	mov	r1, r3
 8004d02:	6938      	ldr	r0, [r7, #16]
 8004d04:	f7ff feec 	bl	8004ae0 <move_window>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d16f      	bne.n	8004dee <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	899b      	ldrh	r3, [r3, #12]
 8004d12:	461a      	mov	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d1a:	fb01 f202 	mul.w	r2, r1, r2
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4413      	add	r3, r2
 8004d24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <get_fat+0xe8>
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	091b      	lsrs	r3, r3, #4
 8004d40:	e002      	b.n	8004d48 <get_fat+0xee>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d48:	617b      	str	r3, [r7, #20]
			break;
 8004d4a:	e055      	b.n	8004df8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	899b      	ldrh	r3, [r3, #12]
 8004d54:	085b      	lsrs	r3, r3, #1
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	4619      	mov	r1, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d60:	4413      	add	r3, r2
 8004d62:	4619      	mov	r1, r3
 8004d64:	6938      	ldr	r0, [r7, #16]
 8004d66:	f7ff febb 	bl	8004ae0 <move_window>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d140      	bne.n	8004df2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	8992      	ldrh	r2, [r2, #12]
 8004d7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d82:	fb00 f202 	mul.w	r2, r0, r2
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	440b      	add	r3, r1
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff fbf8 	bl	8004580 <ld_word>
 8004d90:	4603      	mov	r3, r0
 8004d92:	617b      	str	r3, [r7, #20]
			break;
 8004d94:	e030      	b.n	8004df8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	899b      	ldrh	r3, [r3, #12]
 8004d9e:	089b      	lsrs	r3, r3, #2
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	4619      	mov	r1, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004daa:	4413      	add	r3, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	6938      	ldr	r0, [r7, #16]
 8004db0:	f7ff fe96 	bl	8004ae0 <move_window>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d11d      	bne.n	8004df6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	8992      	ldrh	r2, [r2, #12]
 8004dc8:	fbb3 f0f2 	udiv	r0, r3, r2
 8004dcc:	fb00 f202 	mul.w	r2, r0, r2
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff fbeb 	bl	80045b0 <ld_dword>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004de0:	617b      	str	r3, [r7, #20]
			break;
 8004de2:	e009      	b.n	8004df8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004de4:	2301      	movs	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	e006      	b.n	8004df8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004dea:	bf00      	nop
 8004dec:	e004      	b.n	8004df8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004dee:	bf00      	nop
 8004df0:	e002      	b.n	8004df8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004df2:	bf00      	nop
 8004df4:	e000      	b.n	8004df8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004df6:	bf00      	nop
		}
	}

	return val;
 8004df8:	697b      	ldr	r3, [r7, #20]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004e02:	b590      	push	{r4, r7, lr}
 8004e04:	b089      	sub	sp, #36	; 0x24
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	f240 8109 	bls.w	800502c <put_fat+0x22a>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	f080 8103 	bcs.w	800502c <put_fat+0x22a>
		switch (fs->fs_type) {
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	f000 80b6 	beq.w	8004f9c <put_fat+0x19a>
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	f300 80fb 	bgt.w	800502c <put_fat+0x22a>
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d003      	beq.n	8004e42 <put_fat+0x40>
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	f000 8083 	beq.w	8004f46 <put_fat+0x144>
 8004e40:	e0f4      	b.n	800502c <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	899b      	ldrh	r3, [r3, #12]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e60:	4413      	add	r3, r2
 8004e62:	4619      	mov	r1, r3
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f7ff fe3b 	bl	8004ae0 <move_window>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e6e:	7ffb      	ldrb	r3, [r7, #31]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f040 80d4 	bne.w	800501e <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	61ba      	str	r2, [r7, #24]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	8992      	ldrh	r2, [r2, #12]
 8004e86:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e8a:	fb00 f202 	mul.w	r2, r0, r2
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	440b      	add	r3, r1
 8004e92:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <put_fat+0xb8>
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	b25b      	sxtb	r3, r3
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	b25a      	sxtb	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	b25b      	sxtb	r3, r3
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	b25b      	sxtb	r3, r3
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	e001      	b.n	8004ebe <put_fat+0xbc>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	899b      	ldrh	r3, [r3, #12]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ed8:	4413      	add	r3, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff fdff 	bl	8004ae0 <move_window>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ee6:	7ffb      	ldrb	r3, [r7, #31]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f040 809a 	bne.w	8005022 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	899b      	ldrh	r3, [r3, #12]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f00:	fb00 f202 	mul.w	r2, r0, r2
 8004f04:	1a9b      	subs	r3, r3, r2
 8004f06:	440b      	add	r3, r1
 8004f08:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <put_fat+0x11a>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	091b      	lsrs	r3, r3, #4
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	e00e      	b.n	8004f3a <put_fat+0x138>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	b25b      	sxtb	r3, r3
 8004f22:	f023 030f 	bic.w	r3, r3, #15
 8004f26:	b25a      	sxtb	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	b25b      	sxtb	r3, r3
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	b25b      	sxtb	r3, r3
 8004f34:	4313      	orrs	r3, r2
 8004f36:	b25b      	sxtb	r3, r3
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2201      	movs	r2, #1
 8004f42:	70da      	strb	r2, [r3, #3]
			break;
 8004f44:	e072      	b.n	800502c <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	899b      	ldrh	r3, [r3, #12]
 8004f4e:	085b      	lsrs	r3, r3, #1
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	4619      	mov	r1, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f5a:	4413      	add	r3, r2
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fdbe 	bl	8004ae0 <move_window>
 8004f64:	4603      	mov	r3, r0
 8004f66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f68:	7ffb      	ldrb	r3, [r7, #31]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d15b      	bne.n	8005026 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	8992      	ldrh	r2, [r2, #12]
 8004f7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f80:	fb00 f202 	mul.w	r2, r0, r2
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	440b      	add	r3, r1
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	b292      	uxth	r2, r2
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fb31 	bl	80045f6 <st_word>
			fs->wflag = 1;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2201      	movs	r2, #1
 8004f98:	70da      	strb	r2, [r3, #3]
			break;
 8004f9a:	e047      	b.n	800502c <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	899b      	ldrh	r3, [r3, #12]
 8004fa4:	089b      	lsrs	r3, r3, #2
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	4619      	mov	r1, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fb0:	4413      	add	r3, r2
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f7ff fd93 	bl	8004ae0 <move_window>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004fbe:	7ffb      	ldrb	r3, [r7, #31]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d132      	bne.n	800502a <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	8992      	ldrh	r2, [r2, #12]
 8004fd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fdc:	fb00 f202 	mul.w	r2, r0, r2
 8004fe0:	1a9b      	subs	r3, r3, r2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fae3 	bl	80045b0 <ld_dword>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004ff0:	4323      	orrs	r3, r4
 8004ff2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	8992      	ldrh	r2, [r2, #12]
 8005002:	fbb3 f0f2 	udiv	r0, r3, r2
 8005006:	fb00 f202 	mul.w	r2, r0, r2
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	440b      	add	r3, r1
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff fb0b 	bl	800462c <st_dword>
			fs->wflag = 1;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	70da      	strb	r2, [r3, #3]
			break;
 800501c:	e006      	b.n	800502c <put_fat+0x22a>
			if (res != FR_OK) break;
 800501e:	bf00      	nop
 8005020:	e004      	b.n	800502c <put_fat+0x22a>
			if (res != FR_OK) break;
 8005022:	bf00      	nop
 8005024:	e002      	b.n	800502c <put_fat+0x22a>
			if (res != FR_OK) break;
 8005026:	bf00      	nop
 8005028:	e000      	b.n	800502c <put_fat+0x22a>
			if (res != FR_OK) break;
 800502a:	bf00      	nop
		}
	}
	return res;
 800502c:	7ffb      	ldrb	r3, [r7, #31]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3724      	adds	r7, #36	; 0x24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd90      	pop	{r4, r7, pc}

08005036 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b088      	sub	sp, #32
 800503a:	af00      	add	r7, sp, #0
 800503c:	60f8      	str	r0, [r7, #12]
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d904      	bls.n	800505c <remove_chain+0x26>
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	429a      	cmp	r2, r3
 800505a:	d301      	bcc.n	8005060 <remove_chain+0x2a>
 800505c:	2302      	movs	r3, #2
 800505e:	e04b      	b.n	80050f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00c      	beq.n	8005080 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005066:	f04f 32ff 	mov.w	r2, #4294967295
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	69b8      	ldr	r0, [r7, #24]
 800506e:	f7ff fec8 	bl	8004e02 <put_fat>
 8005072:	4603      	mov	r3, r0
 8005074:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005076:	7ffb      	ldrb	r3, [r7, #31]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <remove_chain+0x4a>
 800507c:	7ffb      	ldrb	r3, [r7, #31]
 800507e:	e03b      	b.n	80050f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff fde9 	bl	8004c5a <get_fat>
 8005088:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d031      	beq.n	80050f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d101      	bne.n	800509a <remove_chain+0x64>
 8005096:	2302      	movs	r3, #2
 8005098:	e02e      	b.n	80050f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a0:	d101      	bne.n	80050a6 <remove_chain+0x70>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e028      	b.n	80050f8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80050a6:	2200      	movs	r2, #0
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	69b8      	ldr	r0, [r7, #24]
 80050ac:	f7ff fea9 	bl	8004e02 <put_fat>
 80050b0:	4603      	mov	r3, r0
 80050b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80050b4:	7ffb      	ldrb	r3, [r7, #31]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <remove_chain+0x88>
 80050ba:	7ffb      	ldrb	r3, [r7, #31]
 80050bc:	e01c      	b.n	80050f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	3b02      	subs	r3, #2
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d20b      	bcs.n	80050e4 <remove_chain+0xae>
			fs->free_clst++;
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	791b      	ldrb	r3, [r3, #4]
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d3c6      	bcc.n	8005080 <remove_chain+0x4a>
 80050f2:	e000      	b.n	80050f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80050f4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10d      	bne.n	8005132 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d004      	beq.n	800512c <create_chain+0x2c>
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	429a      	cmp	r2, r3
 800512a:	d31b      	bcc.n	8005164 <create_chain+0x64>
 800512c:	2301      	movs	r3, #1
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	e018      	b.n	8005164 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005132:	6839      	ldr	r1, [r7, #0]
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff fd90 	bl	8004c5a <get_fat>
 800513a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d801      	bhi.n	8005146 <create_chain+0x46>
 8005142:	2301      	movs	r3, #1
 8005144:	e070      	b.n	8005228 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d101      	bne.n	8005152 <create_chain+0x52>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	e06a      	b.n	8005228 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	429a      	cmp	r2, r3
 800515a:	d201      	bcs.n	8005160 <create_chain+0x60>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	e063      	b.n	8005228 <create_chain+0x128>
		scl = clst;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	3301      	adds	r3, #1
 800516c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	429a      	cmp	r2, r3
 8005176:	d307      	bcc.n	8005188 <create_chain+0x88>
				ncl = 2;
 8005178:	2302      	movs	r3, #2
 800517a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	429a      	cmp	r2, r3
 8005182:	d901      	bls.n	8005188 <create_chain+0x88>
 8005184:	2300      	movs	r3, #0
 8005186:	e04f      	b.n	8005228 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005188:	69f9      	ldr	r1, [r7, #28]
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff fd65 	bl	8004c5a <get_fat>
 8005190:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00e      	beq.n	80051b6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d003      	beq.n	80051a6 <create_chain+0xa6>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a4:	d101      	bne.n	80051aa <create_chain+0xaa>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	e03e      	b.n	8005228 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d1da      	bne.n	8005168 <create_chain+0x68>
 80051b2:	2300      	movs	r3, #0
 80051b4:	e038      	b.n	8005228 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80051b6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80051b8:	f04f 32ff 	mov.w	r2, #4294967295
 80051bc:	69f9      	ldr	r1, [r7, #28]
 80051be:	6938      	ldr	r0, [r7, #16]
 80051c0:	f7ff fe1f 	bl	8004e02 <put_fat>
 80051c4:	4603      	mov	r3, r0
 80051c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <create_chain+0xe2>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d006      	beq.n	80051e2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	6839      	ldr	r1, [r7, #0]
 80051d8:	6938      	ldr	r0, [r7, #16]
 80051da:	f7ff fe12 	bl	8004e02 <put_fat>
 80051de:	4603      	mov	r3, r0
 80051e0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d116      	bne.n	8005216 <create_chain+0x116>
		fs->last_clst = ncl;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	3b02      	subs	r3, #2
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d804      	bhi.n	8005206 <create_chain+0x106>
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	1e5a      	subs	r2, r3, #1
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	791b      	ldrb	r3, [r3, #4]
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	b2da      	uxtb	r2, r3
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	711a      	strb	r2, [r3, #4]
 8005214:	e007      	b.n	8005226 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d102      	bne.n	8005222 <create_chain+0x122>
 800521c:	f04f 33ff 	mov.w	r3, #4294967295
 8005220:	e000      	b.n	8005224 <create_chain+0x124>
 8005222:	2301      	movs	r3, #1
 8005224:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005226:	69fb      	ldr	r3, [r7, #28]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	3304      	adds	r3, #4
 8005246:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	899b      	ldrh	r3, [r3, #12]
 800524c:	461a      	mov	r2, r3
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	fbb3 f3f2 	udiv	r3, r3, r2
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	8952      	ldrh	r2, [r2, #10]
 8005258:	fbb3 f3f2 	udiv	r3, r3, r2
 800525c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1d1a      	adds	r2, r3, #4
 8005262:	613a      	str	r2, [r7, #16]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <clmt_clust+0x42>
 800526e:	2300      	movs	r3, #0
 8005270:	e010      	b.n	8005294 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	429a      	cmp	r2, r3
 8005278:	d307      	bcc.n	800528a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	3304      	adds	r3, #4
 8005286:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005288:	e7e9      	b.n	800525e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800528a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	4413      	add	r3, r2
}
 8005294:	4618      	mov	r0, r3
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052b6:	d204      	bcs.n	80052c2 <dir_sdi+0x22>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	f003 031f 	and.w	r3, r3, #31
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80052c2:	2302      	movs	r3, #2
 80052c4:	e071      	b.n	80053aa <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d106      	bne.n	80052e6 <dir_sdi+0x46>
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d902      	bls.n	80052e6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10c      	bne.n	8005306 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	8912      	ldrh	r2, [r2, #8]
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d301      	bcc.n	80052fc <dir_sdi+0x5c>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e056      	b.n	80053aa <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	61da      	str	r2, [r3, #28]
 8005304:	e02d      	b.n	8005362 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	895b      	ldrh	r3, [r3, #10]
 800530a:	461a      	mov	r2, r3
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	899b      	ldrh	r3, [r3, #12]
 8005310:	fb02 f303 	mul.w	r3, r2, r3
 8005314:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005316:	e019      	b.n	800534c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6979      	ldr	r1, [r7, #20]
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff fc9c 	bl	8004c5a <get_fat>
 8005322:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532a:	d101      	bne.n	8005330 <dir_sdi+0x90>
 800532c:	2301      	movs	r3, #1
 800532e:	e03c      	b.n	80053aa <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d904      	bls.n	8005340 <dir_sdi+0xa0>
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	429a      	cmp	r2, r3
 800533e:	d301      	bcc.n	8005344 <dir_sdi+0xa4>
 8005340:	2302      	movs	r3, #2
 8005342:	e032      	b.n	80053aa <dir_sdi+0x10a>
			ofs -= csz;
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	429a      	cmp	r2, r3
 8005352:	d2e1      	bcs.n	8005318 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005354:	6979      	ldr	r1, [r7, #20]
 8005356:	6938      	ldr	r0, [r7, #16]
 8005358:	f7ff fc60 	bl	8004c1c <clust2sect>
 800535c:	4602      	mov	r2, r0
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <dir_sdi+0xd4>
 8005370:	2302      	movs	r3, #2
 8005372:	e01a      	b.n	80053aa <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	899b      	ldrh	r3, [r3, #12]
 800537c:	4619      	mov	r1, r3
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	fbb3 f3f1 	udiv	r3, r3, r1
 8005384:	441a      	add	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	899b      	ldrh	r3, [r3, #12]
 8005394:	461a      	mov	r2, r3
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	fbb3 f0f2 	udiv	r0, r3, r2
 800539c:	fb00 f202 	mul.w	r2, r0, r2
 80053a0:	1a9b      	subs	r3, r3, r2
 80053a2:	18ca      	adds	r2, r1, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b086      	sub	sp, #24
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	3320      	adds	r3, #32
 80053c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <dir_next+0x28>
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053d8:	d301      	bcc.n	80053de <dir_next+0x2c>
 80053da:	2304      	movs	r3, #4
 80053dc:	e0bb      	b.n	8005556 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	899b      	ldrh	r3, [r3, #12]
 80053e2:	461a      	mov	r2, r3
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80053ea:	fb01 f202 	mul.w	r2, r1, r2
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f040 809d 	bne.w	8005530 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10b      	bne.n	8005420 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	8912      	ldrh	r2, [r2, #8]
 8005410:	4293      	cmp	r3, r2
 8005412:	f0c0 808d 	bcc.w	8005530 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	61da      	str	r2, [r3, #28]
 800541c:	2304      	movs	r3, #4
 800541e:	e09a      	b.n	8005556 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	899b      	ldrh	r3, [r3, #12]
 8005424:	461a      	mov	r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	fbb3 f3f2 	udiv	r3, r3, r2
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	8952      	ldrh	r2, [r2, #10]
 8005430:	3a01      	subs	r2, #1
 8005432:	4013      	ands	r3, r2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d17b      	bne.n	8005530 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	4619      	mov	r1, r3
 8005440:	4610      	mov	r0, r2
 8005442:	f7ff fc0a 	bl	8004c5a <get_fat>
 8005446:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d801      	bhi.n	8005452 <dir_next+0xa0>
 800544e:	2302      	movs	r3, #2
 8005450:	e081      	b.n	8005556 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d101      	bne.n	800545e <dir_next+0xac>
 800545a:	2301      	movs	r3, #1
 800545c:	e07b      	b.n	8005556 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	429a      	cmp	r2, r3
 8005466:	d359      	bcc.n	800551c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d104      	bne.n	8005478 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	61da      	str	r2, [r3, #28]
 8005474:	2304      	movs	r3, #4
 8005476:	e06e      	b.n	8005556 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f7ff fe3d 	bl	8005100 <create_chain>
 8005486:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <dir_next+0xe0>
 800548e:	2307      	movs	r3, #7
 8005490:	e061      	b.n	8005556 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <dir_next+0xea>
 8005498:	2302      	movs	r3, #2
 800549a:	e05c      	b.n	8005556 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a2:	d101      	bne.n	80054a8 <dir_next+0xf6>
 80054a4:	2301      	movs	r3, #1
 80054a6:	e056      	b.n	8005556 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff fad5 	bl	8004a58 <sync_window>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <dir_next+0x106>
 80054b4:	2301      	movs	r3, #1
 80054b6:	e04e      	b.n	8005556 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	899b      	ldrh	r3, [r3, #12]
 80054c2:	461a      	mov	r2, r3
 80054c4:	2100      	movs	r1, #0
 80054c6:	f7ff f8fe 	bl	80046c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80054ca:	2300      	movs	r3, #0
 80054cc:	613b      	str	r3, [r7, #16]
 80054ce:	6979      	ldr	r1, [r7, #20]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7ff fba3 	bl	8004c1c <clust2sect>
 80054d6:	4602      	mov	r2, r0
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	635a      	str	r2, [r3, #52]	; 0x34
 80054dc:	e012      	b.n	8005504 <dir_next+0x152>
						fs->wflag = 1;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7ff fab7 	bl	8004a58 <sync_window>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <dir_next+0x142>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e030      	b.n	8005556 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	3301      	adds	r3, #1
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	635a      	str	r2, [r3, #52]	; 0x34
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	895b      	ldrh	r3, [r3, #10]
 8005508:	461a      	mov	r2, r3
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	4293      	cmp	r3, r2
 800550e:	d3e6      	bcc.n	80054de <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad2      	subs	r2, r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005522:	6979      	ldr	r1, [r7, #20]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7ff fb79 	bl	8004c1c <clust2sect>
 800552a:	4602      	mov	r2, r0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	899b      	ldrh	r3, [r3, #12]
 8005540:	461a      	mov	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	fbb3 f0f2 	udiv	r0, r3, r2
 8005548:	fb00 f202 	mul.w	r2, r0, r2
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	18ca      	adds	r2, r1, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b086      	sub	sp, #24
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800556e:	2100      	movs	r1, #0
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff fe95 	bl	80052a0 <dir_sdi>
 8005576:	4603      	mov	r3, r0
 8005578:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800557a:	7dfb      	ldrb	r3, [r7, #23]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d12b      	bne.n	80055d8 <dir_alloc+0x7a>
		n = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	4619      	mov	r1, r3
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f7ff faa8 	bl	8004ae0 <move_window>
 8005590:	4603      	mov	r3, r0
 8005592:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d11d      	bne.n	80055d6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2be5      	cmp	r3, #229	; 0xe5
 80055a2:	d004      	beq.n	80055ae <dir_alloc+0x50>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d107      	bne.n	80055be <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	3301      	adds	r3, #1
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d102      	bne.n	80055c2 <dir_alloc+0x64>
 80055bc:	e00c      	b.n	80055d8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80055be:	2300      	movs	r3, #0
 80055c0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80055c2:	2101      	movs	r1, #1
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fef4 	bl	80053b2 <dir_next>
 80055ca:	4603      	mov	r3, r0
 80055cc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80055ce:	7dfb      	ldrb	r3, [r7, #23]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0d7      	beq.n	8005584 <dir_alloc+0x26>
 80055d4:	e000      	b.n	80055d8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80055d6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80055d8:	7dfb      	ldrb	r3, [r7, #23]
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d101      	bne.n	80055e2 <dir_alloc+0x84>
 80055de:	2307      	movs	r3, #7
 80055e0:	75fb      	strb	r3, [r7, #23]
	return res;
 80055e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	331a      	adds	r3, #26
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fe ffc0 	bl	8004580 <ld_word>
 8005600:	4603      	mov	r3, r0
 8005602:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b03      	cmp	r3, #3
 800560a:	d109      	bne.n	8005620 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	3314      	adds	r3, #20
 8005610:	4618      	mov	r0, r3
 8005612:	f7fe ffb5 	bl	8004580 <ld_word>
 8005616:	4603      	mov	r3, r0
 8005618:	041b      	lsls	r3, r3, #16
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005620:	68fb      	ldr	r3, [r7, #12]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	331a      	adds	r3, #26
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	b292      	uxth	r2, r2
 800563e:	4611      	mov	r1, r2
 8005640:	4618      	mov	r0, r3
 8005642:	f7fe ffd8 	bl	80045f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b03      	cmp	r3, #3
 800564c:	d109      	bne.n	8005662 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f103 0214 	add.w	r2, r3, #20
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	0c1b      	lsrs	r3, r3, #16
 8005658:	b29b      	uxth	r3, r3
 800565a:	4619      	mov	r1, r3
 800565c:	4610      	mov	r0, r2
 800565e:	f7fe ffca 	bl	80045f6 <st_word>
	}
}
 8005662:	bf00      	nop
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	331a      	adds	r3, #26
 800567a:	4618      	mov	r0, r3
 800567c:	f7fe ff80 	bl	8004580 <ld_word>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <cmp_lfn+0x1e>
 8005686:	2300      	movs	r3, #0
 8005688:	e059      	b.n	800573e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005692:	1e5a      	subs	r2, r3, #1
 8005694:	4613      	mov	r3, r2
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80056a0:	2301      	movs	r3, #1
 80056a2:	81fb      	strh	r3, [r7, #14]
 80056a4:	2300      	movs	r3, #0
 80056a6:	613b      	str	r3, [r7, #16]
 80056a8:	e033      	b.n	8005712 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80056aa:	4a27      	ldr	r2, [pc, #156]	; (8005748 <cmp_lfn+0xdc>)
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	4413      	add	r3, r2
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	4413      	add	r3, r2
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fe ff61 	bl	8004580 <ld_word>
 80056be:	4603      	mov	r3, r0
 80056c0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80056c2:	89fb      	ldrh	r3, [r7, #14]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d01a      	beq.n	80056fe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2bfe      	cmp	r3, #254	; 0xfe
 80056cc:	d812      	bhi.n	80056f4 <cmp_lfn+0x88>
 80056ce:	89bb      	ldrh	r3, [r7, #12]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f002 f861 	bl	8007798 <ff_wtoupper>
 80056d6:	4603      	mov	r3, r0
 80056d8:	461c      	mov	r4, r3
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	617a      	str	r2, [r7, #20]
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	4413      	add	r3, r2
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f002 f855 	bl	8007798 <ff_wtoupper>
 80056ee:	4603      	mov	r3, r0
 80056f0:	429c      	cmp	r4, r3
 80056f2:	d001      	beq.n	80056f8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80056f4:	2300      	movs	r3, #0
 80056f6:	e022      	b.n	800573e <cmp_lfn+0xd2>
			}
			wc = uc;
 80056f8:	89bb      	ldrh	r3, [r7, #12]
 80056fa:	81fb      	strh	r3, [r7, #14]
 80056fc:	e006      	b.n	800570c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80056fe:	89bb      	ldrh	r3, [r7, #12]
 8005700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005704:	4293      	cmp	r3, r2
 8005706:	d001      	beq.n	800570c <cmp_lfn+0xa0>
 8005708:	2300      	movs	r3, #0
 800570a:	e018      	b.n	800573e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	3301      	adds	r3, #1
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b0c      	cmp	r3, #12
 8005716:	d9c8      	bls.n	80056aa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00b      	beq.n	800573c <cmp_lfn+0xd0>
 8005724:	89fb      	ldrh	r3, [r7, #14]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d008      	beq.n	800573c <cmp_lfn+0xd0>
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4413      	add	r3, r2
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <cmp_lfn+0xd0>
 8005738:	2300      	movs	r3, #0
 800573a:	e000      	b.n	800573e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800573c:	2301      	movs	r3, #1
}
 800573e:	4618      	mov	r0, r3
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	bd90      	pop	{r4, r7, pc}
 8005746:	bf00      	nop
 8005748:	0800bf74 	.word	0x0800bf74

0800574c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	4611      	mov	r1, r2
 8005758:	461a      	mov	r2, r3
 800575a:	460b      	mov	r3, r1
 800575c:	71fb      	strb	r3, [r7, #7]
 800575e:	4613      	mov	r3, r2
 8005760:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	330d      	adds	r3, #13
 8005766:	79ba      	ldrb	r2, [r7, #6]
 8005768:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	330b      	adds	r3, #11
 800576e:	220f      	movs	r2, #15
 8005770:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	330c      	adds	r3, #12
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	331a      	adds	r3, #26
 800577e:	2100      	movs	r1, #0
 8005780:	4618      	mov	r0, r3
 8005782:	f7fe ff38 	bl	80045f6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	1e5a      	subs	r2, r3, #1
 800578a:	4613      	mov	r3, r2
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	4413      	add	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	82fb      	strh	r3, [r7, #22]
 800579a:	2300      	movs	r3, #0
 800579c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800579e:	8afb      	ldrh	r3, [r7, #22]
 80057a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d007      	beq.n	80057b8 <put_lfn+0x6c>
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	61fa      	str	r2, [r7, #28]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80057b8:	4a17      	ldr	r2, [pc, #92]	; (8005818 <put_lfn+0xcc>)
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	4413      	add	r3, r2
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	4413      	add	r3, r2
 80057c6:	8afa      	ldrh	r2, [r7, #22]
 80057c8:	4611      	mov	r1, r2
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fe ff13 	bl	80045f6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80057d0:	8afb      	ldrh	r3, [r7, #22]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d102      	bne.n	80057dc <put_lfn+0x90>
 80057d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057da:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	3301      	adds	r3, #1
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	2b0c      	cmp	r3, #12
 80057e6:	d9da      	bls.n	800579e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80057e8:	8afb      	ldrh	r3, [r7, #22]
 80057ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d006      	beq.n	8005800 <put_lfn+0xb4>
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d103      	bne.n	8005808 <put_lfn+0xbc>
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005806:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	79fa      	ldrb	r2, [r7, #7]
 800580c:	701a      	strb	r2, [r3, #0]
}
 800580e:	bf00      	nop
 8005810:	3720      	adds	r7, #32
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	0800bf74 	.word	0x0800bf74

0800581c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08c      	sub	sp, #48	; 0x30
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800582a:	220b      	movs	r2, #11
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f7fe ff28 	bl	8004684 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b05      	cmp	r3, #5
 8005838:	d929      	bls.n	800588e <gen_numname+0x72>
		sr = seq;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800583e:	e020      	b.n	8005882 <gen_numname+0x66>
			wc = *lfn++;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	1c9a      	adds	r2, r3, #2
 8005844:	607a      	str	r2, [r7, #4]
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800584a:	2300      	movs	r3, #0
 800584c:	62bb      	str	r3, [r7, #40]	; 0x28
 800584e:	e015      	b.n	800587c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	005a      	lsls	r2, r3, #1
 8005854:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	4413      	add	r3, r2
 800585c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800585e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005860:	085b      	lsrs	r3, r3, #1
 8005862:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <gen_numname+0x5a>
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	4b30      	ldr	r3, [pc, #192]	; (8005934 <gen_numname+0x118>)
 8005872:	4053      	eors	r3, r2
 8005874:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	3301      	adds	r3, #1
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	2b0f      	cmp	r3, #15
 8005880:	d9e6      	bls.n	8005850 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1da      	bne.n	8005840 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800588e:	2307      	movs	r3, #7
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	b2db      	uxtb	r3, r3
 800589c:	3330      	adds	r3, #48	; 0x30
 800589e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80058a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058a6:	2b39      	cmp	r3, #57	; 0x39
 80058a8:	d904      	bls.n	80058b4 <gen_numname+0x98>
 80058aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058ae:	3307      	adds	r3, #7
 80058b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	1e5a      	subs	r2, r3, #1
 80058b8:	62ba      	str	r2, [r7, #40]	; 0x28
 80058ba:	3330      	adds	r3, #48	; 0x30
 80058bc:	443b      	add	r3, r7
 80058be:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80058c2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	091b      	lsrs	r3, r3, #4
 80058ca:	603b      	str	r3, [r7, #0]
	} while (seq);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1df      	bne.n	8005892 <gen_numname+0x76>
	ns[i] = '~';
 80058d2:	f107 0214 	add.w	r2, r7, #20
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d8:	4413      	add	r3, r2
 80058da:	227e      	movs	r2, #126	; 0x7e
 80058dc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80058de:	2300      	movs	r3, #0
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
 80058e2:	e002      	b.n	80058ea <gen_numname+0xce>
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	3301      	adds	r3, #1
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d205      	bcs.n	80058fe <gen_numname+0xe2>
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	4413      	add	r3, r2
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d1f2      	bne.n	80058e4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	2b07      	cmp	r3, #7
 8005902:	d807      	bhi.n	8005914 <gen_numname+0xf8>
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	62ba      	str	r2, [r7, #40]	; 0x28
 800590a:	3330      	adds	r3, #48	; 0x30
 800590c:	443b      	add	r3, r7
 800590e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005912:	e000      	b.n	8005916 <gen_numname+0xfa>
 8005914:	2120      	movs	r1, #32
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	627a      	str	r2, [r7, #36]	; 0x24
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	460a      	mov	r2, r1
 8005922:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	2b07      	cmp	r3, #7
 8005928:	d9e9      	bls.n	80058fe <gen_numname+0xe2>
}
 800592a:	bf00      	nop
 800592c:	bf00      	nop
 800592e:	3730      	adds	r7, #48	; 0x30
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	00011021 	.word	0x00011021

08005938 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005944:	230b      	movs	r3, #11
 8005946:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	b2da      	uxtb	r2, r3
 800594c:	0852      	lsrs	r2, r2, #1
 800594e:	01db      	lsls	r3, r3, #7
 8005950:	4313      	orrs	r3, r2
 8005952:	b2da      	uxtb	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	1c59      	adds	r1, r3, #1
 8005958:	6079      	str	r1, [r7, #4]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	4413      	add	r3, r2
 800595e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	3b01      	subs	r3, #1
 8005964:	60bb      	str	r3, [r7, #8]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1ed      	bne.n	8005948 <sum_sfn+0x10>
	return sum;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b086      	sub	sp, #24
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005988:	2100      	movs	r1, #0
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff fc88 	bl	80052a0 <dir_sdi>
 8005990:	4603      	mov	r3, r0
 8005992:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005994:	7dfb      	ldrb	r3, [r7, #23]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <dir_find+0x24>
 800599a:	7dfb      	ldrb	r3, [r7, #23]
 800599c:	e0a9      	b.n	8005af2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800599e:	23ff      	movs	r3, #255	; 0xff
 80059a0:	753b      	strb	r3, [r7, #20]
 80059a2:	7d3b      	ldrb	r3, [r7, #20]
 80059a4:	757b      	strb	r3, [r7, #21]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f04f 32ff 	mov.w	r2, #4294967295
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	4619      	mov	r1, r3
 80059b4:	6938      	ldr	r0, [r7, #16]
 80059b6:	f7ff f893 	bl	8004ae0 <move_window>
 80059ba:	4603      	mov	r3, r0
 80059bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80059be:	7dfb      	ldrb	r3, [r7, #23]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f040 8090 	bne.w	8005ae6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80059ce:	7dbb      	ldrb	r3, [r7, #22]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d102      	bne.n	80059da <dir_find+0x60>
 80059d4:	2304      	movs	r3, #4
 80059d6:	75fb      	strb	r3, [r7, #23]
 80059d8:	e08a      	b.n	8005af0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	330b      	adds	r3, #11
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059e6:	73fb      	strb	r3, [r7, #15]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	7bfa      	ldrb	r2, [r7, #15]
 80059ec:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80059ee:	7dbb      	ldrb	r3, [r7, #22]
 80059f0:	2be5      	cmp	r3, #229	; 0xe5
 80059f2:	d007      	beq.n	8005a04 <dir_find+0x8a>
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d009      	beq.n	8005a12 <dir_find+0x98>
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	2b0f      	cmp	r3, #15
 8005a02:	d006      	beq.n	8005a12 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005a04:	23ff      	movs	r3, #255	; 0xff
 8005a06:	757b      	strb	r3, [r7, #21]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8005a10:	e05e      	b.n	8005ad0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	2b0f      	cmp	r3, #15
 8005a16:	d136      	bne.n	8005a86 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d154      	bne.n	8005ad0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005a26:	7dbb      	ldrb	r3, [r7, #22]
 8005a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00d      	beq.n	8005a4c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	7b5b      	ldrb	r3, [r3, #13]
 8005a36:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005a38:	7dbb      	ldrb	r3, [r7, #22]
 8005a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a3e:	75bb      	strb	r3, [r7, #22]
 8005a40:	7dbb      	ldrb	r3, [r7, #22]
 8005a42:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	695a      	ldr	r2, [r3, #20]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005a4c:	7dba      	ldrb	r2, [r7, #22]
 8005a4e:	7d7b      	ldrb	r3, [r7, #21]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d115      	bne.n	8005a80 <dir_find+0x106>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	330d      	adds	r3, #13
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	7d3a      	ldrb	r2, [r7, #20]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d10e      	bne.n	8005a80 <dir_find+0x106>
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f7ff fdfd 	bl	800566c <cmp_lfn>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <dir_find+0x106>
 8005a78:	7d7b      	ldrb	r3, [r7, #21]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	e000      	b.n	8005a82 <dir_find+0x108>
 8005a80:	23ff      	movs	r3, #255	; 0xff
 8005a82:	757b      	strb	r3, [r7, #21]
 8005a84:	e024      	b.n	8005ad0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005a86:	7d7b      	ldrb	r3, [r7, #21]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d109      	bne.n	8005aa0 <dir_find+0x126>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff ff51 	bl	8005938 <sum_sfn>
 8005a96:	4603      	mov	r3, r0
 8005a98:	461a      	mov	r2, r3
 8005a9a:	7d3b      	ldrb	r3, [r7, #20]
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d024      	beq.n	8005aea <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10a      	bne.n	8005ac4 <dir_find+0x14a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a18      	ldr	r0, [r3, #32]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3324      	adds	r3, #36	; 0x24
 8005ab6:	220b      	movs	r2, #11
 8005ab8:	4619      	mov	r1, r3
 8005aba:	f7fe fe1f 	bl	80046fc <mem_cmp>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d014      	beq.n	8005aee <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005ac4:	23ff      	movs	r3, #255	; 0xff
 8005ac6:	757b      	strb	r3, [r7, #21]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f04f 32ff 	mov.w	r2, #4294967295
 8005ace:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7ff fc6d 	bl	80053b2 <dir_next>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f43f af65 	beq.w	80059ae <dir_find+0x34>
 8005ae4:	e004      	b.n	8005af0 <dir_find+0x176>
		if (res != FR_OK) break;
 8005ae6:	bf00      	nop
 8005ae8:	e002      	b.n	8005af0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005aea:	bf00      	nop
 8005aec:	e000      	b.n	8005af0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005aee:	bf00      	nop

	return res;
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08c      	sub	sp, #48	; 0x30
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005b10:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <dir_register+0x20>
 8005b18:	2306      	movs	r3, #6
 8005b1a:	e0e0      	b.n	8005cde <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b20:	e002      	b.n	8005b28 <dir_register+0x2c>
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	3301      	adds	r3, #1
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	4413      	add	r3, r2
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1f4      	bne.n	8005b22 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005b3e:	f107 030c 	add.w	r3, r7, #12
 8005b42:	220c      	movs	r2, #12
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fe fd9d 	bl	8004684 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005b4a:	7dfb      	ldrb	r3, [r7, #23]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d032      	beq.n	8005bba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2240      	movs	r2, #64	; 0x40
 8005b58:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b60:	e016      	b.n	8005b90 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	f107 010c 	add.w	r1, r7, #12
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	f7ff fe53 	bl	800581c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff feff 	bl	800597a <dir_find>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	2b63      	cmp	r3, #99	; 0x63
 8005b94:	d9e5      	bls.n	8005b62 <dir_register+0x66>
 8005b96:	e000      	b.n	8005b9a <dir_register+0x9e>
			if (res != FR_OK) break;
 8005b98:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	2b64      	cmp	r3, #100	; 0x64
 8005b9e:	d101      	bne.n	8005ba4 <dir_register+0xa8>
 8005ba0:	2307      	movs	r3, #7
 8005ba2:	e09c      	b.n	8005cde <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d002      	beq.n	8005bb2 <dir_register+0xb6>
 8005bac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bb0:	e095      	b.n	8005cde <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005bb2:	7dfa      	ldrb	r2, [r7, #23]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <dir_register+0xd8>
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	4a47      	ldr	r2, [pc, #284]	; (8005ce8 <dir_register+0x1ec>)
 8005bca:	fba2 2303 	umull	r2, r3, r2, r3
 8005bce:	089b      	lsrs	r3, r3, #2
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	e000      	b.n	8005bd6 <dir_register+0xda>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005bd8:	6a39      	ldr	r1, [r7, #32]
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff fcbf 	bl	800555e <dir_alloc>
 8005be0:	4603      	mov	r3, r0
 8005be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005be6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d148      	bne.n	8005c80 <dir_register+0x184>
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	623b      	str	r3, [r7, #32]
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d042      	beq.n	8005c80 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695a      	ldr	r2, [r3, #20]
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	015b      	lsls	r3, r3, #5
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff fb4a 	bl	80052a0 <dir_sdi>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005c12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d132      	bne.n	8005c80 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3324      	adds	r3, #36	; 0x24
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7ff fe8a 	bl	8005938 <sum_sfn>
 8005c24:	4603      	mov	r3, r0
 8005c26:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	69f8      	ldr	r0, [r7, #28]
 8005c30:	f7fe ff56 	bl	8004ae0 <move_window>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d11d      	bne.n	8005c7e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	6918      	ldr	r0, [r3, #16]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a19      	ldr	r1, [r3, #32]
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	7efb      	ldrb	r3, [r7, #27]
 8005c50:	f7ff fd7c 	bl	800574c <put_lfn>
				fs->wflag = 1;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	2201      	movs	r2, #1
 8005c58:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff fba8 	bl	80053b2 <dir_next>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005c68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d107      	bne.n	8005c80 <dir_register+0x184>
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	623b      	str	r3, [r7, #32]
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1d5      	bne.n	8005c28 <dir_register+0x12c>
 8005c7c:	e000      	b.n	8005c80 <dir_register+0x184>
				if (res != FR_OK) break;
 8005c7e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005c80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d128      	bne.n	8005cda <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	69f8      	ldr	r0, [r7, #28]
 8005c90:	f7fe ff26 	bl	8004ae0 <move_window>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d11b      	bne.n	8005cda <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe fd0b 	bl	80046c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a18      	ldr	r0, [r3, #32]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3324      	adds	r3, #36	; 0x24
 8005cb8:	220b      	movs	r2, #11
 8005cba:	4619      	mov	r1, r3
 8005cbc:	f7fe fce2 	bl	8004684 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	330c      	adds	r3, #12
 8005ccc:	f002 0218 	and.w	r2, r2, #24
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005cda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3730      	adds	r7, #48	; 0x30
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	4ec4ec4f 	.word	0x4ec4ec4f

08005cec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08a      	sub	sp, #40	; 0x28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	2300      	movs	r3, #0
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	61ba      	str	r2, [r7, #24]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4413      	add	r3, r2
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d1c:	2b1f      	cmp	r3, #31
 8005d1e:	d940      	bls.n	8005da2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005d20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d22:	2b2f      	cmp	r3, #47	; 0x2f
 8005d24:	d006      	beq.n	8005d34 <create_name+0x48>
 8005d26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d28:	2b5c      	cmp	r3, #92	; 0x5c
 8005d2a:	d110      	bne.n	8005d4e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005d2c:	e002      	b.n	8005d34 <create_name+0x48>
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	3301      	adds	r3, #1
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	4413      	add	r3, r2
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b2f      	cmp	r3, #47	; 0x2f
 8005d3e:	d0f6      	beq.n	8005d2e <create_name+0x42>
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	4413      	add	r3, r2
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b5c      	cmp	r3, #92	; 0x5c
 8005d4a:	d0f0      	beq.n	8005d2e <create_name+0x42>
			break;
 8005d4c:	e02a      	b.n	8005da4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2bfe      	cmp	r3, #254	; 0xfe
 8005d52:	d901      	bls.n	8005d58 <create_name+0x6c>
 8005d54:	2306      	movs	r3, #6
 8005d56:	e17d      	b.n	8006054 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005d5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d60:	2101      	movs	r1, #1
 8005d62:	4618      	mov	r0, r3
 8005d64:	f001 fcdc 	bl	8007720 <ff_convert>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <create_name+0x8a>
 8005d72:	2306      	movs	r3, #6
 8005d74:	e16e      	b.n	8006054 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005d76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d78:	2b7f      	cmp	r3, #127	; 0x7f
 8005d7a:	d809      	bhi.n	8005d90 <create_name+0xa4>
 8005d7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d7e:	4619      	mov	r1, r3
 8005d80:	488d      	ldr	r0, [pc, #564]	; (8005fb8 <create_name+0x2cc>)
 8005d82:	f7fe fce2 	bl	800474a <chk_chr>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <create_name+0xa4>
 8005d8c:	2306      	movs	r3, #6
 8005d8e:	e161      	b.n	8006054 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	617a      	str	r2, [r7, #20]
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d9e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005da0:	e7b4      	b.n	8005d0c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005da2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	441a      	add	r2, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005dae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005db0:	2b1f      	cmp	r3, #31
 8005db2:	d801      	bhi.n	8005db8 <create_name+0xcc>
 8005db4:	2304      	movs	r3, #4
 8005db6:	e000      	b.n	8005dba <create_name+0xce>
 8005db8:	2300      	movs	r3, #0
 8005dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005dbe:	e011      	b.n	8005de4 <create_name+0xf8>
		w = lfn[di - 1];
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005dc6:	4413      	add	r3, r2
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4413      	add	r3, r2
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d002      	beq.n	8005dde <create_name+0xf2>
 8005dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dda:	2b2e      	cmp	r3, #46	; 0x2e
 8005ddc:	d106      	bne.n	8005dec <create_name+0x100>
		di--;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1ea      	bne.n	8005dc0 <create_name+0xd4>
 8005dea:	e000      	b.n	8005dee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005dec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4413      	add	r3, r2
 8005df6:	2200      	movs	r2, #0
 8005df8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <create_name+0x118>
 8005e00:	2306      	movs	r3, #6
 8005e02:	e127      	b.n	8006054 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3324      	adds	r3, #36	; 0x24
 8005e08:	220b      	movs	r2, #11
 8005e0a:	2120      	movs	r1, #32
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fe fc5a 	bl	80046c6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005e12:	2300      	movs	r3, #0
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	e002      	b.n	8005e1e <create_name+0x132>
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4413      	add	r3, r2
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	d0f5      	beq.n	8005e18 <create_name+0x12c>
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4413      	add	r3, r2
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	2b2e      	cmp	r3, #46	; 0x2e
 8005e38:	d0ee      	beq.n	8005e18 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d009      	beq.n	8005e54 <create_name+0x168>
 8005e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e44:	f043 0303 	orr.w	r3, r3, #3
 8005e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005e4c:	e002      	b.n	8005e54 <create_name+0x168>
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d009      	beq.n	8005e6e <create_name+0x182>
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005e60:	4413      	add	r3, r2
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e6c:	d1ef      	bne.n	8005e4e <create_name+0x162>

	i = b = 0; ni = 8;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e74:	2300      	movs	r3, #0
 8005e76:	623b      	str	r3, [r7, #32]
 8005e78:	2308      	movs	r3, #8
 8005e7a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	61ba      	str	r2, [r7, #24]
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005e8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 8090 	beq.w	8005fb4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005e94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e96:	2b20      	cmp	r3, #32
 8005e98:	d006      	beq.n	8005ea8 <create_name+0x1bc>
 8005e9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8005e9e:	d10a      	bne.n	8005eb6 <create_name+0x1ca>
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d006      	beq.n	8005eb6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eac:	f043 0303 	orr.w	r3, r3, #3
 8005eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005eb4:	e07d      	b.n	8005fb2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005eb6:	6a3a      	ldr	r2, [r7, #32]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d203      	bcs.n	8005ec6 <create_name+0x1da>
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d123      	bne.n	8005f0e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	2b0b      	cmp	r3, #11
 8005eca:	d106      	bne.n	8005eda <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ed0:	f043 0303 	orr.w	r3, r3, #3
 8005ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ed8:	e075      	b.n	8005fc6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d005      	beq.n	8005eee <create_name+0x202>
 8005ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ee6:	f043 0303 	orr.w	r3, r3, #3
 8005eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d866      	bhi.n	8005fc4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	2308      	movs	r3, #8
 8005efc:	623b      	str	r3, [r7, #32]
 8005efe:	230b      	movs	r3, #11
 8005f00:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005f02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005f0c:	e051      	b.n	8005fb2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f10:	2b7f      	cmp	r3, #127	; 0x7f
 8005f12:	d914      	bls.n	8005f3e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005f14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f16:	2100      	movs	r1, #0
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f001 fc01 	bl	8007720 <ff_convert>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005f22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d004      	beq.n	8005f32 <create_name+0x246>
 8005f28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f2a:	3b80      	subs	r3, #128	; 0x80
 8005f2c:	4a23      	ldr	r2, [pc, #140]	; (8005fbc <create_name+0x2d0>)
 8005f2e:	5cd3      	ldrb	r3, [r2, r3]
 8005f30:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f36:	f043 0302 	orr.w	r3, r3, #2
 8005f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005f3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <create_name+0x268>
 8005f44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f46:	4619      	mov	r1, r3
 8005f48:	481d      	ldr	r0, [pc, #116]	; (8005fc0 <create_name+0x2d4>)
 8005f4a:	f7fe fbfe 	bl	800474a <chk_chr>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005f54:	235f      	movs	r3, #95	; 0x5f
 8005f56:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f5c:	f043 0303 	orr.w	r3, r3, #3
 8005f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f64:	e01b      	b.n	8005f9e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005f66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	d909      	bls.n	8005f80 <create_name+0x294>
 8005f6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f6e:	2b5a      	cmp	r3, #90	; 0x5a
 8005f70:	d806      	bhi.n	8005f80 <create_name+0x294>
					b |= 2;
 8005f72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f76:	f043 0302 	orr.w	r3, r3, #2
 8005f7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005f7e:	e00e      	b.n	8005f9e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f82:	2b60      	cmp	r3, #96	; 0x60
 8005f84:	d90b      	bls.n	8005f9e <create_name+0x2b2>
 8005f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f88:	2b7a      	cmp	r3, #122	; 0x7a
 8005f8a:	d808      	bhi.n	8005f9e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005f8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005f98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f9a:	3b20      	subs	r3, #32
 8005f9c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	623a      	str	r2, [r7, #32]
 8005fa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fa6:	b2d1      	uxtb	r1, r2
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	4413      	add	r3, r2
 8005fac:	460a      	mov	r2, r1
 8005fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005fb2:	e763      	b.n	8005e7c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005fb4:	bf00      	nop
 8005fb6:	e006      	b.n	8005fc6 <create_name+0x2da>
 8005fb8:	0800be9c 	.word	0x0800be9c
 8005fbc:	0800bef4 	.word	0x0800bef4
 8005fc0:	0800bea8 	.word	0x0800bea8
			if (si > di) break;			/* No extension */
 8005fc4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fcc:	2be5      	cmp	r3, #229	; 0xe5
 8005fce:	d103      	bne.n	8005fd8 <create_name+0x2ec>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2205      	movs	r2, #5
 8005fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	d104      	bne.n	8005fe8 <create_name+0x2fc>
 8005fde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005fe8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fec:	f003 030c 	and.w	r3, r3, #12
 8005ff0:	2b0c      	cmp	r3, #12
 8005ff2:	d005      	beq.n	8006000 <create_name+0x314>
 8005ff4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d105      	bne.n	800600c <create_name+0x320>
 8006000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006004:	f043 0302 	orr.w	r3, r3, #2
 8006008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800600c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d117      	bne.n	8006048 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006018:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	2b01      	cmp	r3, #1
 8006022:	d105      	bne.n	8006030 <create_name+0x344>
 8006024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006028:	f043 0310 	orr.w	r3, r3, #16
 800602c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006030:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006034:	f003 030c 	and.w	r3, r3, #12
 8006038:	2b04      	cmp	r3, #4
 800603a:	d105      	bne.n	8006048 <create_name+0x35c>
 800603c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006040:	f043 0308 	orr.w	r3, r3, #8
 8006044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800604e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006052:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006054:	4618      	mov	r0, r3
 8006056:	3728      	adds	r7, #40	; 0x28
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006070:	e002      	b.n	8006078 <follow_path+0x1c>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	3301      	adds	r3, #1
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b2f      	cmp	r3, #47	; 0x2f
 800607e:	d0f8      	beq.n	8006072 <follow_path+0x16>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b5c      	cmp	r3, #92	; 0x5c
 8006086:	d0f4      	beq.n	8006072 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	2200      	movs	r2, #0
 800608c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b1f      	cmp	r3, #31
 8006094:	d80a      	bhi.n	80060ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2280      	movs	r2, #128	; 0x80
 800609a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800609e:	2100      	movs	r1, #0
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff f8fd 	bl	80052a0 <dir_sdi>
 80060a6:	4603      	mov	r3, r0
 80060a8:	75fb      	strb	r3, [r7, #23]
 80060aa:	e048      	b.n	800613e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80060ac:	463b      	mov	r3, r7
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff fe1b 	bl	8005cec <create_name>
 80060b6:	4603      	mov	r3, r0
 80060b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d139      	bne.n	8006134 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff fc5a 	bl	800597a <dir_find>
 80060c6:	4603      	mov	r3, r0
 80060c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80060d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00a      	beq.n	80060ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d12c      	bne.n	8006138 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80060de:	7afb      	ldrb	r3, [r7, #11]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d127      	bne.n	8006138 <follow_path+0xdc>
 80060e8:	2305      	movs	r3, #5
 80060ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80060ec:	e024      	b.n	8006138 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80060ee:	7afb      	ldrb	r3, [r7, #11]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d121      	bne.n	800613c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	799b      	ldrb	r3, [r3, #6]
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b00      	cmp	r3, #0
 8006102:	d102      	bne.n	800610a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006104:	2305      	movs	r3, #5
 8006106:	75fb      	strb	r3, [r7, #23]
 8006108:	e019      	b.n	800613e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	8992      	ldrh	r2, [r2, #12]
 8006118:	fbb3 f0f2 	udiv	r0, r3, r2
 800611c:	fb00 f202 	mul.w	r2, r0, r2
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	440b      	add	r3, r1
 8006124:	4619      	mov	r1, r3
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f7ff fa60 	bl	80055ec <ld_clust>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006132:	e7bb      	b.n	80060ac <follow_path+0x50>
			if (res != FR_OK) break;
 8006134:	bf00      	nop
 8006136:	e002      	b.n	800613e <follow_path+0xe2>
				break;
 8006138:	bf00      	nop
 800613a:	e000      	b.n	800613e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800613c:	bf00      	nop
			}
		}
	}

	return res;
 800613e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006150:	f04f 33ff 	mov.w	r3, #4294967295
 8006154:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d031      	beq.n	80061c2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	e002      	b.n	800616c <get_ldnumber+0x24>
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	3301      	adds	r3, #1
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b1f      	cmp	r3, #31
 8006172:	d903      	bls.n	800617c <get_ldnumber+0x34>
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b3a      	cmp	r3, #58	; 0x3a
 800617a:	d1f4      	bne.n	8006166 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b3a      	cmp	r3, #58	; 0x3a
 8006182:	d11c      	bne.n	80061be <get_ldnumber+0x76>
			tp = *path;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	60fa      	str	r2, [r7, #12]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	3b30      	subs	r3, #48	; 0x30
 8006194:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b09      	cmp	r3, #9
 800619a:	d80e      	bhi.n	80061ba <get_ldnumber+0x72>
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d10a      	bne.n	80061ba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d107      	bne.n	80061ba <get_ldnumber+0x72>
					vol = (int)i;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	3301      	adds	r3, #1
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	e002      	b.n	80061c4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80061be:	2300      	movs	r3, #0
 80061c0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80061c2:	693b      	ldr	r3, [r7, #16]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	371c      	adds	r7, #28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	70da      	strb	r2, [r3, #3]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295
 80061e6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fe fc78 	bl	8004ae0 <move_window>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <check_fs+0x2a>
 80061f6:	2304      	movs	r3, #4
 80061f8:	e038      	b.n	800626c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3338      	adds	r3, #56	; 0x38
 80061fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe f9bc 	bl	8004580 <ld_word>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006210:	429a      	cmp	r2, r3
 8006212:	d001      	beq.n	8006218 <check_fs+0x48>
 8006214:	2303      	movs	r3, #3
 8006216:	e029      	b.n	800626c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800621e:	2be9      	cmp	r3, #233	; 0xe9
 8006220:	d009      	beq.n	8006236 <check_fs+0x66>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006228:	2beb      	cmp	r3, #235	; 0xeb
 800622a:	d11e      	bne.n	800626a <check_fs+0x9a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006232:	2b90      	cmp	r3, #144	; 0x90
 8006234:	d119      	bne.n	800626a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3338      	adds	r3, #56	; 0x38
 800623a:	3336      	adds	r3, #54	; 0x36
 800623c:	4618      	mov	r0, r3
 800623e:	f7fe f9b7 	bl	80045b0 <ld_dword>
 8006242:	4603      	mov	r3, r0
 8006244:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006248:	4a0a      	ldr	r2, [pc, #40]	; (8006274 <check_fs+0xa4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d101      	bne.n	8006252 <check_fs+0x82>
 800624e:	2300      	movs	r3, #0
 8006250:	e00c      	b.n	800626c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3338      	adds	r3, #56	; 0x38
 8006256:	3352      	adds	r3, #82	; 0x52
 8006258:	4618      	mov	r0, r3
 800625a:	f7fe f9a9 	bl	80045b0 <ld_dword>
 800625e:	4603      	mov	r3, r0
 8006260:	4a05      	ldr	r2, [pc, #20]	; (8006278 <check_fs+0xa8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d101      	bne.n	800626a <check_fs+0x9a>
 8006266:	2300      	movs	r3, #0
 8006268:	e000      	b.n	800626c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800626a:	2302      	movs	r3, #2
}
 800626c:	4618      	mov	r0, r3
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	00544146 	.word	0x00544146
 8006278:	33544146 	.word	0x33544146

0800627c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b096      	sub	sp, #88	; 0x58
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	4613      	mov	r3, r2
 8006288:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f7ff ff59 	bl	8006148 <get_ldnumber>
 8006296:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800629a:	2b00      	cmp	r3, #0
 800629c:	da01      	bge.n	80062a2 <find_volume+0x26>
 800629e:	230b      	movs	r3, #11
 80062a0:	e265      	b.n	800676e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80062a2:	4a9f      	ldr	r2, [pc, #636]	; (8006520 <find_volume+0x2a4>)
 80062a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80062ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <find_volume+0x3a>
 80062b2:	230c      	movs	r3, #12
 80062b4:	e25b      	b.n	800676e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80062bc:	79fb      	ldrb	r3, [r7, #7]
 80062be:	f023 0301 	bic.w	r3, r3, #1
 80062c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01a      	beq.n	8006302 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80062cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fe f8b7 	bl	8004444 <disk_status>
 80062d6:	4603      	mov	r3, r0
 80062d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80062dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10c      	bne.n	8006302 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80062e8:	79fb      	ldrb	r3, [r7, #7]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d007      	beq.n	80062fe <find_volume+0x82>
 80062ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062f2:	f003 0304 	and.w	r3, r3, #4
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80062fa:	230a      	movs	r3, #10
 80062fc:	e237      	b.n	800676e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80062fe:	2300      	movs	r3, #0
 8006300:	e235      	b.n	800676e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006304:	2200      	movs	r2, #0
 8006306:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630a:	b2da      	uxtb	r2, r3
 800630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	785b      	ldrb	r3, [r3, #1]
 8006314:	4618      	mov	r0, r3
 8006316:	f7fe f8af 	bl	8004478 <disk_initialize>
 800631a:	4603      	mov	r3, r0
 800631c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006320:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800632c:	2303      	movs	r3, #3
 800632e:	e21e      	b.n	800676e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d007      	beq.n	8006346 <find_volume+0xca>
 8006336:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006342:	230a      	movs	r3, #10
 8006344:	e213      	b.n	800676e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006348:	7858      	ldrb	r0, [r3, #1]
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	330c      	adds	r3, #12
 800634e:	461a      	mov	r2, r3
 8006350:	2102      	movs	r1, #2
 8006352:	f7fe f8f7 	bl	8004544 <disk_ioctl>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <find_volume+0xe4>
 800635c:	2301      	movs	r3, #1
 800635e:	e206      	b.n	800676e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	899b      	ldrh	r3, [r3, #12]
 8006364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006368:	d80d      	bhi.n	8006386 <find_volume+0x10a>
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	899b      	ldrh	r3, [r3, #12]
 800636e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006372:	d308      	bcc.n	8006386 <find_volume+0x10a>
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	899b      	ldrh	r3, [r3, #12]
 8006378:	461a      	mov	r2, r3
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	899b      	ldrh	r3, [r3, #12]
 800637e:	3b01      	subs	r3, #1
 8006380:	4013      	ands	r3, r2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <find_volume+0x10e>
 8006386:	2301      	movs	r3, #1
 8006388:	e1f1      	b.n	800676e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800638e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006390:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006392:	f7ff ff1d 	bl	80061d0 <check_fs>
 8006396:	4603      	mov	r3, r0
 8006398:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800639c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d149      	bne.n	8006438 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80063a4:	2300      	movs	r3, #0
 80063a6:	643b      	str	r3, [r7, #64]	; 0x40
 80063a8:	e01e      	b.n	80063e8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80063aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ac:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80063b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80063b8:	4413      	add	r3, r2
 80063ba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	3304      	adds	r3, #4
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d006      	beq.n	80063d4 <find_volume+0x158>
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	3308      	adds	r3, #8
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe f8f0 	bl	80045b0 <ld_dword>
 80063d0:	4602      	mov	r2, r0
 80063d2:	e000      	b.n	80063d6 <find_volume+0x15a>
 80063d4:	2200      	movs	r2, #0
 80063d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	3358      	adds	r3, #88	; 0x58
 80063dc:	443b      	add	r3, r7
 80063de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80063e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e4:	3301      	adds	r3, #1
 80063e6:	643b      	str	r3, [r7, #64]	; 0x40
 80063e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d9dd      	bls.n	80063aa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80063ee:	2300      	movs	r3, #0
 80063f0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80063f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <find_volume+0x182>
 80063f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063fa:	3b01      	subs	r3, #1
 80063fc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80063fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	3358      	adds	r3, #88	; 0x58
 8006404:	443b      	add	r3, r7
 8006406:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800640a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800640c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800640e:	2b00      	cmp	r3, #0
 8006410:	d005      	beq.n	800641e <find_volume+0x1a2>
 8006412:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006414:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006416:	f7ff fedb 	bl	80061d0 <check_fs>
 800641a:	4603      	mov	r3, r0
 800641c:	e000      	b.n	8006420 <find_volume+0x1a4>
 800641e:	2303      	movs	r3, #3
 8006420:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006424:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006428:	2b01      	cmp	r3, #1
 800642a:	d905      	bls.n	8006438 <find_volume+0x1bc>
 800642c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800642e:	3301      	adds	r3, #1
 8006430:	643b      	str	r3, [r7, #64]	; 0x40
 8006432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006434:	2b03      	cmp	r3, #3
 8006436:	d9e2      	bls.n	80063fe <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006438:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800643c:	2b04      	cmp	r3, #4
 800643e:	d101      	bne.n	8006444 <find_volume+0x1c8>
 8006440:	2301      	movs	r3, #1
 8006442:	e194      	b.n	800676e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006444:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006448:	2b01      	cmp	r3, #1
 800644a:	d901      	bls.n	8006450 <find_volume+0x1d4>
 800644c:	230d      	movs	r3, #13
 800644e:	e18e      	b.n	800676e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006452:	3338      	adds	r3, #56	; 0x38
 8006454:	330b      	adds	r3, #11
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe f892 	bl	8004580 <ld_word>
 800645c:	4603      	mov	r3, r0
 800645e:	461a      	mov	r2, r3
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	899b      	ldrh	r3, [r3, #12]
 8006464:	429a      	cmp	r2, r3
 8006466:	d001      	beq.n	800646c <find_volume+0x1f0>
 8006468:	230d      	movs	r3, #13
 800646a:	e180      	b.n	800676e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800646c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646e:	3338      	adds	r3, #56	; 0x38
 8006470:	3316      	adds	r3, #22
 8006472:	4618      	mov	r0, r3
 8006474:	f7fe f884 	bl	8004580 <ld_word>
 8006478:	4603      	mov	r3, r0
 800647a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800647c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <find_volume+0x214>
 8006482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006484:	3338      	adds	r3, #56	; 0x38
 8006486:	3324      	adds	r3, #36	; 0x24
 8006488:	4618      	mov	r0, r3
 800648a:	f7fe f891 	bl	80045b0 <ld_dword>
 800648e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006492:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006494:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80064a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a2:	789b      	ldrb	r3, [r3, #2]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d005      	beq.n	80064b4 <find_volume+0x238>
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	789b      	ldrb	r3, [r3, #2]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d001      	beq.n	80064b4 <find_volume+0x238>
 80064b0:	230d      	movs	r3, #13
 80064b2:	e15c      	b.n	800676e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80064b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b6:	789b      	ldrb	r3, [r3, #2]
 80064b8:	461a      	mov	r2, r3
 80064ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064bc:	fb02 f303 	mul.w	r3, r2, r3
 80064c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80064ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d0:	895b      	ldrh	r3, [r3, #10]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d008      	beq.n	80064e8 <find_volume+0x26c>
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	895b      	ldrh	r3, [r3, #10]
 80064da:	461a      	mov	r2, r3
 80064dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064de:	895b      	ldrh	r3, [r3, #10]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	4013      	ands	r3, r2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <find_volume+0x270>
 80064e8:	230d      	movs	r3, #13
 80064ea:	e140      	b.n	800676e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80064ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ee:	3338      	adds	r3, #56	; 0x38
 80064f0:	3311      	adds	r3, #17
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe f844 	bl	8004580 <ld_word>
 80064f8:	4603      	mov	r3, r0
 80064fa:	461a      	mov	r2, r3
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006502:	891b      	ldrh	r3, [r3, #8]
 8006504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006506:	8992      	ldrh	r2, [r2, #12]
 8006508:	0952      	lsrs	r2, r2, #5
 800650a:	b292      	uxth	r2, r2
 800650c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006510:	fb01 f202 	mul.w	r2, r1, r2
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	b29b      	uxth	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <find_volume+0x2a8>
 800651c:	230d      	movs	r3, #13
 800651e:	e126      	b.n	800676e <find_volume+0x4f2>
 8006520:	200002e0 	.word	0x200002e0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006526:	3338      	adds	r3, #56	; 0x38
 8006528:	3313      	adds	r3, #19
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe f828 	bl	8004580 <ld_word>
 8006530:	4603      	mov	r3, r0
 8006532:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <find_volume+0x2cc>
 800653a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653c:	3338      	adds	r3, #56	; 0x38
 800653e:	3320      	adds	r3, #32
 8006540:	4618      	mov	r0, r3
 8006542:	f7fe f835 	bl	80045b0 <ld_dword>
 8006546:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654a:	3338      	adds	r3, #56	; 0x38
 800654c:	330e      	adds	r3, #14
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe f816 	bl	8004580 <ld_word>
 8006554:	4603      	mov	r3, r0
 8006556:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006558:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <find_volume+0x2e6>
 800655e:	230d      	movs	r3, #13
 8006560:	e105      	b.n	800676e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006562:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006566:	4413      	add	r3, r2
 8006568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800656a:	8911      	ldrh	r1, [r2, #8]
 800656c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800656e:	8992      	ldrh	r2, [r2, #12]
 8006570:	0952      	lsrs	r2, r2, #5
 8006572:	b292      	uxth	r2, r2
 8006574:	fbb1 f2f2 	udiv	r2, r1, r2
 8006578:	b292      	uxth	r2, r2
 800657a:	4413      	add	r3, r2
 800657c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800657e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	429a      	cmp	r2, r3
 8006584:	d201      	bcs.n	800658a <find_volume+0x30e>
 8006586:	230d      	movs	r3, #13
 8006588:	e0f1      	b.n	800676e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800658a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006592:	8952      	ldrh	r2, [r2, #10]
 8006594:	fbb3 f3f2 	udiv	r3, r3, r2
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <find_volume+0x328>
 80065a0:	230d      	movs	r3, #13
 80065a2:	e0e4      	b.n	800676e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80065a4:	2303      	movs	r3, #3
 80065a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d802      	bhi.n	80065ba <find_volume+0x33e>
 80065b4:	2302      	movs	r3, #2
 80065b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d802      	bhi.n	80065ca <find_volume+0x34e>
 80065c4:	2301      	movs	r3, #1
 80065c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	1c9a      	adds	r2, r3, #2
 80065ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065d6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80065d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80065da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065dc:	441a      	add	r2, r3
 80065de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80065e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	441a      	add	r2, r3
 80065e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80065ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d11e      	bne.n	8006632 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80065f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f6:	3338      	adds	r3, #56	; 0x38
 80065f8:	332a      	adds	r3, #42	; 0x2a
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fd ffc0 	bl	8004580 <ld_word>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <find_volume+0x38e>
 8006606:	230d      	movs	r3, #13
 8006608:	e0b1      	b.n	800676e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660c:	891b      	ldrh	r3, [r3, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <find_volume+0x39a>
 8006612:	230d      	movs	r3, #13
 8006614:	e0ab      	b.n	800676e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006618:	3338      	adds	r3, #56	; 0x38
 800661a:	332c      	adds	r3, #44	; 0x2c
 800661c:	4618      	mov	r0, r3
 800661e:	f7fd ffc7 	bl	80045b0 <ld_dword>
 8006622:	4602      	mov	r2, r0
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	647b      	str	r3, [r7, #68]	; 0x44
 8006630:	e01f      	b.n	8006672 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006634:	891b      	ldrh	r3, [r3, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <find_volume+0x3c2>
 800663a:	230d      	movs	r3, #13
 800663c:	e097      	b.n	800676e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800663e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006644:	441a      	add	r2, r3
 8006646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006648:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800664a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800664e:	2b02      	cmp	r3, #2
 8006650:	d103      	bne.n	800665a <find_volume+0x3de>
 8006652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	e00a      	b.n	8006670 <find_volume+0x3f4>
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	69da      	ldr	r2, [r3, #28]
 800665e:	4613      	mov	r3, r2
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	4413      	add	r3, r2
 8006664:	085a      	lsrs	r2, r3, #1
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006670:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	6a1a      	ldr	r2, [r3, #32]
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	899b      	ldrh	r3, [r3, #12]
 800667a:	4619      	mov	r1, r3
 800667c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800667e:	440b      	add	r3, r1
 8006680:	3b01      	subs	r3, #1
 8006682:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006684:	8989      	ldrh	r1, [r1, #12]
 8006686:	fbb3 f3f1 	udiv	r3, r3, r1
 800668a:	429a      	cmp	r2, r3
 800668c:	d201      	bcs.n	8006692 <find_volume+0x416>
 800668e:	230d      	movs	r3, #13
 8006690:	e06d      	b.n	800676e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	f04f 32ff 	mov.w	r2, #4294967295
 8006698:	619a      	str	r2, [r3, #24]
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	699a      	ldr	r2, [r3, #24]
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a4:	2280      	movs	r2, #128	; 0x80
 80066a6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80066a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d149      	bne.n	8006744 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80066b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b2:	3338      	adds	r3, #56	; 0x38
 80066b4:	3330      	adds	r3, #48	; 0x30
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fd ff62 	bl	8004580 <ld_word>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d140      	bne.n	8006744 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80066c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c4:	3301      	adds	r3, #1
 80066c6:	4619      	mov	r1, r3
 80066c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066ca:	f7fe fa09 	bl	8004ae0 <move_window>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d137      	bne.n	8006744 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	2200      	movs	r2, #0
 80066d8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	3338      	adds	r3, #56	; 0x38
 80066de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fd ff4c 	bl	8004580 <ld_word>
 80066e8:	4603      	mov	r3, r0
 80066ea:	461a      	mov	r2, r3
 80066ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d127      	bne.n	8006744 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80066f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f6:	3338      	adds	r3, #56	; 0x38
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fd ff59 	bl	80045b0 <ld_dword>
 80066fe:	4603      	mov	r3, r0
 8006700:	4a1d      	ldr	r2, [pc, #116]	; (8006778 <find_volume+0x4fc>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d11e      	bne.n	8006744 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	3338      	adds	r3, #56	; 0x38
 800670a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800670e:	4618      	mov	r0, r3
 8006710:	f7fd ff4e 	bl	80045b0 <ld_dword>
 8006714:	4603      	mov	r3, r0
 8006716:	4a19      	ldr	r2, [pc, #100]	; (800677c <find_volume+0x500>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d113      	bne.n	8006744 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800671c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671e:	3338      	adds	r3, #56	; 0x38
 8006720:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006724:	4618      	mov	r0, r3
 8006726:	f7fd ff43 	bl	80045b0 <ld_dword>
 800672a:	4602      	mov	r2, r0
 800672c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	3338      	adds	r3, #56	; 0x38
 8006734:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006738:	4618      	mov	r0, r3
 800673a:	f7fd ff39 	bl	80045b0 <ld_dword>
 800673e:	4602      	mov	r2, r0
 8006740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006742:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800674a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800674c:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <find_volume+0x504>)
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	3301      	adds	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <find_volume+0x504>)
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	4b09      	ldr	r3, [pc, #36]	; (8006780 <find_volume+0x504>)
 800675a:	881a      	ldrh	r2, [r3, #0]
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006762:	4a08      	ldr	r2, [pc, #32]	; (8006784 <find_volume+0x508>)
 8006764:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006766:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006768:	f7fe f952 	bl	8004a10 <clear_lock>
#endif
	return FR_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3758      	adds	r7, #88	; 0x58
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	41615252 	.word	0x41615252
 800677c:	61417272 	.word	0x61417272
 8006780:	200002e4 	.word	0x200002e4
 8006784:	20000308 	.word	0x20000308

08006788 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006792:	2309      	movs	r3, #9
 8006794:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01c      	beq.n	80067d6 <validate+0x4e>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d018      	beq.n	80067d6 <validate+0x4e>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d013      	beq.n	80067d6 <validate+0x4e>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	889a      	ldrh	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	88db      	ldrh	r3, [r3, #6]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d10c      	bne.n	80067d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fd fe3e 	bl	8004444 <disk_status>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <validate+0x4e>
			res = FR_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <validate+0x5a>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	e000      	b.n	80067e4 <validate+0x5c>
 80067e2:	2300      	movs	r3, #0
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	6013      	str	r3, [r2, #0]
	return res;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	4613      	mov	r3, r2
 8006800:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006806:	f107 0310 	add.w	r3, r7, #16
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff fc9c 	bl	8006148 <get_ldnumber>
 8006810:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	2b00      	cmp	r3, #0
 8006816:	da01      	bge.n	800681c <f_mount+0x28>
 8006818:	230b      	movs	r3, #11
 800681a:	e02b      	b.n	8006874 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800681c:	4a17      	ldr	r2, [pc, #92]	; (800687c <f_mount+0x88>)
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006824:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d005      	beq.n	8006838 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800682c:	69b8      	ldr	r0, [r7, #24]
 800682e:	f7fe f8ef 	bl	8004a10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	490d      	ldr	r1, [pc, #52]	; (800687c <f_mount+0x88>)
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <f_mount+0x66>
 8006854:	79fb      	ldrb	r3, [r7, #7]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d001      	beq.n	800685e <f_mount+0x6a>
 800685a:	2300      	movs	r3, #0
 800685c:	e00a      	b.n	8006874 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800685e:	f107 010c 	add.w	r1, r7, #12
 8006862:	f107 0308 	add.w	r3, r7, #8
 8006866:	2200      	movs	r2, #0
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff fd07 	bl	800627c <find_volume>
 800686e:	4603      	mov	r3, r0
 8006870:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006872:	7dfb      	ldrb	r3, [r7, #23]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3720      	adds	r7, #32
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	200002e0 	.word	0x200002e0

08006880 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b09a      	sub	sp, #104	; 0x68
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	4613      	mov	r3, r2
 800688c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <f_open+0x18>
 8006894:	2309      	movs	r3, #9
 8006896:	e1bb      	b.n	8006c10 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006898:	79fb      	ldrb	r3, [r7, #7]
 800689a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800689e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80068a0:	79fa      	ldrb	r2, [r7, #7]
 80068a2:	f107 0114 	add.w	r1, r7, #20
 80068a6:	f107 0308 	add.w	r3, r7, #8
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff fce6 	bl	800627c <find_volume>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80068b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f040 819f 	bne.w	8006bfe <f_open+0x37e>
		dj.obj.fs = fs;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	f107 0318 	add.w	r3, r7, #24
 80068ca:	4611      	mov	r1, r2
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff fbc5 	bl	800605c <follow_path>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80068d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d11a      	bne.n	8006916 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80068e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80068e4:	b25b      	sxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	da03      	bge.n	80068f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80068ea:	2306      	movs	r3, #6
 80068ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80068f0:	e011      	b.n	8006916 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bf14      	ite	ne
 80068fc:	2301      	movne	r3, #1
 80068fe:	2300      	moveq	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	461a      	mov	r2, r3
 8006904:	f107 0318 	add.w	r3, r7, #24
 8006908:	4611      	mov	r1, r2
 800690a:	4618      	mov	r0, r3
 800690c:	f7fd ff38 	bl	8004780 <chk_lock>
 8006910:	4603      	mov	r3, r0
 8006912:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006916:	79fb      	ldrb	r3, [r7, #7]
 8006918:	f003 031c 	and.w	r3, r3, #28
 800691c:	2b00      	cmp	r3, #0
 800691e:	d07f      	beq.n	8006a20 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006920:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006924:	2b00      	cmp	r3, #0
 8006926:	d017      	beq.n	8006958 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006928:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800692c:	2b04      	cmp	r3, #4
 800692e:	d10e      	bne.n	800694e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006930:	f7fd ff82 	bl	8004838 <enq_lock>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d006      	beq.n	8006948 <f_open+0xc8>
 800693a:	f107 0318 	add.w	r3, r7, #24
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff f8dc 	bl	8005afc <dir_register>
 8006944:	4603      	mov	r3, r0
 8006946:	e000      	b.n	800694a <f_open+0xca>
 8006948:	2312      	movs	r3, #18
 800694a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800694e:	79fb      	ldrb	r3, [r7, #7]
 8006950:	f043 0308 	orr.w	r3, r3, #8
 8006954:	71fb      	strb	r3, [r7, #7]
 8006956:	e010      	b.n	800697a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006958:	7fbb      	ldrb	r3, [r7, #30]
 800695a:	f003 0311 	and.w	r3, r3, #17
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <f_open+0xea>
					res = FR_DENIED;
 8006962:	2307      	movs	r3, #7
 8006964:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006968:	e007      	b.n	800697a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <f_open+0xfa>
 8006974:	2308      	movs	r3, #8
 8006976:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800697a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800697e:	2b00      	cmp	r3, #0
 8006980:	d168      	bne.n	8006a54 <f_open+0x1d4>
 8006982:	79fb      	ldrb	r3, [r7, #7]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d063      	beq.n	8006a54 <f_open+0x1d4>
				dw = GET_FATTIME();
 800698c:	f7fd fcfc 	bl	8004388 <get_fattime>
 8006990:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	330e      	adds	r3, #14
 8006996:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006998:	4618      	mov	r0, r3
 800699a:	f7fd fe47 	bl	800462c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800699e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a0:	3316      	adds	r3, #22
 80069a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fd fe41 	bl	800462c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	330b      	adds	r3, #11
 80069ae:	2220      	movs	r2, #32
 80069b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069b6:	4611      	mov	r1, r2
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fe fe17 	bl	80055ec <ld_clust>
 80069be:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069c4:	2200      	movs	r2, #0
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fe fe2f 	bl	800562a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80069cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ce:	331c      	adds	r3, #28
 80069d0:	2100      	movs	r1, #0
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fd fe2a 	bl	800462c <st_dword>
					fs->wflag = 1;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2201      	movs	r2, #1
 80069dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80069de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d037      	beq.n	8006a54 <f_open+0x1d4>
						dw = fs->winsect;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80069ea:	f107 0318 	add.w	r3, r7, #24
 80069ee:	2200      	movs	r2, #0
 80069f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fe fb1f 	bl	8005036 <remove_chain>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80069fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d126      	bne.n	8006a54 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fe f868 	bl	8004ae0 <move_window>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a1a:	3a01      	subs	r2, #1
 8006a1c:	615a      	str	r2, [r3, #20]
 8006a1e:	e019      	b.n	8006a54 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006a20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d115      	bne.n	8006a54 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006a28:	7fbb      	ldrb	r3, [r7, #30]
 8006a2a:	f003 0310 	and.w	r3, r3, #16
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <f_open+0x1ba>
					res = FR_NO_FILE;
 8006a32:	2304      	movs	r3, #4
 8006a34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006a38:	e00c      	b.n	8006a54 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d007      	beq.n	8006a54 <f_open+0x1d4>
 8006a44:	7fbb      	ldrb	r3, [r7, #30]
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <f_open+0x1d4>
						res = FR_DENIED;
 8006a4e:	2307      	movs	r3, #7
 8006a50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006a54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d128      	bne.n	8006aae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006a5c:	79fb      	ldrb	r3, [r7, #7]
 8006a5e:	f003 0308 	and.w	r3, r3, #8
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a6c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006a76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	f023 0301 	bic.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	bf14      	ite	ne
 8006a86:	2301      	movne	r3, #1
 8006a88:	2300      	moveq	r3, #0
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	f107 0318 	add.w	r3, r7, #24
 8006a92:	4611      	mov	r1, r2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fd fef1 	bl	800487c <inc_lock>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d102      	bne.n	8006aae <f_open+0x22e>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006aae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f040 80a3 	bne.w	8006bfe <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006abc:	4611      	mov	r1, r2
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fd94 	bl	80055ec <ld_clust>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	331c      	adds	r3, #28
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fd fd6e 	bl	80045b0 <ld_dword>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	88da      	ldrh	r2, [r3, #6]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	79fa      	ldrb	r2, [r7, #7]
 8006af2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3330      	adds	r3, #48	; 0x30
 8006b0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b0e:	2100      	movs	r1, #0
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fd fdd8 	bl	80046c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006b16:	79fb      	ldrb	r3, [r7, #7]
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d06e      	beq.n	8006bfe <f_open+0x37e>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d06a      	beq.n	8006bfe <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	895b      	ldrh	r3, [r3, #10]
 8006b34:	461a      	mov	r2, r3
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	899b      	ldrh	r3, [r3, #12]
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b4c:	e016      	b.n	8006b7c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe f881 	bl	8004c5a <get_fat>
 8006b58:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d802      	bhi.n	8006b66 <f_open+0x2e6>
 8006b60:	2302      	movs	r3, #2
 8006b62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6c:	d102      	bne.n	8006b74 <f_open+0x2f4>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006b74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d103      	bne.n	8006b8c <f_open+0x30c>
 8006b84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d8e0      	bhi.n	8006b4e <f_open+0x2ce>
				}
				fp->clust = clst;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b90:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006b92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d131      	bne.n	8006bfe <f_open+0x37e>
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	899b      	ldrh	r3, [r3, #12]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ba2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ba6:	fb01 f202 	mul.w	r2, r1, r2
 8006baa:	1a9b      	subs	r3, r3, r2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d026      	beq.n	8006bfe <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fe f831 	bl	8004c1c <clust2sect>
 8006bba:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d103      	bne.n	8006bca <f_open+0x34a>
						res = FR_INT_ERR;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006bc8:	e019      	b.n	8006bfe <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	899b      	ldrh	r3, [r3, #12]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd8:	441a      	add	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	7858      	ldrb	r0, [r3, #1]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1a      	ldr	r2, [r3, #32]
 8006bec:	2301      	movs	r3, #1
 8006bee:	f7fd fc69 	bl	80044c4 <disk_read>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <f_open+0x37e>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006bfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <f_open+0x38c>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006c0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3768      	adds	r7, #104	; 0x68
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08e      	sub	sp, #56	; 0x38
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f107 0214 	add.w	r2, r7, #20
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff fda5 	bl	8006788 <validate>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006c44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d107      	bne.n	8006c5c <f_read+0x44>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	7d5b      	ldrb	r3, [r3, #21]
 8006c50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006c54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <f_read+0x4a>
 8006c5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c60:	e135      	b.n	8006ece <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	7d1b      	ldrb	r3, [r3, #20]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <f_read+0x5a>
 8006c6e:	2307      	movs	r3, #7
 8006c70:	e12d      	b.n	8006ece <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	f240 811e 	bls.w	8006ec4 <f_read+0x2ac>
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006c8c:	e11a      	b.n	8006ec4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	8992      	ldrh	r2, [r2, #12]
 8006c96:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c9a:	fb01 f202 	mul.w	r2, r1, r2
 8006c9e:	1a9b      	subs	r3, r3, r2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f040 80d5 	bne.w	8006e50 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	8992      	ldrh	r2, [r2, #12]
 8006cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	8952      	ldrh	r2, [r2, #10]
 8006cb6:	3a01      	subs	r2, #1
 8006cb8:	4013      	ands	r3, r2
 8006cba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d12f      	bne.n	8006d22 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d103      	bne.n	8006cd2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	633b      	str	r3, [r7, #48]	; 0x30
 8006cd0:	e013      	b.n	8006cfa <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d007      	beq.n	8006cea <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7fe faa5 	bl	8005230 <clmt_clust>
 8006ce6:	6338      	str	r0, [r7, #48]	; 0x30
 8006ce8:	e007      	b.n	8006cfa <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	f7fd ffb1 	bl	8004c5a <get_fat>
 8006cf8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d804      	bhi.n	8006d0a <f_read+0xf2>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2202      	movs	r2, #2
 8006d04:	755a      	strb	r2, [r3, #21]
 8006d06:	2302      	movs	r3, #2
 8006d08:	e0e1      	b.n	8006ece <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d10:	d104      	bne.n	8006d1c <f_read+0x104>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	755a      	strb	r2, [r3, #21]
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e0d8      	b.n	8006ece <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d20:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	f7fd ff76 	bl	8004c1c <clust2sect>
 8006d30:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d104      	bne.n	8006d42 <f_read+0x12a>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	755a      	strb	r2, [r3, #21]
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e0c5      	b.n	8006ece <f_read+0x2b6>
			sect += csect;
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	4413      	add	r3, r2
 8006d48:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	899b      	ldrh	r3, [r3, #12]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d56:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d041      	beq.n	8006de2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006d5e:	69fa      	ldr	r2, [r7, #28]
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	4413      	add	r3, r2
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	8952      	ldrh	r2, [r2, #10]
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d905      	bls.n	8006d78 <f_read+0x160>
					cc = fs->csize - csect;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	895b      	ldrh	r3, [r3, #10]
 8006d70:	461a      	mov	r2, r3
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	7858      	ldrb	r0, [r3, #1]
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d82:	f7fd fb9f 	bl	80044c4 <disk_read>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d004      	beq.n	8006d96 <f_read+0x17e>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	755a      	strb	r2, [r3, #21]
 8006d92:	2301      	movs	r3, #1
 8006d94:	e09b      	b.n	8006ece <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	7d1b      	ldrb	r3, [r3, #20]
 8006d9a:	b25b      	sxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	da18      	bge.n	8006dd2 <f_read+0x1ba>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a1a      	ldr	r2, [r3, #32]
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d911      	bls.n	8006dd2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a1a      	ldr	r2, [r3, #32]
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	8992      	ldrh	r2, [r2, #12]
 8006dba:	fb02 f303 	mul.w	r3, r2, r3
 8006dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc0:	18d0      	adds	r0, r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	899b      	ldrh	r3, [r3, #12]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f7fd fc59 	bl	8004684 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	899b      	ldrh	r3, [r3, #12]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	fb02 f303 	mul.w	r3, r2, r3
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006de0:	e05c      	b.n	8006e9c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d02e      	beq.n	8006e4a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	7d1b      	ldrb	r3, [r3, #20]
 8006df0:	b25b      	sxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	da18      	bge.n	8006e28 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	7858      	ldrb	r0, [r3, #1]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a1a      	ldr	r2, [r3, #32]
 8006e04:	2301      	movs	r3, #1
 8006e06:	f7fd fb7d 	bl	8004504 <disk_write>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d004      	beq.n	8006e1a <f_read+0x202>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	755a      	strb	r2, [r3, #21]
 8006e16:	2301      	movs	r3, #1
 8006e18:	e059      	b.n	8006ece <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	7d1b      	ldrb	r3, [r3, #20]
 8006e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	7858      	ldrb	r0, [r3, #1]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e32:	2301      	movs	r3, #1
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	f7fd fb45 	bl	80044c4 <disk_read>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d004      	beq.n	8006e4a <f_read+0x232>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2201      	movs	r2, #1
 8006e44:	755a      	strb	r2, [r3, #21]
 8006e46:	2301      	movs	r3, #1
 8006e48:	e041      	b.n	8006ece <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	899b      	ldrh	r3, [r3, #12]
 8006e54:	4618      	mov	r0, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	8992      	ldrh	r2, [r2, #12]
 8006e5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e62:	fb01 f202 	mul.w	r2, r1, r2
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	1ac3      	subs	r3, r0, r3
 8006e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d901      	bls.n	8006e78 <f_read+0x260>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	8992      	ldrh	r2, [r2, #12]
 8006e86:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e8a:	fb00 f202 	mul.w	r2, r0, r2
 8006e8e:	1a9b      	subs	r3, r3, r2
 8006e90:	440b      	add	r3, r1
 8006e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e94:	4619      	mov	r1, r3
 8006e96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e98:	f7fd fbf4 	bl	8004684 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	4413      	add	r3, r2
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	699a      	ldr	r2, [r3, #24]
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	441a      	add	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	619a      	str	r2, [r3, #24]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb6:	441a      	add	r2, r3
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f47f aee1 	bne.w	8006c8e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3738      	adds	r7, #56	; 0x38
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b08c      	sub	sp, #48	; 0x30
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	607a      	str	r2, [r7, #4]
 8006ee2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2200      	movs	r2, #0
 8006eec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f107 0210 	add.w	r2, r7, #16
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7ff fc46 	bl	8006788 <validate>
 8006efc:	4603      	mov	r3, r0
 8006efe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006f02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d107      	bne.n	8006f1a <f_write+0x44>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	7d5b      	ldrb	r3, [r3, #21]
 8006f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006f12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <f_write+0x4a>
 8006f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f1e:	e16a      	b.n	80071f6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	7d1b      	ldrb	r3, [r3, #20]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <f_write+0x5a>
 8006f2c:	2307      	movs	r3, #7
 8006f2e:	e162      	b.n	80071f6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	699a      	ldr	r2, [r3, #24]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	441a      	add	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	f080 814c 	bcs.w	80071da <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	43db      	mvns	r3, r3
 8006f48:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006f4a:	e146      	b.n	80071da <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	8992      	ldrh	r2, [r2, #12]
 8006f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f58:	fb01 f202 	mul.w	r2, r1, r2
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f040 80f1 	bne.w	8007146 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	8992      	ldrh	r2, [r2, #12]
 8006f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	8952      	ldrh	r2, [r2, #10]
 8006f74:	3a01      	subs	r2, #1
 8006f76:	4013      	ands	r3, r2
 8006f78:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d143      	bne.n	8007008 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10c      	bne.n	8006fa2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d11a      	bne.n	8006fca <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2100      	movs	r1, #0
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fe f8b1 	bl	8005100 <create_chain>
 8006f9e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006fa0:	e013      	b.n	8006fca <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7fe f93d 	bl	8005230 <clmt_clust>
 8006fb6:	62b8      	str	r0, [r7, #40]	; 0x28
 8006fb8:	e007      	b.n	8006fca <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	f7fe f89c 	bl	8005100 <create_chain>
 8006fc8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 8109 	beq.w	80071e4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d104      	bne.n	8006fe2 <f_write+0x10c>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	755a      	strb	r2, [r3, #21]
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e109      	b.n	80071f6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d104      	bne.n	8006ff4 <f_write+0x11e>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	755a      	strb	r2, [r3, #21]
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e100      	b.n	80071f6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ff8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d102      	bne.n	8007008 <f_write+0x132>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007006:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	7d1b      	ldrb	r3, [r3, #20]
 800700c:	b25b      	sxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	da18      	bge.n	8007044 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	7858      	ldrb	r0, [r3, #1]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a1a      	ldr	r2, [r3, #32]
 8007020:	2301      	movs	r3, #1
 8007022:	f7fd fa6f 	bl	8004504 <disk_write>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d004      	beq.n	8007036 <f_write+0x160>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	755a      	strb	r2, [r3, #21]
 8007032:	2301      	movs	r3, #1
 8007034:	e0df      	b.n	80071f6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	7d1b      	ldrb	r3, [r3, #20]
 800703a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703e:	b2da      	uxtb	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	4619      	mov	r1, r3
 800704c:	4610      	mov	r0, r2
 800704e:	f7fd fde5 	bl	8004c1c <clust2sect>
 8007052:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d104      	bne.n	8007064 <f_write+0x18e>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2202      	movs	r2, #2
 800705e:	755a      	strb	r2, [r3, #21]
 8007060:	2302      	movs	r3, #2
 8007062:	e0c8      	b.n	80071f6 <f_write+0x320>
			sect += csect;
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	4413      	add	r3, r2
 800706a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	899b      	ldrh	r3, [r3, #12]
 8007070:	461a      	mov	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	fbb3 f3f2 	udiv	r3, r3, r2
 8007078:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d043      	beq.n	8007108 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	4413      	add	r3, r2
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	8952      	ldrh	r2, [r2, #10]
 800708a:	4293      	cmp	r3, r2
 800708c:	d905      	bls.n	800709a <f_write+0x1c4>
					cc = fs->csize - csect;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	895b      	ldrh	r3, [r3, #10]
 8007092:	461a      	mov	r2, r3
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	7858      	ldrb	r0, [r3, #1]
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	69f9      	ldr	r1, [r7, #28]
 80070a4:	f7fd fa2e 	bl	8004504 <disk_write>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <f_write+0x1e2>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	755a      	strb	r2, [r3, #21]
 80070b4:	2301      	movs	r3, #1
 80070b6:	e09e      	b.n	80071f6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6a1a      	ldr	r2, [r3, #32]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	6a3a      	ldr	r2, [r7, #32]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d918      	bls.n	80070f8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a1a      	ldr	r2, [r3, #32]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	8992      	ldrh	r2, [r2, #12]
 80070d8:	fb02 f303 	mul.w	r3, r2, r3
 80070dc:	69fa      	ldr	r2, [r7, #28]
 80070de:	18d1      	adds	r1, r2, r3
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	899b      	ldrh	r3, [r3, #12]
 80070e4:	461a      	mov	r2, r3
 80070e6:	f7fd facd 	bl	8004684 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	7d1b      	ldrb	r3, [r3, #20]
 80070ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	899b      	ldrh	r3, [r3, #12]
 80070fc:	461a      	mov	r2, r3
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	fb02 f303 	mul.w	r3, r2, r3
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007106:	e04b      	b.n	80071a0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	429a      	cmp	r2, r3
 8007110:	d016      	beq.n	8007140 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	699a      	ldr	r2, [r3, #24]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800711a:	429a      	cmp	r2, r3
 800711c:	d210      	bcs.n	8007140 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	7858      	ldrb	r0, [r3, #1]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007128:	2301      	movs	r3, #1
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	f7fd f9ca 	bl	80044c4 <disk_read>
 8007130:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007132:	2b00      	cmp	r3, #0
 8007134:	d004      	beq.n	8007140 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	755a      	strb	r2, [r3, #21]
 800713c:	2301      	movs	r3, #1
 800713e:	e05a      	b.n	80071f6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	899b      	ldrh	r3, [r3, #12]
 800714a:	4618      	mov	r0, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	8992      	ldrh	r2, [r2, #12]
 8007154:	fbb3 f1f2 	udiv	r1, r3, r2
 8007158:	fb01 f202 	mul.w	r2, r1, r2
 800715c:	1a9b      	subs	r3, r3, r2
 800715e:	1ac3      	subs	r3, r0, r3
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	429a      	cmp	r2, r3
 8007168:	d901      	bls.n	800716e <f_write+0x298>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	8992      	ldrh	r2, [r2, #12]
 800717c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007180:	fb00 f202 	mul.w	r2, r0, r2
 8007184:	1a9b      	subs	r3, r3, r2
 8007186:	440b      	add	r3, r1
 8007188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718a:	69f9      	ldr	r1, [r7, #28]
 800718c:	4618      	mov	r0, r3
 800718e:	f7fd fa79 	bl	8004684 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	7d1b      	ldrb	r3, [r3, #20]
 8007196:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800719a:	b2da      	uxtb	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80071a0:	69fa      	ldr	r2, [r7, #28]
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	4413      	add	r3, r2
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	441a      	add	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	619a      	str	r2, [r3, #24]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	429a      	cmp	r2, r3
 80071be:	bf38      	it	cc
 80071c0:	461a      	movcc	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	60da      	str	r2, [r3, #12]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	441a      	add	r2, r3
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f47f aeb5 	bne.w	8006f4c <f_write+0x76>
 80071e2:	e000      	b.n	80071e6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80071e4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	7d1b      	ldrb	r3, [r3, #20]
 80071ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3730      	adds	r7, #48	; 0x30
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b086      	sub	sp, #24
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f107 0208 	add.w	r2, r7, #8
 800720c:	4611      	mov	r1, r2
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff faba 	bl	8006788 <validate>
 8007214:	4603      	mov	r3, r0
 8007216:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d168      	bne.n	80072f0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	7d1b      	ldrb	r3, [r3, #20]
 8007222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007226:	2b00      	cmp	r3, #0
 8007228:	d062      	beq.n	80072f0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	7d1b      	ldrb	r3, [r3, #20]
 800722e:	b25b      	sxtb	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	da15      	bge.n	8007260 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	7858      	ldrb	r0, [r3, #1]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1a      	ldr	r2, [r3, #32]
 8007242:	2301      	movs	r3, #1
 8007244:	f7fd f95e 	bl	8004504 <disk_write>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <f_sync+0x54>
 800724e:	2301      	movs	r3, #1
 8007250:	e04f      	b.n	80072f2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	7d1b      	ldrb	r3, [r3, #20]
 8007256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800725a:	b2da      	uxtb	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007260:	f7fd f892 	bl	8004388 <get_fattime>
 8007264:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	4619      	mov	r1, r3
 800726e:	4610      	mov	r0, r2
 8007270:	f7fd fc36 	bl	8004ae0 <move_window>
 8007274:	4603      	mov	r3, r0
 8007276:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007278:	7dfb      	ldrb	r3, [r7, #23]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d138      	bne.n	80072f0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	330b      	adds	r3, #11
 8007288:	781a      	ldrb	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	330b      	adds	r3, #11
 800728e:	f042 0220 	orr.w	r2, r2, #32
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	461a      	mov	r2, r3
 80072a0:	68f9      	ldr	r1, [r7, #12]
 80072a2:	f7fe f9c2 	bl	800562a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f103 021c 	add.w	r2, r3, #28
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	4619      	mov	r1, r3
 80072b2:	4610      	mov	r0, r2
 80072b4:	f7fd f9ba 	bl	800462c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3316      	adds	r3, #22
 80072bc:	6939      	ldr	r1, [r7, #16]
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fd f9b4 	bl	800462c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3312      	adds	r3, #18
 80072c8:	2100      	movs	r1, #0
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fd f993 	bl	80045f6 <st_word>
					fs->wflag = 1;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2201      	movs	r2, #1
 80072d4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fd fc2f 	bl	8004b3c <sync_fs>
 80072de:	4603      	mov	r3, r0
 80072e0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	7d1b      	ldrb	r3, [r3, #20]
 80072e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff ff7b 	bl	80071fe <f_sync>
 8007308:	4603      	mov	r3, r0
 800730a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d118      	bne.n	8007344 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f107 0208 	add.w	r2, r7, #8
 8007318:	4611      	mov	r1, r2
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff fa34 	bl	8006788 <validate>
 8007320:	4603      	mov	r3, r0
 8007322:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10c      	bne.n	8007344 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	4618      	mov	r0, r3
 8007330:	f7fd fb32 	bl	8004998 <dec_lock>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d102      	bne.n	8007344 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007344:	7bfb      	ldrb	r3, [r7, #15]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b092      	sub	sp, #72	; 0x48
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800735a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800735e:	f107 030c 	add.w	r3, r7, #12
 8007362:	2200      	movs	r2, #0
 8007364:	4618      	mov	r0, r3
 8007366:	f7fe ff89 	bl	800627c <find_volume>
 800736a:	4603      	mov	r3, r0
 800736c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8007370:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007374:	2b00      	cmp	r3, #0
 8007376:	f040 8099 	bne.w	80074ac <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800737a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	699a      	ldr	r2, [r3, #24]
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	3b02      	subs	r3, #2
 800738a:	429a      	cmp	r2, r3
 800738c:	d804      	bhi.n	8007398 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	699a      	ldr	r2, [r3, #24]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	e089      	b.n	80074ac <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007398:	2300      	movs	r3, #0
 800739a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d128      	bne.n	80073f6 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80073a4:	2302      	movs	r3, #2
 80073a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80073ac:	f107 0314 	add.w	r3, r7, #20
 80073b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fd fc51 	bl	8004c5a <get_fat>
 80073b8:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c0:	d103      	bne.n	80073ca <f_getfree+0x7c>
 80073c2:	2301      	movs	r3, #1
 80073c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80073c8:	e063      	b.n	8007492 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80073ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d103      	bne.n	80073d8 <f_getfree+0x8a>
 80073d0:	2302      	movs	r3, #2
 80073d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80073d6:	e05c      	b.n	8007492 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80073d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d102      	bne.n	80073e4 <f_getfree+0x96>
 80073de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e0:	3301      	adds	r3, #1
 80073e2:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80073e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e6:	3301      	adds	r3, #1
 80073e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d3db      	bcc.n	80073ac <f_getfree+0x5e>
 80073f4:	e04d      	b.n	8007492 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007400:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8007402:	2300      	movs	r3, #0
 8007404:	637b      	str	r3, [r7, #52]	; 0x34
 8007406:	2300      	movs	r3, #0
 8007408:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800740a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740c:	2b00      	cmp	r3, #0
 800740e:	d113      	bne.n	8007438 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007414:	1c5a      	adds	r2, r3, #1
 8007416:	63ba      	str	r2, [r7, #56]	; 0x38
 8007418:	4619      	mov	r1, r3
 800741a:	f7fd fb61 	bl	8004ae0 <move_window>
 800741e:	4603      	mov	r3, r0
 8007420:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8007424:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007428:	2b00      	cmp	r3, #0
 800742a:	d131      	bne.n	8007490 <f_getfree+0x142>
							p = fs->win;
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	3338      	adds	r3, #56	; 0x38
 8007430:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	899b      	ldrh	r3, [r3, #12]
 8007436:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b02      	cmp	r3, #2
 800743e:	d10f      	bne.n	8007460 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007442:	f7fd f89d 	bl	8004580 <ld_word>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d102      	bne.n	8007452 <f_getfree+0x104>
 800744c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800744e:	3301      	adds	r3, #1
 8007450:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	3302      	adds	r3, #2
 8007456:	633b      	str	r3, [r7, #48]	; 0x30
 8007458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745a:	3b02      	subs	r3, #2
 800745c:	637b      	str	r3, [r7, #52]	; 0x34
 800745e:	e010      	b.n	8007482 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007462:	f7fd f8a5 	bl	80045b0 <ld_dword>
 8007466:	4603      	mov	r3, r0
 8007468:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d102      	bne.n	8007476 <f_getfree+0x128>
 8007470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007472:	3301      	adds	r3, #1
 8007474:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	3304      	adds	r3, #4
 800747a:	633b      	str	r3, [r7, #48]	; 0x30
 800747c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747e:	3b04      	subs	r3, #4
 8007480:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8007482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007484:	3b01      	subs	r3, #1
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1bd      	bne.n	800740a <f_getfree+0xbc>
 800748e:	e000      	b.n	8007492 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007490:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007496:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800749c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a0:	791a      	ldrb	r2, [r3, #4]
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	f042 0201 	orr.w	r2, r2, #1
 80074a8:	b2d2      	uxtb	r2, r2
 80074aa:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80074ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3748      	adds	r7, #72	; 0x48
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80074cc:	e01b      	b.n	8007506 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80074ce:	f107 0310 	add.w	r3, r7, #16
 80074d2:	f107 0114 	add.w	r1, r7, #20
 80074d6:	2201      	movs	r2, #1
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff fb9d 	bl	8006c18 <f_read>
		if (rc != 1) break;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d116      	bne.n	8007512 <f_gets+0x5a>
		c = s[0];
 80074e4:	7d3b      	ldrb	r3, [r7, #20]
 80074e6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
 80074ea:	2b0d      	cmp	r3, #13
 80074ec:	d100      	bne.n	80074f0 <f_gets+0x38>
 80074ee:	e00a      	b.n	8007506 <f_gets+0x4e>
		*p++ = c;
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	61ba      	str	r2, [r7, #24]
 80074f6:	7dfa      	ldrb	r2, [r7, #23]
 80074f8:	701a      	strb	r2, [r3, #0]
		n++;
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	3301      	adds	r3, #1
 80074fe:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007500:	7dfb      	ldrb	r3, [r7, #23]
 8007502:	2b0a      	cmp	r3, #10
 8007504:	d007      	beq.n	8007516 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	3b01      	subs	r3, #1
 800750a:	69fa      	ldr	r2, [r7, #28]
 800750c:	429a      	cmp	r2, r3
 800750e:	dbde      	blt.n	80074ce <f_gets+0x16>
 8007510:	e002      	b.n	8007518 <f_gets+0x60>
		if (rc != 1) break;
 8007512:	bf00      	nop
 8007514:	e000      	b.n	8007518 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8007516:	bf00      	nop
	}
	*p = 0;
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	2200      	movs	r2, #0
 800751c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <f_gets+0x70>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	e000      	b.n	800752a <f_gets+0x72>
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3720      	adds	r7, #32
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	460b      	mov	r3, r1
 800753c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800753e:	78fb      	ldrb	r3, [r7, #3]
 8007540:	2b0a      	cmp	r3, #10
 8007542:	d103      	bne.n	800754c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007544:	210d      	movs	r1, #13
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff fff3 	bl	8007532 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	db25      	blt.n	80075a4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	60fa      	str	r2, [r7, #12]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	4413      	add	r3, r2
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b3c      	cmp	r3, #60	; 0x3c
 800756a:	dd12      	ble.n	8007592 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6818      	ldr	r0, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f103 010c 	add.w	r1, r3, #12
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	f107 0308 	add.w	r3, r7, #8
 800757c:	f7ff fcab 	bl	8006ed6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	429a      	cmp	r2, r3
 8007586:	d101      	bne.n	800758c <putc_bfd+0x5a>
 8007588:	2300      	movs	r3, #0
 800758a:	e001      	b.n	8007590 <putc_bfd+0x5e>
 800758c:	f04f 33ff 	mov.w	r3, #4294967295
 8007590:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	609a      	str	r2, [r3, #8]
 80075a2:	e000      	b.n	80075a6 <putc_bfd+0x74>
	if (i < 0) return;
 80075a4:	bf00      	nop
}
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	db16      	blt.n	80075ea <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6818      	ldr	r0, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f103 010c 	add.w	r1, r3, #12
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	461a      	mov	r2, r3
 80075cc:	f107 030c 	add.w	r3, r7, #12
 80075d0:	f7ff fc81 	bl	8006ed6 <f_write>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d107      	bne.n	80075ea <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d102      	bne.n	80075ea <putc_flush+0x3e>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	e001      	b.n	80075ee <putc_flush+0x42>
	return EOF;
 80075ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	605a      	str	r2, [r3, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	609a      	str	r2, [r3, #8]
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b096      	sub	sp, #88	; 0x58
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800762a:	f107 030c 	add.w	r3, r7, #12
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff ffe0 	bl	80075f6 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007636:	e009      	b.n	800764c <f_puts+0x2c>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	607a      	str	r2, [r7, #4]
 800763e:	781a      	ldrb	r2, [r3, #0]
 8007640:	f107 030c 	add.w	r3, r7, #12
 8007644:	4611      	mov	r1, r2
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff ff73 	bl	8007532 <putc_bfd>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1f1      	bne.n	8007638 <f_puts+0x18>
	return putc_flush(&pb);
 8007654:	f107 030c 	add.w	r3, r7, #12
 8007658:	4618      	mov	r0, r3
 800765a:	f7ff ffa7 	bl	80075ac <putc_flush>
 800765e:	4603      	mov	r3, r0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3758      	adds	r7, #88	; 0x58
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	4613      	mov	r3, r2
 8007674:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007676:	2301      	movs	r3, #1
 8007678:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800767e:	4b1f      	ldr	r3, [pc, #124]	; (80076fc <FATFS_LinkDriverEx+0x94>)
 8007680:	7a5b      	ldrb	r3, [r3, #9]
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d131      	bne.n	80076ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007688:	4b1c      	ldr	r3, [pc, #112]	; (80076fc <FATFS_LinkDriverEx+0x94>)
 800768a:	7a5b      	ldrb	r3, [r3, #9]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	461a      	mov	r2, r3
 8007690:	4b1a      	ldr	r3, [pc, #104]	; (80076fc <FATFS_LinkDriverEx+0x94>)
 8007692:	2100      	movs	r1, #0
 8007694:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007696:	4b19      	ldr	r3, [pc, #100]	; (80076fc <FATFS_LinkDriverEx+0x94>)
 8007698:	7a5b      	ldrb	r3, [r3, #9]
 800769a:	b2db      	uxtb	r3, r3
 800769c:	4a17      	ldr	r2, [pc, #92]	; (80076fc <FATFS_LinkDriverEx+0x94>)
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80076a6:	4b15      	ldr	r3, [pc, #84]	; (80076fc <FATFS_LinkDriverEx+0x94>)
 80076a8:	7a5b      	ldrb	r3, [r3, #9]
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	461a      	mov	r2, r3
 80076ae:	4b13      	ldr	r3, [pc, #76]	; (80076fc <FATFS_LinkDriverEx+0x94>)
 80076b0:	4413      	add	r3, r2
 80076b2:	79fa      	ldrb	r2, [r7, #7]
 80076b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80076b6:	4b11      	ldr	r3, [pc, #68]	; (80076fc <FATFS_LinkDriverEx+0x94>)
 80076b8:	7a5b      	ldrb	r3, [r3, #9]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	b2d1      	uxtb	r1, r2
 80076c0:	4a0e      	ldr	r2, [pc, #56]	; (80076fc <FATFS_LinkDriverEx+0x94>)
 80076c2:	7251      	strb	r1, [r2, #9]
 80076c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80076c6:	7dbb      	ldrb	r3, [r7, #22]
 80076c8:	3330      	adds	r3, #48	; 0x30
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	3301      	adds	r3, #1
 80076d4:	223a      	movs	r2, #58	; 0x3a
 80076d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	3302      	adds	r3, #2
 80076dc:	222f      	movs	r2, #47	; 0x2f
 80076de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	3303      	adds	r3, #3
 80076e4:	2200      	movs	r2, #0
 80076e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80076e8:	2300      	movs	r3, #0
 80076ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	20000508 	.word	0x20000508

08007700 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800770a:	2200      	movs	r2, #0
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7ff ffaa 	bl	8007668 <FATFS_LinkDriverEx>
 8007714:	4603      	mov	r3, r0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	6039      	str	r1, [r7, #0]
 800772a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800772c:	88fb      	ldrh	r3, [r7, #6]
 800772e:	2b7f      	cmp	r3, #127	; 0x7f
 8007730:	d802      	bhi.n	8007738 <ff_convert+0x18>
		c = chr;
 8007732:	88fb      	ldrh	r3, [r7, #6]
 8007734:	81fb      	strh	r3, [r7, #14]
 8007736:	e025      	b.n	8007784 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00b      	beq.n	8007756 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800773e:	88fb      	ldrh	r3, [r7, #6]
 8007740:	2bff      	cmp	r3, #255	; 0xff
 8007742:	d805      	bhi.n	8007750 <ff_convert+0x30>
 8007744:	88fb      	ldrh	r3, [r7, #6]
 8007746:	3b80      	subs	r3, #128	; 0x80
 8007748:	4a12      	ldr	r2, [pc, #72]	; (8007794 <ff_convert+0x74>)
 800774a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800774e:	e000      	b.n	8007752 <ff_convert+0x32>
 8007750:	2300      	movs	r3, #0
 8007752:	81fb      	strh	r3, [r7, #14]
 8007754:	e016      	b.n	8007784 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007756:	2300      	movs	r3, #0
 8007758:	81fb      	strh	r3, [r7, #14]
 800775a:	e009      	b.n	8007770 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800775c:	89fb      	ldrh	r3, [r7, #14]
 800775e:	4a0d      	ldr	r2, [pc, #52]	; (8007794 <ff_convert+0x74>)
 8007760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	429a      	cmp	r2, r3
 8007768:	d006      	beq.n	8007778 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800776a:	89fb      	ldrh	r3, [r7, #14]
 800776c:	3301      	adds	r3, #1
 800776e:	81fb      	strh	r3, [r7, #14]
 8007770:	89fb      	ldrh	r3, [r7, #14]
 8007772:	2b7f      	cmp	r3, #127	; 0x7f
 8007774:	d9f2      	bls.n	800775c <ff_convert+0x3c>
 8007776:	e000      	b.n	800777a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007778:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800777a:	89fb      	ldrh	r3, [r7, #14]
 800777c:	3380      	adds	r3, #128	; 0x80
 800777e:	b29b      	uxth	r3, r3
 8007780:	b2db      	uxtb	r3, r3
 8007782:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007784:	89fb      	ldrh	r3, [r7, #14]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	0800bf84 	.word	0x0800bf84

08007798 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	4603      	mov	r3, r0
 80077a0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80077a2:	88fb      	ldrh	r3, [r7, #6]
 80077a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077a8:	d201      	bcs.n	80077ae <ff_wtoupper+0x16>
 80077aa:	4b3e      	ldr	r3, [pc, #248]	; (80078a4 <ff_wtoupper+0x10c>)
 80077ac:	e000      	b.n	80077b0 <ff_wtoupper+0x18>
 80077ae:	4b3e      	ldr	r3, [pc, #248]	; (80078a8 <ff_wtoupper+0x110>)
 80077b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	1c9a      	adds	r2, r3, #2
 80077b6:	617a      	str	r2, [r7, #20]
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80077bc:	8a7b      	ldrh	r3, [r7, #18]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d068      	beq.n	8007894 <ff_wtoupper+0xfc>
 80077c2:	88fa      	ldrh	r2, [r7, #6]
 80077c4:	8a7b      	ldrh	r3, [r7, #18]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d364      	bcc.n	8007894 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	1c9a      	adds	r2, r3, #2
 80077ce:	617a      	str	r2, [r7, #20]
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	823b      	strh	r3, [r7, #16]
 80077d4:	8a3b      	ldrh	r3, [r7, #16]
 80077d6:	0a1b      	lsrs	r3, r3, #8
 80077d8:	81fb      	strh	r3, [r7, #14]
 80077da:	8a3b      	ldrh	r3, [r7, #16]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80077e0:	88fa      	ldrh	r2, [r7, #6]
 80077e2:	8a79      	ldrh	r1, [r7, #18]
 80077e4:	8a3b      	ldrh	r3, [r7, #16]
 80077e6:	440b      	add	r3, r1
 80077e8:	429a      	cmp	r2, r3
 80077ea:	da49      	bge.n	8007880 <ff_wtoupper+0xe8>
			switch (cmd) {
 80077ec:	89fb      	ldrh	r3, [r7, #14]
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d84f      	bhi.n	8007892 <ff_wtoupper+0xfa>
 80077f2:	a201      	add	r2, pc, #4	; (adr r2, 80077f8 <ff_wtoupper+0x60>)
 80077f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f8:	0800781d 	.word	0x0800781d
 80077fc:	0800782f 	.word	0x0800782f
 8007800:	08007845 	.word	0x08007845
 8007804:	0800784d 	.word	0x0800784d
 8007808:	08007855 	.word	0x08007855
 800780c:	0800785d 	.word	0x0800785d
 8007810:	08007865 	.word	0x08007865
 8007814:	0800786d 	.word	0x0800786d
 8007818:	08007875 	.word	0x08007875
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800781c:	88fa      	ldrh	r2, [r7, #6]
 800781e:	8a7b      	ldrh	r3, [r7, #18]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	4413      	add	r3, r2
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	80fb      	strh	r3, [r7, #6]
 800782c:	e027      	b.n	800787e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800782e:	88fa      	ldrh	r2, [r7, #6]
 8007830:	8a7b      	ldrh	r3, [r7, #18]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	b29b      	uxth	r3, r3
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	b29b      	uxth	r3, r3
 800783c:	88fa      	ldrh	r2, [r7, #6]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	80fb      	strh	r3, [r7, #6]
 8007842:	e01c      	b.n	800787e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007844:	88fb      	ldrh	r3, [r7, #6]
 8007846:	3b10      	subs	r3, #16
 8007848:	80fb      	strh	r3, [r7, #6]
 800784a:	e018      	b.n	800787e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800784c:	88fb      	ldrh	r3, [r7, #6]
 800784e:	3b20      	subs	r3, #32
 8007850:	80fb      	strh	r3, [r7, #6]
 8007852:	e014      	b.n	800787e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007854:	88fb      	ldrh	r3, [r7, #6]
 8007856:	3b30      	subs	r3, #48	; 0x30
 8007858:	80fb      	strh	r3, [r7, #6]
 800785a:	e010      	b.n	800787e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800785c:	88fb      	ldrh	r3, [r7, #6]
 800785e:	3b1a      	subs	r3, #26
 8007860:	80fb      	strh	r3, [r7, #6]
 8007862:	e00c      	b.n	800787e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007864:	88fb      	ldrh	r3, [r7, #6]
 8007866:	3308      	adds	r3, #8
 8007868:	80fb      	strh	r3, [r7, #6]
 800786a:	e008      	b.n	800787e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800786c:	88fb      	ldrh	r3, [r7, #6]
 800786e:	3b50      	subs	r3, #80	; 0x50
 8007870:	80fb      	strh	r3, [r7, #6]
 8007872:	e004      	b.n	800787e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007874:	88fb      	ldrh	r3, [r7, #6]
 8007876:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800787a:	80fb      	strh	r3, [r7, #6]
 800787c:	bf00      	nop
			}
			break;
 800787e:	e008      	b.n	8007892 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007880:	89fb      	ldrh	r3, [r7, #14]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d195      	bne.n	80077b2 <ff_wtoupper+0x1a>
 8007886:	8a3b      	ldrh	r3, [r7, #16]
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	4413      	add	r3, r2
 800788e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007890:	e78f      	b.n	80077b2 <ff_wtoupper+0x1a>
			break;
 8007892:	bf00      	nop
	}

	return chr;
 8007894:	88fb      	ldrh	r3, [r7, #6]
}
 8007896:	4618      	mov	r0, r3
 8007898:	371c      	adds	r7, #28
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	0800c084 	.word	0x0800c084
 80078a8:	0800c278 	.word	0x0800c278

080078ac <__cvt>:
 80078ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ae:	ed2d 8b02 	vpush	{d8}
 80078b2:	eeb0 8b40 	vmov.f64	d8, d0
 80078b6:	b085      	sub	sp, #20
 80078b8:	4617      	mov	r7, r2
 80078ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80078bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80078be:	ee18 2a90 	vmov	r2, s17
 80078c2:	f025 0520 	bic.w	r5, r5, #32
 80078c6:	2a00      	cmp	r2, #0
 80078c8:	bfb6      	itet	lt
 80078ca:	222d      	movlt	r2, #45	; 0x2d
 80078cc:	2200      	movge	r2, #0
 80078ce:	eeb1 8b40 	vneglt.f64	d8, d0
 80078d2:	2d46      	cmp	r5, #70	; 0x46
 80078d4:	460c      	mov	r4, r1
 80078d6:	701a      	strb	r2, [r3, #0]
 80078d8:	d004      	beq.n	80078e4 <__cvt+0x38>
 80078da:	2d45      	cmp	r5, #69	; 0x45
 80078dc:	d100      	bne.n	80078e0 <__cvt+0x34>
 80078de:	3401      	adds	r4, #1
 80078e0:	2102      	movs	r1, #2
 80078e2:	e000      	b.n	80078e6 <__cvt+0x3a>
 80078e4:	2103      	movs	r1, #3
 80078e6:	ab03      	add	r3, sp, #12
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	ab02      	add	r3, sp, #8
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	4622      	mov	r2, r4
 80078f0:	4633      	mov	r3, r6
 80078f2:	eeb0 0b48 	vmov.f64	d0, d8
 80078f6:	f001 f84f 	bl	8008998 <_dtoa_r>
 80078fa:	2d47      	cmp	r5, #71	; 0x47
 80078fc:	d101      	bne.n	8007902 <__cvt+0x56>
 80078fe:	07fb      	lsls	r3, r7, #31
 8007900:	d51a      	bpl.n	8007938 <__cvt+0x8c>
 8007902:	2d46      	cmp	r5, #70	; 0x46
 8007904:	eb00 0204 	add.w	r2, r0, r4
 8007908:	d10c      	bne.n	8007924 <__cvt+0x78>
 800790a:	7803      	ldrb	r3, [r0, #0]
 800790c:	2b30      	cmp	r3, #48	; 0x30
 800790e:	d107      	bne.n	8007920 <__cvt+0x74>
 8007910:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007918:	bf1c      	itt	ne
 800791a:	f1c4 0401 	rsbne	r4, r4, #1
 800791e:	6034      	strne	r4, [r6, #0]
 8007920:	6833      	ldr	r3, [r6, #0]
 8007922:	441a      	add	r2, r3
 8007924:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800792c:	bf08      	it	eq
 800792e:	9203      	streq	r2, [sp, #12]
 8007930:	2130      	movs	r1, #48	; 0x30
 8007932:	9b03      	ldr	r3, [sp, #12]
 8007934:	4293      	cmp	r3, r2
 8007936:	d307      	bcc.n	8007948 <__cvt+0x9c>
 8007938:	9b03      	ldr	r3, [sp, #12]
 800793a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800793c:	1a1b      	subs	r3, r3, r0
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	b005      	add	sp, #20
 8007942:	ecbd 8b02 	vpop	{d8}
 8007946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007948:	1c5c      	adds	r4, r3, #1
 800794a:	9403      	str	r4, [sp, #12]
 800794c:	7019      	strb	r1, [r3, #0]
 800794e:	e7f0      	b.n	8007932 <__cvt+0x86>

08007950 <__exponent>:
 8007950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007952:	4603      	mov	r3, r0
 8007954:	2900      	cmp	r1, #0
 8007956:	bfb8      	it	lt
 8007958:	4249      	neglt	r1, r1
 800795a:	f803 2b02 	strb.w	r2, [r3], #2
 800795e:	bfb4      	ite	lt
 8007960:	222d      	movlt	r2, #45	; 0x2d
 8007962:	222b      	movge	r2, #43	; 0x2b
 8007964:	2909      	cmp	r1, #9
 8007966:	7042      	strb	r2, [r0, #1]
 8007968:	dd2a      	ble.n	80079c0 <__exponent+0x70>
 800796a:	f10d 0207 	add.w	r2, sp, #7
 800796e:	4617      	mov	r7, r2
 8007970:	260a      	movs	r6, #10
 8007972:	4694      	mov	ip, r2
 8007974:	fb91 f5f6 	sdiv	r5, r1, r6
 8007978:	fb06 1415 	mls	r4, r6, r5, r1
 800797c:	3430      	adds	r4, #48	; 0x30
 800797e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007982:	460c      	mov	r4, r1
 8007984:	2c63      	cmp	r4, #99	; 0x63
 8007986:	f102 32ff 	add.w	r2, r2, #4294967295
 800798a:	4629      	mov	r1, r5
 800798c:	dcf1      	bgt.n	8007972 <__exponent+0x22>
 800798e:	3130      	adds	r1, #48	; 0x30
 8007990:	f1ac 0402 	sub.w	r4, ip, #2
 8007994:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007998:	1c41      	adds	r1, r0, #1
 800799a:	4622      	mov	r2, r4
 800799c:	42ba      	cmp	r2, r7
 800799e:	d30a      	bcc.n	80079b6 <__exponent+0x66>
 80079a0:	f10d 0209 	add.w	r2, sp, #9
 80079a4:	eba2 020c 	sub.w	r2, r2, ip
 80079a8:	42bc      	cmp	r4, r7
 80079aa:	bf88      	it	hi
 80079ac:	2200      	movhi	r2, #0
 80079ae:	4413      	add	r3, r2
 80079b0:	1a18      	subs	r0, r3, r0
 80079b2:	b003      	add	sp, #12
 80079b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80079ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 80079be:	e7ed      	b.n	800799c <__exponent+0x4c>
 80079c0:	2330      	movs	r3, #48	; 0x30
 80079c2:	3130      	adds	r1, #48	; 0x30
 80079c4:	7083      	strb	r3, [r0, #2]
 80079c6:	70c1      	strb	r1, [r0, #3]
 80079c8:	1d03      	adds	r3, r0, #4
 80079ca:	e7f1      	b.n	80079b0 <__exponent+0x60>
 80079cc:	0000      	movs	r0, r0
	...

080079d0 <_printf_float>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	b08b      	sub	sp, #44	; 0x2c
 80079d6:	460c      	mov	r4, r1
 80079d8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80079dc:	4616      	mov	r6, r2
 80079de:	461f      	mov	r7, r3
 80079e0:	4605      	mov	r5, r0
 80079e2:	f000 fed1 	bl	8008788 <_localeconv_r>
 80079e6:	f8d0 b000 	ldr.w	fp, [r0]
 80079ea:	4658      	mov	r0, fp
 80079ec:	f7f8 fc78 	bl	80002e0 <strlen>
 80079f0:	2300      	movs	r3, #0
 80079f2:	9308      	str	r3, [sp, #32]
 80079f4:	f8d8 3000 	ldr.w	r3, [r8]
 80079f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80079fc:	6822      	ldr	r2, [r4, #0]
 80079fe:	3307      	adds	r3, #7
 8007a00:	f023 0307 	bic.w	r3, r3, #7
 8007a04:	f103 0108 	add.w	r1, r3, #8
 8007a08:	f8c8 1000 	str.w	r1, [r8]
 8007a0c:	ed93 0b00 	vldr	d0, [r3]
 8007a10:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8007c70 <_printf_float+0x2a0>
 8007a14:	eeb0 7bc0 	vabs.f64	d7, d0
 8007a18:	eeb4 7b46 	vcmp.f64	d7, d6
 8007a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a20:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8007a24:	4682      	mov	sl, r0
 8007a26:	dd24      	ble.n	8007a72 <_printf_float+0xa2>
 8007a28:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a30:	d502      	bpl.n	8007a38 <_printf_float+0x68>
 8007a32:	232d      	movs	r3, #45	; 0x2d
 8007a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a38:	498f      	ldr	r1, [pc, #572]	; (8007c78 <_printf_float+0x2a8>)
 8007a3a:	4b90      	ldr	r3, [pc, #576]	; (8007c7c <_printf_float+0x2ac>)
 8007a3c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007a40:	bf94      	ite	ls
 8007a42:	4688      	movls	r8, r1
 8007a44:	4698      	movhi	r8, r3
 8007a46:	2303      	movs	r3, #3
 8007a48:	6123      	str	r3, [r4, #16]
 8007a4a:	f022 0204 	bic.w	r2, r2, #4
 8007a4e:	2300      	movs	r3, #0
 8007a50:	6022      	str	r2, [r4, #0]
 8007a52:	9304      	str	r3, [sp, #16]
 8007a54:	9700      	str	r7, [sp, #0]
 8007a56:	4633      	mov	r3, r6
 8007a58:	aa09      	add	r2, sp, #36	; 0x24
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	f000 f9d1 	bl	8007e04 <_printf_common>
 8007a62:	3001      	adds	r0, #1
 8007a64:	f040 808a 	bne.w	8007b7c <_printf_float+0x1ac>
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6c:	b00b      	add	sp, #44	; 0x2c
 8007a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a72:	eeb4 0b40 	vcmp.f64	d0, d0
 8007a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a7a:	d709      	bvc.n	8007a90 <_printf_float+0xc0>
 8007a7c:	ee10 3a90 	vmov	r3, s1
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	bfbc      	itt	lt
 8007a84:	232d      	movlt	r3, #45	; 0x2d
 8007a86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a8a:	497d      	ldr	r1, [pc, #500]	; (8007c80 <_printf_float+0x2b0>)
 8007a8c:	4b7d      	ldr	r3, [pc, #500]	; (8007c84 <_printf_float+0x2b4>)
 8007a8e:	e7d5      	b.n	8007a3c <_printf_float+0x6c>
 8007a90:	6863      	ldr	r3, [r4, #4]
 8007a92:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007a96:	9104      	str	r1, [sp, #16]
 8007a98:	1c59      	adds	r1, r3, #1
 8007a9a:	d13c      	bne.n	8007b16 <_printf_float+0x146>
 8007a9c:	2306      	movs	r3, #6
 8007a9e:	6063      	str	r3, [r4, #4]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	9303      	str	r3, [sp, #12]
 8007aa4:	ab08      	add	r3, sp, #32
 8007aa6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007aaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007aae:	ab07      	add	r3, sp, #28
 8007ab0:	6861      	ldr	r1, [r4, #4]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	6022      	str	r2, [r4, #0]
 8007ab6:	f10d 031b 	add.w	r3, sp, #27
 8007aba:	4628      	mov	r0, r5
 8007abc:	f7ff fef6 	bl	80078ac <__cvt>
 8007ac0:	9b04      	ldr	r3, [sp, #16]
 8007ac2:	9907      	ldr	r1, [sp, #28]
 8007ac4:	2b47      	cmp	r3, #71	; 0x47
 8007ac6:	4680      	mov	r8, r0
 8007ac8:	d108      	bne.n	8007adc <_printf_float+0x10c>
 8007aca:	1cc8      	adds	r0, r1, #3
 8007acc:	db02      	blt.n	8007ad4 <_printf_float+0x104>
 8007ace:	6863      	ldr	r3, [r4, #4]
 8007ad0:	4299      	cmp	r1, r3
 8007ad2:	dd41      	ble.n	8007b58 <_printf_float+0x188>
 8007ad4:	f1a9 0902 	sub.w	r9, r9, #2
 8007ad8:	fa5f f989 	uxtb.w	r9, r9
 8007adc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007ae0:	d820      	bhi.n	8007b24 <_printf_float+0x154>
 8007ae2:	3901      	subs	r1, #1
 8007ae4:	464a      	mov	r2, r9
 8007ae6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007aea:	9107      	str	r1, [sp, #28]
 8007aec:	f7ff ff30 	bl	8007950 <__exponent>
 8007af0:	9a08      	ldr	r2, [sp, #32]
 8007af2:	9004      	str	r0, [sp, #16]
 8007af4:	1813      	adds	r3, r2, r0
 8007af6:	2a01      	cmp	r2, #1
 8007af8:	6123      	str	r3, [r4, #16]
 8007afa:	dc02      	bgt.n	8007b02 <_printf_float+0x132>
 8007afc:	6822      	ldr	r2, [r4, #0]
 8007afe:	07d2      	lsls	r2, r2, #31
 8007b00:	d501      	bpl.n	8007b06 <_printf_float+0x136>
 8007b02:	3301      	adds	r3, #1
 8007b04:	6123      	str	r3, [r4, #16]
 8007b06:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0a2      	beq.n	8007a54 <_printf_float+0x84>
 8007b0e:	232d      	movs	r3, #45	; 0x2d
 8007b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b14:	e79e      	b.n	8007a54 <_printf_float+0x84>
 8007b16:	9904      	ldr	r1, [sp, #16]
 8007b18:	2947      	cmp	r1, #71	; 0x47
 8007b1a:	d1c1      	bne.n	8007aa0 <_printf_float+0xd0>
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1bf      	bne.n	8007aa0 <_printf_float+0xd0>
 8007b20:	2301      	movs	r3, #1
 8007b22:	e7bc      	b.n	8007a9e <_printf_float+0xce>
 8007b24:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007b28:	d118      	bne.n	8007b5c <_printf_float+0x18c>
 8007b2a:	2900      	cmp	r1, #0
 8007b2c:	6863      	ldr	r3, [r4, #4]
 8007b2e:	dd0b      	ble.n	8007b48 <_printf_float+0x178>
 8007b30:	6121      	str	r1, [r4, #16]
 8007b32:	b913      	cbnz	r3, 8007b3a <_printf_float+0x16a>
 8007b34:	6822      	ldr	r2, [r4, #0]
 8007b36:	07d0      	lsls	r0, r2, #31
 8007b38:	d502      	bpl.n	8007b40 <_printf_float+0x170>
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	440b      	add	r3, r1
 8007b3e:	6123      	str	r3, [r4, #16]
 8007b40:	2300      	movs	r3, #0
 8007b42:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b44:	9304      	str	r3, [sp, #16]
 8007b46:	e7de      	b.n	8007b06 <_printf_float+0x136>
 8007b48:	b913      	cbnz	r3, 8007b50 <_printf_float+0x180>
 8007b4a:	6822      	ldr	r2, [r4, #0]
 8007b4c:	07d2      	lsls	r2, r2, #31
 8007b4e:	d501      	bpl.n	8007b54 <_printf_float+0x184>
 8007b50:	3302      	adds	r3, #2
 8007b52:	e7f4      	b.n	8007b3e <_printf_float+0x16e>
 8007b54:	2301      	movs	r3, #1
 8007b56:	e7f2      	b.n	8007b3e <_printf_float+0x16e>
 8007b58:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007b5c:	9b08      	ldr	r3, [sp, #32]
 8007b5e:	4299      	cmp	r1, r3
 8007b60:	db05      	blt.n	8007b6e <_printf_float+0x19e>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	6121      	str	r1, [r4, #16]
 8007b66:	07d8      	lsls	r0, r3, #31
 8007b68:	d5ea      	bpl.n	8007b40 <_printf_float+0x170>
 8007b6a:	1c4b      	adds	r3, r1, #1
 8007b6c:	e7e7      	b.n	8007b3e <_printf_float+0x16e>
 8007b6e:	2900      	cmp	r1, #0
 8007b70:	bfd4      	ite	le
 8007b72:	f1c1 0202 	rsble	r2, r1, #2
 8007b76:	2201      	movgt	r2, #1
 8007b78:	4413      	add	r3, r2
 8007b7a:	e7e0      	b.n	8007b3e <_printf_float+0x16e>
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	055a      	lsls	r2, r3, #21
 8007b80:	d407      	bmi.n	8007b92 <_printf_float+0x1c2>
 8007b82:	6923      	ldr	r3, [r4, #16]
 8007b84:	4642      	mov	r2, r8
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b8      	blx	r7
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d12a      	bne.n	8007be6 <_printf_float+0x216>
 8007b90:	e76a      	b.n	8007a68 <_printf_float+0x98>
 8007b92:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b96:	f240 80e0 	bls.w	8007d5a <_printf_float+0x38a>
 8007b9a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007b9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba6:	d133      	bne.n	8007c10 <_printf_float+0x240>
 8007ba8:	4a37      	ldr	r2, [pc, #220]	; (8007c88 <_printf_float+0x2b8>)
 8007baa:	2301      	movs	r3, #1
 8007bac:	4631      	mov	r1, r6
 8007bae:	4628      	mov	r0, r5
 8007bb0:	47b8      	blx	r7
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	f43f af58 	beq.w	8007a68 <_printf_float+0x98>
 8007bb8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	db02      	blt.n	8007bc6 <_printf_float+0x1f6>
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	07d8      	lsls	r0, r3, #31
 8007bc4:	d50f      	bpl.n	8007be6 <_printf_float+0x216>
 8007bc6:	4653      	mov	r3, sl
 8007bc8:	465a      	mov	r2, fp
 8007bca:	4631      	mov	r1, r6
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b8      	blx	r7
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	f43f af49 	beq.w	8007a68 <_printf_float+0x98>
 8007bd6:	f04f 0800 	mov.w	r8, #0
 8007bda:	f104 091a 	add.w	r9, r4, #26
 8007bde:	9b08      	ldr	r3, [sp, #32]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	4543      	cmp	r3, r8
 8007be4:	dc09      	bgt.n	8007bfa <_printf_float+0x22a>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	079b      	lsls	r3, r3, #30
 8007bea:	f100 8106 	bmi.w	8007dfa <_printf_float+0x42a>
 8007bee:	68e0      	ldr	r0, [r4, #12]
 8007bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf2:	4298      	cmp	r0, r3
 8007bf4:	bfb8      	it	lt
 8007bf6:	4618      	movlt	r0, r3
 8007bf8:	e738      	b.n	8007a6c <_printf_float+0x9c>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	464a      	mov	r2, r9
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4628      	mov	r0, r5
 8007c02:	47b8      	blx	r7
 8007c04:	3001      	adds	r0, #1
 8007c06:	f43f af2f 	beq.w	8007a68 <_printf_float+0x98>
 8007c0a:	f108 0801 	add.w	r8, r8, #1
 8007c0e:	e7e6      	b.n	8007bde <_printf_float+0x20e>
 8007c10:	9b07      	ldr	r3, [sp, #28]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	dc3a      	bgt.n	8007c8c <_printf_float+0x2bc>
 8007c16:	4a1c      	ldr	r2, [pc, #112]	; (8007c88 <_printf_float+0x2b8>)
 8007c18:	2301      	movs	r3, #1
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	47b8      	blx	r7
 8007c20:	3001      	adds	r0, #1
 8007c22:	f43f af21 	beq.w	8007a68 <_printf_float+0x98>
 8007c26:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	d102      	bne.n	8007c34 <_printf_float+0x264>
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	07d9      	lsls	r1, r3, #31
 8007c32:	d5d8      	bpl.n	8007be6 <_printf_float+0x216>
 8007c34:	4653      	mov	r3, sl
 8007c36:	465a      	mov	r2, fp
 8007c38:	4631      	mov	r1, r6
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	47b8      	blx	r7
 8007c3e:	3001      	adds	r0, #1
 8007c40:	f43f af12 	beq.w	8007a68 <_printf_float+0x98>
 8007c44:	f04f 0900 	mov.w	r9, #0
 8007c48:	f104 0a1a 	add.w	sl, r4, #26
 8007c4c:	9b07      	ldr	r3, [sp, #28]
 8007c4e:	425b      	negs	r3, r3
 8007c50:	454b      	cmp	r3, r9
 8007c52:	dc01      	bgt.n	8007c58 <_printf_float+0x288>
 8007c54:	9b08      	ldr	r3, [sp, #32]
 8007c56:	e795      	b.n	8007b84 <_printf_float+0x1b4>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	4652      	mov	r2, sl
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	4628      	mov	r0, r5
 8007c60:	47b8      	blx	r7
 8007c62:	3001      	adds	r0, #1
 8007c64:	f43f af00 	beq.w	8007a68 <_printf_float+0x98>
 8007c68:	f109 0901 	add.w	r9, r9, #1
 8007c6c:	e7ee      	b.n	8007c4c <_printf_float+0x27c>
 8007c6e:	bf00      	nop
 8007c70:	ffffffff 	.word	0xffffffff
 8007c74:	7fefffff 	.word	0x7fefffff
 8007c78:	0800c334 	.word	0x0800c334
 8007c7c:	0800c338 	.word	0x0800c338
 8007c80:	0800c33c 	.word	0x0800c33c
 8007c84:	0800c340 	.word	0x0800c340
 8007c88:	0800c344 	.word	0x0800c344
 8007c8c:	9a08      	ldr	r2, [sp, #32]
 8007c8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c90:	429a      	cmp	r2, r3
 8007c92:	bfa8      	it	ge
 8007c94:	461a      	movge	r2, r3
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	4691      	mov	r9, r2
 8007c9a:	dc38      	bgt.n	8007d0e <_printf_float+0x33e>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	9305      	str	r3, [sp, #20]
 8007ca0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ca4:	f104 021a 	add.w	r2, r4, #26
 8007ca8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007caa:	9905      	ldr	r1, [sp, #20]
 8007cac:	9304      	str	r3, [sp, #16]
 8007cae:	eba3 0309 	sub.w	r3, r3, r9
 8007cb2:	428b      	cmp	r3, r1
 8007cb4:	dc33      	bgt.n	8007d1e <_printf_float+0x34e>
 8007cb6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	db3c      	blt.n	8007d38 <_printf_float+0x368>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	07da      	lsls	r2, r3, #31
 8007cc2:	d439      	bmi.n	8007d38 <_printf_float+0x368>
 8007cc4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007cc8:	eba2 0903 	sub.w	r9, r2, r3
 8007ccc:	9b04      	ldr	r3, [sp, #16]
 8007cce:	1ad2      	subs	r2, r2, r3
 8007cd0:	4591      	cmp	r9, r2
 8007cd2:	bfa8      	it	ge
 8007cd4:	4691      	movge	r9, r2
 8007cd6:	f1b9 0f00 	cmp.w	r9, #0
 8007cda:	dc35      	bgt.n	8007d48 <_printf_float+0x378>
 8007cdc:	f04f 0800 	mov.w	r8, #0
 8007ce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ce4:	f104 0a1a 	add.w	sl, r4, #26
 8007ce8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007cec:	1a9b      	subs	r3, r3, r2
 8007cee:	eba3 0309 	sub.w	r3, r3, r9
 8007cf2:	4543      	cmp	r3, r8
 8007cf4:	f77f af77 	ble.w	8007be6 <_printf_float+0x216>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	4652      	mov	r2, sl
 8007cfc:	4631      	mov	r1, r6
 8007cfe:	4628      	mov	r0, r5
 8007d00:	47b8      	blx	r7
 8007d02:	3001      	adds	r0, #1
 8007d04:	f43f aeb0 	beq.w	8007a68 <_printf_float+0x98>
 8007d08:	f108 0801 	add.w	r8, r8, #1
 8007d0c:	e7ec      	b.n	8007ce8 <_printf_float+0x318>
 8007d0e:	4613      	mov	r3, r2
 8007d10:	4631      	mov	r1, r6
 8007d12:	4642      	mov	r2, r8
 8007d14:	4628      	mov	r0, r5
 8007d16:	47b8      	blx	r7
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d1bf      	bne.n	8007c9c <_printf_float+0x2cc>
 8007d1c:	e6a4      	b.n	8007a68 <_printf_float+0x98>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	9204      	str	r2, [sp, #16]
 8007d26:	47b8      	blx	r7
 8007d28:	3001      	adds	r0, #1
 8007d2a:	f43f ae9d 	beq.w	8007a68 <_printf_float+0x98>
 8007d2e:	9b05      	ldr	r3, [sp, #20]
 8007d30:	9a04      	ldr	r2, [sp, #16]
 8007d32:	3301      	adds	r3, #1
 8007d34:	9305      	str	r3, [sp, #20]
 8007d36:	e7b7      	b.n	8007ca8 <_printf_float+0x2d8>
 8007d38:	4653      	mov	r3, sl
 8007d3a:	465a      	mov	r2, fp
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	4628      	mov	r0, r5
 8007d40:	47b8      	blx	r7
 8007d42:	3001      	adds	r0, #1
 8007d44:	d1be      	bne.n	8007cc4 <_printf_float+0x2f4>
 8007d46:	e68f      	b.n	8007a68 <_printf_float+0x98>
 8007d48:	9a04      	ldr	r2, [sp, #16]
 8007d4a:	464b      	mov	r3, r9
 8007d4c:	4442      	add	r2, r8
 8007d4e:	4631      	mov	r1, r6
 8007d50:	4628      	mov	r0, r5
 8007d52:	47b8      	blx	r7
 8007d54:	3001      	adds	r0, #1
 8007d56:	d1c1      	bne.n	8007cdc <_printf_float+0x30c>
 8007d58:	e686      	b.n	8007a68 <_printf_float+0x98>
 8007d5a:	9a08      	ldr	r2, [sp, #32]
 8007d5c:	2a01      	cmp	r2, #1
 8007d5e:	dc01      	bgt.n	8007d64 <_printf_float+0x394>
 8007d60:	07db      	lsls	r3, r3, #31
 8007d62:	d537      	bpl.n	8007dd4 <_printf_float+0x404>
 8007d64:	2301      	movs	r3, #1
 8007d66:	4642      	mov	r2, r8
 8007d68:	4631      	mov	r1, r6
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	47b8      	blx	r7
 8007d6e:	3001      	adds	r0, #1
 8007d70:	f43f ae7a 	beq.w	8007a68 <_printf_float+0x98>
 8007d74:	4653      	mov	r3, sl
 8007d76:	465a      	mov	r2, fp
 8007d78:	4631      	mov	r1, r6
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	47b8      	blx	r7
 8007d7e:	3001      	adds	r0, #1
 8007d80:	f43f ae72 	beq.w	8007a68 <_printf_float+0x98>
 8007d84:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007d88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d90:	9b08      	ldr	r3, [sp, #32]
 8007d92:	d01a      	beq.n	8007dca <_printf_float+0x3fa>
 8007d94:	3b01      	subs	r3, #1
 8007d96:	f108 0201 	add.w	r2, r8, #1
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	47b8      	blx	r7
 8007da0:	3001      	adds	r0, #1
 8007da2:	d10e      	bne.n	8007dc2 <_printf_float+0x3f2>
 8007da4:	e660      	b.n	8007a68 <_printf_float+0x98>
 8007da6:	2301      	movs	r3, #1
 8007da8:	464a      	mov	r2, r9
 8007daa:	4631      	mov	r1, r6
 8007dac:	4628      	mov	r0, r5
 8007dae:	47b8      	blx	r7
 8007db0:	3001      	adds	r0, #1
 8007db2:	f43f ae59 	beq.w	8007a68 <_printf_float+0x98>
 8007db6:	f108 0801 	add.w	r8, r8, #1
 8007dba:	9b08      	ldr	r3, [sp, #32]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	4543      	cmp	r3, r8
 8007dc0:	dcf1      	bgt.n	8007da6 <_printf_float+0x3d6>
 8007dc2:	9b04      	ldr	r3, [sp, #16]
 8007dc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007dc8:	e6dd      	b.n	8007b86 <_printf_float+0x1b6>
 8007dca:	f04f 0800 	mov.w	r8, #0
 8007dce:	f104 091a 	add.w	r9, r4, #26
 8007dd2:	e7f2      	b.n	8007dba <_printf_float+0x3ea>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	4642      	mov	r2, r8
 8007dd8:	e7df      	b.n	8007d9a <_printf_float+0x3ca>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	464a      	mov	r2, r9
 8007dde:	4631      	mov	r1, r6
 8007de0:	4628      	mov	r0, r5
 8007de2:	47b8      	blx	r7
 8007de4:	3001      	adds	r0, #1
 8007de6:	f43f ae3f 	beq.w	8007a68 <_printf_float+0x98>
 8007dea:	f108 0801 	add.w	r8, r8, #1
 8007dee:	68e3      	ldr	r3, [r4, #12]
 8007df0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007df2:	1a5b      	subs	r3, r3, r1
 8007df4:	4543      	cmp	r3, r8
 8007df6:	dcf0      	bgt.n	8007dda <_printf_float+0x40a>
 8007df8:	e6f9      	b.n	8007bee <_printf_float+0x21e>
 8007dfa:	f04f 0800 	mov.w	r8, #0
 8007dfe:	f104 0919 	add.w	r9, r4, #25
 8007e02:	e7f4      	b.n	8007dee <_printf_float+0x41e>

08007e04 <_printf_common>:
 8007e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e08:	4616      	mov	r6, r2
 8007e0a:	4699      	mov	r9, r3
 8007e0c:	688a      	ldr	r2, [r1, #8]
 8007e0e:	690b      	ldr	r3, [r1, #16]
 8007e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e14:	4293      	cmp	r3, r2
 8007e16:	bfb8      	it	lt
 8007e18:	4613      	movlt	r3, r2
 8007e1a:	6033      	str	r3, [r6, #0]
 8007e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e20:	4607      	mov	r7, r0
 8007e22:	460c      	mov	r4, r1
 8007e24:	b10a      	cbz	r2, 8007e2a <_printf_common+0x26>
 8007e26:	3301      	adds	r3, #1
 8007e28:	6033      	str	r3, [r6, #0]
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	0699      	lsls	r1, r3, #26
 8007e2e:	bf42      	ittt	mi
 8007e30:	6833      	ldrmi	r3, [r6, #0]
 8007e32:	3302      	addmi	r3, #2
 8007e34:	6033      	strmi	r3, [r6, #0]
 8007e36:	6825      	ldr	r5, [r4, #0]
 8007e38:	f015 0506 	ands.w	r5, r5, #6
 8007e3c:	d106      	bne.n	8007e4c <_printf_common+0x48>
 8007e3e:	f104 0a19 	add.w	sl, r4, #25
 8007e42:	68e3      	ldr	r3, [r4, #12]
 8007e44:	6832      	ldr	r2, [r6, #0]
 8007e46:	1a9b      	subs	r3, r3, r2
 8007e48:	42ab      	cmp	r3, r5
 8007e4a:	dc26      	bgt.n	8007e9a <_printf_common+0x96>
 8007e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e50:	1e13      	subs	r3, r2, #0
 8007e52:	6822      	ldr	r2, [r4, #0]
 8007e54:	bf18      	it	ne
 8007e56:	2301      	movne	r3, #1
 8007e58:	0692      	lsls	r2, r2, #26
 8007e5a:	d42b      	bmi.n	8007eb4 <_printf_common+0xb0>
 8007e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e60:	4649      	mov	r1, r9
 8007e62:	4638      	mov	r0, r7
 8007e64:	47c0      	blx	r8
 8007e66:	3001      	adds	r0, #1
 8007e68:	d01e      	beq.n	8007ea8 <_printf_common+0xa4>
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	6922      	ldr	r2, [r4, #16]
 8007e6e:	f003 0306 	and.w	r3, r3, #6
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	bf02      	ittt	eq
 8007e76:	68e5      	ldreq	r5, [r4, #12]
 8007e78:	6833      	ldreq	r3, [r6, #0]
 8007e7a:	1aed      	subeq	r5, r5, r3
 8007e7c:	68a3      	ldr	r3, [r4, #8]
 8007e7e:	bf0c      	ite	eq
 8007e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e84:	2500      	movne	r5, #0
 8007e86:	4293      	cmp	r3, r2
 8007e88:	bfc4      	itt	gt
 8007e8a:	1a9b      	subgt	r3, r3, r2
 8007e8c:	18ed      	addgt	r5, r5, r3
 8007e8e:	2600      	movs	r6, #0
 8007e90:	341a      	adds	r4, #26
 8007e92:	42b5      	cmp	r5, r6
 8007e94:	d11a      	bne.n	8007ecc <_printf_common+0xc8>
 8007e96:	2000      	movs	r0, #0
 8007e98:	e008      	b.n	8007eac <_printf_common+0xa8>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	4652      	mov	r2, sl
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	47c0      	blx	r8
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d103      	bne.n	8007eb0 <_printf_common+0xac>
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb0:	3501      	adds	r5, #1
 8007eb2:	e7c6      	b.n	8007e42 <_printf_common+0x3e>
 8007eb4:	18e1      	adds	r1, r4, r3
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	2030      	movs	r0, #48	; 0x30
 8007eba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ebe:	4422      	add	r2, r4
 8007ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ec8:	3302      	adds	r3, #2
 8007eca:	e7c7      	b.n	8007e5c <_printf_common+0x58>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	4622      	mov	r2, r4
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	47c0      	blx	r8
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	d0e6      	beq.n	8007ea8 <_printf_common+0xa4>
 8007eda:	3601      	adds	r6, #1
 8007edc:	e7d9      	b.n	8007e92 <_printf_common+0x8e>
	...

08007ee0 <_printf_i>:
 8007ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	7e0f      	ldrb	r7, [r1, #24]
 8007ee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ee8:	2f78      	cmp	r7, #120	; 0x78
 8007eea:	4691      	mov	r9, r2
 8007eec:	4680      	mov	r8, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	469a      	mov	sl, r3
 8007ef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ef6:	d807      	bhi.n	8007f08 <_printf_i+0x28>
 8007ef8:	2f62      	cmp	r7, #98	; 0x62
 8007efa:	d80a      	bhi.n	8007f12 <_printf_i+0x32>
 8007efc:	2f00      	cmp	r7, #0
 8007efe:	f000 80d4 	beq.w	80080aa <_printf_i+0x1ca>
 8007f02:	2f58      	cmp	r7, #88	; 0x58
 8007f04:	f000 80c0 	beq.w	8008088 <_printf_i+0x1a8>
 8007f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f10:	e03a      	b.n	8007f88 <_printf_i+0xa8>
 8007f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f16:	2b15      	cmp	r3, #21
 8007f18:	d8f6      	bhi.n	8007f08 <_printf_i+0x28>
 8007f1a:	a101      	add	r1, pc, #4	; (adr r1, 8007f20 <_printf_i+0x40>)
 8007f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f20:	08007f79 	.word	0x08007f79
 8007f24:	08007f8d 	.word	0x08007f8d
 8007f28:	08007f09 	.word	0x08007f09
 8007f2c:	08007f09 	.word	0x08007f09
 8007f30:	08007f09 	.word	0x08007f09
 8007f34:	08007f09 	.word	0x08007f09
 8007f38:	08007f8d 	.word	0x08007f8d
 8007f3c:	08007f09 	.word	0x08007f09
 8007f40:	08007f09 	.word	0x08007f09
 8007f44:	08007f09 	.word	0x08007f09
 8007f48:	08007f09 	.word	0x08007f09
 8007f4c:	08008091 	.word	0x08008091
 8007f50:	08007fb9 	.word	0x08007fb9
 8007f54:	0800804b 	.word	0x0800804b
 8007f58:	08007f09 	.word	0x08007f09
 8007f5c:	08007f09 	.word	0x08007f09
 8007f60:	080080b3 	.word	0x080080b3
 8007f64:	08007f09 	.word	0x08007f09
 8007f68:	08007fb9 	.word	0x08007fb9
 8007f6c:	08007f09 	.word	0x08007f09
 8007f70:	08007f09 	.word	0x08007f09
 8007f74:	08008053 	.word	0x08008053
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	1d1a      	adds	r2, r3, #4
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	602a      	str	r2, [r5, #0]
 8007f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e09f      	b.n	80080cc <_printf_i+0x1ec>
 8007f8c:	6820      	ldr	r0, [r4, #0]
 8007f8e:	682b      	ldr	r3, [r5, #0]
 8007f90:	0607      	lsls	r7, r0, #24
 8007f92:	f103 0104 	add.w	r1, r3, #4
 8007f96:	6029      	str	r1, [r5, #0]
 8007f98:	d501      	bpl.n	8007f9e <_printf_i+0xbe>
 8007f9a:	681e      	ldr	r6, [r3, #0]
 8007f9c:	e003      	b.n	8007fa6 <_printf_i+0xc6>
 8007f9e:	0646      	lsls	r6, r0, #25
 8007fa0:	d5fb      	bpl.n	8007f9a <_printf_i+0xba>
 8007fa2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007fa6:	2e00      	cmp	r6, #0
 8007fa8:	da03      	bge.n	8007fb2 <_printf_i+0xd2>
 8007faa:	232d      	movs	r3, #45	; 0x2d
 8007fac:	4276      	negs	r6, r6
 8007fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fb2:	485a      	ldr	r0, [pc, #360]	; (800811c <_printf_i+0x23c>)
 8007fb4:	230a      	movs	r3, #10
 8007fb6:	e012      	b.n	8007fde <_printf_i+0xfe>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	6820      	ldr	r0, [r4, #0]
 8007fbc:	1d19      	adds	r1, r3, #4
 8007fbe:	6029      	str	r1, [r5, #0]
 8007fc0:	0605      	lsls	r5, r0, #24
 8007fc2:	d501      	bpl.n	8007fc8 <_printf_i+0xe8>
 8007fc4:	681e      	ldr	r6, [r3, #0]
 8007fc6:	e002      	b.n	8007fce <_printf_i+0xee>
 8007fc8:	0641      	lsls	r1, r0, #25
 8007fca:	d5fb      	bpl.n	8007fc4 <_printf_i+0xe4>
 8007fcc:	881e      	ldrh	r6, [r3, #0]
 8007fce:	4853      	ldr	r0, [pc, #332]	; (800811c <_printf_i+0x23c>)
 8007fd0:	2f6f      	cmp	r7, #111	; 0x6f
 8007fd2:	bf0c      	ite	eq
 8007fd4:	2308      	moveq	r3, #8
 8007fd6:	230a      	movne	r3, #10
 8007fd8:	2100      	movs	r1, #0
 8007fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fde:	6865      	ldr	r5, [r4, #4]
 8007fe0:	60a5      	str	r5, [r4, #8]
 8007fe2:	2d00      	cmp	r5, #0
 8007fe4:	bfa2      	ittt	ge
 8007fe6:	6821      	ldrge	r1, [r4, #0]
 8007fe8:	f021 0104 	bicge.w	r1, r1, #4
 8007fec:	6021      	strge	r1, [r4, #0]
 8007fee:	b90e      	cbnz	r6, 8007ff4 <_printf_i+0x114>
 8007ff0:	2d00      	cmp	r5, #0
 8007ff2:	d04b      	beq.n	800808c <_printf_i+0x1ac>
 8007ff4:	4615      	mov	r5, r2
 8007ff6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ffa:	fb03 6711 	mls	r7, r3, r1, r6
 8007ffe:	5dc7      	ldrb	r7, [r0, r7]
 8008000:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008004:	4637      	mov	r7, r6
 8008006:	42bb      	cmp	r3, r7
 8008008:	460e      	mov	r6, r1
 800800a:	d9f4      	bls.n	8007ff6 <_printf_i+0x116>
 800800c:	2b08      	cmp	r3, #8
 800800e:	d10b      	bne.n	8008028 <_printf_i+0x148>
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	07de      	lsls	r6, r3, #31
 8008014:	d508      	bpl.n	8008028 <_printf_i+0x148>
 8008016:	6923      	ldr	r3, [r4, #16]
 8008018:	6861      	ldr	r1, [r4, #4]
 800801a:	4299      	cmp	r1, r3
 800801c:	bfde      	ittt	le
 800801e:	2330      	movle	r3, #48	; 0x30
 8008020:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008024:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008028:	1b52      	subs	r2, r2, r5
 800802a:	6122      	str	r2, [r4, #16]
 800802c:	f8cd a000 	str.w	sl, [sp]
 8008030:	464b      	mov	r3, r9
 8008032:	aa03      	add	r2, sp, #12
 8008034:	4621      	mov	r1, r4
 8008036:	4640      	mov	r0, r8
 8008038:	f7ff fee4 	bl	8007e04 <_printf_common>
 800803c:	3001      	adds	r0, #1
 800803e:	d14a      	bne.n	80080d6 <_printf_i+0x1f6>
 8008040:	f04f 30ff 	mov.w	r0, #4294967295
 8008044:	b004      	add	sp, #16
 8008046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	f043 0320 	orr.w	r3, r3, #32
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	4833      	ldr	r0, [pc, #204]	; (8008120 <_printf_i+0x240>)
 8008054:	2778      	movs	r7, #120	; 0x78
 8008056:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	6829      	ldr	r1, [r5, #0]
 800805e:	061f      	lsls	r7, r3, #24
 8008060:	f851 6b04 	ldr.w	r6, [r1], #4
 8008064:	d402      	bmi.n	800806c <_printf_i+0x18c>
 8008066:	065f      	lsls	r7, r3, #25
 8008068:	bf48      	it	mi
 800806a:	b2b6      	uxthmi	r6, r6
 800806c:	07df      	lsls	r7, r3, #31
 800806e:	bf48      	it	mi
 8008070:	f043 0320 	orrmi.w	r3, r3, #32
 8008074:	6029      	str	r1, [r5, #0]
 8008076:	bf48      	it	mi
 8008078:	6023      	strmi	r3, [r4, #0]
 800807a:	b91e      	cbnz	r6, 8008084 <_printf_i+0x1a4>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	f023 0320 	bic.w	r3, r3, #32
 8008082:	6023      	str	r3, [r4, #0]
 8008084:	2310      	movs	r3, #16
 8008086:	e7a7      	b.n	8007fd8 <_printf_i+0xf8>
 8008088:	4824      	ldr	r0, [pc, #144]	; (800811c <_printf_i+0x23c>)
 800808a:	e7e4      	b.n	8008056 <_printf_i+0x176>
 800808c:	4615      	mov	r5, r2
 800808e:	e7bd      	b.n	800800c <_printf_i+0x12c>
 8008090:	682b      	ldr	r3, [r5, #0]
 8008092:	6826      	ldr	r6, [r4, #0]
 8008094:	6961      	ldr	r1, [r4, #20]
 8008096:	1d18      	adds	r0, r3, #4
 8008098:	6028      	str	r0, [r5, #0]
 800809a:	0635      	lsls	r5, r6, #24
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	d501      	bpl.n	80080a4 <_printf_i+0x1c4>
 80080a0:	6019      	str	r1, [r3, #0]
 80080a2:	e002      	b.n	80080aa <_printf_i+0x1ca>
 80080a4:	0670      	lsls	r0, r6, #25
 80080a6:	d5fb      	bpl.n	80080a0 <_printf_i+0x1c0>
 80080a8:	8019      	strh	r1, [r3, #0]
 80080aa:	2300      	movs	r3, #0
 80080ac:	6123      	str	r3, [r4, #16]
 80080ae:	4615      	mov	r5, r2
 80080b0:	e7bc      	b.n	800802c <_printf_i+0x14c>
 80080b2:	682b      	ldr	r3, [r5, #0]
 80080b4:	1d1a      	adds	r2, r3, #4
 80080b6:	602a      	str	r2, [r5, #0]
 80080b8:	681d      	ldr	r5, [r3, #0]
 80080ba:	6862      	ldr	r2, [r4, #4]
 80080bc:	2100      	movs	r1, #0
 80080be:	4628      	mov	r0, r5
 80080c0:	f7f8 f8be 	bl	8000240 <memchr>
 80080c4:	b108      	cbz	r0, 80080ca <_printf_i+0x1ea>
 80080c6:	1b40      	subs	r0, r0, r5
 80080c8:	6060      	str	r0, [r4, #4]
 80080ca:	6863      	ldr	r3, [r4, #4]
 80080cc:	6123      	str	r3, [r4, #16]
 80080ce:	2300      	movs	r3, #0
 80080d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080d4:	e7aa      	b.n	800802c <_printf_i+0x14c>
 80080d6:	6923      	ldr	r3, [r4, #16]
 80080d8:	462a      	mov	r2, r5
 80080da:	4649      	mov	r1, r9
 80080dc:	4640      	mov	r0, r8
 80080de:	47d0      	blx	sl
 80080e0:	3001      	adds	r0, #1
 80080e2:	d0ad      	beq.n	8008040 <_printf_i+0x160>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	079b      	lsls	r3, r3, #30
 80080e8:	d413      	bmi.n	8008112 <_printf_i+0x232>
 80080ea:	68e0      	ldr	r0, [r4, #12]
 80080ec:	9b03      	ldr	r3, [sp, #12]
 80080ee:	4298      	cmp	r0, r3
 80080f0:	bfb8      	it	lt
 80080f2:	4618      	movlt	r0, r3
 80080f4:	e7a6      	b.n	8008044 <_printf_i+0x164>
 80080f6:	2301      	movs	r3, #1
 80080f8:	4632      	mov	r2, r6
 80080fa:	4649      	mov	r1, r9
 80080fc:	4640      	mov	r0, r8
 80080fe:	47d0      	blx	sl
 8008100:	3001      	adds	r0, #1
 8008102:	d09d      	beq.n	8008040 <_printf_i+0x160>
 8008104:	3501      	adds	r5, #1
 8008106:	68e3      	ldr	r3, [r4, #12]
 8008108:	9903      	ldr	r1, [sp, #12]
 800810a:	1a5b      	subs	r3, r3, r1
 800810c:	42ab      	cmp	r3, r5
 800810e:	dcf2      	bgt.n	80080f6 <_printf_i+0x216>
 8008110:	e7eb      	b.n	80080ea <_printf_i+0x20a>
 8008112:	2500      	movs	r5, #0
 8008114:	f104 0619 	add.w	r6, r4, #25
 8008118:	e7f5      	b.n	8008106 <_printf_i+0x226>
 800811a:	bf00      	nop
 800811c:	0800c346 	.word	0x0800c346
 8008120:	0800c357 	.word	0x0800c357

08008124 <_scanf_float>:
 8008124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008128:	b087      	sub	sp, #28
 800812a:	4617      	mov	r7, r2
 800812c:	9303      	str	r3, [sp, #12]
 800812e:	688b      	ldr	r3, [r1, #8]
 8008130:	1e5a      	subs	r2, r3, #1
 8008132:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008136:	bf83      	ittte	hi
 8008138:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800813c:	195b      	addhi	r3, r3, r5
 800813e:	9302      	strhi	r3, [sp, #8]
 8008140:	2300      	movls	r3, #0
 8008142:	bf86      	itte	hi
 8008144:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008148:	608b      	strhi	r3, [r1, #8]
 800814a:	9302      	strls	r3, [sp, #8]
 800814c:	680b      	ldr	r3, [r1, #0]
 800814e:	468b      	mov	fp, r1
 8008150:	2500      	movs	r5, #0
 8008152:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008156:	f84b 3b1c 	str.w	r3, [fp], #28
 800815a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800815e:	4680      	mov	r8, r0
 8008160:	460c      	mov	r4, r1
 8008162:	465e      	mov	r6, fp
 8008164:	46aa      	mov	sl, r5
 8008166:	46a9      	mov	r9, r5
 8008168:	9501      	str	r5, [sp, #4]
 800816a:	68a2      	ldr	r2, [r4, #8]
 800816c:	b152      	cbz	r2, 8008184 <_scanf_float+0x60>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b4e      	cmp	r3, #78	; 0x4e
 8008174:	d864      	bhi.n	8008240 <_scanf_float+0x11c>
 8008176:	2b40      	cmp	r3, #64	; 0x40
 8008178:	d83c      	bhi.n	80081f4 <_scanf_float+0xd0>
 800817a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800817e:	b2c8      	uxtb	r0, r1
 8008180:	280e      	cmp	r0, #14
 8008182:	d93a      	bls.n	80081fa <_scanf_float+0xd6>
 8008184:	f1b9 0f00 	cmp.w	r9, #0
 8008188:	d003      	beq.n	8008192 <_scanf_float+0x6e>
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008196:	f1ba 0f01 	cmp.w	sl, #1
 800819a:	f200 8113 	bhi.w	80083c4 <_scanf_float+0x2a0>
 800819e:	455e      	cmp	r6, fp
 80081a0:	f200 8105 	bhi.w	80083ae <_scanf_float+0x28a>
 80081a4:	2501      	movs	r5, #1
 80081a6:	4628      	mov	r0, r5
 80081a8:	b007      	add	sp, #28
 80081aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80081b2:	2a0d      	cmp	r2, #13
 80081b4:	d8e6      	bhi.n	8008184 <_scanf_float+0x60>
 80081b6:	a101      	add	r1, pc, #4	; (adr r1, 80081bc <_scanf_float+0x98>)
 80081b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80081bc:	080082fb 	.word	0x080082fb
 80081c0:	08008185 	.word	0x08008185
 80081c4:	08008185 	.word	0x08008185
 80081c8:	08008185 	.word	0x08008185
 80081cc:	0800835b 	.word	0x0800835b
 80081d0:	08008333 	.word	0x08008333
 80081d4:	08008185 	.word	0x08008185
 80081d8:	08008185 	.word	0x08008185
 80081dc:	08008309 	.word	0x08008309
 80081e0:	08008185 	.word	0x08008185
 80081e4:	08008185 	.word	0x08008185
 80081e8:	08008185 	.word	0x08008185
 80081ec:	08008185 	.word	0x08008185
 80081f0:	080082c1 	.word	0x080082c1
 80081f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80081f8:	e7db      	b.n	80081b2 <_scanf_float+0x8e>
 80081fa:	290e      	cmp	r1, #14
 80081fc:	d8c2      	bhi.n	8008184 <_scanf_float+0x60>
 80081fe:	a001      	add	r0, pc, #4	; (adr r0, 8008204 <_scanf_float+0xe0>)
 8008200:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008204:	080082b3 	.word	0x080082b3
 8008208:	08008185 	.word	0x08008185
 800820c:	080082b3 	.word	0x080082b3
 8008210:	08008347 	.word	0x08008347
 8008214:	08008185 	.word	0x08008185
 8008218:	08008261 	.word	0x08008261
 800821c:	0800829d 	.word	0x0800829d
 8008220:	0800829d 	.word	0x0800829d
 8008224:	0800829d 	.word	0x0800829d
 8008228:	0800829d 	.word	0x0800829d
 800822c:	0800829d 	.word	0x0800829d
 8008230:	0800829d 	.word	0x0800829d
 8008234:	0800829d 	.word	0x0800829d
 8008238:	0800829d 	.word	0x0800829d
 800823c:	0800829d 	.word	0x0800829d
 8008240:	2b6e      	cmp	r3, #110	; 0x6e
 8008242:	d809      	bhi.n	8008258 <_scanf_float+0x134>
 8008244:	2b60      	cmp	r3, #96	; 0x60
 8008246:	d8b2      	bhi.n	80081ae <_scanf_float+0x8a>
 8008248:	2b54      	cmp	r3, #84	; 0x54
 800824a:	d077      	beq.n	800833c <_scanf_float+0x218>
 800824c:	2b59      	cmp	r3, #89	; 0x59
 800824e:	d199      	bne.n	8008184 <_scanf_float+0x60>
 8008250:	2d07      	cmp	r5, #7
 8008252:	d197      	bne.n	8008184 <_scanf_float+0x60>
 8008254:	2508      	movs	r5, #8
 8008256:	e029      	b.n	80082ac <_scanf_float+0x188>
 8008258:	2b74      	cmp	r3, #116	; 0x74
 800825a:	d06f      	beq.n	800833c <_scanf_float+0x218>
 800825c:	2b79      	cmp	r3, #121	; 0x79
 800825e:	e7f6      	b.n	800824e <_scanf_float+0x12a>
 8008260:	6821      	ldr	r1, [r4, #0]
 8008262:	05c8      	lsls	r0, r1, #23
 8008264:	d51a      	bpl.n	800829c <_scanf_float+0x178>
 8008266:	9b02      	ldr	r3, [sp, #8]
 8008268:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800826c:	6021      	str	r1, [r4, #0]
 800826e:	f109 0901 	add.w	r9, r9, #1
 8008272:	b11b      	cbz	r3, 800827c <_scanf_float+0x158>
 8008274:	3b01      	subs	r3, #1
 8008276:	3201      	adds	r2, #1
 8008278:	9302      	str	r3, [sp, #8]
 800827a:	60a2      	str	r2, [r4, #8]
 800827c:	68a3      	ldr	r3, [r4, #8]
 800827e:	3b01      	subs	r3, #1
 8008280:	60a3      	str	r3, [r4, #8]
 8008282:	6923      	ldr	r3, [r4, #16]
 8008284:	3301      	adds	r3, #1
 8008286:	6123      	str	r3, [r4, #16]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3b01      	subs	r3, #1
 800828c:	2b00      	cmp	r3, #0
 800828e:	607b      	str	r3, [r7, #4]
 8008290:	f340 8084 	ble.w	800839c <_scanf_float+0x278>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	3301      	adds	r3, #1
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	e766      	b.n	800816a <_scanf_float+0x46>
 800829c:	eb1a 0f05 	cmn.w	sl, r5
 80082a0:	f47f af70 	bne.w	8008184 <_scanf_float+0x60>
 80082a4:	6822      	ldr	r2, [r4, #0]
 80082a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80082aa:	6022      	str	r2, [r4, #0]
 80082ac:	f806 3b01 	strb.w	r3, [r6], #1
 80082b0:	e7e4      	b.n	800827c <_scanf_float+0x158>
 80082b2:	6822      	ldr	r2, [r4, #0]
 80082b4:	0610      	lsls	r0, r2, #24
 80082b6:	f57f af65 	bpl.w	8008184 <_scanf_float+0x60>
 80082ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082be:	e7f4      	b.n	80082aa <_scanf_float+0x186>
 80082c0:	f1ba 0f00 	cmp.w	sl, #0
 80082c4:	d10e      	bne.n	80082e4 <_scanf_float+0x1c0>
 80082c6:	f1b9 0f00 	cmp.w	r9, #0
 80082ca:	d10e      	bne.n	80082ea <_scanf_float+0x1c6>
 80082cc:	6822      	ldr	r2, [r4, #0]
 80082ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80082d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80082d6:	d108      	bne.n	80082ea <_scanf_float+0x1c6>
 80082d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80082dc:	6022      	str	r2, [r4, #0]
 80082de:	f04f 0a01 	mov.w	sl, #1
 80082e2:	e7e3      	b.n	80082ac <_scanf_float+0x188>
 80082e4:	f1ba 0f02 	cmp.w	sl, #2
 80082e8:	d055      	beq.n	8008396 <_scanf_float+0x272>
 80082ea:	2d01      	cmp	r5, #1
 80082ec:	d002      	beq.n	80082f4 <_scanf_float+0x1d0>
 80082ee:	2d04      	cmp	r5, #4
 80082f0:	f47f af48 	bne.w	8008184 <_scanf_float+0x60>
 80082f4:	3501      	adds	r5, #1
 80082f6:	b2ed      	uxtb	r5, r5
 80082f8:	e7d8      	b.n	80082ac <_scanf_float+0x188>
 80082fa:	f1ba 0f01 	cmp.w	sl, #1
 80082fe:	f47f af41 	bne.w	8008184 <_scanf_float+0x60>
 8008302:	f04f 0a02 	mov.w	sl, #2
 8008306:	e7d1      	b.n	80082ac <_scanf_float+0x188>
 8008308:	b97d      	cbnz	r5, 800832a <_scanf_float+0x206>
 800830a:	f1b9 0f00 	cmp.w	r9, #0
 800830e:	f47f af3c 	bne.w	800818a <_scanf_float+0x66>
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008318:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800831c:	f47f af39 	bne.w	8008192 <_scanf_float+0x6e>
 8008320:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008324:	6022      	str	r2, [r4, #0]
 8008326:	2501      	movs	r5, #1
 8008328:	e7c0      	b.n	80082ac <_scanf_float+0x188>
 800832a:	2d03      	cmp	r5, #3
 800832c:	d0e2      	beq.n	80082f4 <_scanf_float+0x1d0>
 800832e:	2d05      	cmp	r5, #5
 8008330:	e7de      	b.n	80082f0 <_scanf_float+0x1cc>
 8008332:	2d02      	cmp	r5, #2
 8008334:	f47f af26 	bne.w	8008184 <_scanf_float+0x60>
 8008338:	2503      	movs	r5, #3
 800833a:	e7b7      	b.n	80082ac <_scanf_float+0x188>
 800833c:	2d06      	cmp	r5, #6
 800833e:	f47f af21 	bne.w	8008184 <_scanf_float+0x60>
 8008342:	2507      	movs	r5, #7
 8008344:	e7b2      	b.n	80082ac <_scanf_float+0x188>
 8008346:	6822      	ldr	r2, [r4, #0]
 8008348:	0591      	lsls	r1, r2, #22
 800834a:	f57f af1b 	bpl.w	8008184 <_scanf_float+0x60>
 800834e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008352:	6022      	str	r2, [r4, #0]
 8008354:	f8cd 9004 	str.w	r9, [sp, #4]
 8008358:	e7a8      	b.n	80082ac <_scanf_float+0x188>
 800835a:	6822      	ldr	r2, [r4, #0]
 800835c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008360:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008364:	d006      	beq.n	8008374 <_scanf_float+0x250>
 8008366:	0550      	lsls	r0, r2, #21
 8008368:	f57f af0c 	bpl.w	8008184 <_scanf_float+0x60>
 800836c:	f1b9 0f00 	cmp.w	r9, #0
 8008370:	f43f af0f 	beq.w	8008192 <_scanf_float+0x6e>
 8008374:	0591      	lsls	r1, r2, #22
 8008376:	bf58      	it	pl
 8008378:	9901      	ldrpl	r1, [sp, #4]
 800837a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800837e:	bf58      	it	pl
 8008380:	eba9 0101 	subpl.w	r1, r9, r1
 8008384:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008388:	bf58      	it	pl
 800838a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800838e:	6022      	str	r2, [r4, #0]
 8008390:	f04f 0900 	mov.w	r9, #0
 8008394:	e78a      	b.n	80082ac <_scanf_float+0x188>
 8008396:	f04f 0a03 	mov.w	sl, #3
 800839a:	e787      	b.n	80082ac <_scanf_float+0x188>
 800839c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80083a0:	4639      	mov	r1, r7
 80083a2:	4640      	mov	r0, r8
 80083a4:	4798      	blx	r3
 80083a6:	2800      	cmp	r0, #0
 80083a8:	f43f aedf 	beq.w	800816a <_scanf_float+0x46>
 80083ac:	e6ea      	b.n	8008184 <_scanf_float+0x60>
 80083ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083b6:	463a      	mov	r2, r7
 80083b8:	4640      	mov	r0, r8
 80083ba:	4798      	blx	r3
 80083bc:	6923      	ldr	r3, [r4, #16]
 80083be:	3b01      	subs	r3, #1
 80083c0:	6123      	str	r3, [r4, #16]
 80083c2:	e6ec      	b.n	800819e <_scanf_float+0x7a>
 80083c4:	1e6b      	subs	r3, r5, #1
 80083c6:	2b06      	cmp	r3, #6
 80083c8:	d825      	bhi.n	8008416 <_scanf_float+0x2f2>
 80083ca:	2d02      	cmp	r5, #2
 80083cc:	d836      	bhi.n	800843c <_scanf_float+0x318>
 80083ce:	455e      	cmp	r6, fp
 80083d0:	f67f aee8 	bls.w	80081a4 <_scanf_float+0x80>
 80083d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083dc:	463a      	mov	r2, r7
 80083de:	4640      	mov	r0, r8
 80083e0:	4798      	blx	r3
 80083e2:	6923      	ldr	r3, [r4, #16]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	6123      	str	r3, [r4, #16]
 80083e8:	e7f1      	b.n	80083ce <_scanf_float+0x2aa>
 80083ea:	9802      	ldr	r0, [sp, #8]
 80083ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80083f4:	9002      	str	r0, [sp, #8]
 80083f6:	463a      	mov	r2, r7
 80083f8:	4640      	mov	r0, r8
 80083fa:	4798      	blx	r3
 80083fc:	6923      	ldr	r3, [r4, #16]
 80083fe:	3b01      	subs	r3, #1
 8008400:	6123      	str	r3, [r4, #16]
 8008402:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008406:	fa5f fa8a 	uxtb.w	sl, sl
 800840a:	f1ba 0f02 	cmp.w	sl, #2
 800840e:	d1ec      	bne.n	80083ea <_scanf_float+0x2c6>
 8008410:	3d03      	subs	r5, #3
 8008412:	b2ed      	uxtb	r5, r5
 8008414:	1b76      	subs	r6, r6, r5
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	05da      	lsls	r2, r3, #23
 800841a:	d52f      	bpl.n	800847c <_scanf_float+0x358>
 800841c:	055b      	lsls	r3, r3, #21
 800841e:	d510      	bpl.n	8008442 <_scanf_float+0x31e>
 8008420:	455e      	cmp	r6, fp
 8008422:	f67f aebf 	bls.w	80081a4 <_scanf_float+0x80>
 8008426:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800842a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800842e:	463a      	mov	r2, r7
 8008430:	4640      	mov	r0, r8
 8008432:	4798      	blx	r3
 8008434:	6923      	ldr	r3, [r4, #16]
 8008436:	3b01      	subs	r3, #1
 8008438:	6123      	str	r3, [r4, #16]
 800843a:	e7f1      	b.n	8008420 <_scanf_float+0x2fc>
 800843c:	46aa      	mov	sl, r5
 800843e:	9602      	str	r6, [sp, #8]
 8008440:	e7df      	b.n	8008402 <_scanf_float+0x2de>
 8008442:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	2965      	cmp	r1, #101	; 0x65
 800844a:	f103 33ff 	add.w	r3, r3, #4294967295
 800844e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008452:	6123      	str	r3, [r4, #16]
 8008454:	d00c      	beq.n	8008470 <_scanf_float+0x34c>
 8008456:	2945      	cmp	r1, #69	; 0x45
 8008458:	d00a      	beq.n	8008470 <_scanf_float+0x34c>
 800845a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800845e:	463a      	mov	r2, r7
 8008460:	4640      	mov	r0, r8
 8008462:	4798      	blx	r3
 8008464:	6923      	ldr	r3, [r4, #16]
 8008466:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800846a:	3b01      	subs	r3, #1
 800846c:	1eb5      	subs	r5, r6, #2
 800846e:	6123      	str	r3, [r4, #16]
 8008470:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008474:	463a      	mov	r2, r7
 8008476:	4640      	mov	r0, r8
 8008478:	4798      	blx	r3
 800847a:	462e      	mov	r6, r5
 800847c:	6825      	ldr	r5, [r4, #0]
 800847e:	f015 0510 	ands.w	r5, r5, #16
 8008482:	d14d      	bne.n	8008520 <_scanf_float+0x3fc>
 8008484:	7035      	strb	r5, [r6, #0]
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800848c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008490:	d11a      	bne.n	80084c8 <_scanf_float+0x3a4>
 8008492:	9b01      	ldr	r3, [sp, #4]
 8008494:	454b      	cmp	r3, r9
 8008496:	eba3 0209 	sub.w	r2, r3, r9
 800849a:	d122      	bne.n	80084e2 <_scanf_float+0x3be>
 800849c:	2200      	movs	r2, #0
 800849e:	4659      	mov	r1, fp
 80084a0:	4640      	mov	r0, r8
 80084a2:	f002 fb5b 	bl	800ab5c <_strtod_r>
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	6821      	ldr	r1, [r4, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f011 0f02 	tst.w	r1, #2
 80084b0:	f103 0204 	add.w	r2, r3, #4
 80084b4:	d020      	beq.n	80084f8 <_scanf_float+0x3d4>
 80084b6:	9903      	ldr	r1, [sp, #12]
 80084b8:	600a      	str	r2, [r1, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	ed83 0b00 	vstr	d0, [r3]
 80084c0:	68e3      	ldr	r3, [r4, #12]
 80084c2:	3301      	adds	r3, #1
 80084c4:	60e3      	str	r3, [r4, #12]
 80084c6:	e66e      	b.n	80081a6 <_scanf_float+0x82>
 80084c8:	9b04      	ldr	r3, [sp, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d0e6      	beq.n	800849c <_scanf_float+0x378>
 80084ce:	9905      	ldr	r1, [sp, #20]
 80084d0:	230a      	movs	r3, #10
 80084d2:	462a      	mov	r2, r5
 80084d4:	3101      	adds	r1, #1
 80084d6:	4640      	mov	r0, r8
 80084d8:	f002 fbc8 	bl	800ac6c <_strtol_r>
 80084dc:	9b04      	ldr	r3, [sp, #16]
 80084de:	9e05      	ldr	r6, [sp, #20]
 80084e0:	1ac2      	subs	r2, r0, r3
 80084e2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80084e6:	429e      	cmp	r6, r3
 80084e8:	bf28      	it	cs
 80084ea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80084ee:	490d      	ldr	r1, [pc, #52]	; (8008524 <_scanf_float+0x400>)
 80084f0:	4630      	mov	r0, r6
 80084f2:	f000 f8dd 	bl	80086b0 <siprintf>
 80084f6:	e7d1      	b.n	800849c <_scanf_float+0x378>
 80084f8:	f011 0f04 	tst.w	r1, #4
 80084fc:	9903      	ldr	r1, [sp, #12]
 80084fe:	600a      	str	r2, [r1, #0]
 8008500:	d1db      	bne.n	80084ba <_scanf_float+0x396>
 8008502:	eeb4 0b40 	vcmp.f64	d0, d0
 8008506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800850a:	681e      	ldr	r6, [r3, #0]
 800850c:	d705      	bvc.n	800851a <_scanf_float+0x3f6>
 800850e:	4806      	ldr	r0, [pc, #24]	; (8008528 <_scanf_float+0x404>)
 8008510:	f000 f9b2 	bl	8008878 <nanf>
 8008514:	ed86 0a00 	vstr	s0, [r6]
 8008518:	e7d2      	b.n	80084c0 <_scanf_float+0x39c>
 800851a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800851e:	e7f9      	b.n	8008514 <_scanf_float+0x3f0>
 8008520:	2500      	movs	r5, #0
 8008522:	e640      	b.n	80081a6 <_scanf_float+0x82>
 8008524:	0800c368 	.word	0x0800c368
 8008528:	0800c6fd 	.word	0x0800c6fd

0800852c <std>:
 800852c:	2300      	movs	r3, #0
 800852e:	b510      	push	{r4, lr}
 8008530:	4604      	mov	r4, r0
 8008532:	e9c0 3300 	strd	r3, r3, [r0]
 8008536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800853a:	6083      	str	r3, [r0, #8]
 800853c:	8181      	strh	r1, [r0, #12]
 800853e:	6643      	str	r3, [r0, #100]	; 0x64
 8008540:	81c2      	strh	r2, [r0, #14]
 8008542:	6183      	str	r3, [r0, #24]
 8008544:	4619      	mov	r1, r3
 8008546:	2208      	movs	r2, #8
 8008548:	305c      	adds	r0, #92	; 0x5c
 800854a:	f000 f914 	bl	8008776 <memset>
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <std+0x58>)
 8008550:	6263      	str	r3, [r4, #36]	; 0x24
 8008552:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <std+0x5c>)
 8008554:	62a3      	str	r3, [r4, #40]	; 0x28
 8008556:	4b0d      	ldr	r3, [pc, #52]	; (800858c <std+0x60>)
 8008558:	62e3      	str	r3, [r4, #44]	; 0x2c
 800855a:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <std+0x64>)
 800855c:	6323      	str	r3, [r4, #48]	; 0x30
 800855e:	4b0d      	ldr	r3, [pc, #52]	; (8008594 <std+0x68>)
 8008560:	6224      	str	r4, [r4, #32]
 8008562:	429c      	cmp	r4, r3
 8008564:	d006      	beq.n	8008574 <std+0x48>
 8008566:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800856a:	4294      	cmp	r4, r2
 800856c:	d002      	beq.n	8008574 <std+0x48>
 800856e:	33d0      	adds	r3, #208	; 0xd0
 8008570:	429c      	cmp	r4, r3
 8008572:	d105      	bne.n	8008580 <std+0x54>
 8008574:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800857c:	f000 b978 	b.w	8008870 <__retarget_lock_init_recursive>
 8008580:	bd10      	pop	{r4, pc}
 8008582:	bf00      	nop
 8008584:	080086f1 	.word	0x080086f1
 8008588:	08008713 	.word	0x08008713
 800858c:	0800874b 	.word	0x0800874b
 8008590:	0800876f 	.word	0x0800876f
 8008594:	20000514 	.word	0x20000514

08008598 <stdio_exit_handler>:
 8008598:	4a02      	ldr	r2, [pc, #8]	; (80085a4 <stdio_exit_handler+0xc>)
 800859a:	4903      	ldr	r1, [pc, #12]	; (80085a8 <stdio_exit_handler+0x10>)
 800859c:	4803      	ldr	r0, [pc, #12]	; (80085ac <stdio_exit_handler+0x14>)
 800859e:	f000 b869 	b.w	8008674 <_fwalk_sglue>
 80085a2:	bf00      	nop
 80085a4:	20000024 	.word	0x20000024
 80085a8:	0800b02d 	.word	0x0800b02d
 80085ac:	20000030 	.word	0x20000030

080085b0 <cleanup_stdio>:
 80085b0:	6841      	ldr	r1, [r0, #4]
 80085b2:	4b0c      	ldr	r3, [pc, #48]	; (80085e4 <cleanup_stdio+0x34>)
 80085b4:	4299      	cmp	r1, r3
 80085b6:	b510      	push	{r4, lr}
 80085b8:	4604      	mov	r4, r0
 80085ba:	d001      	beq.n	80085c0 <cleanup_stdio+0x10>
 80085bc:	f002 fd36 	bl	800b02c <_fflush_r>
 80085c0:	68a1      	ldr	r1, [r4, #8]
 80085c2:	4b09      	ldr	r3, [pc, #36]	; (80085e8 <cleanup_stdio+0x38>)
 80085c4:	4299      	cmp	r1, r3
 80085c6:	d002      	beq.n	80085ce <cleanup_stdio+0x1e>
 80085c8:	4620      	mov	r0, r4
 80085ca:	f002 fd2f 	bl	800b02c <_fflush_r>
 80085ce:	68e1      	ldr	r1, [r4, #12]
 80085d0:	4b06      	ldr	r3, [pc, #24]	; (80085ec <cleanup_stdio+0x3c>)
 80085d2:	4299      	cmp	r1, r3
 80085d4:	d004      	beq.n	80085e0 <cleanup_stdio+0x30>
 80085d6:	4620      	mov	r0, r4
 80085d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085dc:	f002 bd26 	b.w	800b02c <_fflush_r>
 80085e0:	bd10      	pop	{r4, pc}
 80085e2:	bf00      	nop
 80085e4:	20000514 	.word	0x20000514
 80085e8:	2000057c 	.word	0x2000057c
 80085ec:	200005e4 	.word	0x200005e4

080085f0 <global_stdio_init.part.0>:
 80085f0:	b510      	push	{r4, lr}
 80085f2:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <global_stdio_init.part.0+0x30>)
 80085f4:	4c0b      	ldr	r4, [pc, #44]	; (8008624 <global_stdio_init.part.0+0x34>)
 80085f6:	4a0c      	ldr	r2, [pc, #48]	; (8008628 <global_stdio_init.part.0+0x38>)
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	4620      	mov	r0, r4
 80085fc:	2200      	movs	r2, #0
 80085fe:	2104      	movs	r1, #4
 8008600:	f7ff ff94 	bl	800852c <std>
 8008604:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008608:	2201      	movs	r2, #1
 800860a:	2109      	movs	r1, #9
 800860c:	f7ff ff8e 	bl	800852c <std>
 8008610:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008614:	2202      	movs	r2, #2
 8008616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800861a:	2112      	movs	r1, #18
 800861c:	f7ff bf86 	b.w	800852c <std>
 8008620:	2000064c 	.word	0x2000064c
 8008624:	20000514 	.word	0x20000514
 8008628:	08008599 	.word	0x08008599

0800862c <__sfp_lock_acquire>:
 800862c:	4801      	ldr	r0, [pc, #4]	; (8008634 <__sfp_lock_acquire+0x8>)
 800862e:	f000 b920 	b.w	8008872 <__retarget_lock_acquire_recursive>
 8008632:	bf00      	nop
 8008634:	20000655 	.word	0x20000655

08008638 <__sfp_lock_release>:
 8008638:	4801      	ldr	r0, [pc, #4]	; (8008640 <__sfp_lock_release+0x8>)
 800863a:	f000 b91b 	b.w	8008874 <__retarget_lock_release_recursive>
 800863e:	bf00      	nop
 8008640:	20000655 	.word	0x20000655

08008644 <__sinit>:
 8008644:	b510      	push	{r4, lr}
 8008646:	4604      	mov	r4, r0
 8008648:	f7ff fff0 	bl	800862c <__sfp_lock_acquire>
 800864c:	6a23      	ldr	r3, [r4, #32]
 800864e:	b11b      	cbz	r3, 8008658 <__sinit+0x14>
 8008650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008654:	f7ff bff0 	b.w	8008638 <__sfp_lock_release>
 8008658:	4b04      	ldr	r3, [pc, #16]	; (800866c <__sinit+0x28>)
 800865a:	6223      	str	r3, [r4, #32]
 800865c:	4b04      	ldr	r3, [pc, #16]	; (8008670 <__sinit+0x2c>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1f5      	bne.n	8008650 <__sinit+0xc>
 8008664:	f7ff ffc4 	bl	80085f0 <global_stdio_init.part.0>
 8008668:	e7f2      	b.n	8008650 <__sinit+0xc>
 800866a:	bf00      	nop
 800866c:	080085b1 	.word	0x080085b1
 8008670:	2000064c 	.word	0x2000064c

08008674 <_fwalk_sglue>:
 8008674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008678:	4607      	mov	r7, r0
 800867a:	4688      	mov	r8, r1
 800867c:	4614      	mov	r4, r2
 800867e:	2600      	movs	r6, #0
 8008680:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008684:	f1b9 0901 	subs.w	r9, r9, #1
 8008688:	d505      	bpl.n	8008696 <_fwalk_sglue+0x22>
 800868a:	6824      	ldr	r4, [r4, #0]
 800868c:	2c00      	cmp	r4, #0
 800868e:	d1f7      	bne.n	8008680 <_fwalk_sglue+0xc>
 8008690:	4630      	mov	r0, r6
 8008692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008696:	89ab      	ldrh	r3, [r5, #12]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d907      	bls.n	80086ac <_fwalk_sglue+0x38>
 800869c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086a0:	3301      	adds	r3, #1
 80086a2:	d003      	beq.n	80086ac <_fwalk_sglue+0x38>
 80086a4:	4629      	mov	r1, r5
 80086a6:	4638      	mov	r0, r7
 80086a8:	47c0      	blx	r8
 80086aa:	4306      	orrs	r6, r0
 80086ac:	3568      	adds	r5, #104	; 0x68
 80086ae:	e7e9      	b.n	8008684 <_fwalk_sglue+0x10>

080086b0 <siprintf>:
 80086b0:	b40e      	push	{r1, r2, r3}
 80086b2:	b500      	push	{lr}
 80086b4:	b09c      	sub	sp, #112	; 0x70
 80086b6:	ab1d      	add	r3, sp, #116	; 0x74
 80086b8:	9002      	str	r0, [sp, #8]
 80086ba:	9006      	str	r0, [sp, #24]
 80086bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086c0:	4809      	ldr	r0, [pc, #36]	; (80086e8 <siprintf+0x38>)
 80086c2:	9107      	str	r1, [sp, #28]
 80086c4:	9104      	str	r1, [sp, #16]
 80086c6:	4909      	ldr	r1, [pc, #36]	; (80086ec <siprintf+0x3c>)
 80086c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086cc:	9105      	str	r1, [sp, #20]
 80086ce:	6800      	ldr	r0, [r0, #0]
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	a902      	add	r1, sp, #8
 80086d4:	f002 fb26 	bl	800ad24 <_svfiprintf_r>
 80086d8:	9b02      	ldr	r3, [sp, #8]
 80086da:	2200      	movs	r2, #0
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	b01c      	add	sp, #112	; 0x70
 80086e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086e4:	b003      	add	sp, #12
 80086e6:	4770      	bx	lr
 80086e8:	2000007c 	.word	0x2000007c
 80086ec:	ffff0208 	.word	0xffff0208

080086f0 <__sread>:
 80086f0:	b510      	push	{r4, lr}
 80086f2:	460c      	mov	r4, r1
 80086f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f8:	f000 f86c 	bl	80087d4 <_read_r>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	bfab      	itete	ge
 8008700:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008702:	89a3      	ldrhlt	r3, [r4, #12]
 8008704:	181b      	addge	r3, r3, r0
 8008706:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800870a:	bfac      	ite	ge
 800870c:	6563      	strge	r3, [r4, #84]	; 0x54
 800870e:	81a3      	strhlt	r3, [r4, #12]
 8008710:	bd10      	pop	{r4, pc}

08008712 <__swrite>:
 8008712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008716:	461f      	mov	r7, r3
 8008718:	898b      	ldrh	r3, [r1, #12]
 800871a:	05db      	lsls	r3, r3, #23
 800871c:	4605      	mov	r5, r0
 800871e:	460c      	mov	r4, r1
 8008720:	4616      	mov	r6, r2
 8008722:	d505      	bpl.n	8008730 <__swrite+0x1e>
 8008724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008728:	2302      	movs	r3, #2
 800872a:	2200      	movs	r2, #0
 800872c:	f000 f840 	bl	80087b0 <_lseek_r>
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800873a:	81a3      	strh	r3, [r4, #12]
 800873c:	4632      	mov	r2, r6
 800873e:	463b      	mov	r3, r7
 8008740:	4628      	mov	r0, r5
 8008742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008746:	f000 b857 	b.w	80087f8 <_write_r>

0800874a <__sseek>:
 800874a:	b510      	push	{r4, lr}
 800874c:	460c      	mov	r4, r1
 800874e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008752:	f000 f82d 	bl	80087b0 <_lseek_r>
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	bf15      	itete	ne
 800875c:	6560      	strne	r0, [r4, #84]	; 0x54
 800875e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008766:	81a3      	strheq	r3, [r4, #12]
 8008768:	bf18      	it	ne
 800876a:	81a3      	strhne	r3, [r4, #12]
 800876c:	bd10      	pop	{r4, pc}

0800876e <__sclose>:
 800876e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008772:	f000 b80d 	b.w	8008790 <_close_r>

08008776 <memset>:
 8008776:	4402      	add	r2, r0
 8008778:	4603      	mov	r3, r0
 800877a:	4293      	cmp	r3, r2
 800877c:	d100      	bne.n	8008780 <memset+0xa>
 800877e:	4770      	bx	lr
 8008780:	f803 1b01 	strb.w	r1, [r3], #1
 8008784:	e7f9      	b.n	800877a <memset+0x4>
	...

08008788 <_localeconv_r>:
 8008788:	4800      	ldr	r0, [pc, #0]	; (800878c <_localeconv_r+0x4>)
 800878a:	4770      	bx	lr
 800878c:	20000170 	.word	0x20000170

08008790 <_close_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4d06      	ldr	r5, [pc, #24]	; (80087ac <_close_r+0x1c>)
 8008794:	2300      	movs	r3, #0
 8008796:	4604      	mov	r4, r0
 8008798:	4608      	mov	r0, r1
 800879a:	602b      	str	r3, [r5, #0]
 800879c:	f7f9 fb25 	bl	8001dea <_close>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d102      	bne.n	80087aa <_close_r+0x1a>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	b103      	cbz	r3, 80087aa <_close_r+0x1a>
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	bd38      	pop	{r3, r4, r5, pc}
 80087ac:	20000650 	.word	0x20000650

080087b0 <_lseek_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d07      	ldr	r5, [pc, #28]	; (80087d0 <_lseek_r+0x20>)
 80087b4:	4604      	mov	r4, r0
 80087b6:	4608      	mov	r0, r1
 80087b8:	4611      	mov	r1, r2
 80087ba:	2200      	movs	r2, #0
 80087bc:	602a      	str	r2, [r5, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	f7f9 fb3a 	bl	8001e38 <_lseek>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d102      	bne.n	80087ce <_lseek_r+0x1e>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	b103      	cbz	r3, 80087ce <_lseek_r+0x1e>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	20000650 	.word	0x20000650

080087d4 <_read_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4d07      	ldr	r5, [pc, #28]	; (80087f4 <_read_r+0x20>)
 80087d8:	4604      	mov	r4, r0
 80087da:	4608      	mov	r0, r1
 80087dc:	4611      	mov	r1, r2
 80087de:	2200      	movs	r2, #0
 80087e0:	602a      	str	r2, [r5, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	f7f9 fac8 	bl	8001d78 <_read>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	d102      	bne.n	80087f2 <_read_r+0x1e>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	b103      	cbz	r3, 80087f2 <_read_r+0x1e>
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	bd38      	pop	{r3, r4, r5, pc}
 80087f4:	20000650 	.word	0x20000650

080087f8 <_write_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4d07      	ldr	r5, [pc, #28]	; (8008818 <_write_r+0x20>)
 80087fc:	4604      	mov	r4, r0
 80087fe:	4608      	mov	r0, r1
 8008800:	4611      	mov	r1, r2
 8008802:	2200      	movs	r2, #0
 8008804:	602a      	str	r2, [r5, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	f7f9 fad3 	bl	8001db2 <_write>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_write_r+0x1e>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_write_r+0x1e>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	20000650 	.word	0x20000650

0800881c <__errno>:
 800881c:	4b01      	ldr	r3, [pc, #4]	; (8008824 <__errno+0x8>)
 800881e:	6818      	ldr	r0, [r3, #0]
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	2000007c 	.word	0x2000007c

08008828 <__libc_init_array>:
 8008828:	b570      	push	{r4, r5, r6, lr}
 800882a:	4d0d      	ldr	r5, [pc, #52]	; (8008860 <__libc_init_array+0x38>)
 800882c:	4c0d      	ldr	r4, [pc, #52]	; (8008864 <__libc_init_array+0x3c>)
 800882e:	1b64      	subs	r4, r4, r5
 8008830:	10a4      	asrs	r4, r4, #2
 8008832:	2600      	movs	r6, #0
 8008834:	42a6      	cmp	r6, r4
 8008836:	d109      	bne.n	800884c <__libc_init_array+0x24>
 8008838:	4d0b      	ldr	r5, [pc, #44]	; (8008868 <__libc_init_array+0x40>)
 800883a:	4c0c      	ldr	r4, [pc, #48]	; (800886c <__libc_init_array+0x44>)
 800883c:	f003 fb0c 	bl	800be58 <_init>
 8008840:	1b64      	subs	r4, r4, r5
 8008842:	10a4      	asrs	r4, r4, #2
 8008844:	2600      	movs	r6, #0
 8008846:	42a6      	cmp	r6, r4
 8008848:	d105      	bne.n	8008856 <__libc_init_array+0x2e>
 800884a:	bd70      	pop	{r4, r5, r6, pc}
 800884c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008850:	4798      	blx	r3
 8008852:	3601      	adds	r6, #1
 8008854:	e7ee      	b.n	8008834 <__libc_init_array+0xc>
 8008856:	f855 3b04 	ldr.w	r3, [r5], #4
 800885a:	4798      	blx	r3
 800885c:	3601      	adds	r6, #1
 800885e:	e7f2      	b.n	8008846 <__libc_init_array+0x1e>
 8008860:	0800c768 	.word	0x0800c768
 8008864:	0800c768 	.word	0x0800c768
 8008868:	0800c768 	.word	0x0800c768
 800886c:	0800c76c 	.word	0x0800c76c

08008870 <__retarget_lock_init_recursive>:
 8008870:	4770      	bx	lr

08008872 <__retarget_lock_acquire_recursive>:
 8008872:	4770      	bx	lr

08008874 <__retarget_lock_release_recursive>:
 8008874:	4770      	bx	lr
	...

08008878 <nanf>:
 8008878:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008880 <nanf+0x8>
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	7fc00000 	.word	0x7fc00000

08008884 <quorem>:
 8008884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008888:	6903      	ldr	r3, [r0, #16]
 800888a:	690c      	ldr	r4, [r1, #16]
 800888c:	42a3      	cmp	r3, r4
 800888e:	4607      	mov	r7, r0
 8008890:	db7e      	blt.n	8008990 <quorem+0x10c>
 8008892:	3c01      	subs	r4, #1
 8008894:	f101 0814 	add.w	r8, r1, #20
 8008898:	f100 0514 	add.w	r5, r0, #20
 800889c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088aa:	3301      	adds	r3, #1
 80088ac:	429a      	cmp	r2, r3
 80088ae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80088ba:	d331      	bcc.n	8008920 <quorem+0x9c>
 80088bc:	f04f 0e00 	mov.w	lr, #0
 80088c0:	4640      	mov	r0, r8
 80088c2:	46ac      	mov	ip, r5
 80088c4:	46f2      	mov	sl, lr
 80088c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80088ca:	b293      	uxth	r3, r2
 80088cc:	fb06 e303 	mla	r3, r6, r3, lr
 80088d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088d4:	0c1a      	lsrs	r2, r3, #16
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	ebaa 0303 	sub.w	r3, sl, r3
 80088dc:	f8dc a000 	ldr.w	sl, [ip]
 80088e0:	fa13 f38a 	uxtah	r3, r3, sl
 80088e4:	fb06 220e 	mla	r2, r6, lr, r2
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	9b00      	ldr	r3, [sp, #0]
 80088ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088f0:	b292      	uxth	r2, r2
 80088f2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80088f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088fa:	f8bd 3000 	ldrh.w	r3, [sp]
 80088fe:	4581      	cmp	r9, r0
 8008900:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008904:	f84c 3b04 	str.w	r3, [ip], #4
 8008908:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800890c:	d2db      	bcs.n	80088c6 <quorem+0x42>
 800890e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008912:	b92b      	cbnz	r3, 8008920 <quorem+0x9c>
 8008914:	9b01      	ldr	r3, [sp, #4]
 8008916:	3b04      	subs	r3, #4
 8008918:	429d      	cmp	r5, r3
 800891a:	461a      	mov	r2, r3
 800891c:	d32c      	bcc.n	8008978 <quorem+0xf4>
 800891e:	613c      	str	r4, [r7, #16]
 8008920:	4638      	mov	r0, r7
 8008922:	f001 f96b 	bl	8009bfc <__mcmp>
 8008926:	2800      	cmp	r0, #0
 8008928:	db22      	blt.n	8008970 <quorem+0xec>
 800892a:	3601      	adds	r6, #1
 800892c:	4629      	mov	r1, r5
 800892e:	2000      	movs	r0, #0
 8008930:	f858 2b04 	ldr.w	r2, [r8], #4
 8008934:	f8d1 c000 	ldr.w	ip, [r1]
 8008938:	b293      	uxth	r3, r2
 800893a:	1ac3      	subs	r3, r0, r3
 800893c:	0c12      	lsrs	r2, r2, #16
 800893e:	fa13 f38c 	uxtah	r3, r3, ip
 8008942:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008946:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800894a:	b29b      	uxth	r3, r3
 800894c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008950:	45c1      	cmp	r9, r8
 8008952:	f841 3b04 	str.w	r3, [r1], #4
 8008956:	ea4f 4022 	mov.w	r0, r2, asr #16
 800895a:	d2e9      	bcs.n	8008930 <quorem+0xac>
 800895c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008960:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008964:	b922      	cbnz	r2, 8008970 <quorem+0xec>
 8008966:	3b04      	subs	r3, #4
 8008968:	429d      	cmp	r5, r3
 800896a:	461a      	mov	r2, r3
 800896c:	d30a      	bcc.n	8008984 <quorem+0x100>
 800896e:	613c      	str	r4, [r7, #16]
 8008970:	4630      	mov	r0, r6
 8008972:	b003      	add	sp, #12
 8008974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008978:	6812      	ldr	r2, [r2, #0]
 800897a:	3b04      	subs	r3, #4
 800897c:	2a00      	cmp	r2, #0
 800897e:	d1ce      	bne.n	800891e <quorem+0x9a>
 8008980:	3c01      	subs	r4, #1
 8008982:	e7c9      	b.n	8008918 <quorem+0x94>
 8008984:	6812      	ldr	r2, [r2, #0]
 8008986:	3b04      	subs	r3, #4
 8008988:	2a00      	cmp	r2, #0
 800898a:	d1f0      	bne.n	800896e <quorem+0xea>
 800898c:	3c01      	subs	r4, #1
 800898e:	e7eb      	b.n	8008968 <quorem+0xe4>
 8008990:	2000      	movs	r0, #0
 8008992:	e7ee      	b.n	8008972 <quorem+0xee>
 8008994:	0000      	movs	r0, r0
	...

08008998 <_dtoa_r>:
 8008998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	ed2d 8b02 	vpush	{d8}
 80089a0:	69c5      	ldr	r5, [r0, #28]
 80089a2:	b091      	sub	sp, #68	; 0x44
 80089a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80089a8:	ec59 8b10 	vmov	r8, r9, d0
 80089ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80089ae:	9106      	str	r1, [sp, #24]
 80089b0:	4606      	mov	r6, r0
 80089b2:	9208      	str	r2, [sp, #32]
 80089b4:	930c      	str	r3, [sp, #48]	; 0x30
 80089b6:	b975      	cbnz	r5, 80089d6 <_dtoa_r+0x3e>
 80089b8:	2010      	movs	r0, #16
 80089ba:	f000 fda5 	bl	8009508 <malloc>
 80089be:	4602      	mov	r2, r0
 80089c0:	61f0      	str	r0, [r6, #28]
 80089c2:	b920      	cbnz	r0, 80089ce <_dtoa_r+0x36>
 80089c4:	4ba6      	ldr	r3, [pc, #664]	; (8008c60 <_dtoa_r+0x2c8>)
 80089c6:	21ef      	movs	r1, #239	; 0xef
 80089c8:	48a6      	ldr	r0, [pc, #664]	; (8008c64 <_dtoa_r+0x2cc>)
 80089ca:	f002 fba9 	bl	800b120 <__assert_func>
 80089ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089d2:	6005      	str	r5, [r0, #0]
 80089d4:	60c5      	str	r5, [r0, #12]
 80089d6:	69f3      	ldr	r3, [r6, #28]
 80089d8:	6819      	ldr	r1, [r3, #0]
 80089da:	b151      	cbz	r1, 80089f2 <_dtoa_r+0x5a>
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	604a      	str	r2, [r1, #4]
 80089e0:	2301      	movs	r3, #1
 80089e2:	4093      	lsls	r3, r2
 80089e4:	608b      	str	r3, [r1, #8]
 80089e6:	4630      	mov	r0, r6
 80089e8:	f000 fe82 	bl	80096f0 <_Bfree>
 80089ec:	69f3      	ldr	r3, [r6, #28]
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	f1b9 0300 	subs.w	r3, r9, #0
 80089f6:	bfbb      	ittet	lt
 80089f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089fc:	9303      	strlt	r3, [sp, #12]
 80089fe:	2300      	movge	r3, #0
 8008a00:	2201      	movlt	r2, #1
 8008a02:	bfac      	ite	ge
 8008a04:	6023      	strge	r3, [r4, #0]
 8008a06:	6022      	strlt	r2, [r4, #0]
 8008a08:	4b97      	ldr	r3, [pc, #604]	; (8008c68 <_dtoa_r+0x2d0>)
 8008a0a:	9c03      	ldr	r4, [sp, #12]
 8008a0c:	43a3      	bics	r3, r4
 8008a0e:	d11c      	bne.n	8008a4a <_dtoa_r+0xb2>
 8008a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a12:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a16:	6013      	str	r3, [r2, #0]
 8008a18:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008a1c:	ea53 0308 	orrs.w	r3, r3, r8
 8008a20:	f000 84fb 	beq.w	800941a <_dtoa_r+0xa82>
 8008a24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a26:	b963      	cbnz	r3, 8008a42 <_dtoa_r+0xaa>
 8008a28:	4b90      	ldr	r3, [pc, #576]	; (8008c6c <_dtoa_r+0x2d4>)
 8008a2a:	e020      	b.n	8008a6e <_dtoa_r+0xd6>
 8008a2c:	4b90      	ldr	r3, [pc, #576]	; (8008c70 <_dtoa_r+0x2d8>)
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	3308      	adds	r3, #8
 8008a32:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008a34:	6013      	str	r3, [r2, #0]
 8008a36:	9801      	ldr	r0, [sp, #4]
 8008a38:	b011      	add	sp, #68	; 0x44
 8008a3a:	ecbd 8b02 	vpop	{d8}
 8008a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a42:	4b8a      	ldr	r3, [pc, #552]	; (8008c6c <_dtoa_r+0x2d4>)
 8008a44:	9301      	str	r3, [sp, #4]
 8008a46:	3303      	adds	r3, #3
 8008a48:	e7f3      	b.n	8008a32 <_dtoa_r+0x9a>
 8008a4a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008a4e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a56:	d10c      	bne.n	8008a72 <_dtoa_r+0xda>
 8008a58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f000 84d7 	beq.w	8009414 <_dtoa_r+0xa7c>
 8008a66:	4b83      	ldr	r3, [pc, #524]	; (8008c74 <_dtoa_r+0x2dc>)
 8008a68:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008a6a:	6013      	str	r3, [r2, #0]
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	9301      	str	r3, [sp, #4]
 8008a70:	e7e1      	b.n	8008a36 <_dtoa_r+0x9e>
 8008a72:	aa0e      	add	r2, sp, #56	; 0x38
 8008a74:	a90f      	add	r1, sp, #60	; 0x3c
 8008a76:	4630      	mov	r0, r6
 8008a78:	eeb0 0b48 	vmov.f64	d0, d8
 8008a7c:	f001 f9d4 	bl	8009e28 <__d2b>
 8008a80:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8008a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a86:	4605      	mov	r5, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d046      	beq.n	8008b1a <_dtoa_r+0x182>
 8008a8c:	eeb0 7b48 	vmov.f64	d7, d8
 8008a90:	ee18 1a90 	vmov	r1, s17
 8008a94:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008a98:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008a9c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008aa0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	ee07 1a90 	vmov	s15, r1
 8008aaa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8008aae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008c48 <_dtoa_r+0x2b0>
 8008ab2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008ab6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008c50 <_dtoa_r+0x2b8>
 8008aba:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008abe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008c58 <_dtoa_r+0x2c0>
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008aca:	eeb0 7b46 	vmov.f64	d7, d6
 8008ace:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008ad2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008ad6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ade:	ee16 ba90 	vmov	fp, s13
 8008ae2:	9009      	str	r0, [sp, #36]	; 0x24
 8008ae4:	d508      	bpl.n	8008af8 <_dtoa_r+0x160>
 8008ae6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008aea:	eeb4 6b47 	vcmp.f64	d6, d7
 8008aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008af2:	bf18      	it	ne
 8008af4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008af8:	f1bb 0f16 	cmp.w	fp, #22
 8008afc:	d82b      	bhi.n	8008b56 <_dtoa_r+0x1be>
 8008afe:	495e      	ldr	r1, [pc, #376]	; (8008c78 <_dtoa_r+0x2e0>)
 8008b00:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8008b04:	ed91 7b00 	vldr	d7, [r1]
 8008b08:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b10:	d501      	bpl.n	8008b16 <_dtoa_r+0x17e>
 8008b12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b16:	2100      	movs	r1, #0
 8008b18:	e01e      	b.n	8008b58 <_dtoa_r+0x1c0>
 8008b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8008b22:	2920      	cmp	r1, #32
 8008b24:	bfc1      	itttt	gt
 8008b26:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8008b2a:	408c      	lslgt	r4, r1
 8008b2c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8008b30:	fa28 f101 	lsrgt.w	r1, r8, r1
 8008b34:	bfd6      	itet	le
 8008b36:	f1c1 0120 	rsble	r1, r1, #32
 8008b3a:	4321      	orrgt	r1, r4
 8008b3c:	fa08 f101 	lslle.w	r1, r8, r1
 8008b40:	ee07 1a90 	vmov	s15, r1
 8008b44:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	ee17 1a90 	vmov	r1, s15
 8008b4e:	2001      	movs	r0, #1
 8008b50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008b54:	e7a7      	b.n	8008aa6 <_dtoa_r+0x10e>
 8008b56:	2101      	movs	r1, #1
 8008b58:	1ad2      	subs	r2, r2, r3
 8008b5a:	1e53      	subs	r3, r2, #1
 8008b5c:	9305      	str	r3, [sp, #20]
 8008b5e:	bf45      	ittet	mi
 8008b60:	f1c2 0301 	rsbmi	r3, r2, #1
 8008b64:	9304      	strmi	r3, [sp, #16]
 8008b66:	2300      	movpl	r3, #0
 8008b68:	2300      	movmi	r3, #0
 8008b6a:	bf4c      	ite	mi
 8008b6c:	9305      	strmi	r3, [sp, #20]
 8008b6e:	9304      	strpl	r3, [sp, #16]
 8008b70:	f1bb 0f00 	cmp.w	fp, #0
 8008b74:	910b      	str	r1, [sp, #44]	; 0x2c
 8008b76:	db18      	blt.n	8008baa <_dtoa_r+0x212>
 8008b78:	9b05      	ldr	r3, [sp, #20]
 8008b7a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008b7e:	445b      	add	r3, fp
 8008b80:	9305      	str	r3, [sp, #20]
 8008b82:	2300      	movs	r3, #0
 8008b84:	9a06      	ldr	r2, [sp, #24]
 8008b86:	2a09      	cmp	r2, #9
 8008b88:	d848      	bhi.n	8008c1c <_dtoa_r+0x284>
 8008b8a:	2a05      	cmp	r2, #5
 8008b8c:	bfc4      	itt	gt
 8008b8e:	3a04      	subgt	r2, #4
 8008b90:	9206      	strgt	r2, [sp, #24]
 8008b92:	9a06      	ldr	r2, [sp, #24]
 8008b94:	f1a2 0202 	sub.w	r2, r2, #2
 8008b98:	bfcc      	ite	gt
 8008b9a:	2400      	movgt	r4, #0
 8008b9c:	2401      	movle	r4, #1
 8008b9e:	2a03      	cmp	r2, #3
 8008ba0:	d847      	bhi.n	8008c32 <_dtoa_r+0x29a>
 8008ba2:	e8df f002 	tbb	[pc, r2]
 8008ba6:	2d0b      	.short	0x2d0b
 8008ba8:	392b      	.short	0x392b
 8008baa:	9b04      	ldr	r3, [sp, #16]
 8008bac:	2200      	movs	r2, #0
 8008bae:	eba3 030b 	sub.w	r3, r3, fp
 8008bb2:	9304      	str	r3, [sp, #16]
 8008bb4:	920a      	str	r2, [sp, #40]	; 0x28
 8008bb6:	f1cb 0300 	rsb	r3, fp, #0
 8008bba:	e7e3      	b.n	8008b84 <_dtoa_r+0x1ec>
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	9207      	str	r2, [sp, #28]
 8008bc0:	9a08      	ldr	r2, [sp, #32]
 8008bc2:	2a00      	cmp	r2, #0
 8008bc4:	dc38      	bgt.n	8008c38 <_dtoa_r+0x2a0>
 8008bc6:	f04f 0a01 	mov.w	sl, #1
 8008bca:	46d1      	mov	r9, sl
 8008bcc:	4652      	mov	r2, sl
 8008bce:	f8cd a020 	str.w	sl, [sp, #32]
 8008bd2:	69f7      	ldr	r7, [r6, #28]
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	2004      	movs	r0, #4
 8008bd8:	f100 0c14 	add.w	ip, r0, #20
 8008bdc:	4594      	cmp	ip, r2
 8008bde:	d930      	bls.n	8008c42 <_dtoa_r+0x2aa>
 8008be0:	6079      	str	r1, [r7, #4]
 8008be2:	4630      	mov	r0, r6
 8008be4:	930d      	str	r3, [sp, #52]	; 0x34
 8008be6:	f000 fd43 	bl	8009670 <_Balloc>
 8008bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bec:	9001      	str	r0, [sp, #4]
 8008bee:	4602      	mov	r2, r0
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d145      	bne.n	8008c80 <_dtoa_r+0x2e8>
 8008bf4:	4b21      	ldr	r3, [pc, #132]	; (8008c7c <_dtoa_r+0x2e4>)
 8008bf6:	f240 11af 	movw	r1, #431	; 0x1af
 8008bfa:	e6e5      	b.n	80089c8 <_dtoa_r+0x30>
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	e7de      	b.n	8008bbe <_dtoa_r+0x226>
 8008c00:	2200      	movs	r2, #0
 8008c02:	9207      	str	r2, [sp, #28]
 8008c04:	9a08      	ldr	r2, [sp, #32]
 8008c06:	eb0b 0a02 	add.w	sl, fp, r2
 8008c0a:	f10a 0901 	add.w	r9, sl, #1
 8008c0e:	464a      	mov	r2, r9
 8008c10:	2a01      	cmp	r2, #1
 8008c12:	bfb8      	it	lt
 8008c14:	2201      	movlt	r2, #1
 8008c16:	e7dc      	b.n	8008bd2 <_dtoa_r+0x23a>
 8008c18:	2201      	movs	r2, #1
 8008c1a:	e7f2      	b.n	8008c02 <_dtoa_r+0x26a>
 8008c1c:	2401      	movs	r4, #1
 8008c1e:	2200      	movs	r2, #0
 8008c20:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008c24:	f04f 3aff 	mov.w	sl, #4294967295
 8008c28:	2100      	movs	r1, #0
 8008c2a:	46d1      	mov	r9, sl
 8008c2c:	2212      	movs	r2, #18
 8008c2e:	9108      	str	r1, [sp, #32]
 8008c30:	e7cf      	b.n	8008bd2 <_dtoa_r+0x23a>
 8008c32:	2201      	movs	r2, #1
 8008c34:	9207      	str	r2, [sp, #28]
 8008c36:	e7f5      	b.n	8008c24 <_dtoa_r+0x28c>
 8008c38:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008c3c:	46d1      	mov	r9, sl
 8008c3e:	4652      	mov	r2, sl
 8008c40:	e7c7      	b.n	8008bd2 <_dtoa_r+0x23a>
 8008c42:	3101      	adds	r1, #1
 8008c44:	0040      	lsls	r0, r0, #1
 8008c46:	e7c7      	b.n	8008bd8 <_dtoa_r+0x240>
 8008c48:	636f4361 	.word	0x636f4361
 8008c4c:	3fd287a7 	.word	0x3fd287a7
 8008c50:	8b60c8b3 	.word	0x8b60c8b3
 8008c54:	3fc68a28 	.word	0x3fc68a28
 8008c58:	509f79fb 	.word	0x509f79fb
 8008c5c:	3fd34413 	.word	0x3fd34413
 8008c60:	0800c37a 	.word	0x0800c37a
 8008c64:	0800c391 	.word	0x0800c391
 8008c68:	7ff00000 	.word	0x7ff00000
 8008c6c:	0800c376 	.word	0x0800c376
 8008c70:	0800c36d 	.word	0x0800c36d
 8008c74:	0800c345 	.word	0x0800c345
 8008c78:	0800c480 	.word	0x0800c480
 8008c7c:	0800c3e9 	.word	0x0800c3e9
 8008c80:	69f2      	ldr	r2, [r6, #28]
 8008c82:	9901      	ldr	r1, [sp, #4]
 8008c84:	6011      	str	r1, [r2, #0]
 8008c86:	f1b9 0f0e 	cmp.w	r9, #14
 8008c8a:	d86c      	bhi.n	8008d66 <_dtoa_r+0x3ce>
 8008c8c:	2c00      	cmp	r4, #0
 8008c8e:	d06a      	beq.n	8008d66 <_dtoa_r+0x3ce>
 8008c90:	f1bb 0f00 	cmp.w	fp, #0
 8008c94:	f340 80a0 	ble.w	8008dd8 <_dtoa_r+0x440>
 8008c98:	4ac1      	ldr	r2, [pc, #772]	; (8008fa0 <_dtoa_r+0x608>)
 8008c9a:	f00b 010f 	and.w	r1, fp, #15
 8008c9e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008ca2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008ca6:	ed92 7b00 	vldr	d7, [r2]
 8008caa:	ea4f 122b 	mov.w	r2, fp, asr #4
 8008cae:	f000 8087 	beq.w	8008dc0 <_dtoa_r+0x428>
 8008cb2:	49bc      	ldr	r1, [pc, #752]	; (8008fa4 <_dtoa_r+0x60c>)
 8008cb4:	ed91 6b08 	vldr	d6, [r1, #32]
 8008cb8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008cbc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008cc0:	f002 020f 	and.w	r2, r2, #15
 8008cc4:	2103      	movs	r1, #3
 8008cc6:	48b7      	ldr	r0, [pc, #732]	; (8008fa4 <_dtoa_r+0x60c>)
 8008cc8:	2a00      	cmp	r2, #0
 8008cca:	d17b      	bne.n	8008dc4 <_dtoa_r+0x42c>
 8008ccc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008cd0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008cd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008cd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cda:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cde:	2a00      	cmp	r2, #0
 8008ce0:	f000 80a0 	beq.w	8008e24 <_dtoa_r+0x48c>
 8008ce4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008ce8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf0:	f140 8098 	bpl.w	8008e24 <_dtoa_r+0x48c>
 8008cf4:	f1b9 0f00 	cmp.w	r9, #0
 8008cf8:	f000 8094 	beq.w	8008e24 <_dtoa_r+0x48c>
 8008cfc:	f1ba 0f00 	cmp.w	sl, #0
 8008d00:	dd2f      	ble.n	8008d62 <_dtoa_r+0x3ca>
 8008d02:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008d06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d0a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d0e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008d12:	3101      	adds	r1, #1
 8008d14:	4654      	mov	r4, sl
 8008d16:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008d1a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008d1e:	ee07 1a90 	vmov	s15, r1
 8008d22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008d26:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008d2a:	ee15 7a90 	vmov	r7, s11
 8008d2e:	ec51 0b15 	vmov	r0, r1, d5
 8008d32:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8008d36:	2c00      	cmp	r4, #0
 8008d38:	d177      	bne.n	8008e2a <_dtoa_r+0x492>
 8008d3a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008d3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008d42:	ec41 0b17 	vmov	d7, r0, r1
 8008d46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d4e:	f300 826a 	bgt.w	8009226 <_dtoa_r+0x88e>
 8008d52:	eeb1 7b47 	vneg.f64	d7, d7
 8008d56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5e:	f100 8260 	bmi.w	8009222 <_dtoa_r+0x88a>
 8008d62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008d66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d68:	2a00      	cmp	r2, #0
 8008d6a:	f2c0 811d 	blt.w	8008fa8 <_dtoa_r+0x610>
 8008d6e:	f1bb 0f0e 	cmp.w	fp, #14
 8008d72:	f300 8119 	bgt.w	8008fa8 <_dtoa_r+0x610>
 8008d76:	4b8a      	ldr	r3, [pc, #552]	; (8008fa0 <_dtoa_r+0x608>)
 8008d78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d7c:	ed93 6b00 	vldr	d6, [r3]
 8008d80:	9b08      	ldr	r3, [sp, #32]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f280 80b7 	bge.w	8008ef6 <_dtoa_r+0x55e>
 8008d88:	f1b9 0f00 	cmp.w	r9, #0
 8008d8c:	f300 80b3 	bgt.w	8008ef6 <_dtoa_r+0x55e>
 8008d90:	f040 8246 	bne.w	8009220 <_dtoa_r+0x888>
 8008d94:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008d98:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008d9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008da0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da8:	464c      	mov	r4, r9
 8008daa:	464f      	mov	r7, r9
 8008dac:	f280 821c 	bge.w	80091e8 <_dtoa_r+0x850>
 8008db0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008db4:	2331      	movs	r3, #49	; 0x31
 8008db6:	f808 3b01 	strb.w	r3, [r8], #1
 8008dba:	f10b 0b01 	add.w	fp, fp, #1
 8008dbe:	e218      	b.n	80091f2 <_dtoa_r+0x85a>
 8008dc0:	2102      	movs	r1, #2
 8008dc2:	e780      	b.n	8008cc6 <_dtoa_r+0x32e>
 8008dc4:	07d4      	lsls	r4, r2, #31
 8008dc6:	d504      	bpl.n	8008dd2 <_dtoa_r+0x43a>
 8008dc8:	ed90 6b00 	vldr	d6, [r0]
 8008dcc:	3101      	adds	r1, #1
 8008dce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008dd2:	1052      	asrs	r2, r2, #1
 8008dd4:	3008      	adds	r0, #8
 8008dd6:	e777      	b.n	8008cc8 <_dtoa_r+0x330>
 8008dd8:	d022      	beq.n	8008e20 <_dtoa_r+0x488>
 8008dda:	f1cb 0200 	rsb	r2, fp, #0
 8008dde:	4970      	ldr	r1, [pc, #448]	; (8008fa0 <_dtoa_r+0x608>)
 8008de0:	f002 000f 	and.w	r0, r2, #15
 8008de4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008de8:	ed91 7b00 	vldr	d7, [r1]
 8008dec:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008df0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008df4:	486b      	ldr	r0, [pc, #428]	; (8008fa4 <_dtoa_r+0x60c>)
 8008df6:	1112      	asrs	r2, r2, #4
 8008df8:	2400      	movs	r4, #0
 8008dfa:	2102      	movs	r1, #2
 8008dfc:	b92a      	cbnz	r2, 8008e0a <_dtoa_r+0x472>
 8008dfe:	2c00      	cmp	r4, #0
 8008e00:	f43f af6a 	beq.w	8008cd8 <_dtoa_r+0x340>
 8008e04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e08:	e766      	b.n	8008cd8 <_dtoa_r+0x340>
 8008e0a:	07d7      	lsls	r7, r2, #31
 8008e0c:	d505      	bpl.n	8008e1a <_dtoa_r+0x482>
 8008e0e:	ed90 6b00 	vldr	d6, [r0]
 8008e12:	3101      	adds	r1, #1
 8008e14:	2401      	movs	r4, #1
 8008e16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e1a:	1052      	asrs	r2, r2, #1
 8008e1c:	3008      	adds	r0, #8
 8008e1e:	e7ed      	b.n	8008dfc <_dtoa_r+0x464>
 8008e20:	2102      	movs	r1, #2
 8008e22:	e759      	b.n	8008cd8 <_dtoa_r+0x340>
 8008e24:	465a      	mov	r2, fp
 8008e26:	464c      	mov	r4, r9
 8008e28:	e775      	b.n	8008d16 <_dtoa_r+0x37e>
 8008e2a:	ec41 0b17 	vmov	d7, r0, r1
 8008e2e:	495c      	ldr	r1, [pc, #368]	; (8008fa0 <_dtoa_r+0x608>)
 8008e30:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8008e34:	ed11 4b02 	vldr	d4, [r1, #-8]
 8008e38:	9901      	ldr	r1, [sp, #4]
 8008e3a:	440c      	add	r4, r1
 8008e3c:	9907      	ldr	r1, [sp, #28]
 8008e3e:	b351      	cbz	r1, 8008e96 <_dtoa_r+0x4fe>
 8008e40:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008e44:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008e48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008e4c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008e50:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008e54:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008e58:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008e5c:	ee14 1a90 	vmov	r1, s9
 8008e60:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008e64:	3130      	adds	r1, #48	; 0x30
 8008e66:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008e6a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e72:	f808 1b01 	strb.w	r1, [r8], #1
 8008e76:	d439      	bmi.n	8008eec <_dtoa_r+0x554>
 8008e78:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008e7c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e84:	d472      	bmi.n	8008f6c <_dtoa_r+0x5d4>
 8008e86:	45a0      	cmp	r8, r4
 8008e88:	f43f af6b 	beq.w	8008d62 <_dtoa_r+0x3ca>
 8008e8c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008e90:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008e94:	e7e0      	b.n	8008e58 <_dtoa_r+0x4c0>
 8008e96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008e9a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008ea4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008ea8:	ee14 1a90 	vmov	r1, s9
 8008eac:	3130      	adds	r1, #48	; 0x30
 8008eae:	f808 1b01 	strb.w	r1, [r8], #1
 8008eb2:	45a0      	cmp	r8, r4
 8008eb4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008eb8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008ebc:	d118      	bne.n	8008ef0 <_dtoa_r+0x558>
 8008ebe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008ec2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008ec6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ece:	dc4d      	bgt.n	8008f6c <_dtoa_r+0x5d4>
 8008ed0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008ed4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008edc:	f57f af41 	bpl.w	8008d62 <_dtoa_r+0x3ca>
 8008ee0:	4680      	mov	r8, r0
 8008ee2:	3801      	subs	r0, #1
 8008ee4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008ee8:	2b30      	cmp	r3, #48	; 0x30
 8008eea:	d0f9      	beq.n	8008ee0 <_dtoa_r+0x548>
 8008eec:	4693      	mov	fp, r2
 8008eee:	e02a      	b.n	8008f46 <_dtoa_r+0x5ae>
 8008ef0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008ef4:	e7d6      	b.n	8008ea4 <_dtoa_r+0x50c>
 8008ef6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008efa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008efe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008f02:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008f06:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008f0a:	ee15 3a10 	vmov	r3, s10
 8008f0e:	3330      	adds	r3, #48	; 0x30
 8008f10:	f808 3b01 	strb.w	r3, [r8], #1
 8008f14:	9b01      	ldr	r3, [sp, #4]
 8008f16:	eba8 0303 	sub.w	r3, r8, r3
 8008f1a:	4599      	cmp	r9, r3
 8008f1c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008f20:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008f24:	d133      	bne.n	8008f8e <_dtoa_r+0x5f6>
 8008f26:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008f2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f32:	dc1a      	bgt.n	8008f6a <_dtoa_r+0x5d2>
 8008f34:	eeb4 7b46 	vcmp.f64	d7, d6
 8008f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f3c:	d103      	bne.n	8008f46 <_dtoa_r+0x5ae>
 8008f3e:	ee15 3a10 	vmov	r3, s10
 8008f42:	07d9      	lsls	r1, r3, #31
 8008f44:	d411      	bmi.n	8008f6a <_dtoa_r+0x5d2>
 8008f46:	4629      	mov	r1, r5
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f000 fbd1 	bl	80096f0 <_Bfree>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f52:	f888 3000 	strb.w	r3, [r8]
 8008f56:	f10b 0301 	add.w	r3, fp, #1
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f43f ad69 	beq.w	8008a36 <_dtoa_r+0x9e>
 8008f64:	f8c3 8000 	str.w	r8, [r3]
 8008f68:	e565      	b.n	8008a36 <_dtoa_r+0x9e>
 8008f6a:	465a      	mov	r2, fp
 8008f6c:	4643      	mov	r3, r8
 8008f6e:	4698      	mov	r8, r3
 8008f70:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8008f74:	2939      	cmp	r1, #57	; 0x39
 8008f76:	d106      	bne.n	8008f86 <_dtoa_r+0x5ee>
 8008f78:	9901      	ldr	r1, [sp, #4]
 8008f7a:	4299      	cmp	r1, r3
 8008f7c:	d1f7      	bne.n	8008f6e <_dtoa_r+0x5d6>
 8008f7e:	9801      	ldr	r0, [sp, #4]
 8008f80:	2130      	movs	r1, #48	; 0x30
 8008f82:	3201      	adds	r2, #1
 8008f84:	7001      	strb	r1, [r0, #0]
 8008f86:	7819      	ldrb	r1, [r3, #0]
 8008f88:	3101      	adds	r1, #1
 8008f8a:	7019      	strb	r1, [r3, #0]
 8008f8c:	e7ae      	b.n	8008eec <_dtoa_r+0x554>
 8008f8e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008f92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f9a:	d1b2      	bne.n	8008f02 <_dtoa_r+0x56a>
 8008f9c:	e7d3      	b.n	8008f46 <_dtoa_r+0x5ae>
 8008f9e:	bf00      	nop
 8008fa0:	0800c480 	.word	0x0800c480
 8008fa4:	0800c458 	.word	0x0800c458
 8008fa8:	9907      	ldr	r1, [sp, #28]
 8008faa:	2900      	cmp	r1, #0
 8008fac:	f000 80d0 	beq.w	8009150 <_dtoa_r+0x7b8>
 8008fb0:	9906      	ldr	r1, [sp, #24]
 8008fb2:	2901      	cmp	r1, #1
 8008fb4:	f300 80b4 	bgt.w	8009120 <_dtoa_r+0x788>
 8008fb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fba:	2900      	cmp	r1, #0
 8008fbc:	f000 80ac 	beq.w	8009118 <_dtoa_r+0x780>
 8008fc0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008fc4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008fc8:	461c      	mov	r4, r3
 8008fca:	9309      	str	r3, [sp, #36]	; 0x24
 8008fcc:	9b04      	ldr	r3, [sp, #16]
 8008fce:	4413      	add	r3, r2
 8008fd0:	9304      	str	r3, [sp, #16]
 8008fd2:	9b05      	ldr	r3, [sp, #20]
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	4413      	add	r3, r2
 8008fd8:	4630      	mov	r0, r6
 8008fda:	9305      	str	r3, [sp, #20]
 8008fdc:	f000 fc88 	bl	80098f0 <__i2b>
 8008fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe2:	4607      	mov	r7, r0
 8008fe4:	f1b8 0f00 	cmp.w	r8, #0
 8008fe8:	d00d      	beq.n	8009006 <_dtoa_r+0x66e>
 8008fea:	9a05      	ldr	r2, [sp, #20]
 8008fec:	2a00      	cmp	r2, #0
 8008fee:	dd0a      	ble.n	8009006 <_dtoa_r+0x66e>
 8008ff0:	4542      	cmp	r2, r8
 8008ff2:	9904      	ldr	r1, [sp, #16]
 8008ff4:	bfa8      	it	ge
 8008ff6:	4642      	movge	r2, r8
 8008ff8:	1a89      	subs	r1, r1, r2
 8008ffa:	9104      	str	r1, [sp, #16]
 8008ffc:	9905      	ldr	r1, [sp, #20]
 8008ffe:	eba8 0802 	sub.w	r8, r8, r2
 8009002:	1a8a      	subs	r2, r1, r2
 8009004:	9205      	str	r2, [sp, #20]
 8009006:	b303      	cbz	r3, 800904a <_dtoa_r+0x6b2>
 8009008:	9a07      	ldr	r2, [sp, #28]
 800900a:	2a00      	cmp	r2, #0
 800900c:	f000 80a5 	beq.w	800915a <_dtoa_r+0x7c2>
 8009010:	2c00      	cmp	r4, #0
 8009012:	dd13      	ble.n	800903c <_dtoa_r+0x6a4>
 8009014:	4639      	mov	r1, r7
 8009016:	4622      	mov	r2, r4
 8009018:	4630      	mov	r0, r6
 800901a:	930d      	str	r3, [sp, #52]	; 0x34
 800901c:	f000 fd28 	bl	8009a70 <__pow5mult>
 8009020:	462a      	mov	r2, r5
 8009022:	4601      	mov	r1, r0
 8009024:	4607      	mov	r7, r0
 8009026:	4630      	mov	r0, r6
 8009028:	f000 fc78 	bl	800991c <__multiply>
 800902c:	4629      	mov	r1, r5
 800902e:	9009      	str	r0, [sp, #36]	; 0x24
 8009030:	4630      	mov	r0, r6
 8009032:	f000 fb5d 	bl	80096f0 <_Bfree>
 8009036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800903a:	4615      	mov	r5, r2
 800903c:	1b1a      	subs	r2, r3, r4
 800903e:	d004      	beq.n	800904a <_dtoa_r+0x6b2>
 8009040:	4629      	mov	r1, r5
 8009042:	4630      	mov	r0, r6
 8009044:	f000 fd14 	bl	8009a70 <__pow5mult>
 8009048:	4605      	mov	r5, r0
 800904a:	2101      	movs	r1, #1
 800904c:	4630      	mov	r0, r6
 800904e:	f000 fc4f 	bl	80098f0 <__i2b>
 8009052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009054:	2b00      	cmp	r3, #0
 8009056:	4604      	mov	r4, r0
 8009058:	f340 8081 	ble.w	800915e <_dtoa_r+0x7c6>
 800905c:	461a      	mov	r2, r3
 800905e:	4601      	mov	r1, r0
 8009060:	4630      	mov	r0, r6
 8009062:	f000 fd05 	bl	8009a70 <__pow5mult>
 8009066:	9b06      	ldr	r3, [sp, #24]
 8009068:	2b01      	cmp	r3, #1
 800906a:	4604      	mov	r4, r0
 800906c:	dd7a      	ble.n	8009164 <_dtoa_r+0x7cc>
 800906e:	2300      	movs	r3, #0
 8009070:	9309      	str	r3, [sp, #36]	; 0x24
 8009072:	6922      	ldr	r2, [r4, #16]
 8009074:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009078:	6910      	ldr	r0, [r2, #16]
 800907a:	f000 fbeb 	bl	8009854 <__hi0bits>
 800907e:	f1c0 0020 	rsb	r0, r0, #32
 8009082:	9b05      	ldr	r3, [sp, #20]
 8009084:	4418      	add	r0, r3
 8009086:	f010 001f 	ands.w	r0, r0, #31
 800908a:	f000 8093 	beq.w	80091b4 <_dtoa_r+0x81c>
 800908e:	f1c0 0220 	rsb	r2, r0, #32
 8009092:	2a04      	cmp	r2, #4
 8009094:	f340 8085 	ble.w	80091a2 <_dtoa_r+0x80a>
 8009098:	9b04      	ldr	r3, [sp, #16]
 800909a:	f1c0 001c 	rsb	r0, r0, #28
 800909e:	4403      	add	r3, r0
 80090a0:	9304      	str	r3, [sp, #16]
 80090a2:	9b05      	ldr	r3, [sp, #20]
 80090a4:	4480      	add	r8, r0
 80090a6:	4403      	add	r3, r0
 80090a8:	9305      	str	r3, [sp, #20]
 80090aa:	9b04      	ldr	r3, [sp, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	dd05      	ble.n	80090bc <_dtoa_r+0x724>
 80090b0:	4629      	mov	r1, r5
 80090b2:	461a      	mov	r2, r3
 80090b4:	4630      	mov	r0, r6
 80090b6:	f000 fd35 	bl	8009b24 <__lshift>
 80090ba:	4605      	mov	r5, r0
 80090bc:	9b05      	ldr	r3, [sp, #20]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	dd05      	ble.n	80090ce <_dtoa_r+0x736>
 80090c2:	4621      	mov	r1, r4
 80090c4:	461a      	mov	r2, r3
 80090c6:	4630      	mov	r0, r6
 80090c8:	f000 fd2c 	bl	8009b24 <__lshift>
 80090cc:	4604      	mov	r4, r0
 80090ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d071      	beq.n	80091b8 <_dtoa_r+0x820>
 80090d4:	4621      	mov	r1, r4
 80090d6:	4628      	mov	r0, r5
 80090d8:	f000 fd90 	bl	8009bfc <__mcmp>
 80090dc:	2800      	cmp	r0, #0
 80090de:	da6b      	bge.n	80091b8 <_dtoa_r+0x820>
 80090e0:	2300      	movs	r3, #0
 80090e2:	4629      	mov	r1, r5
 80090e4:	220a      	movs	r2, #10
 80090e6:	4630      	mov	r0, r6
 80090e8:	f000 fb24 	bl	8009734 <__multadd>
 80090ec:	9b07      	ldr	r3, [sp, #28]
 80090ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090f2:	4605      	mov	r5, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 8197 	beq.w	8009428 <_dtoa_r+0xa90>
 80090fa:	4639      	mov	r1, r7
 80090fc:	2300      	movs	r3, #0
 80090fe:	220a      	movs	r2, #10
 8009100:	4630      	mov	r0, r6
 8009102:	f000 fb17 	bl	8009734 <__multadd>
 8009106:	f1ba 0f00 	cmp.w	sl, #0
 800910a:	4607      	mov	r7, r0
 800910c:	f300 8093 	bgt.w	8009236 <_dtoa_r+0x89e>
 8009110:	9b06      	ldr	r3, [sp, #24]
 8009112:	2b02      	cmp	r3, #2
 8009114:	dc57      	bgt.n	80091c6 <_dtoa_r+0x82e>
 8009116:	e08e      	b.n	8009236 <_dtoa_r+0x89e>
 8009118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800911a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800911e:	e751      	b.n	8008fc4 <_dtoa_r+0x62c>
 8009120:	f109 34ff 	add.w	r4, r9, #4294967295
 8009124:	42a3      	cmp	r3, r4
 8009126:	bfbf      	itttt	lt
 8009128:	1ae2      	sublt	r2, r4, r3
 800912a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800912c:	189b      	addlt	r3, r3, r2
 800912e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009130:	bfae      	itee	ge
 8009132:	1b1c      	subge	r4, r3, r4
 8009134:	4623      	movlt	r3, r4
 8009136:	2400      	movlt	r4, #0
 8009138:	f1b9 0f00 	cmp.w	r9, #0
 800913c:	bfb5      	itete	lt
 800913e:	9a04      	ldrlt	r2, [sp, #16]
 8009140:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009144:	eba2 0809 	sublt.w	r8, r2, r9
 8009148:	464a      	movge	r2, r9
 800914a:	bfb8      	it	lt
 800914c:	2200      	movlt	r2, #0
 800914e:	e73c      	b.n	8008fca <_dtoa_r+0x632>
 8009150:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009154:	9f07      	ldr	r7, [sp, #28]
 8009156:	461c      	mov	r4, r3
 8009158:	e744      	b.n	8008fe4 <_dtoa_r+0x64c>
 800915a:	461a      	mov	r2, r3
 800915c:	e770      	b.n	8009040 <_dtoa_r+0x6a8>
 800915e:	9b06      	ldr	r3, [sp, #24]
 8009160:	2b01      	cmp	r3, #1
 8009162:	dc18      	bgt.n	8009196 <_dtoa_r+0x7fe>
 8009164:	9b02      	ldr	r3, [sp, #8]
 8009166:	b9b3      	cbnz	r3, 8009196 <_dtoa_r+0x7fe>
 8009168:	9b03      	ldr	r3, [sp, #12]
 800916a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800916e:	b9a2      	cbnz	r2, 800919a <_dtoa_r+0x802>
 8009170:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009174:	0d12      	lsrs	r2, r2, #20
 8009176:	0512      	lsls	r2, r2, #20
 8009178:	b18a      	cbz	r2, 800919e <_dtoa_r+0x806>
 800917a:	9b04      	ldr	r3, [sp, #16]
 800917c:	3301      	adds	r3, #1
 800917e:	9304      	str	r3, [sp, #16]
 8009180:	9b05      	ldr	r3, [sp, #20]
 8009182:	3301      	adds	r3, #1
 8009184:	9305      	str	r3, [sp, #20]
 8009186:	2301      	movs	r3, #1
 8009188:	9309      	str	r3, [sp, #36]	; 0x24
 800918a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800918c:	2b00      	cmp	r3, #0
 800918e:	f47f af70 	bne.w	8009072 <_dtoa_r+0x6da>
 8009192:	2001      	movs	r0, #1
 8009194:	e775      	b.n	8009082 <_dtoa_r+0x6ea>
 8009196:	2300      	movs	r3, #0
 8009198:	e7f6      	b.n	8009188 <_dtoa_r+0x7f0>
 800919a:	9b02      	ldr	r3, [sp, #8]
 800919c:	e7f4      	b.n	8009188 <_dtoa_r+0x7f0>
 800919e:	9209      	str	r2, [sp, #36]	; 0x24
 80091a0:	e7f3      	b.n	800918a <_dtoa_r+0x7f2>
 80091a2:	d082      	beq.n	80090aa <_dtoa_r+0x712>
 80091a4:	9b04      	ldr	r3, [sp, #16]
 80091a6:	321c      	adds	r2, #28
 80091a8:	4413      	add	r3, r2
 80091aa:	9304      	str	r3, [sp, #16]
 80091ac:	9b05      	ldr	r3, [sp, #20]
 80091ae:	4490      	add	r8, r2
 80091b0:	4413      	add	r3, r2
 80091b2:	e779      	b.n	80090a8 <_dtoa_r+0x710>
 80091b4:	4602      	mov	r2, r0
 80091b6:	e7f5      	b.n	80091a4 <_dtoa_r+0x80c>
 80091b8:	f1b9 0f00 	cmp.w	r9, #0
 80091bc:	dc36      	bgt.n	800922c <_dtoa_r+0x894>
 80091be:	9b06      	ldr	r3, [sp, #24]
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	dd33      	ble.n	800922c <_dtoa_r+0x894>
 80091c4:	46ca      	mov	sl, r9
 80091c6:	f1ba 0f00 	cmp.w	sl, #0
 80091ca:	d10d      	bne.n	80091e8 <_dtoa_r+0x850>
 80091cc:	4621      	mov	r1, r4
 80091ce:	4653      	mov	r3, sl
 80091d0:	2205      	movs	r2, #5
 80091d2:	4630      	mov	r0, r6
 80091d4:	f000 faae 	bl	8009734 <__multadd>
 80091d8:	4601      	mov	r1, r0
 80091da:	4604      	mov	r4, r0
 80091dc:	4628      	mov	r0, r5
 80091de:	f000 fd0d 	bl	8009bfc <__mcmp>
 80091e2:	2800      	cmp	r0, #0
 80091e4:	f73f ade4 	bgt.w	8008db0 <_dtoa_r+0x418>
 80091e8:	9b08      	ldr	r3, [sp, #32]
 80091ea:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80091ee:	ea6f 0b03 	mvn.w	fp, r3
 80091f2:	f04f 0900 	mov.w	r9, #0
 80091f6:	4621      	mov	r1, r4
 80091f8:	4630      	mov	r0, r6
 80091fa:	f000 fa79 	bl	80096f0 <_Bfree>
 80091fe:	2f00      	cmp	r7, #0
 8009200:	f43f aea1 	beq.w	8008f46 <_dtoa_r+0x5ae>
 8009204:	f1b9 0f00 	cmp.w	r9, #0
 8009208:	d005      	beq.n	8009216 <_dtoa_r+0x87e>
 800920a:	45b9      	cmp	r9, r7
 800920c:	d003      	beq.n	8009216 <_dtoa_r+0x87e>
 800920e:	4649      	mov	r1, r9
 8009210:	4630      	mov	r0, r6
 8009212:	f000 fa6d 	bl	80096f0 <_Bfree>
 8009216:	4639      	mov	r1, r7
 8009218:	4630      	mov	r0, r6
 800921a:	f000 fa69 	bl	80096f0 <_Bfree>
 800921e:	e692      	b.n	8008f46 <_dtoa_r+0x5ae>
 8009220:	2400      	movs	r4, #0
 8009222:	4627      	mov	r7, r4
 8009224:	e7e0      	b.n	80091e8 <_dtoa_r+0x850>
 8009226:	4693      	mov	fp, r2
 8009228:	4627      	mov	r7, r4
 800922a:	e5c1      	b.n	8008db0 <_dtoa_r+0x418>
 800922c:	9b07      	ldr	r3, [sp, #28]
 800922e:	46ca      	mov	sl, r9
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 8100 	beq.w	8009436 <_dtoa_r+0xa9e>
 8009236:	f1b8 0f00 	cmp.w	r8, #0
 800923a:	dd05      	ble.n	8009248 <_dtoa_r+0x8b0>
 800923c:	4639      	mov	r1, r7
 800923e:	4642      	mov	r2, r8
 8009240:	4630      	mov	r0, r6
 8009242:	f000 fc6f 	bl	8009b24 <__lshift>
 8009246:	4607      	mov	r7, r0
 8009248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800924a:	2b00      	cmp	r3, #0
 800924c:	d05d      	beq.n	800930a <_dtoa_r+0x972>
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	4630      	mov	r0, r6
 8009252:	f000 fa0d 	bl	8009670 <_Balloc>
 8009256:	4680      	mov	r8, r0
 8009258:	b928      	cbnz	r0, 8009266 <_dtoa_r+0x8ce>
 800925a:	4b82      	ldr	r3, [pc, #520]	; (8009464 <_dtoa_r+0xacc>)
 800925c:	4602      	mov	r2, r0
 800925e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009262:	f7ff bbb1 	b.w	80089c8 <_dtoa_r+0x30>
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	3202      	adds	r2, #2
 800926a:	0092      	lsls	r2, r2, #2
 800926c:	f107 010c 	add.w	r1, r7, #12
 8009270:	300c      	adds	r0, #12
 8009272:	f001 ff3f 	bl	800b0f4 <memcpy>
 8009276:	2201      	movs	r2, #1
 8009278:	4641      	mov	r1, r8
 800927a:	4630      	mov	r0, r6
 800927c:	f000 fc52 	bl	8009b24 <__lshift>
 8009280:	9b01      	ldr	r3, [sp, #4]
 8009282:	3301      	adds	r3, #1
 8009284:	9304      	str	r3, [sp, #16]
 8009286:	9b01      	ldr	r3, [sp, #4]
 8009288:	4453      	add	r3, sl
 800928a:	9308      	str	r3, [sp, #32]
 800928c:	9b02      	ldr	r3, [sp, #8]
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	46b9      	mov	r9, r7
 8009294:	9307      	str	r3, [sp, #28]
 8009296:	4607      	mov	r7, r0
 8009298:	9b04      	ldr	r3, [sp, #16]
 800929a:	4621      	mov	r1, r4
 800929c:	3b01      	subs	r3, #1
 800929e:	4628      	mov	r0, r5
 80092a0:	9302      	str	r3, [sp, #8]
 80092a2:	f7ff faef 	bl	8008884 <quorem>
 80092a6:	4603      	mov	r3, r0
 80092a8:	3330      	adds	r3, #48	; 0x30
 80092aa:	9005      	str	r0, [sp, #20]
 80092ac:	4649      	mov	r1, r9
 80092ae:	4628      	mov	r0, r5
 80092b0:	9309      	str	r3, [sp, #36]	; 0x24
 80092b2:	f000 fca3 	bl	8009bfc <__mcmp>
 80092b6:	463a      	mov	r2, r7
 80092b8:	4682      	mov	sl, r0
 80092ba:	4621      	mov	r1, r4
 80092bc:	4630      	mov	r0, r6
 80092be:	f000 fcb9 	bl	8009c34 <__mdiff>
 80092c2:	68c2      	ldr	r2, [r0, #12]
 80092c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c6:	4680      	mov	r8, r0
 80092c8:	bb0a      	cbnz	r2, 800930e <_dtoa_r+0x976>
 80092ca:	4601      	mov	r1, r0
 80092cc:	4628      	mov	r0, r5
 80092ce:	f000 fc95 	bl	8009bfc <__mcmp>
 80092d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d4:	4602      	mov	r2, r0
 80092d6:	4641      	mov	r1, r8
 80092d8:	4630      	mov	r0, r6
 80092da:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80092de:	f000 fa07 	bl	80096f0 <_Bfree>
 80092e2:	9b06      	ldr	r3, [sp, #24]
 80092e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092e6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80092ea:	ea43 0102 	orr.w	r1, r3, r2
 80092ee:	9b07      	ldr	r3, [sp, #28]
 80092f0:	4319      	orrs	r1, r3
 80092f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f4:	d10d      	bne.n	8009312 <_dtoa_r+0x97a>
 80092f6:	2b39      	cmp	r3, #57	; 0x39
 80092f8:	d029      	beq.n	800934e <_dtoa_r+0x9b6>
 80092fa:	f1ba 0f00 	cmp.w	sl, #0
 80092fe:	dd01      	ble.n	8009304 <_dtoa_r+0x96c>
 8009300:	9b05      	ldr	r3, [sp, #20]
 8009302:	3331      	adds	r3, #49	; 0x31
 8009304:	9a02      	ldr	r2, [sp, #8]
 8009306:	7013      	strb	r3, [r2, #0]
 8009308:	e775      	b.n	80091f6 <_dtoa_r+0x85e>
 800930a:	4638      	mov	r0, r7
 800930c:	e7b8      	b.n	8009280 <_dtoa_r+0x8e8>
 800930e:	2201      	movs	r2, #1
 8009310:	e7e1      	b.n	80092d6 <_dtoa_r+0x93e>
 8009312:	f1ba 0f00 	cmp.w	sl, #0
 8009316:	db06      	blt.n	8009326 <_dtoa_r+0x98e>
 8009318:	9906      	ldr	r1, [sp, #24]
 800931a:	ea41 0a0a 	orr.w	sl, r1, sl
 800931e:	9907      	ldr	r1, [sp, #28]
 8009320:	ea5a 0a01 	orrs.w	sl, sl, r1
 8009324:	d120      	bne.n	8009368 <_dtoa_r+0x9d0>
 8009326:	2a00      	cmp	r2, #0
 8009328:	ddec      	ble.n	8009304 <_dtoa_r+0x96c>
 800932a:	4629      	mov	r1, r5
 800932c:	2201      	movs	r2, #1
 800932e:	4630      	mov	r0, r6
 8009330:	9304      	str	r3, [sp, #16]
 8009332:	f000 fbf7 	bl	8009b24 <__lshift>
 8009336:	4621      	mov	r1, r4
 8009338:	4605      	mov	r5, r0
 800933a:	f000 fc5f 	bl	8009bfc <__mcmp>
 800933e:	2800      	cmp	r0, #0
 8009340:	9b04      	ldr	r3, [sp, #16]
 8009342:	dc02      	bgt.n	800934a <_dtoa_r+0x9b2>
 8009344:	d1de      	bne.n	8009304 <_dtoa_r+0x96c>
 8009346:	07da      	lsls	r2, r3, #31
 8009348:	d5dc      	bpl.n	8009304 <_dtoa_r+0x96c>
 800934a:	2b39      	cmp	r3, #57	; 0x39
 800934c:	d1d8      	bne.n	8009300 <_dtoa_r+0x968>
 800934e:	9a02      	ldr	r2, [sp, #8]
 8009350:	2339      	movs	r3, #57	; 0x39
 8009352:	7013      	strb	r3, [r2, #0]
 8009354:	4643      	mov	r3, r8
 8009356:	4698      	mov	r8, r3
 8009358:	3b01      	subs	r3, #1
 800935a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800935e:	2a39      	cmp	r2, #57	; 0x39
 8009360:	d051      	beq.n	8009406 <_dtoa_r+0xa6e>
 8009362:	3201      	adds	r2, #1
 8009364:	701a      	strb	r2, [r3, #0]
 8009366:	e746      	b.n	80091f6 <_dtoa_r+0x85e>
 8009368:	2a00      	cmp	r2, #0
 800936a:	dd03      	ble.n	8009374 <_dtoa_r+0x9dc>
 800936c:	2b39      	cmp	r3, #57	; 0x39
 800936e:	d0ee      	beq.n	800934e <_dtoa_r+0x9b6>
 8009370:	3301      	adds	r3, #1
 8009372:	e7c7      	b.n	8009304 <_dtoa_r+0x96c>
 8009374:	9a04      	ldr	r2, [sp, #16]
 8009376:	9908      	ldr	r1, [sp, #32]
 8009378:	f802 3c01 	strb.w	r3, [r2, #-1]
 800937c:	428a      	cmp	r2, r1
 800937e:	d02b      	beq.n	80093d8 <_dtoa_r+0xa40>
 8009380:	4629      	mov	r1, r5
 8009382:	2300      	movs	r3, #0
 8009384:	220a      	movs	r2, #10
 8009386:	4630      	mov	r0, r6
 8009388:	f000 f9d4 	bl	8009734 <__multadd>
 800938c:	45b9      	cmp	r9, r7
 800938e:	4605      	mov	r5, r0
 8009390:	f04f 0300 	mov.w	r3, #0
 8009394:	f04f 020a 	mov.w	r2, #10
 8009398:	4649      	mov	r1, r9
 800939a:	4630      	mov	r0, r6
 800939c:	d107      	bne.n	80093ae <_dtoa_r+0xa16>
 800939e:	f000 f9c9 	bl	8009734 <__multadd>
 80093a2:	4681      	mov	r9, r0
 80093a4:	4607      	mov	r7, r0
 80093a6:	9b04      	ldr	r3, [sp, #16]
 80093a8:	3301      	adds	r3, #1
 80093aa:	9304      	str	r3, [sp, #16]
 80093ac:	e774      	b.n	8009298 <_dtoa_r+0x900>
 80093ae:	f000 f9c1 	bl	8009734 <__multadd>
 80093b2:	4639      	mov	r1, r7
 80093b4:	4681      	mov	r9, r0
 80093b6:	2300      	movs	r3, #0
 80093b8:	220a      	movs	r2, #10
 80093ba:	4630      	mov	r0, r6
 80093bc:	f000 f9ba 	bl	8009734 <__multadd>
 80093c0:	4607      	mov	r7, r0
 80093c2:	e7f0      	b.n	80093a6 <_dtoa_r+0xa0e>
 80093c4:	f1ba 0f00 	cmp.w	sl, #0
 80093c8:	9a01      	ldr	r2, [sp, #4]
 80093ca:	bfcc      	ite	gt
 80093cc:	46d0      	movgt	r8, sl
 80093ce:	f04f 0801 	movle.w	r8, #1
 80093d2:	4490      	add	r8, r2
 80093d4:	f04f 0900 	mov.w	r9, #0
 80093d8:	4629      	mov	r1, r5
 80093da:	2201      	movs	r2, #1
 80093dc:	4630      	mov	r0, r6
 80093de:	9302      	str	r3, [sp, #8]
 80093e0:	f000 fba0 	bl	8009b24 <__lshift>
 80093e4:	4621      	mov	r1, r4
 80093e6:	4605      	mov	r5, r0
 80093e8:	f000 fc08 	bl	8009bfc <__mcmp>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	dcb1      	bgt.n	8009354 <_dtoa_r+0x9bc>
 80093f0:	d102      	bne.n	80093f8 <_dtoa_r+0xa60>
 80093f2:	9b02      	ldr	r3, [sp, #8]
 80093f4:	07db      	lsls	r3, r3, #31
 80093f6:	d4ad      	bmi.n	8009354 <_dtoa_r+0x9bc>
 80093f8:	4643      	mov	r3, r8
 80093fa:	4698      	mov	r8, r3
 80093fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009400:	2a30      	cmp	r2, #48	; 0x30
 8009402:	d0fa      	beq.n	80093fa <_dtoa_r+0xa62>
 8009404:	e6f7      	b.n	80091f6 <_dtoa_r+0x85e>
 8009406:	9a01      	ldr	r2, [sp, #4]
 8009408:	429a      	cmp	r2, r3
 800940a:	d1a4      	bne.n	8009356 <_dtoa_r+0x9be>
 800940c:	f10b 0b01 	add.w	fp, fp, #1
 8009410:	2331      	movs	r3, #49	; 0x31
 8009412:	e778      	b.n	8009306 <_dtoa_r+0x96e>
 8009414:	4b14      	ldr	r3, [pc, #80]	; (8009468 <_dtoa_r+0xad0>)
 8009416:	f7ff bb2a 	b.w	8008a6e <_dtoa_r+0xd6>
 800941a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800941c:	2b00      	cmp	r3, #0
 800941e:	f47f ab05 	bne.w	8008a2c <_dtoa_r+0x94>
 8009422:	4b12      	ldr	r3, [pc, #72]	; (800946c <_dtoa_r+0xad4>)
 8009424:	f7ff bb23 	b.w	8008a6e <_dtoa_r+0xd6>
 8009428:	f1ba 0f00 	cmp.w	sl, #0
 800942c:	dc03      	bgt.n	8009436 <_dtoa_r+0xa9e>
 800942e:	9b06      	ldr	r3, [sp, #24]
 8009430:	2b02      	cmp	r3, #2
 8009432:	f73f aec8 	bgt.w	80091c6 <_dtoa_r+0x82e>
 8009436:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800943a:	4621      	mov	r1, r4
 800943c:	4628      	mov	r0, r5
 800943e:	f7ff fa21 	bl	8008884 <quorem>
 8009442:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009446:	f808 3b01 	strb.w	r3, [r8], #1
 800944a:	9a01      	ldr	r2, [sp, #4]
 800944c:	eba8 0202 	sub.w	r2, r8, r2
 8009450:	4592      	cmp	sl, r2
 8009452:	ddb7      	ble.n	80093c4 <_dtoa_r+0xa2c>
 8009454:	4629      	mov	r1, r5
 8009456:	2300      	movs	r3, #0
 8009458:	220a      	movs	r2, #10
 800945a:	4630      	mov	r0, r6
 800945c:	f000 f96a 	bl	8009734 <__multadd>
 8009460:	4605      	mov	r5, r0
 8009462:	e7ea      	b.n	800943a <_dtoa_r+0xaa2>
 8009464:	0800c3e9 	.word	0x0800c3e9
 8009468:	0800c344 	.word	0x0800c344
 800946c:	0800c36d 	.word	0x0800c36d

08009470 <_free_r>:
 8009470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009472:	2900      	cmp	r1, #0
 8009474:	d044      	beq.n	8009500 <_free_r+0x90>
 8009476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800947a:	9001      	str	r0, [sp, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	f1a1 0404 	sub.w	r4, r1, #4
 8009482:	bfb8      	it	lt
 8009484:	18e4      	addlt	r4, r4, r3
 8009486:	f000 f8e7 	bl	8009658 <__malloc_lock>
 800948a:	4a1e      	ldr	r2, [pc, #120]	; (8009504 <_free_r+0x94>)
 800948c:	9801      	ldr	r0, [sp, #4]
 800948e:	6813      	ldr	r3, [r2, #0]
 8009490:	b933      	cbnz	r3, 80094a0 <_free_r+0x30>
 8009492:	6063      	str	r3, [r4, #4]
 8009494:	6014      	str	r4, [r2, #0]
 8009496:	b003      	add	sp, #12
 8009498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800949c:	f000 b8e2 	b.w	8009664 <__malloc_unlock>
 80094a0:	42a3      	cmp	r3, r4
 80094a2:	d908      	bls.n	80094b6 <_free_r+0x46>
 80094a4:	6825      	ldr	r5, [r4, #0]
 80094a6:	1961      	adds	r1, r4, r5
 80094a8:	428b      	cmp	r3, r1
 80094aa:	bf01      	itttt	eq
 80094ac:	6819      	ldreq	r1, [r3, #0]
 80094ae:	685b      	ldreq	r3, [r3, #4]
 80094b0:	1949      	addeq	r1, r1, r5
 80094b2:	6021      	streq	r1, [r4, #0]
 80094b4:	e7ed      	b.n	8009492 <_free_r+0x22>
 80094b6:	461a      	mov	r2, r3
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	b10b      	cbz	r3, 80094c0 <_free_r+0x50>
 80094bc:	42a3      	cmp	r3, r4
 80094be:	d9fa      	bls.n	80094b6 <_free_r+0x46>
 80094c0:	6811      	ldr	r1, [r2, #0]
 80094c2:	1855      	adds	r5, r2, r1
 80094c4:	42a5      	cmp	r5, r4
 80094c6:	d10b      	bne.n	80094e0 <_free_r+0x70>
 80094c8:	6824      	ldr	r4, [r4, #0]
 80094ca:	4421      	add	r1, r4
 80094cc:	1854      	adds	r4, r2, r1
 80094ce:	42a3      	cmp	r3, r4
 80094d0:	6011      	str	r1, [r2, #0]
 80094d2:	d1e0      	bne.n	8009496 <_free_r+0x26>
 80094d4:	681c      	ldr	r4, [r3, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	6053      	str	r3, [r2, #4]
 80094da:	440c      	add	r4, r1
 80094dc:	6014      	str	r4, [r2, #0]
 80094de:	e7da      	b.n	8009496 <_free_r+0x26>
 80094e0:	d902      	bls.n	80094e8 <_free_r+0x78>
 80094e2:	230c      	movs	r3, #12
 80094e4:	6003      	str	r3, [r0, #0]
 80094e6:	e7d6      	b.n	8009496 <_free_r+0x26>
 80094e8:	6825      	ldr	r5, [r4, #0]
 80094ea:	1961      	adds	r1, r4, r5
 80094ec:	428b      	cmp	r3, r1
 80094ee:	bf04      	itt	eq
 80094f0:	6819      	ldreq	r1, [r3, #0]
 80094f2:	685b      	ldreq	r3, [r3, #4]
 80094f4:	6063      	str	r3, [r4, #4]
 80094f6:	bf04      	itt	eq
 80094f8:	1949      	addeq	r1, r1, r5
 80094fa:	6021      	streq	r1, [r4, #0]
 80094fc:	6054      	str	r4, [r2, #4]
 80094fe:	e7ca      	b.n	8009496 <_free_r+0x26>
 8009500:	b003      	add	sp, #12
 8009502:	bd30      	pop	{r4, r5, pc}
 8009504:	20000658 	.word	0x20000658

08009508 <malloc>:
 8009508:	4b02      	ldr	r3, [pc, #8]	; (8009514 <malloc+0xc>)
 800950a:	4601      	mov	r1, r0
 800950c:	6818      	ldr	r0, [r3, #0]
 800950e:	f000 b823 	b.w	8009558 <_malloc_r>
 8009512:	bf00      	nop
 8009514:	2000007c 	.word	0x2000007c

08009518 <sbrk_aligned>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	4e0e      	ldr	r6, [pc, #56]	; (8009554 <sbrk_aligned+0x3c>)
 800951c:	460c      	mov	r4, r1
 800951e:	6831      	ldr	r1, [r6, #0]
 8009520:	4605      	mov	r5, r0
 8009522:	b911      	cbnz	r1, 800952a <sbrk_aligned+0x12>
 8009524:	f001 fdd6 	bl	800b0d4 <_sbrk_r>
 8009528:	6030      	str	r0, [r6, #0]
 800952a:	4621      	mov	r1, r4
 800952c:	4628      	mov	r0, r5
 800952e:	f001 fdd1 	bl	800b0d4 <_sbrk_r>
 8009532:	1c43      	adds	r3, r0, #1
 8009534:	d00a      	beq.n	800954c <sbrk_aligned+0x34>
 8009536:	1cc4      	adds	r4, r0, #3
 8009538:	f024 0403 	bic.w	r4, r4, #3
 800953c:	42a0      	cmp	r0, r4
 800953e:	d007      	beq.n	8009550 <sbrk_aligned+0x38>
 8009540:	1a21      	subs	r1, r4, r0
 8009542:	4628      	mov	r0, r5
 8009544:	f001 fdc6 	bl	800b0d4 <_sbrk_r>
 8009548:	3001      	adds	r0, #1
 800954a:	d101      	bne.n	8009550 <sbrk_aligned+0x38>
 800954c:	f04f 34ff 	mov.w	r4, #4294967295
 8009550:	4620      	mov	r0, r4
 8009552:	bd70      	pop	{r4, r5, r6, pc}
 8009554:	2000065c 	.word	0x2000065c

08009558 <_malloc_r>:
 8009558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800955c:	1ccd      	adds	r5, r1, #3
 800955e:	f025 0503 	bic.w	r5, r5, #3
 8009562:	3508      	adds	r5, #8
 8009564:	2d0c      	cmp	r5, #12
 8009566:	bf38      	it	cc
 8009568:	250c      	movcc	r5, #12
 800956a:	2d00      	cmp	r5, #0
 800956c:	4607      	mov	r7, r0
 800956e:	db01      	blt.n	8009574 <_malloc_r+0x1c>
 8009570:	42a9      	cmp	r1, r5
 8009572:	d905      	bls.n	8009580 <_malloc_r+0x28>
 8009574:	230c      	movs	r3, #12
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	2600      	movs	r6, #0
 800957a:	4630      	mov	r0, r6
 800957c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009580:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009654 <_malloc_r+0xfc>
 8009584:	f000 f868 	bl	8009658 <__malloc_lock>
 8009588:	f8d8 3000 	ldr.w	r3, [r8]
 800958c:	461c      	mov	r4, r3
 800958e:	bb5c      	cbnz	r4, 80095e8 <_malloc_r+0x90>
 8009590:	4629      	mov	r1, r5
 8009592:	4638      	mov	r0, r7
 8009594:	f7ff ffc0 	bl	8009518 <sbrk_aligned>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	4604      	mov	r4, r0
 800959c:	d155      	bne.n	800964a <_malloc_r+0xf2>
 800959e:	f8d8 4000 	ldr.w	r4, [r8]
 80095a2:	4626      	mov	r6, r4
 80095a4:	2e00      	cmp	r6, #0
 80095a6:	d145      	bne.n	8009634 <_malloc_r+0xdc>
 80095a8:	2c00      	cmp	r4, #0
 80095aa:	d048      	beq.n	800963e <_malloc_r+0xe6>
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	4631      	mov	r1, r6
 80095b0:	4638      	mov	r0, r7
 80095b2:	eb04 0903 	add.w	r9, r4, r3
 80095b6:	f001 fd8d 	bl	800b0d4 <_sbrk_r>
 80095ba:	4581      	cmp	r9, r0
 80095bc:	d13f      	bne.n	800963e <_malloc_r+0xe6>
 80095be:	6821      	ldr	r1, [r4, #0]
 80095c0:	1a6d      	subs	r5, r5, r1
 80095c2:	4629      	mov	r1, r5
 80095c4:	4638      	mov	r0, r7
 80095c6:	f7ff ffa7 	bl	8009518 <sbrk_aligned>
 80095ca:	3001      	adds	r0, #1
 80095cc:	d037      	beq.n	800963e <_malloc_r+0xe6>
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	442b      	add	r3, r5
 80095d2:	6023      	str	r3, [r4, #0]
 80095d4:	f8d8 3000 	ldr.w	r3, [r8]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d038      	beq.n	800964e <_malloc_r+0xf6>
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	42a2      	cmp	r2, r4
 80095e0:	d12b      	bne.n	800963a <_malloc_r+0xe2>
 80095e2:	2200      	movs	r2, #0
 80095e4:	605a      	str	r2, [r3, #4]
 80095e6:	e00f      	b.n	8009608 <_malloc_r+0xb0>
 80095e8:	6822      	ldr	r2, [r4, #0]
 80095ea:	1b52      	subs	r2, r2, r5
 80095ec:	d41f      	bmi.n	800962e <_malloc_r+0xd6>
 80095ee:	2a0b      	cmp	r2, #11
 80095f0:	d917      	bls.n	8009622 <_malloc_r+0xca>
 80095f2:	1961      	adds	r1, r4, r5
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	6025      	str	r5, [r4, #0]
 80095f8:	bf18      	it	ne
 80095fa:	6059      	strne	r1, [r3, #4]
 80095fc:	6863      	ldr	r3, [r4, #4]
 80095fe:	bf08      	it	eq
 8009600:	f8c8 1000 	streq.w	r1, [r8]
 8009604:	5162      	str	r2, [r4, r5]
 8009606:	604b      	str	r3, [r1, #4]
 8009608:	4638      	mov	r0, r7
 800960a:	f104 060b 	add.w	r6, r4, #11
 800960e:	f000 f829 	bl	8009664 <__malloc_unlock>
 8009612:	f026 0607 	bic.w	r6, r6, #7
 8009616:	1d23      	adds	r3, r4, #4
 8009618:	1af2      	subs	r2, r6, r3
 800961a:	d0ae      	beq.n	800957a <_malloc_r+0x22>
 800961c:	1b9b      	subs	r3, r3, r6
 800961e:	50a3      	str	r3, [r4, r2]
 8009620:	e7ab      	b.n	800957a <_malloc_r+0x22>
 8009622:	42a3      	cmp	r3, r4
 8009624:	6862      	ldr	r2, [r4, #4]
 8009626:	d1dd      	bne.n	80095e4 <_malloc_r+0x8c>
 8009628:	f8c8 2000 	str.w	r2, [r8]
 800962c:	e7ec      	b.n	8009608 <_malloc_r+0xb0>
 800962e:	4623      	mov	r3, r4
 8009630:	6864      	ldr	r4, [r4, #4]
 8009632:	e7ac      	b.n	800958e <_malloc_r+0x36>
 8009634:	4634      	mov	r4, r6
 8009636:	6876      	ldr	r6, [r6, #4]
 8009638:	e7b4      	b.n	80095a4 <_malloc_r+0x4c>
 800963a:	4613      	mov	r3, r2
 800963c:	e7cc      	b.n	80095d8 <_malloc_r+0x80>
 800963e:	230c      	movs	r3, #12
 8009640:	603b      	str	r3, [r7, #0]
 8009642:	4638      	mov	r0, r7
 8009644:	f000 f80e 	bl	8009664 <__malloc_unlock>
 8009648:	e797      	b.n	800957a <_malloc_r+0x22>
 800964a:	6025      	str	r5, [r4, #0]
 800964c:	e7dc      	b.n	8009608 <_malloc_r+0xb0>
 800964e:	605b      	str	r3, [r3, #4]
 8009650:	deff      	udf	#255	; 0xff
 8009652:	bf00      	nop
 8009654:	20000658 	.word	0x20000658

08009658 <__malloc_lock>:
 8009658:	4801      	ldr	r0, [pc, #4]	; (8009660 <__malloc_lock+0x8>)
 800965a:	f7ff b90a 	b.w	8008872 <__retarget_lock_acquire_recursive>
 800965e:	bf00      	nop
 8009660:	20000654 	.word	0x20000654

08009664 <__malloc_unlock>:
 8009664:	4801      	ldr	r0, [pc, #4]	; (800966c <__malloc_unlock+0x8>)
 8009666:	f7ff b905 	b.w	8008874 <__retarget_lock_release_recursive>
 800966a:	bf00      	nop
 800966c:	20000654 	.word	0x20000654

08009670 <_Balloc>:
 8009670:	b570      	push	{r4, r5, r6, lr}
 8009672:	69c6      	ldr	r6, [r0, #28]
 8009674:	4604      	mov	r4, r0
 8009676:	460d      	mov	r5, r1
 8009678:	b976      	cbnz	r6, 8009698 <_Balloc+0x28>
 800967a:	2010      	movs	r0, #16
 800967c:	f7ff ff44 	bl	8009508 <malloc>
 8009680:	4602      	mov	r2, r0
 8009682:	61e0      	str	r0, [r4, #28]
 8009684:	b920      	cbnz	r0, 8009690 <_Balloc+0x20>
 8009686:	4b18      	ldr	r3, [pc, #96]	; (80096e8 <_Balloc+0x78>)
 8009688:	4818      	ldr	r0, [pc, #96]	; (80096ec <_Balloc+0x7c>)
 800968a:	216b      	movs	r1, #107	; 0x6b
 800968c:	f001 fd48 	bl	800b120 <__assert_func>
 8009690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009694:	6006      	str	r6, [r0, #0]
 8009696:	60c6      	str	r6, [r0, #12]
 8009698:	69e6      	ldr	r6, [r4, #28]
 800969a:	68f3      	ldr	r3, [r6, #12]
 800969c:	b183      	cbz	r3, 80096c0 <_Balloc+0x50>
 800969e:	69e3      	ldr	r3, [r4, #28]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096a6:	b9b8      	cbnz	r0, 80096d8 <_Balloc+0x68>
 80096a8:	2101      	movs	r1, #1
 80096aa:	fa01 f605 	lsl.w	r6, r1, r5
 80096ae:	1d72      	adds	r2, r6, #5
 80096b0:	0092      	lsls	r2, r2, #2
 80096b2:	4620      	mov	r0, r4
 80096b4:	f001 fd52 	bl	800b15c <_calloc_r>
 80096b8:	b160      	cbz	r0, 80096d4 <_Balloc+0x64>
 80096ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096be:	e00e      	b.n	80096de <_Balloc+0x6e>
 80096c0:	2221      	movs	r2, #33	; 0x21
 80096c2:	2104      	movs	r1, #4
 80096c4:	4620      	mov	r0, r4
 80096c6:	f001 fd49 	bl	800b15c <_calloc_r>
 80096ca:	69e3      	ldr	r3, [r4, #28]
 80096cc:	60f0      	str	r0, [r6, #12]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e4      	bne.n	800969e <_Balloc+0x2e>
 80096d4:	2000      	movs	r0, #0
 80096d6:	bd70      	pop	{r4, r5, r6, pc}
 80096d8:	6802      	ldr	r2, [r0, #0]
 80096da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096de:	2300      	movs	r3, #0
 80096e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096e4:	e7f7      	b.n	80096d6 <_Balloc+0x66>
 80096e6:	bf00      	nop
 80096e8:	0800c37a 	.word	0x0800c37a
 80096ec:	0800c3fa 	.word	0x0800c3fa

080096f0 <_Bfree>:
 80096f0:	b570      	push	{r4, r5, r6, lr}
 80096f2:	69c6      	ldr	r6, [r0, #28]
 80096f4:	4605      	mov	r5, r0
 80096f6:	460c      	mov	r4, r1
 80096f8:	b976      	cbnz	r6, 8009718 <_Bfree+0x28>
 80096fa:	2010      	movs	r0, #16
 80096fc:	f7ff ff04 	bl	8009508 <malloc>
 8009700:	4602      	mov	r2, r0
 8009702:	61e8      	str	r0, [r5, #28]
 8009704:	b920      	cbnz	r0, 8009710 <_Bfree+0x20>
 8009706:	4b09      	ldr	r3, [pc, #36]	; (800972c <_Bfree+0x3c>)
 8009708:	4809      	ldr	r0, [pc, #36]	; (8009730 <_Bfree+0x40>)
 800970a:	218f      	movs	r1, #143	; 0x8f
 800970c:	f001 fd08 	bl	800b120 <__assert_func>
 8009710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009714:	6006      	str	r6, [r0, #0]
 8009716:	60c6      	str	r6, [r0, #12]
 8009718:	b13c      	cbz	r4, 800972a <_Bfree+0x3a>
 800971a:	69eb      	ldr	r3, [r5, #28]
 800971c:	6862      	ldr	r2, [r4, #4]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009724:	6021      	str	r1, [r4, #0]
 8009726:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800972a:	bd70      	pop	{r4, r5, r6, pc}
 800972c:	0800c37a 	.word	0x0800c37a
 8009730:	0800c3fa 	.word	0x0800c3fa

08009734 <__multadd>:
 8009734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009738:	690d      	ldr	r5, [r1, #16]
 800973a:	4607      	mov	r7, r0
 800973c:	460c      	mov	r4, r1
 800973e:	461e      	mov	r6, r3
 8009740:	f101 0c14 	add.w	ip, r1, #20
 8009744:	2000      	movs	r0, #0
 8009746:	f8dc 3000 	ldr.w	r3, [ip]
 800974a:	b299      	uxth	r1, r3
 800974c:	fb02 6101 	mla	r1, r2, r1, r6
 8009750:	0c1e      	lsrs	r6, r3, #16
 8009752:	0c0b      	lsrs	r3, r1, #16
 8009754:	fb02 3306 	mla	r3, r2, r6, r3
 8009758:	b289      	uxth	r1, r1
 800975a:	3001      	adds	r0, #1
 800975c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009760:	4285      	cmp	r5, r0
 8009762:	f84c 1b04 	str.w	r1, [ip], #4
 8009766:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800976a:	dcec      	bgt.n	8009746 <__multadd+0x12>
 800976c:	b30e      	cbz	r6, 80097b2 <__multadd+0x7e>
 800976e:	68a3      	ldr	r3, [r4, #8]
 8009770:	42ab      	cmp	r3, r5
 8009772:	dc19      	bgt.n	80097a8 <__multadd+0x74>
 8009774:	6861      	ldr	r1, [r4, #4]
 8009776:	4638      	mov	r0, r7
 8009778:	3101      	adds	r1, #1
 800977a:	f7ff ff79 	bl	8009670 <_Balloc>
 800977e:	4680      	mov	r8, r0
 8009780:	b928      	cbnz	r0, 800978e <__multadd+0x5a>
 8009782:	4602      	mov	r2, r0
 8009784:	4b0c      	ldr	r3, [pc, #48]	; (80097b8 <__multadd+0x84>)
 8009786:	480d      	ldr	r0, [pc, #52]	; (80097bc <__multadd+0x88>)
 8009788:	21ba      	movs	r1, #186	; 0xba
 800978a:	f001 fcc9 	bl	800b120 <__assert_func>
 800978e:	6922      	ldr	r2, [r4, #16]
 8009790:	3202      	adds	r2, #2
 8009792:	f104 010c 	add.w	r1, r4, #12
 8009796:	0092      	lsls	r2, r2, #2
 8009798:	300c      	adds	r0, #12
 800979a:	f001 fcab 	bl	800b0f4 <memcpy>
 800979e:	4621      	mov	r1, r4
 80097a0:	4638      	mov	r0, r7
 80097a2:	f7ff ffa5 	bl	80096f0 <_Bfree>
 80097a6:	4644      	mov	r4, r8
 80097a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097ac:	3501      	adds	r5, #1
 80097ae:	615e      	str	r6, [r3, #20]
 80097b0:	6125      	str	r5, [r4, #16]
 80097b2:	4620      	mov	r0, r4
 80097b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b8:	0800c3e9 	.word	0x0800c3e9
 80097bc:	0800c3fa 	.word	0x0800c3fa

080097c0 <__s2b>:
 80097c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097c4:	460c      	mov	r4, r1
 80097c6:	4615      	mov	r5, r2
 80097c8:	461f      	mov	r7, r3
 80097ca:	2209      	movs	r2, #9
 80097cc:	3308      	adds	r3, #8
 80097ce:	4606      	mov	r6, r0
 80097d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80097d4:	2100      	movs	r1, #0
 80097d6:	2201      	movs	r2, #1
 80097d8:	429a      	cmp	r2, r3
 80097da:	db09      	blt.n	80097f0 <__s2b+0x30>
 80097dc:	4630      	mov	r0, r6
 80097de:	f7ff ff47 	bl	8009670 <_Balloc>
 80097e2:	b940      	cbnz	r0, 80097f6 <__s2b+0x36>
 80097e4:	4602      	mov	r2, r0
 80097e6:	4b19      	ldr	r3, [pc, #100]	; (800984c <__s2b+0x8c>)
 80097e8:	4819      	ldr	r0, [pc, #100]	; (8009850 <__s2b+0x90>)
 80097ea:	21d3      	movs	r1, #211	; 0xd3
 80097ec:	f001 fc98 	bl	800b120 <__assert_func>
 80097f0:	0052      	lsls	r2, r2, #1
 80097f2:	3101      	adds	r1, #1
 80097f4:	e7f0      	b.n	80097d8 <__s2b+0x18>
 80097f6:	9b08      	ldr	r3, [sp, #32]
 80097f8:	6143      	str	r3, [r0, #20]
 80097fa:	2d09      	cmp	r5, #9
 80097fc:	f04f 0301 	mov.w	r3, #1
 8009800:	6103      	str	r3, [r0, #16]
 8009802:	dd16      	ble.n	8009832 <__s2b+0x72>
 8009804:	f104 0909 	add.w	r9, r4, #9
 8009808:	46c8      	mov	r8, r9
 800980a:	442c      	add	r4, r5
 800980c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009810:	4601      	mov	r1, r0
 8009812:	3b30      	subs	r3, #48	; 0x30
 8009814:	220a      	movs	r2, #10
 8009816:	4630      	mov	r0, r6
 8009818:	f7ff ff8c 	bl	8009734 <__multadd>
 800981c:	45a0      	cmp	r8, r4
 800981e:	d1f5      	bne.n	800980c <__s2b+0x4c>
 8009820:	f1a5 0408 	sub.w	r4, r5, #8
 8009824:	444c      	add	r4, r9
 8009826:	1b2d      	subs	r5, r5, r4
 8009828:	1963      	adds	r3, r4, r5
 800982a:	42bb      	cmp	r3, r7
 800982c:	db04      	blt.n	8009838 <__s2b+0x78>
 800982e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009832:	340a      	adds	r4, #10
 8009834:	2509      	movs	r5, #9
 8009836:	e7f6      	b.n	8009826 <__s2b+0x66>
 8009838:	f814 3b01 	ldrb.w	r3, [r4], #1
 800983c:	4601      	mov	r1, r0
 800983e:	3b30      	subs	r3, #48	; 0x30
 8009840:	220a      	movs	r2, #10
 8009842:	4630      	mov	r0, r6
 8009844:	f7ff ff76 	bl	8009734 <__multadd>
 8009848:	e7ee      	b.n	8009828 <__s2b+0x68>
 800984a:	bf00      	nop
 800984c:	0800c3e9 	.word	0x0800c3e9
 8009850:	0800c3fa 	.word	0x0800c3fa

08009854 <__hi0bits>:
 8009854:	0c03      	lsrs	r3, r0, #16
 8009856:	041b      	lsls	r3, r3, #16
 8009858:	b9d3      	cbnz	r3, 8009890 <__hi0bits+0x3c>
 800985a:	0400      	lsls	r0, r0, #16
 800985c:	2310      	movs	r3, #16
 800985e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009862:	bf04      	itt	eq
 8009864:	0200      	lsleq	r0, r0, #8
 8009866:	3308      	addeq	r3, #8
 8009868:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800986c:	bf04      	itt	eq
 800986e:	0100      	lsleq	r0, r0, #4
 8009870:	3304      	addeq	r3, #4
 8009872:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009876:	bf04      	itt	eq
 8009878:	0080      	lsleq	r0, r0, #2
 800987a:	3302      	addeq	r3, #2
 800987c:	2800      	cmp	r0, #0
 800987e:	db05      	blt.n	800988c <__hi0bits+0x38>
 8009880:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009884:	f103 0301 	add.w	r3, r3, #1
 8009888:	bf08      	it	eq
 800988a:	2320      	moveq	r3, #32
 800988c:	4618      	mov	r0, r3
 800988e:	4770      	bx	lr
 8009890:	2300      	movs	r3, #0
 8009892:	e7e4      	b.n	800985e <__hi0bits+0xa>

08009894 <__lo0bits>:
 8009894:	6803      	ldr	r3, [r0, #0]
 8009896:	f013 0207 	ands.w	r2, r3, #7
 800989a:	d00c      	beq.n	80098b6 <__lo0bits+0x22>
 800989c:	07d9      	lsls	r1, r3, #31
 800989e:	d422      	bmi.n	80098e6 <__lo0bits+0x52>
 80098a0:	079a      	lsls	r2, r3, #30
 80098a2:	bf49      	itett	mi
 80098a4:	085b      	lsrmi	r3, r3, #1
 80098a6:	089b      	lsrpl	r3, r3, #2
 80098a8:	6003      	strmi	r3, [r0, #0]
 80098aa:	2201      	movmi	r2, #1
 80098ac:	bf5c      	itt	pl
 80098ae:	6003      	strpl	r3, [r0, #0]
 80098b0:	2202      	movpl	r2, #2
 80098b2:	4610      	mov	r0, r2
 80098b4:	4770      	bx	lr
 80098b6:	b299      	uxth	r1, r3
 80098b8:	b909      	cbnz	r1, 80098be <__lo0bits+0x2a>
 80098ba:	0c1b      	lsrs	r3, r3, #16
 80098bc:	2210      	movs	r2, #16
 80098be:	b2d9      	uxtb	r1, r3
 80098c0:	b909      	cbnz	r1, 80098c6 <__lo0bits+0x32>
 80098c2:	3208      	adds	r2, #8
 80098c4:	0a1b      	lsrs	r3, r3, #8
 80098c6:	0719      	lsls	r1, r3, #28
 80098c8:	bf04      	itt	eq
 80098ca:	091b      	lsreq	r3, r3, #4
 80098cc:	3204      	addeq	r2, #4
 80098ce:	0799      	lsls	r1, r3, #30
 80098d0:	bf04      	itt	eq
 80098d2:	089b      	lsreq	r3, r3, #2
 80098d4:	3202      	addeq	r2, #2
 80098d6:	07d9      	lsls	r1, r3, #31
 80098d8:	d403      	bmi.n	80098e2 <__lo0bits+0x4e>
 80098da:	085b      	lsrs	r3, r3, #1
 80098dc:	f102 0201 	add.w	r2, r2, #1
 80098e0:	d003      	beq.n	80098ea <__lo0bits+0x56>
 80098e2:	6003      	str	r3, [r0, #0]
 80098e4:	e7e5      	b.n	80098b2 <__lo0bits+0x1e>
 80098e6:	2200      	movs	r2, #0
 80098e8:	e7e3      	b.n	80098b2 <__lo0bits+0x1e>
 80098ea:	2220      	movs	r2, #32
 80098ec:	e7e1      	b.n	80098b2 <__lo0bits+0x1e>
	...

080098f0 <__i2b>:
 80098f0:	b510      	push	{r4, lr}
 80098f2:	460c      	mov	r4, r1
 80098f4:	2101      	movs	r1, #1
 80098f6:	f7ff febb 	bl	8009670 <_Balloc>
 80098fa:	4602      	mov	r2, r0
 80098fc:	b928      	cbnz	r0, 800990a <__i2b+0x1a>
 80098fe:	4b05      	ldr	r3, [pc, #20]	; (8009914 <__i2b+0x24>)
 8009900:	4805      	ldr	r0, [pc, #20]	; (8009918 <__i2b+0x28>)
 8009902:	f240 1145 	movw	r1, #325	; 0x145
 8009906:	f001 fc0b 	bl	800b120 <__assert_func>
 800990a:	2301      	movs	r3, #1
 800990c:	6144      	str	r4, [r0, #20]
 800990e:	6103      	str	r3, [r0, #16]
 8009910:	bd10      	pop	{r4, pc}
 8009912:	bf00      	nop
 8009914:	0800c3e9 	.word	0x0800c3e9
 8009918:	0800c3fa 	.word	0x0800c3fa

0800991c <__multiply>:
 800991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009920:	4691      	mov	r9, r2
 8009922:	690a      	ldr	r2, [r1, #16]
 8009924:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009928:	429a      	cmp	r2, r3
 800992a:	bfb8      	it	lt
 800992c:	460b      	movlt	r3, r1
 800992e:	460c      	mov	r4, r1
 8009930:	bfbc      	itt	lt
 8009932:	464c      	movlt	r4, r9
 8009934:	4699      	movlt	r9, r3
 8009936:	6927      	ldr	r7, [r4, #16]
 8009938:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800993c:	68a3      	ldr	r3, [r4, #8]
 800993e:	6861      	ldr	r1, [r4, #4]
 8009940:	eb07 060a 	add.w	r6, r7, sl
 8009944:	42b3      	cmp	r3, r6
 8009946:	b085      	sub	sp, #20
 8009948:	bfb8      	it	lt
 800994a:	3101      	addlt	r1, #1
 800994c:	f7ff fe90 	bl	8009670 <_Balloc>
 8009950:	b930      	cbnz	r0, 8009960 <__multiply+0x44>
 8009952:	4602      	mov	r2, r0
 8009954:	4b44      	ldr	r3, [pc, #272]	; (8009a68 <__multiply+0x14c>)
 8009956:	4845      	ldr	r0, [pc, #276]	; (8009a6c <__multiply+0x150>)
 8009958:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800995c:	f001 fbe0 	bl	800b120 <__assert_func>
 8009960:	f100 0514 	add.w	r5, r0, #20
 8009964:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009968:	462b      	mov	r3, r5
 800996a:	2200      	movs	r2, #0
 800996c:	4543      	cmp	r3, r8
 800996e:	d321      	bcc.n	80099b4 <__multiply+0x98>
 8009970:	f104 0314 	add.w	r3, r4, #20
 8009974:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009978:	f109 0314 	add.w	r3, r9, #20
 800997c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009980:	9202      	str	r2, [sp, #8]
 8009982:	1b3a      	subs	r2, r7, r4
 8009984:	3a15      	subs	r2, #21
 8009986:	f022 0203 	bic.w	r2, r2, #3
 800998a:	3204      	adds	r2, #4
 800998c:	f104 0115 	add.w	r1, r4, #21
 8009990:	428f      	cmp	r7, r1
 8009992:	bf38      	it	cc
 8009994:	2204      	movcc	r2, #4
 8009996:	9201      	str	r2, [sp, #4]
 8009998:	9a02      	ldr	r2, [sp, #8]
 800999a:	9303      	str	r3, [sp, #12]
 800999c:	429a      	cmp	r2, r3
 800999e:	d80c      	bhi.n	80099ba <__multiply+0x9e>
 80099a0:	2e00      	cmp	r6, #0
 80099a2:	dd03      	ble.n	80099ac <__multiply+0x90>
 80099a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d05b      	beq.n	8009a64 <__multiply+0x148>
 80099ac:	6106      	str	r6, [r0, #16]
 80099ae:	b005      	add	sp, #20
 80099b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b4:	f843 2b04 	str.w	r2, [r3], #4
 80099b8:	e7d8      	b.n	800996c <__multiply+0x50>
 80099ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80099be:	f1ba 0f00 	cmp.w	sl, #0
 80099c2:	d024      	beq.n	8009a0e <__multiply+0xf2>
 80099c4:	f104 0e14 	add.w	lr, r4, #20
 80099c8:	46a9      	mov	r9, r5
 80099ca:	f04f 0c00 	mov.w	ip, #0
 80099ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80099d2:	f8d9 1000 	ldr.w	r1, [r9]
 80099d6:	fa1f fb82 	uxth.w	fp, r2
 80099da:	b289      	uxth	r1, r1
 80099dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80099e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80099e4:	f8d9 2000 	ldr.w	r2, [r9]
 80099e8:	4461      	add	r1, ip
 80099ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80099f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80099f6:	b289      	uxth	r1, r1
 80099f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099fc:	4577      	cmp	r7, lr
 80099fe:	f849 1b04 	str.w	r1, [r9], #4
 8009a02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a06:	d8e2      	bhi.n	80099ce <__multiply+0xb2>
 8009a08:	9a01      	ldr	r2, [sp, #4]
 8009a0a:	f845 c002 	str.w	ip, [r5, r2]
 8009a0e:	9a03      	ldr	r2, [sp, #12]
 8009a10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a14:	3304      	adds	r3, #4
 8009a16:	f1b9 0f00 	cmp.w	r9, #0
 8009a1a:	d021      	beq.n	8009a60 <__multiply+0x144>
 8009a1c:	6829      	ldr	r1, [r5, #0]
 8009a1e:	f104 0c14 	add.w	ip, r4, #20
 8009a22:	46ae      	mov	lr, r5
 8009a24:	f04f 0a00 	mov.w	sl, #0
 8009a28:	f8bc b000 	ldrh.w	fp, [ip]
 8009a2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009a30:	fb09 220b 	mla	r2, r9, fp, r2
 8009a34:	4452      	add	r2, sl
 8009a36:	b289      	uxth	r1, r1
 8009a38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a3c:	f84e 1b04 	str.w	r1, [lr], #4
 8009a40:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009a44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a48:	f8be 1000 	ldrh.w	r1, [lr]
 8009a4c:	fb09 110a 	mla	r1, r9, sl, r1
 8009a50:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009a54:	4567      	cmp	r7, ip
 8009a56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a5a:	d8e5      	bhi.n	8009a28 <__multiply+0x10c>
 8009a5c:	9a01      	ldr	r2, [sp, #4]
 8009a5e:	50a9      	str	r1, [r5, r2]
 8009a60:	3504      	adds	r5, #4
 8009a62:	e799      	b.n	8009998 <__multiply+0x7c>
 8009a64:	3e01      	subs	r6, #1
 8009a66:	e79b      	b.n	80099a0 <__multiply+0x84>
 8009a68:	0800c3e9 	.word	0x0800c3e9
 8009a6c:	0800c3fa 	.word	0x0800c3fa

08009a70 <__pow5mult>:
 8009a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a74:	4615      	mov	r5, r2
 8009a76:	f012 0203 	ands.w	r2, r2, #3
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	460f      	mov	r7, r1
 8009a7e:	d007      	beq.n	8009a90 <__pow5mult+0x20>
 8009a80:	4c25      	ldr	r4, [pc, #148]	; (8009b18 <__pow5mult+0xa8>)
 8009a82:	3a01      	subs	r2, #1
 8009a84:	2300      	movs	r3, #0
 8009a86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a8a:	f7ff fe53 	bl	8009734 <__multadd>
 8009a8e:	4607      	mov	r7, r0
 8009a90:	10ad      	asrs	r5, r5, #2
 8009a92:	d03d      	beq.n	8009b10 <__pow5mult+0xa0>
 8009a94:	69f4      	ldr	r4, [r6, #28]
 8009a96:	b97c      	cbnz	r4, 8009ab8 <__pow5mult+0x48>
 8009a98:	2010      	movs	r0, #16
 8009a9a:	f7ff fd35 	bl	8009508 <malloc>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	61f0      	str	r0, [r6, #28]
 8009aa2:	b928      	cbnz	r0, 8009ab0 <__pow5mult+0x40>
 8009aa4:	4b1d      	ldr	r3, [pc, #116]	; (8009b1c <__pow5mult+0xac>)
 8009aa6:	481e      	ldr	r0, [pc, #120]	; (8009b20 <__pow5mult+0xb0>)
 8009aa8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009aac:	f001 fb38 	bl	800b120 <__assert_func>
 8009ab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ab4:	6004      	str	r4, [r0, #0]
 8009ab6:	60c4      	str	r4, [r0, #12]
 8009ab8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009abc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ac0:	b94c      	cbnz	r4, 8009ad6 <__pow5mult+0x66>
 8009ac2:	f240 2171 	movw	r1, #625	; 0x271
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f7ff ff12 	bl	80098f0 <__i2b>
 8009acc:	2300      	movs	r3, #0
 8009ace:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	6003      	str	r3, [r0, #0]
 8009ad6:	f04f 0900 	mov.w	r9, #0
 8009ada:	07eb      	lsls	r3, r5, #31
 8009adc:	d50a      	bpl.n	8009af4 <__pow5mult+0x84>
 8009ade:	4639      	mov	r1, r7
 8009ae0:	4622      	mov	r2, r4
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f7ff ff1a 	bl	800991c <__multiply>
 8009ae8:	4639      	mov	r1, r7
 8009aea:	4680      	mov	r8, r0
 8009aec:	4630      	mov	r0, r6
 8009aee:	f7ff fdff 	bl	80096f0 <_Bfree>
 8009af2:	4647      	mov	r7, r8
 8009af4:	106d      	asrs	r5, r5, #1
 8009af6:	d00b      	beq.n	8009b10 <__pow5mult+0xa0>
 8009af8:	6820      	ldr	r0, [r4, #0]
 8009afa:	b938      	cbnz	r0, 8009b0c <__pow5mult+0x9c>
 8009afc:	4622      	mov	r2, r4
 8009afe:	4621      	mov	r1, r4
 8009b00:	4630      	mov	r0, r6
 8009b02:	f7ff ff0b 	bl	800991c <__multiply>
 8009b06:	6020      	str	r0, [r4, #0]
 8009b08:	f8c0 9000 	str.w	r9, [r0]
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	e7e4      	b.n	8009ada <__pow5mult+0x6a>
 8009b10:	4638      	mov	r0, r7
 8009b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b16:	bf00      	nop
 8009b18:	0800c548 	.word	0x0800c548
 8009b1c:	0800c37a 	.word	0x0800c37a
 8009b20:	0800c3fa 	.word	0x0800c3fa

08009b24 <__lshift>:
 8009b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b28:	460c      	mov	r4, r1
 8009b2a:	6849      	ldr	r1, [r1, #4]
 8009b2c:	6923      	ldr	r3, [r4, #16]
 8009b2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b32:	68a3      	ldr	r3, [r4, #8]
 8009b34:	4607      	mov	r7, r0
 8009b36:	4691      	mov	r9, r2
 8009b38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b3c:	f108 0601 	add.w	r6, r8, #1
 8009b40:	42b3      	cmp	r3, r6
 8009b42:	db0b      	blt.n	8009b5c <__lshift+0x38>
 8009b44:	4638      	mov	r0, r7
 8009b46:	f7ff fd93 	bl	8009670 <_Balloc>
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	b948      	cbnz	r0, 8009b62 <__lshift+0x3e>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	4b28      	ldr	r3, [pc, #160]	; (8009bf4 <__lshift+0xd0>)
 8009b52:	4829      	ldr	r0, [pc, #164]	; (8009bf8 <__lshift+0xd4>)
 8009b54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009b58:	f001 fae2 	bl	800b120 <__assert_func>
 8009b5c:	3101      	adds	r1, #1
 8009b5e:	005b      	lsls	r3, r3, #1
 8009b60:	e7ee      	b.n	8009b40 <__lshift+0x1c>
 8009b62:	2300      	movs	r3, #0
 8009b64:	f100 0114 	add.w	r1, r0, #20
 8009b68:	f100 0210 	add.w	r2, r0, #16
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	4553      	cmp	r3, sl
 8009b70:	db33      	blt.n	8009bda <__lshift+0xb6>
 8009b72:	6920      	ldr	r0, [r4, #16]
 8009b74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b78:	f104 0314 	add.w	r3, r4, #20
 8009b7c:	f019 091f 	ands.w	r9, r9, #31
 8009b80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b88:	d02b      	beq.n	8009be2 <__lshift+0xbe>
 8009b8a:	f1c9 0e20 	rsb	lr, r9, #32
 8009b8e:	468a      	mov	sl, r1
 8009b90:	2200      	movs	r2, #0
 8009b92:	6818      	ldr	r0, [r3, #0]
 8009b94:	fa00 f009 	lsl.w	r0, r0, r9
 8009b98:	4310      	orrs	r0, r2
 8009b9a:	f84a 0b04 	str.w	r0, [sl], #4
 8009b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ba2:	459c      	cmp	ip, r3
 8009ba4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ba8:	d8f3      	bhi.n	8009b92 <__lshift+0x6e>
 8009baa:	ebac 0304 	sub.w	r3, ip, r4
 8009bae:	3b15      	subs	r3, #21
 8009bb0:	f023 0303 	bic.w	r3, r3, #3
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	f104 0015 	add.w	r0, r4, #21
 8009bba:	4584      	cmp	ip, r0
 8009bbc:	bf38      	it	cc
 8009bbe:	2304      	movcc	r3, #4
 8009bc0:	50ca      	str	r2, [r1, r3]
 8009bc2:	b10a      	cbz	r2, 8009bc8 <__lshift+0xa4>
 8009bc4:	f108 0602 	add.w	r6, r8, #2
 8009bc8:	3e01      	subs	r6, #1
 8009bca:	4638      	mov	r0, r7
 8009bcc:	612e      	str	r6, [r5, #16]
 8009bce:	4621      	mov	r1, r4
 8009bd0:	f7ff fd8e 	bl	80096f0 <_Bfree>
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bda:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bde:	3301      	adds	r3, #1
 8009be0:	e7c5      	b.n	8009b6e <__lshift+0x4a>
 8009be2:	3904      	subs	r1, #4
 8009be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009be8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bec:	459c      	cmp	ip, r3
 8009bee:	d8f9      	bhi.n	8009be4 <__lshift+0xc0>
 8009bf0:	e7ea      	b.n	8009bc8 <__lshift+0xa4>
 8009bf2:	bf00      	nop
 8009bf4:	0800c3e9 	.word	0x0800c3e9
 8009bf8:	0800c3fa 	.word	0x0800c3fa

08009bfc <__mcmp>:
 8009bfc:	b530      	push	{r4, r5, lr}
 8009bfe:	6902      	ldr	r2, [r0, #16]
 8009c00:	690c      	ldr	r4, [r1, #16]
 8009c02:	1b12      	subs	r2, r2, r4
 8009c04:	d10e      	bne.n	8009c24 <__mcmp+0x28>
 8009c06:	f100 0314 	add.w	r3, r0, #20
 8009c0a:	3114      	adds	r1, #20
 8009c0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c1c:	42a5      	cmp	r5, r4
 8009c1e:	d003      	beq.n	8009c28 <__mcmp+0x2c>
 8009c20:	d305      	bcc.n	8009c2e <__mcmp+0x32>
 8009c22:	2201      	movs	r2, #1
 8009c24:	4610      	mov	r0, r2
 8009c26:	bd30      	pop	{r4, r5, pc}
 8009c28:	4283      	cmp	r3, r0
 8009c2a:	d3f3      	bcc.n	8009c14 <__mcmp+0x18>
 8009c2c:	e7fa      	b.n	8009c24 <__mcmp+0x28>
 8009c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c32:	e7f7      	b.n	8009c24 <__mcmp+0x28>

08009c34 <__mdiff>:
 8009c34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c38:	460c      	mov	r4, r1
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	4611      	mov	r1, r2
 8009c3e:	4620      	mov	r0, r4
 8009c40:	4690      	mov	r8, r2
 8009c42:	f7ff ffdb 	bl	8009bfc <__mcmp>
 8009c46:	1e05      	subs	r5, r0, #0
 8009c48:	d110      	bne.n	8009c6c <__mdiff+0x38>
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f7ff fd0f 	bl	8009670 <_Balloc>
 8009c52:	b930      	cbnz	r0, 8009c62 <__mdiff+0x2e>
 8009c54:	4b3a      	ldr	r3, [pc, #232]	; (8009d40 <__mdiff+0x10c>)
 8009c56:	4602      	mov	r2, r0
 8009c58:	f240 2137 	movw	r1, #567	; 0x237
 8009c5c:	4839      	ldr	r0, [pc, #228]	; (8009d44 <__mdiff+0x110>)
 8009c5e:	f001 fa5f 	bl	800b120 <__assert_func>
 8009c62:	2301      	movs	r3, #1
 8009c64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6c:	bfa4      	itt	ge
 8009c6e:	4643      	movge	r3, r8
 8009c70:	46a0      	movge	r8, r4
 8009c72:	4630      	mov	r0, r6
 8009c74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c78:	bfa6      	itte	ge
 8009c7a:	461c      	movge	r4, r3
 8009c7c:	2500      	movge	r5, #0
 8009c7e:	2501      	movlt	r5, #1
 8009c80:	f7ff fcf6 	bl	8009670 <_Balloc>
 8009c84:	b920      	cbnz	r0, 8009c90 <__mdiff+0x5c>
 8009c86:	4b2e      	ldr	r3, [pc, #184]	; (8009d40 <__mdiff+0x10c>)
 8009c88:	4602      	mov	r2, r0
 8009c8a:	f240 2145 	movw	r1, #581	; 0x245
 8009c8e:	e7e5      	b.n	8009c5c <__mdiff+0x28>
 8009c90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c94:	6926      	ldr	r6, [r4, #16]
 8009c96:	60c5      	str	r5, [r0, #12]
 8009c98:	f104 0914 	add.w	r9, r4, #20
 8009c9c:	f108 0514 	add.w	r5, r8, #20
 8009ca0:	f100 0e14 	add.w	lr, r0, #20
 8009ca4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ca8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009cac:	f108 0210 	add.w	r2, r8, #16
 8009cb0:	46f2      	mov	sl, lr
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009cbc:	fa11 f88b 	uxtah	r8, r1, fp
 8009cc0:	b299      	uxth	r1, r3
 8009cc2:	0c1b      	lsrs	r3, r3, #16
 8009cc4:	eba8 0801 	sub.w	r8, r8, r1
 8009cc8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ccc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009cd0:	fa1f f888 	uxth.w	r8, r8
 8009cd4:	1419      	asrs	r1, r3, #16
 8009cd6:	454e      	cmp	r6, r9
 8009cd8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009cdc:	f84a 3b04 	str.w	r3, [sl], #4
 8009ce0:	d8e8      	bhi.n	8009cb4 <__mdiff+0x80>
 8009ce2:	1b33      	subs	r3, r6, r4
 8009ce4:	3b15      	subs	r3, #21
 8009ce6:	f023 0303 	bic.w	r3, r3, #3
 8009cea:	3304      	adds	r3, #4
 8009cec:	3415      	adds	r4, #21
 8009cee:	42a6      	cmp	r6, r4
 8009cf0:	bf38      	it	cc
 8009cf2:	2304      	movcc	r3, #4
 8009cf4:	441d      	add	r5, r3
 8009cf6:	4473      	add	r3, lr
 8009cf8:	469e      	mov	lr, r3
 8009cfa:	462e      	mov	r6, r5
 8009cfc:	4566      	cmp	r6, ip
 8009cfe:	d30e      	bcc.n	8009d1e <__mdiff+0xea>
 8009d00:	f10c 0203 	add.w	r2, ip, #3
 8009d04:	1b52      	subs	r2, r2, r5
 8009d06:	f022 0203 	bic.w	r2, r2, #3
 8009d0a:	3d03      	subs	r5, #3
 8009d0c:	45ac      	cmp	ip, r5
 8009d0e:	bf38      	it	cc
 8009d10:	2200      	movcc	r2, #0
 8009d12:	4413      	add	r3, r2
 8009d14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009d18:	b17a      	cbz	r2, 8009d3a <__mdiff+0x106>
 8009d1a:	6107      	str	r7, [r0, #16]
 8009d1c:	e7a4      	b.n	8009c68 <__mdiff+0x34>
 8009d1e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009d22:	fa11 f288 	uxtah	r2, r1, r8
 8009d26:	1414      	asrs	r4, r2, #16
 8009d28:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009d2c:	b292      	uxth	r2, r2
 8009d2e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009d32:	f84e 2b04 	str.w	r2, [lr], #4
 8009d36:	1421      	asrs	r1, r4, #16
 8009d38:	e7e0      	b.n	8009cfc <__mdiff+0xc8>
 8009d3a:	3f01      	subs	r7, #1
 8009d3c:	e7ea      	b.n	8009d14 <__mdiff+0xe0>
 8009d3e:	bf00      	nop
 8009d40:	0800c3e9 	.word	0x0800c3e9
 8009d44:	0800c3fa 	.word	0x0800c3fa

08009d48 <__ulp>:
 8009d48:	b082      	sub	sp, #8
 8009d4a:	ed8d 0b00 	vstr	d0, [sp]
 8009d4e:	9a01      	ldr	r2, [sp, #4]
 8009d50:	4b0f      	ldr	r3, [pc, #60]	; (8009d90 <__ulp+0x48>)
 8009d52:	4013      	ands	r3, r2
 8009d54:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	dc08      	bgt.n	8009d6e <__ulp+0x26>
 8009d5c:	425b      	negs	r3, r3
 8009d5e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009d62:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009d66:	da04      	bge.n	8009d72 <__ulp+0x2a>
 8009d68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d6c:	4113      	asrs	r3, r2
 8009d6e:	2200      	movs	r2, #0
 8009d70:	e008      	b.n	8009d84 <__ulp+0x3c>
 8009d72:	f1a2 0314 	sub.w	r3, r2, #20
 8009d76:	2b1e      	cmp	r3, #30
 8009d78:	bfda      	itte	le
 8009d7a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009d7e:	40da      	lsrle	r2, r3
 8009d80:	2201      	movgt	r2, #1
 8009d82:	2300      	movs	r3, #0
 8009d84:	4619      	mov	r1, r3
 8009d86:	4610      	mov	r0, r2
 8009d88:	ec41 0b10 	vmov	d0, r0, r1
 8009d8c:	b002      	add	sp, #8
 8009d8e:	4770      	bx	lr
 8009d90:	7ff00000 	.word	0x7ff00000

08009d94 <__b2d>:
 8009d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d98:	6906      	ldr	r6, [r0, #16]
 8009d9a:	f100 0814 	add.w	r8, r0, #20
 8009d9e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009da2:	1f37      	subs	r7, r6, #4
 8009da4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009da8:	4610      	mov	r0, r2
 8009daa:	f7ff fd53 	bl	8009854 <__hi0bits>
 8009dae:	f1c0 0320 	rsb	r3, r0, #32
 8009db2:	280a      	cmp	r0, #10
 8009db4:	600b      	str	r3, [r1, #0]
 8009db6:	491b      	ldr	r1, [pc, #108]	; (8009e24 <__b2d+0x90>)
 8009db8:	dc15      	bgt.n	8009de6 <__b2d+0x52>
 8009dba:	f1c0 0c0b 	rsb	ip, r0, #11
 8009dbe:	fa22 f30c 	lsr.w	r3, r2, ip
 8009dc2:	45b8      	cmp	r8, r7
 8009dc4:	ea43 0501 	orr.w	r5, r3, r1
 8009dc8:	bf34      	ite	cc
 8009dca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009dce:	2300      	movcs	r3, #0
 8009dd0:	3015      	adds	r0, #21
 8009dd2:	fa02 f000 	lsl.w	r0, r2, r0
 8009dd6:	fa23 f30c 	lsr.w	r3, r3, ip
 8009dda:	4303      	orrs	r3, r0
 8009ddc:	461c      	mov	r4, r3
 8009dde:	ec45 4b10 	vmov	d0, r4, r5
 8009de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de6:	45b8      	cmp	r8, r7
 8009de8:	bf3a      	itte	cc
 8009dea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009dee:	f1a6 0708 	subcc.w	r7, r6, #8
 8009df2:	2300      	movcs	r3, #0
 8009df4:	380b      	subs	r0, #11
 8009df6:	d012      	beq.n	8009e1e <__b2d+0x8a>
 8009df8:	f1c0 0120 	rsb	r1, r0, #32
 8009dfc:	fa23 f401 	lsr.w	r4, r3, r1
 8009e00:	4082      	lsls	r2, r0
 8009e02:	4322      	orrs	r2, r4
 8009e04:	4547      	cmp	r7, r8
 8009e06:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009e0a:	bf8c      	ite	hi
 8009e0c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009e10:	2200      	movls	r2, #0
 8009e12:	4083      	lsls	r3, r0
 8009e14:	40ca      	lsrs	r2, r1
 8009e16:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	e7de      	b.n	8009ddc <__b2d+0x48>
 8009e1e:	ea42 0501 	orr.w	r5, r2, r1
 8009e22:	e7db      	b.n	8009ddc <__b2d+0x48>
 8009e24:	3ff00000 	.word	0x3ff00000

08009e28 <__d2b>:
 8009e28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e2c:	460f      	mov	r7, r1
 8009e2e:	2101      	movs	r1, #1
 8009e30:	ec59 8b10 	vmov	r8, r9, d0
 8009e34:	4616      	mov	r6, r2
 8009e36:	f7ff fc1b 	bl	8009670 <_Balloc>
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	b930      	cbnz	r0, 8009e4c <__d2b+0x24>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	4b24      	ldr	r3, [pc, #144]	; (8009ed4 <__d2b+0xac>)
 8009e42:	4825      	ldr	r0, [pc, #148]	; (8009ed8 <__d2b+0xb0>)
 8009e44:	f240 310f 	movw	r1, #783	; 0x30f
 8009e48:	f001 f96a 	bl	800b120 <__assert_func>
 8009e4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009e50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e54:	bb2d      	cbnz	r5, 8009ea2 <__d2b+0x7a>
 8009e56:	9301      	str	r3, [sp, #4]
 8009e58:	f1b8 0300 	subs.w	r3, r8, #0
 8009e5c:	d026      	beq.n	8009eac <__d2b+0x84>
 8009e5e:	4668      	mov	r0, sp
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	f7ff fd17 	bl	8009894 <__lo0bits>
 8009e66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009e6a:	b1e8      	cbz	r0, 8009ea8 <__d2b+0x80>
 8009e6c:	f1c0 0320 	rsb	r3, r0, #32
 8009e70:	fa02 f303 	lsl.w	r3, r2, r3
 8009e74:	430b      	orrs	r3, r1
 8009e76:	40c2      	lsrs	r2, r0
 8009e78:	6163      	str	r3, [r4, #20]
 8009e7a:	9201      	str	r2, [sp, #4]
 8009e7c:	9b01      	ldr	r3, [sp, #4]
 8009e7e:	61a3      	str	r3, [r4, #24]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	bf14      	ite	ne
 8009e84:	2202      	movne	r2, #2
 8009e86:	2201      	moveq	r2, #1
 8009e88:	6122      	str	r2, [r4, #16]
 8009e8a:	b1bd      	cbz	r5, 8009ebc <__d2b+0x94>
 8009e8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e90:	4405      	add	r5, r0
 8009e92:	603d      	str	r5, [r7, #0]
 8009e94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e98:	6030      	str	r0, [r6, #0]
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	b003      	add	sp, #12
 8009e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ea6:	e7d6      	b.n	8009e56 <__d2b+0x2e>
 8009ea8:	6161      	str	r1, [r4, #20]
 8009eaa:	e7e7      	b.n	8009e7c <__d2b+0x54>
 8009eac:	a801      	add	r0, sp, #4
 8009eae:	f7ff fcf1 	bl	8009894 <__lo0bits>
 8009eb2:	9b01      	ldr	r3, [sp, #4]
 8009eb4:	6163      	str	r3, [r4, #20]
 8009eb6:	3020      	adds	r0, #32
 8009eb8:	2201      	movs	r2, #1
 8009eba:	e7e5      	b.n	8009e88 <__d2b+0x60>
 8009ebc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ec0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ec4:	6038      	str	r0, [r7, #0]
 8009ec6:	6918      	ldr	r0, [r3, #16]
 8009ec8:	f7ff fcc4 	bl	8009854 <__hi0bits>
 8009ecc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ed0:	e7e2      	b.n	8009e98 <__d2b+0x70>
 8009ed2:	bf00      	nop
 8009ed4:	0800c3e9 	.word	0x0800c3e9
 8009ed8:	0800c3fa 	.word	0x0800c3fa

08009edc <__ratio>:
 8009edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee0:	4688      	mov	r8, r1
 8009ee2:	4669      	mov	r1, sp
 8009ee4:	4681      	mov	r9, r0
 8009ee6:	f7ff ff55 	bl	8009d94 <__b2d>
 8009eea:	a901      	add	r1, sp, #4
 8009eec:	4640      	mov	r0, r8
 8009eee:	ec55 4b10 	vmov	r4, r5, d0
 8009ef2:	ee10 aa10 	vmov	sl, s0
 8009ef6:	f7ff ff4d 	bl	8009d94 <__b2d>
 8009efa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009efe:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8009f02:	1ad2      	subs	r2, r2, r3
 8009f04:	e9dd 3100 	ldrd	r3, r1, [sp]
 8009f08:	1a5b      	subs	r3, r3, r1
 8009f0a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8009f0e:	ec57 6b10 	vmov	r6, r7, d0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	bfd6      	itet	le
 8009f16:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009f1a:	462a      	movgt	r2, r5
 8009f1c:	463a      	movle	r2, r7
 8009f1e:	46ab      	mov	fp, r5
 8009f20:	bfd6      	itet	le
 8009f22:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8009f26:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009f2a:	ee00 3a90 	vmovle	s1, r3
 8009f2e:	ec4b ab17 	vmov	d7, sl, fp
 8009f32:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8009f36:	b003      	add	sp, #12
 8009f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f3c <__copybits>:
 8009f3c:	3901      	subs	r1, #1
 8009f3e:	b570      	push	{r4, r5, r6, lr}
 8009f40:	1149      	asrs	r1, r1, #5
 8009f42:	6914      	ldr	r4, [r2, #16]
 8009f44:	3101      	adds	r1, #1
 8009f46:	f102 0314 	add.w	r3, r2, #20
 8009f4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009f52:	1f05      	subs	r5, r0, #4
 8009f54:	42a3      	cmp	r3, r4
 8009f56:	d30c      	bcc.n	8009f72 <__copybits+0x36>
 8009f58:	1aa3      	subs	r3, r4, r2
 8009f5a:	3b11      	subs	r3, #17
 8009f5c:	f023 0303 	bic.w	r3, r3, #3
 8009f60:	3211      	adds	r2, #17
 8009f62:	42a2      	cmp	r2, r4
 8009f64:	bf88      	it	hi
 8009f66:	2300      	movhi	r3, #0
 8009f68:	4418      	add	r0, r3
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	4288      	cmp	r0, r1
 8009f6e:	d305      	bcc.n	8009f7c <__copybits+0x40>
 8009f70:	bd70      	pop	{r4, r5, r6, pc}
 8009f72:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f76:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f7a:	e7eb      	b.n	8009f54 <__copybits+0x18>
 8009f7c:	f840 3b04 	str.w	r3, [r0], #4
 8009f80:	e7f4      	b.n	8009f6c <__copybits+0x30>

08009f82 <__any_on>:
 8009f82:	f100 0214 	add.w	r2, r0, #20
 8009f86:	6900      	ldr	r0, [r0, #16]
 8009f88:	114b      	asrs	r3, r1, #5
 8009f8a:	4298      	cmp	r0, r3
 8009f8c:	b510      	push	{r4, lr}
 8009f8e:	db11      	blt.n	8009fb4 <__any_on+0x32>
 8009f90:	dd0a      	ble.n	8009fa8 <__any_on+0x26>
 8009f92:	f011 011f 	ands.w	r1, r1, #31
 8009f96:	d007      	beq.n	8009fa8 <__any_on+0x26>
 8009f98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f9c:	fa24 f001 	lsr.w	r0, r4, r1
 8009fa0:	fa00 f101 	lsl.w	r1, r0, r1
 8009fa4:	428c      	cmp	r4, r1
 8009fa6:	d10b      	bne.n	8009fc0 <__any_on+0x3e>
 8009fa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d803      	bhi.n	8009fb8 <__any_on+0x36>
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	bd10      	pop	{r4, pc}
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	e7f7      	b.n	8009fa8 <__any_on+0x26>
 8009fb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009fbc:	2900      	cmp	r1, #0
 8009fbe:	d0f5      	beq.n	8009fac <__any_on+0x2a>
 8009fc0:	2001      	movs	r0, #1
 8009fc2:	e7f6      	b.n	8009fb2 <__any_on+0x30>

08009fc4 <sulp>:
 8009fc4:	b570      	push	{r4, r5, r6, lr}
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	460d      	mov	r5, r1
 8009fca:	4616      	mov	r6, r2
 8009fcc:	ec45 4b10 	vmov	d0, r4, r5
 8009fd0:	f7ff feba 	bl	8009d48 <__ulp>
 8009fd4:	b17e      	cbz	r6, 8009ff6 <sulp+0x32>
 8009fd6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009fda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	dd09      	ble.n	8009ff6 <sulp+0x32>
 8009fe2:	051b      	lsls	r3, r3, #20
 8009fe4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009fe8:	2000      	movs	r0, #0
 8009fea:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8009fee:	ec41 0b17 	vmov	d7, r0, r1
 8009ff2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009ff6:	bd70      	pop	{r4, r5, r6, pc}

08009ff8 <_strtod_l>:
 8009ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffc:	ed2d 8b0e 	vpush	{d8-d14}
 800a000:	b097      	sub	sp, #92	; 0x5c
 800a002:	4604      	mov	r4, r0
 800a004:	920d      	str	r2, [sp, #52]	; 0x34
 800a006:	2200      	movs	r2, #0
 800a008:	9212      	str	r2, [sp, #72]	; 0x48
 800a00a:	468a      	mov	sl, r1
 800a00c:	f04f 0800 	mov.w	r8, #0
 800a010:	f04f 0900 	mov.w	r9, #0
 800a014:	460a      	mov	r2, r1
 800a016:	9211      	str	r2, [sp, #68]	; 0x44
 800a018:	7811      	ldrb	r1, [r2, #0]
 800a01a:	292b      	cmp	r1, #43	; 0x2b
 800a01c:	d04c      	beq.n	800a0b8 <_strtod_l+0xc0>
 800a01e:	d839      	bhi.n	800a094 <_strtod_l+0x9c>
 800a020:	290d      	cmp	r1, #13
 800a022:	d833      	bhi.n	800a08c <_strtod_l+0x94>
 800a024:	2908      	cmp	r1, #8
 800a026:	d833      	bhi.n	800a090 <_strtod_l+0x98>
 800a028:	2900      	cmp	r1, #0
 800a02a:	d03c      	beq.n	800a0a6 <_strtod_l+0xae>
 800a02c:	2200      	movs	r2, #0
 800a02e:	9208      	str	r2, [sp, #32]
 800a030:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a032:	7832      	ldrb	r2, [r6, #0]
 800a034:	2a30      	cmp	r2, #48	; 0x30
 800a036:	f040 80b8 	bne.w	800a1aa <_strtod_l+0x1b2>
 800a03a:	7872      	ldrb	r2, [r6, #1]
 800a03c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a040:	2a58      	cmp	r2, #88	; 0x58
 800a042:	d170      	bne.n	800a126 <_strtod_l+0x12e>
 800a044:	9302      	str	r3, [sp, #8]
 800a046:	9b08      	ldr	r3, [sp, #32]
 800a048:	9301      	str	r3, [sp, #4]
 800a04a:	ab12      	add	r3, sp, #72	; 0x48
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	4a91      	ldr	r2, [pc, #580]	; (800a294 <_strtod_l+0x29c>)
 800a050:	ab13      	add	r3, sp, #76	; 0x4c
 800a052:	a911      	add	r1, sp, #68	; 0x44
 800a054:	4620      	mov	r0, r4
 800a056:	f001 f8ff 	bl	800b258 <__gethex>
 800a05a:	f010 070f 	ands.w	r7, r0, #15
 800a05e:	4605      	mov	r5, r0
 800a060:	d005      	beq.n	800a06e <_strtod_l+0x76>
 800a062:	2f06      	cmp	r7, #6
 800a064:	d12a      	bne.n	800a0bc <_strtod_l+0xc4>
 800a066:	3601      	adds	r6, #1
 800a068:	2300      	movs	r3, #0
 800a06a:	9611      	str	r6, [sp, #68]	; 0x44
 800a06c:	9308      	str	r3, [sp, #32]
 800a06e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a070:	2b00      	cmp	r3, #0
 800a072:	f040 8555 	bne.w	800ab20 <_strtod_l+0xb28>
 800a076:	9b08      	ldr	r3, [sp, #32]
 800a078:	ec49 8b10 	vmov	d0, r8, r9
 800a07c:	b1cb      	cbz	r3, 800a0b2 <_strtod_l+0xba>
 800a07e:	eeb1 0b40 	vneg.f64	d0, d0
 800a082:	b017      	add	sp, #92	; 0x5c
 800a084:	ecbd 8b0e 	vpop	{d8-d14}
 800a088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08c:	2920      	cmp	r1, #32
 800a08e:	d1cd      	bne.n	800a02c <_strtod_l+0x34>
 800a090:	3201      	adds	r2, #1
 800a092:	e7c0      	b.n	800a016 <_strtod_l+0x1e>
 800a094:	292d      	cmp	r1, #45	; 0x2d
 800a096:	d1c9      	bne.n	800a02c <_strtod_l+0x34>
 800a098:	2101      	movs	r1, #1
 800a09a:	9108      	str	r1, [sp, #32]
 800a09c:	1c51      	adds	r1, r2, #1
 800a09e:	9111      	str	r1, [sp, #68]	; 0x44
 800a0a0:	7852      	ldrb	r2, [r2, #1]
 800a0a2:	2a00      	cmp	r2, #0
 800a0a4:	d1c4      	bne.n	800a030 <_strtod_l+0x38>
 800a0a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0a8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f040 8535 	bne.w	800ab1c <_strtod_l+0xb24>
 800a0b2:	ec49 8b10 	vmov	d0, r8, r9
 800a0b6:	e7e4      	b.n	800a082 <_strtod_l+0x8a>
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	e7ee      	b.n	800a09a <_strtod_l+0xa2>
 800a0bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0be:	b13a      	cbz	r2, 800a0d0 <_strtod_l+0xd8>
 800a0c0:	2135      	movs	r1, #53	; 0x35
 800a0c2:	a814      	add	r0, sp, #80	; 0x50
 800a0c4:	f7ff ff3a 	bl	8009f3c <__copybits>
 800a0c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f7ff fb10 	bl	80096f0 <_Bfree>
 800a0d0:	1e7b      	subs	r3, r7, #1
 800a0d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a0d4:	2b04      	cmp	r3, #4
 800a0d6:	d806      	bhi.n	800a0e6 <_strtod_l+0xee>
 800a0d8:	e8df f003 	tbb	[pc, r3]
 800a0dc:	201d0314 	.word	0x201d0314
 800a0e0:	14          	.byte	0x14
 800a0e1:	00          	.byte	0x00
 800a0e2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800a0e6:	05eb      	lsls	r3, r5, #23
 800a0e8:	bf48      	it	mi
 800a0ea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a0ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0f2:	0d1b      	lsrs	r3, r3, #20
 800a0f4:	051b      	lsls	r3, r3, #20
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1b9      	bne.n	800a06e <_strtod_l+0x76>
 800a0fa:	f7fe fb8f 	bl	800881c <__errno>
 800a0fe:	2322      	movs	r3, #34	; 0x22
 800a100:	6003      	str	r3, [r0, #0]
 800a102:	e7b4      	b.n	800a06e <_strtod_l+0x76>
 800a104:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800a108:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a10c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a110:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a114:	e7e7      	b.n	800a0e6 <_strtod_l+0xee>
 800a116:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800a29c <_strtod_l+0x2a4>
 800a11a:	e7e4      	b.n	800a0e6 <_strtod_l+0xee>
 800a11c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a120:	f04f 38ff 	mov.w	r8, #4294967295
 800a124:	e7df      	b.n	800a0e6 <_strtod_l+0xee>
 800a126:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a128:	1c5a      	adds	r2, r3, #1
 800a12a:	9211      	str	r2, [sp, #68]	; 0x44
 800a12c:	785b      	ldrb	r3, [r3, #1]
 800a12e:	2b30      	cmp	r3, #48	; 0x30
 800a130:	d0f9      	beq.n	800a126 <_strtod_l+0x12e>
 800a132:	2b00      	cmp	r3, #0
 800a134:	d09b      	beq.n	800a06e <_strtod_l+0x76>
 800a136:	2301      	movs	r3, #1
 800a138:	9306      	str	r3, [sp, #24]
 800a13a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a13c:	9309      	str	r3, [sp, #36]	; 0x24
 800a13e:	2300      	movs	r3, #0
 800a140:	9305      	str	r3, [sp, #20]
 800a142:	9307      	str	r3, [sp, #28]
 800a144:	461e      	mov	r6, r3
 800a146:	220a      	movs	r2, #10
 800a148:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a14a:	7805      	ldrb	r5, [r0, #0]
 800a14c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a150:	b2d9      	uxtb	r1, r3
 800a152:	2909      	cmp	r1, #9
 800a154:	d92b      	bls.n	800a1ae <_strtod_l+0x1b6>
 800a156:	4950      	ldr	r1, [pc, #320]	; (800a298 <_strtod_l+0x2a0>)
 800a158:	2201      	movs	r2, #1
 800a15a:	f000 ffa9 	bl	800b0b0 <strncmp>
 800a15e:	2800      	cmp	r0, #0
 800a160:	d035      	beq.n	800a1ce <_strtod_l+0x1d6>
 800a162:	2000      	movs	r0, #0
 800a164:	462a      	mov	r2, r5
 800a166:	4633      	mov	r3, r6
 800a168:	4683      	mov	fp, r0
 800a16a:	4601      	mov	r1, r0
 800a16c:	2a65      	cmp	r2, #101	; 0x65
 800a16e:	d001      	beq.n	800a174 <_strtod_l+0x17c>
 800a170:	2a45      	cmp	r2, #69	; 0x45
 800a172:	d118      	bne.n	800a1a6 <_strtod_l+0x1ae>
 800a174:	b91b      	cbnz	r3, 800a17e <_strtod_l+0x186>
 800a176:	9b06      	ldr	r3, [sp, #24]
 800a178:	4303      	orrs	r3, r0
 800a17a:	d094      	beq.n	800a0a6 <_strtod_l+0xae>
 800a17c:	2300      	movs	r3, #0
 800a17e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800a182:	f10a 0201 	add.w	r2, sl, #1
 800a186:	9211      	str	r2, [sp, #68]	; 0x44
 800a188:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800a18c:	2a2b      	cmp	r2, #43	; 0x2b
 800a18e:	d075      	beq.n	800a27c <_strtod_l+0x284>
 800a190:	2a2d      	cmp	r2, #45	; 0x2d
 800a192:	d07b      	beq.n	800a28c <_strtod_l+0x294>
 800a194:	f04f 0e00 	mov.w	lr, #0
 800a198:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a19c:	2d09      	cmp	r5, #9
 800a19e:	f240 8083 	bls.w	800a2a8 <_strtod_l+0x2b0>
 800a1a2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800a1a6:	2500      	movs	r5, #0
 800a1a8:	e09e      	b.n	800a2e8 <_strtod_l+0x2f0>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	e7c4      	b.n	800a138 <_strtod_l+0x140>
 800a1ae:	2e08      	cmp	r6, #8
 800a1b0:	bfd5      	itete	le
 800a1b2:	9907      	ldrle	r1, [sp, #28]
 800a1b4:	9905      	ldrgt	r1, [sp, #20]
 800a1b6:	fb02 3301 	mlale	r3, r2, r1, r3
 800a1ba:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a1be:	f100 0001 	add.w	r0, r0, #1
 800a1c2:	bfd4      	ite	le
 800a1c4:	9307      	strle	r3, [sp, #28]
 800a1c6:	9305      	strgt	r3, [sp, #20]
 800a1c8:	3601      	adds	r6, #1
 800a1ca:	9011      	str	r0, [sp, #68]	; 0x44
 800a1cc:	e7bc      	b.n	800a148 <_strtod_l+0x150>
 800a1ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1d0:	1c5a      	adds	r2, r3, #1
 800a1d2:	9211      	str	r2, [sp, #68]	; 0x44
 800a1d4:	785a      	ldrb	r2, [r3, #1]
 800a1d6:	b3ae      	cbz	r6, 800a244 <_strtod_l+0x24c>
 800a1d8:	4683      	mov	fp, r0
 800a1da:	4633      	mov	r3, r6
 800a1dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a1e0:	2909      	cmp	r1, #9
 800a1e2:	d912      	bls.n	800a20a <_strtod_l+0x212>
 800a1e4:	2101      	movs	r1, #1
 800a1e6:	e7c1      	b.n	800a16c <_strtod_l+0x174>
 800a1e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1ea:	1c5a      	adds	r2, r3, #1
 800a1ec:	9211      	str	r2, [sp, #68]	; 0x44
 800a1ee:	785a      	ldrb	r2, [r3, #1]
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	2a30      	cmp	r2, #48	; 0x30
 800a1f4:	d0f8      	beq.n	800a1e8 <_strtod_l+0x1f0>
 800a1f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a1fa:	2b08      	cmp	r3, #8
 800a1fc:	f200 8495 	bhi.w	800ab2a <_strtod_l+0xb32>
 800a200:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a202:	9309      	str	r3, [sp, #36]	; 0x24
 800a204:	4683      	mov	fp, r0
 800a206:	2000      	movs	r0, #0
 800a208:	4603      	mov	r3, r0
 800a20a:	3a30      	subs	r2, #48	; 0x30
 800a20c:	f100 0101 	add.w	r1, r0, #1
 800a210:	d012      	beq.n	800a238 <_strtod_l+0x240>
 800a212:	448b      	add	fp, r1
 800a214:	eb00 0c03 	add.w	ip, r0, r3
 800a218:	4619      	mov	r1, r3
 800a21a:	250a      	movs	r5, #10
 800a21c:	4561      	cmp	r1, ip
 800a21e:	d113      	bne.n	800a248 <_strtod_l+0x250>
 800a220:	1819      	adds	r1, r3, r0
 800a222:	2908      	cmp	r1, #8
 800a224:	f103 0301 	add.w	r3, r3, #1
 800a228:	4403      	add	r3, r0
 800a22a:	dc1b      	bgt.n	800a264 <_strtod_l+0x26c>
 800a22c:	9807      	ldr	r0, [sp, #28]
 800a22e:	210a      	movs	r1, #10
 800a230:	fb01 2200 	mla	r2, r1, r0, r2
 800a234:	9207      	str	r2, [sp, #28]
 800a236:	2100      	movs	r1, #0
 800a238:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a23a:	1c50      	adds	r0, r2, #1
 800a23c:	9011      	str	r0, [sp, #68]	; 0x44
 800a23e:	7852      	ldrb	r2, [r2, #1]
 800a240:	4608      	mov	r0, r1
 800a242:	e7cb      	b.n	800a1dc <_strtod_l+0x1e4>
 800a244:	4630      	mov	r0, r6
 800a246:	e7d4      	b.n	800a1f2 <_strtod_l+0x1fa>
 800a248:	2908      	cmp	r1, #8
 800a24a:	f101 0101 	add.w	r1, r1, #1
 800a24e:	dc03      	bgt.n	800a258 <_strtod_l+0x260>
 800a250:	9f07      	ldr	r7, [sp, #28]
 800a252:	436f      	muls	r7, r5
 800a254:	9707      	str	r7, [sp, #28]
 800a256:	e7e1      	b.n	800a21c <_strtod_l+0x224>
 800a258:	2910      	cmp	r1, #16
 800a25a:	bfde      	ittt	le
 800a25c:	9f05      	ldrle	r7, [sp, #20]
 800a25e:	436f      	mulle	r7, r5
 800a260:	9705      	strle	r7, [sp, #20]
 800a262:	e7db      	b.n	800a21c <_strtod_l+0x224>
 800a264:	2b10      	cmp	r3, #16
 800a266:	bfdf      	itttt	le
 800a268:	9805      	ldrle	r0, [sp, #20]
 800a26a:	210a      	movle	r1, #10
 800a26c:	fb01 2200 	mlale	r2, r1, r0, r2
 800a270:	9205      	strle	r2, [sp, #20]
 800a272:	e7e0      	b.n	800a236 <_strtod_l+0x23e>
 800a274:	f04f 0b00 	mov.w	fp, #0
 800a278:	2101      	movs	r1, #1
 800a27a:	e77c      	b.n	800a176 <_strtod_l+0x17e>
 800a27c:	f04f 0e00 	mov.w	lr, #0
 800a280:	f10a 0202 	add.w	r2, sl, #2
 800a284:	9211      	str	r2, [sp, #68]	; 0x44
 800a286:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800a28a:	e785      	b.n	800a198 <_strtod_l+0x1a0>
 800a28c:	f04f 0e01 	mov.w	lr, #1
 800a290:	e7f6      	b.n	800a280 <_strtod_l+0x288>
 800a292:	bf00      	nop
 800a294:	0800c558 	.word	0x0800c558
 800a298:	0800c554 	.word	0x0800c554
 800a29c:	7ff00000 	.word	0x7ff00000
 800a2a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a2a2:	1c55      	adds	r5, r2, #1
 800a2a4:	9511      	str	r5, [sp, #68]	; 0x44
 800a2a6:	7852      	ldrb	r2, [r2, #1]
 800a2a8:	2a30      	cmp	r2, #48	; 0x30
 800a2aa:	d0f9      	beq.n	800a2a0 <_strtod_l+0x2a8>
 800a2ac:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800a2b0:	2d08      	cmp	r5, #8
 800a2b2:	f63f af78 	bhi.w	800a1a6 <_strtod_l+0x1ae>
 800a2b6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a2ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a2bc:	920a      	str	r2, [sp, #40]	; 0x28
 800a2be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a2c0:	1c55      	adds	r5, r2, #1
 800a2c2:	9511      	str	r5, [sp, #68]	; 0x44
 800a2c4:	7852      	ldrb	r2, [r2, #1]
 800a2c6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800a2ca:	2f09      	cmp	r7, #9
 800a2cc:	d937      	bls.n	800a33e <_strtod_l+0x346>
 800a2ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a2d0:	1bed      	subs	r5, r5, r7
 800a2d2:	2d08      	cmp	r5, #8
 800a2d4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a2d8:	dc02      	bgt.n	800a2e0 <_strtod_l+0x2e8>
 800a2da:	4565      	cmp	r5, ip
 800a2dc:	bfa8      	it	ge
 800a2de:	4665      	movge	r5, ip
 800a2e0:	f1be 0f00 	cmp.w	lr, #0
 800a2e4:	d000      	beq.n	800a2e8 <_strtod_l+0x2f0>
 800a2e6:	426d      	negs	r5, r5
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d14d      	bne.n	800a388 <_strtod_l+0x390>
 800a2ec:	9b06      	ldr	r3, [sp, #24]
 800a2ee:	4303      	orrs	r3, r0
 800a2f0:	f47f aebd 	bne.w	800a06e <_strtod_l+0x76>
 800a2f4:	2900      	cmp	r1, #0
 800a2f6:	f47f aed6 	bne.w	800a0a6 <_strtod_l+0xae>
 800a2fa:	2a69      	cmp	r2, #105	; 0x69
 800a2fc:	d027      	beq.n	800a34e <_strtod_l+0x356>
 800a2fe:	dc24      	bgt.n	800a34a <_strtod_l+0x352>
 800a300:	2a49      	cmp	r2, #73	; 0x49
 800a302:	d024      	beq.n	800a34e <_strtod_l+0x356>
 800a304:	2a4e      	cmp	r2, #78	; 0x4e
 800a306:	f47f aece 	bne.w	800a0a6 <_strtod_l+0xae>
 800a30a:	4995      	ldr	r1, [pc, #596]	; (800a560 <_strtod_l+0x568>)
 800a30c:	a811      	add	r0, sp, #68	; 0x44
 800a30e:	f001 f9e3 	bl	800b6d8 <__match>
 800a312:	2800      	cmp	r0, #0
 800a314:	f43f aec7 	beq.w	800a0a6 <_strtod_l+0xae>
 800a318:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	2b28      	cmp	r3, #40	; 0x28
 800a31e:	d12d      	bne.n	800a37c <_strtod_l+0x384>
 800a320:	4990      	ldr	r1, [pc, #576]	; (800a564 <_strtod_l+0x56c>)
 800a322:	aa14      	add	r2, sp, #80	; 0x50
 800a324:	a811      	add	r0, sp, #68	; 0x44
 800a326:	f001 f9eb 	bl	800b700 <__hexnan>
 800a32a:	2805      	cmp	r0, #5
 800a32c:	d126      	bne.n	800a37c <_strtod_l+0x384>
 800a32e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a330:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a334:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a338:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a33c:	e697      	b.n	800a06e <_strtod_l+0x76>
 800a33e:	250a      	movs	r5, #10
 800a340:	fb05 2c0c 	mla	ip, r5, ip, r2
 800a344:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a348:	e7b9      	b.n	800a2be <_strtod_l+0x2c6>
 800a34a:	2a6e      	cmp	r2, #110	; 0x6e
 800a34c:	e7db      	b.n	800a306 <_strtod_l+0x30e>
 800a34e:	4986      	ldr	r1, [pc, #536]	; (800a568 <_strtod_l+0x570>)
 800a350:	a811      	add	r0, sp, #68	; 0x44
 800a352:	f001 f9c1 	bl	800b6d8 <__match>
 800a356:	2800      	cmp	r0, #0
 800a358:	f43f aea5 	beq.w	800a0a6 <_strtod_l+0xae>
 800a35c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a35e:	4983      	ldr	r1, [pc, #524]	; (800a56c <_strtod_l+0x574>)
 800a360:	3b01      	subs	r3, #1
 800a362:	a811      	add	r0, sp, #68	; 0x44
 800a364:	9311      	str	r3, [sp, #68]	; 0x44
 800a366:	f001 f9b7 	bl	800b6d8 <__match>
 800a36a:	b910      	cbnz	r0, 800a372 <_strtod_l+0x37a>
 800a36c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a36e:	3301      	adds	r3, #1
 800a370:	9311      	str	r3, [sp, #68]	; 0x44
 800a372:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800a580 <_strtod_l+0x588>
 800a376:	f04f 0800 	mov.w	r8, #0
 800a37a:	e678      	b.n	800a06e <_strtod_l+0x76>
 800a37c:	487c      	ldr	r0, [pc, #496]	; (800a570 <_strtod_l+0x578>)
 800a37e:	f000 fec7 	bl	800b110 <nan>
 800a382:	ec59 8b10 	vmov	r8, r9, d0
 800a386:	e672      	b.n	800a06e <_strtod_l+0x76>
 800a388:	eddd 7a07 	vldr	s15, [sp, #28]
 800a38c:	eba5 020b 	sub.w	r2, r5, fp
 800a390:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a394:	2e00      	cmp	r6, #0
 800a396:	bf08      	it	eq
 800a398:	461e      	moveq	r6, r3
 800a39a:	2b10      	cmp	r3, #16
 800a39c:	9206      	str	r2, [sp, #24]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	bfa8      	it	ge
 800a3a2:	2210      	movge	r2, #16
 800a3a4:	2b09      	cmp	r3, #9
 800a3a6:	ec59 8b17 	vmov	r8, r9, d7
 800a3aa:	dd0c      	ble.n	800a3c6 <_strtod_l+0x3ce>
 800a3ac:	4971      	ldr	r1, [pc, #452]	; (800a574 <_strtod_l+0x57c>)
 800a3ae:	eddd 6a05 	vldr	s13, [sp, #20]
 800a3b2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a3b6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800a3ba:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800a3be:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a3c2:	ec59 8b16 	vmov	r8, r9, d6
 800a3c6:	2b0f      	cmp	r3, #15
 800a3c8:	dc37      	bgt.n	800a43a <_strtod_l+0x442>
 800a3ca:	9906      	ldr	r1, [sp, #24]
 800a3cc:	2900      	cmp	r1, #0
 800a3ce:	f43f ae4e 	beq.w	800a06e <_strtod_l+0x76>
 800a3d2:	dd23      	ble.n	800a41c <_strtod_l+0x424>
 800a3d4:	2916      	cmp	r1, #22
 800a3d6:	dc0b      	bgt.n	800a3f0 <_strtod_l+0x3f8>
 800a3d8:	4b66      	ldr	r3, [pc, #408]	; (800a574 <_strtod_l+0x57c>)
 800a3da:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a3de:	ed93 7b00 	vldr	d7, [r3]
 800a3e2:	ec49 8b16 	vmov	d6, r8, r9
 800a3e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a3ea:	ec59 8b17 	vmov	r8, r9, d7
 800a3ee:	e63e      	b.n	800a06e <_strtod_l+0x76>
 800a3f0:	9806      	ldr	r0, [sp, #24]
 800a3f2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800a3f6:	4281      	cmp	r1, r0
 800a3f8:	db1f      	blt.n	800a43a <_strtod_l+0x442>
 800a3fa:	4a5e      	ldr	r2, [pc, #376]	; (800a574 <_strtod_l+0x57c>)
 800a3fc:	f1c3 030f 	rsb	r3, r3, #15
 800a400:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a404:	ed91 7b00 	vldr	d7, [r1]
 800a408:	ec49 8b16 	vmov	d6, r8, r9
 800a40c:	1ac3      	subs	r3, r0, r3
 800a40e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a412:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a416:	ed92 6b00 	vldr	d6, [r2]
 800a41a:	e7e4      	b.n	800a3e6 <_strtod_l+0x3ee>
 800a41c:	9906      	ldr	r1, [sp, #24]
 800a41e:	3116      	adds	r1, #22
 800a420:	db0b      	blt.n	800a43a <_strtod_l+0x442>
 800a422:	4b54      	ldr	r3, [pc, #336]	; (800a574 <_strtod_l+0x57c>)
 800a424:	ebab 0505 	sub.w	r5, fp, r5
 800a428:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a42c:	ed95 7b00 	vldr	d7, [r5]
 800a430:	ec49 8b16 	vmov	d6, r8, r9
 800a434:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a438:	e7d7      	b.n	800a3ea <_strtod_l+0x3f2>
 800a43a:	9906      	ldr	r1, [sp, #24]
 800a43c:	1a9a      	subs	r2, r3, r2
 800a43e:	440a      	add	r2, r1
 800a440:	2a00      	cmp	r2, #0
 800a442:	dd6e      	ble.n	800a522 <_strtod_l+0x52a>
 800a444:	f012 000f 	ands.w	r0, r2, #15
 800a448:	d00a      	beq.n	800a460 <_strtod_l+0x468>
 800a44a:	494a      	ldr	r1, [pc, #296]	; (800a574 <_strtod_l+0x57c>)
 800a44c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a450:	ed91 7b00 	vldr	d7, [r1]
 800a454:	ec49 8b16 	vmov	d6, r8, r9
 800a458:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a45c:	ec59 8b17 	vmov	r8, r9, d7
 800a460:	f032 020f 	bics.w	r2, r2, #15
 800a464:	d04e      	beq.n	800a504 <_strtod_l+0x50c>
 800a466:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800a46a:	dd22      	ble.n	800a4b2 <_strtod_l+0x4ba>
 800a46c:	2500      	movs	r5, #0
 800a46e:	462e      	mov	r6, r5
 800a470:	9507      	str	r5, [sp, #28]
 800a472:	462f      	mov	r7, r5
 800a474:	2322      	movs	r3, #34	; 0x22
 800a476:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a580 <_strtod_l+0x588>
 800a47a:	6023      	str	r3, [r4, #0]
 800a47c:	f04f 0800 	mov.w	r8, #0
 800a480:	9b07      	ldr	r3, [sp, #28]
 800a482:	2b00      	cmp	r3, #0
 800a484:	f43f adf3 	beq.w	800a06e <_strtod_l+0x76>
 800a488:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a48a:	4620      	mov	r0, r4
 800a48c:	f7ff f930 	bl	80096f0 <_Bfree>
 800a490:	4639      	mov	r1, r7
 800a492:	4620      	mov	r0, r4
 800a494:	f7ff f92c 	bl	80096f0 <_Bfree>
 800a498:	4631      	mov	r1, r6
 800a49a:	4620      	mov	r0, r4
 800a49c:	f7ff f928 	bl	80096f0 <_Bfree>
 800a4a0:	9907      	ldr	r1, [sp, #28]
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f7ff f924 	bl	80096f0 <_Bfree>
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f7ff f920 	bl	80096f0 <_Bfree>
 800a4b0:	e5dd      	b.n	800a06e <_strtod_l+0x76>
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	ec49 8b17 	vmov	d7, r8, r9
 800a4b8:	4f2f      	ldr	r7, [pc, #188]	; (800a578 <_strtod_l+0x580>)
 800a4ba:	1112      	asrs	r2, r2, #4
 800a4bc:	4601      	mov	r1, r0
 800a4be:	2a01      	cmp	r2, #1
 800a4c0:	dc23      	bgt.n	800a50a <_strtod_l+0x512>
 800a4c2:	b108      	cbz	r0, 800a4c8 <_strtod_l+0x4d0>
 800a4c4:	ec59 8b17 	vmov	r8, r9, d7
 800a4c8:	4a2b      	ldr	r2, [pc, #172]	; (800a578 <_strtod_l+0x580>)
 800a4ca:	482c      	ldr	r0, [pc, #176]	; (800a57c <_strtod_l+0x584>)
 800a4cc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a4d0:	ed92 7b00 	vldr	d7, [r2]
 800a4d4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a4d8:	ec49 8b16 	vmov	d6, r8, r9
 800a4dc:	4a28      	ldr	r2, [pc, #160]	; (800a580 <_strtod_l+0x588>)
 800a4de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a4e2:	ee17 1a90 	vmov	r1, s15
 800a4e6:	400a      	ands	r2, r1
 800a4e8:	4282      	cmp	r2, r0
 800a4ea:	ec59 8b17 	vmov	r8, r9, d7
 800a4ee:	d8bd      	bhi.n	800a46c <_strtod_l+0x474>
 800a4f0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800a4f4:	4282      	cmp	r2, r0
 800a4f6:	bf86      	itte	hi
 800a4f8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800a584 <_strtod_l+0x58c>
 800a4fc:	f04f 38ff 	movhi.w	r8, #4294967295
 800a500:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800a504:	2200      	movs	r2, #0
 800a506:	9205      	str	r2, [sp, #20]
 800a508:	e076      	b.n	800a5f8 <_strtod_l+0x600>
 800a50a:	f012 0f01 	tst.w	r2, #1
 800a50e:	d004      	beq.n	800a51a <_strtod_l+0x522>
 800a510:	ed97 6b00 	vldr	d6, [r7]
 800a514:	2001      	movs	r0, #1
 800a516:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a51a:	3101      	adds	r1, #1
 800a51c:	1052      	asrs	r2, r2, #1
 800a51e:	3708      	adds	r7, #8
 800a520:	e7cd      	b.n	800a4be <_strtod_l+0x4c6>
 800a522:	d0ef      	beq.n	800a504 <_strtod_l+0x50c>
 800a524:	4252      	negs	r2, r2
 800a526:	f012 000f 	ands.w	r0, r2, #15
 800a52a:	d00a      	beq.n	800a542 <_strtod_l+0x54a>
 800a52c:	4911      	ldr	r1, [pc, #68]	; (800a574 <_strtod_l+0x57c>)
 800a52e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a532:	ed91 7b00 	vldr	d7, [r1]
 800a536:	ec49 8b16 	vmov	d6, r8, r9
 800a53a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a53e:	ec59 8b17 	vmov	r8, r9, d7
 800a542:	1112      	asrs	r2, r2, #4
 800a544:	d0de      	beq.n	800a504 <_strtod_l+0x50c>
 800a546:	2a1f      	cmp	r2, #31
 800a548:	dd1e      	ble.n	800a588 <_strtod_l+0x590>
 800a54a:	2500      	movs	r5, #0
 800a54c:	462e      	mov	r6, r5
 800a54e:	9507      	str	r5, [sp, #28]
 800a550:	462f      	mov	r7, r5
 800a552:	2322      	movs	r3, #34	; 0x22
 800a554:	f04f 0800 	mov.w	r8, #0
 800a558:	f04f 0900 	mov.w	r9, #0
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	e78f      	b.n	800a480 <_strtod_l+0x488>
 800a560:	0800c341 	.word	0x0800c341
 800a564:	0800c56c 	.word	0x0800c56c
 800a568:	0800c339 	.word	0x0800c339
 800a56c:	0800c370 	.word	0x0800c370
 800a570:	0800c6fd 	.word	0x0800c6fd
 800a574:	0800c480 	.word	0x0800c480
 800a578:	0800c458 	.word	0x0800c458
 800a57c:	7ca00000 	.word	0x7ca00000
 800a580:	7ff00000 	.word	0x7ff00000
 800a584:	7fefffff 	.word	0x7fefffff
 800a588:	f012 0110 	ands.w	r1, r2, #16
 800a58c:	bf18      	it	ne
 800a58e:	216a      	movne	r1, #106	; 0x6a
 800a590:	9105      	str	r1, [sp, #20]
 800a592:	ec49 8b17 	vmov	d7, r8, r9
 800a596:	49be      	ldr	r1, [pc, #760]	; (800a890 <_strtod_l+0x898>)
 800a598:	2000      	movs	r0, #0
 800a59a:	07d7      	lsls	r7, r2, #31
 800a59c:	d504      	bpl.n	800a5a8 <_strtod_l+0x5b0>
 800a59e:	ed91 6b00 	vldr	d6, [r1]
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a5a8:	1052      	asrs	r2, r2, #1
 800a5aa:	f101 0108 	add.w	r1, r1, #8
 800a5ae:	d1f4      	bne.n	800a59a <_strtod_l+0x5a2>
 800a5b0:	b108      	cbz	r0, 800a5b6 <_strtod_l+0x5be>
 800a5b2:	ec59 8b17 	vmov	r8, r9, d7
 800a5b6:	9a05      	ldr	r2, [sp, #20]
 800a5b8:	b1ba      	cbz	r2, 800a5ea <_strtod_l+0x5f2>
 800a5ba:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800a5be:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800a5c2:	2a00      	cmp	r2, #0
 800a5c4:	4648      	mov	r0, r9
 800a5c6:	dd10      	ble.n	800a5ea <_strtod_l+0x5f2>
 800a5c8:	2a1f      	cmp	r2, #31
 800a5ca:	f340 812c 	ble.w	800a826 <_strtod_l+0x82e>
 800a5ce:	2a34      	cmp	r2, #52	; 0x34
 800a5d0:	bfde      	ittt	le
 800a5d2:	f04f 32ff 	movle.w	r2, #4294967295
 800a5d6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800a5da:	408a      	lslle	r2, r1
 800a5dc:	f04f 0800 	mov.w	r8, #0
 800a5e0:	bfcc      	ite	gt
 800a5e2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a5e6:	ea02 0900 	andle.w	r9, r2, r0
 800a5ea:	ec49 8b17 	vmov	d7, r8, r9
 800a5ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f6:	d0a8      	beq.n	800a54a <_strtod_l+0x552>
 800a5f8:	9a07      	ldr	r2, [sp, #28]
 800a5fa:	9200      	str	r2, [sp, #0]
 800a5fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5fe:	4632      	mov	r2, r6
 800a600:	4620      	mov	r0, r4
 800a602:	f7ff f8dd 	bl	80097c0 <__s2b>
 800a606:	9007      	str	r0, [sp, #28]
 800a608:	2800      	cmp	r0, #0
 800a60a:	f43f af2f 	beq.w	800a46c <_strtod_l+0x474>
 800a60e:	9a06      	ldr	r2, [sp, #24]
 800a610:	2a00      	cmp	r2, #0
 800a612:	ebab 0305 	sub.w	r3, fp, r5
 800a616:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800a870 <_strtod_l+0x878>
 800a61a:	bfa8      	it	ge
 800a61c:	2300      	movge	r3, #0
 800a61e:	ed9f ab96 	vldr	d10, [pc, #600]	; 800a878 <_strtod_l+0x880>
 800a622:	ed9f bb97 	vldr	d11, [pc, #604]	; 800a880 <_strtod_l+0x888>
 800a626:	9309      	str	r3, [sp, #36]	; 0x24
 800a628:	2500      	movs	r5, #0
 800a62a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a62e:	930c      	str	r3, [sp, #48]	; 0x30
 800a630:	462e      	mov	r6, r5
 800a632:	9b07      	ldr	r3, [sp, #28]
 800a634:	4620      	mov	r0, r4
 800a636:	6859      	ldr	r1, [r3, #4]
 800a638:	f7ff f81a 	bl	8009670 <_Balloc>
 800a63c:	4607      	mov	r7, r0
 800a63e:	2800      	cmp	r0, #0
 800a640:	f43f af18 	beq.w	800a474 <_strtod_l+0x47c>
 800a644:	9b07      	ldr	r3, [sp, #28]
 800a646:	691a      	ldr	r2, [r3, #16]
 800a648:	3202      	adds	r2, #2
 800a64a:	f103 010c 	add.w	r1, r3, #12
 800a64e:	0092      	lsls	r2, r2, #2
 800a650:	300c      	adds	r0, #12
 800a652:	f000 fd4f 	bl	800b0f4 <memcpy>
 800a656:	ec49 8b10 	vmov	d0, r8, r9
 800a65a:	aa14      	add	r2, sp, #80	; 0x50
 800a65c:	a913      	add	r1, sp, #76	; 0x4c
 800a65e:	4620      	mov	r0, r4
 800a660:	f7ff fbe2 	bl	8009e28 <__d2b>
 800a664:	ec49 8b18 	vmov	d8, r8, r9
 800a668:	9012      	str	r0, [sp, #72]	; 0x48
 800a66a:	2800      	cmp	r0, #0
 800a66c:	f43f af02 	beq.w	800a474 <_strtod_l+0x47c>
 800a670:	2101      	movs	r1, #1
 800a672:	4620      	mov	r0, r4
 800a674:	f7ff f93c 	bl	80098f0 <__i2b>
 800a678:	4606      	mov	r6, r0
 800a67a:	2800      	cmp	r0, #0
 800a67c:	f43f aefa 	beq.w	800a474 <_strtod_l+0x47c>
 800a680:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a682:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a684:	2b00      	cmp	r3, #0
 800a686:	bfab      	itete	ge
 800a688:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800a68a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800a68c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800a690:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800a694:	bfac      	ite	ge
 800a696:	eb03 0b02 	addge.w	fp, r3, r2
 800a69a:	eba2 0a03 	sublt.w	sl, r2, r3
 800a69e:	9a05      	ldr	r2, [sp, #20]
 800a6a0:	1a9b      	subs	r3, r3, r2
 800a6a2:	440b      	add	r3, r1
 800a6a4:	4a7b      	ldr	r2, [pc, #492]	; (800a894 <_strtod_l+0x89c>)
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800a6ae:	f280 80cd 	bge.w	800a84c <_strtod_l+0x854>
 800a6b2:	1ad2      	subs	r2, r2, r3
 800a6b4:	2a1f      	cmp	r2, #31
 800a6b6:	eba1 0102 	sub.w	r1, r1, r2
 800a6ba:	f04f 0001 	mov.w	r0, #1
 800a6be:	f300 80b9 	bgt.w	800a834 <_strtod_l+0x83c>
 800a6c2:	fa00 f302 	lsl.w	r3, r0, r2
 800a6c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a6cc:	eb0b 0301 	add.w	r3, fp, r1
 800a6d0:	9a05      	ldr	r2, [sp, #20]
 800a6d2:	459b      	cmp	fp, r3
 800a6d4:	448a      	add	sl, r1
 800a6d6:	4492      	add	sl, r2
 800a6d8:	465a      	mov	r2, fp
 800a6da:	bfa8      	it	ge
 800a6dc:	461a      	movge	r2, r3
 800a6de:	4552      	cmp	r2, sl
 800a6e0:	bfa8      	it	ge
 800a6e2:	4652      	movge	r2, sl
 800a6e4:	2a00      	cmp	r2, #0
 800a6e6:	bfc2      	ittt	gt
 800a6e8:	1a9b      	subgt	r3, r3, r2
 800a6ea:	ebaa 0a02 	subgt.w	sl, sl, r2
 800a6ee:	ebab 0b02 	subgt.w	fp, fp, r2
 800a6f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f4:	2a00      	cmp	r2, #0
 800a6f6:	dd18      	ble.n	800a72a <_strtod_l+0x732>
 800a6f8:	4631      	mov	r1, r6
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6fe:	f7ff f9b7 	bl	8009a70 <__pow5mult>
 800a702:	4606      	mov	r6, r0
 800a704:	2800      	cmp	r0, #0
 800a706:	f43f aeb5 	beq.w	800a474 <_strtod_l+0x47c>
 800a70a:	4601      	mov	r1, r0
 800a70c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a70e:	4620      	mov	r0, r4
 800a710:	f7ff f904 	bl	800991c <__multiply>
 800a714:	900e      	str	r0, [sp, #56]	; 0x38
 800a716:	2800      	cmp	r0, #0
 800a718:	f43f aeac 	beq.w	800a474 <_strtod_l+0x47c>
 800a71c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a71e:	4620      	mov	r0, r4
 800a720:	f7fe ffe6 	bl	80096f0 <_Bfree>
 800a724:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a726:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a728:	9212      	str	r2, [sp, #72]	; 0x48
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f300 8093 	bgt.w	800a856 <_strtod_l+0x85e>
 800a730:	9b06      	ldr	r3, [sp, #24]
 800a732:	2b00      	cmp	r3, #0
 800a734:	dd08      	ble.n	800a748 <_strtod_l+0x750>
 800a736:	4639      	mov	r1, r7
 800a738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a73a:	4620      	mov	r0, r4
 800a73c:	f7ff f998 	bl	8009a70 <__pow5mult>
 800a740:	4607      	mov	r7, r0
 800a742:	2800      	cmp	r0, #0
 800a744:	f43f ae96 	beq.w	800a474 <_strtod_l+0x47c>
 800a748:	f1ba 0f00 	cmp.w	sl, #0
 800a74c:	dd08      	ble.n	800a760 <_strtod_l+0x768>
 800a74e:	4639      	mov	r1, r7
 800a750:	4652      	mov	r2, sl
 800a752:	4620      	mov	r0, r4
 800a754:	f7ff f9e6 	bl	8009b24 <__lshift>
 800a758:	4607      	mov	r7, r0
 800a75a:	2800      	cmp	r0, #0
 800a75c:	f43f ae8a 	beq.w	800a474 <_strtod_l+0x47c>
 800a760:	f1bb 0f00 	cmp.w	fp, #0
 800a764:	dd08      	ble.n	800a778 <_strtod_l+0x780>
 800a766:	4631      	mov	r1, r6
 800a768:	465a      	mov	r2, fp
 800a76a:	4620      	mov	r0, r4
 800a76c:	f7ff f9da 	bl	8009b24 <__lshift>
 800a770:	4606      	mov	r6, r0
 800a772:	2800      	cmp	r0, #0
 800a774:	f43f ae7e 	beq.w	800a474 <_strtod_l+0x47c>
 800a778:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a77a:	463a      	mov	r2, r7
 800a77c:	4620      	mov	r0, r4
 800a77e:	f7ff fa59 	bl	8009c34 <__mdiff>
 800a782:	4605      	mov	r5, r0
 800a784:	2800      	cmp	r0, #0
 800a786:	f43f ae75 	beq.w	800a474 <_strtod_l+0x47c>
 800a78a:	2300      	movs	r3, #0
 800a78c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800a790:	60c3      	str	r3, [r0, #12]
 800a792:	4631      	mov	r1, r6
 800a794:	f7ff fa32 	bl	8009bfc <__mcmp>
 800a798:	2800      	cmp	r0, #0
 800a79a:	da7f      	bge.n	800a89c <_strtod_l+0x8a4>
 800a79c:	ea5a 0a08 	orrs.w	sl, sl, r8
 800a7a0:	f040 80a5 	bne.w	800a8ee <_strtod_l+0x8f6>
 800a7a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f040 80a0 	bne.w	800a8ee <_strtod_l+0x8f6>
 800a7ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7b2:	0d1b      	lsrs	r3, r3, #20
 800a7b4:	051b      	lsls	r3, r3, #20
 800a7b6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a7ba:	f240 8098 	bls.w	800a8ee <_strtod_l+0x8f6>
 800a7be:	696b      	ldr	r3, [r5, #20]
 800a7c0:	b91b      	cbnz	r3, 800a7ca <_strtod_l+0x7d2>
 800a7c2:	692b      	ldr	r3, [r5, #16]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	f340 8092 	ble.w	800a8ee <_strtod_l+0x8f6>
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f7ff f9a8 	bl	8009b24 <__lshift>
 800a7d4:	4631      	mov	r1, r6
 800a7d6:	4605      	mov	r5, r0
 800a7d8:	f7ff fa10 	bl	8009bfc <__mcmp>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	f340 8086 	ble.w	800a8ee <_strtod_l+0x8f6>
 800a7e2:	9905      	ldr	r1, [sp, #20]
 800a7e4:	4a2c      	ldr	r2, [pc, #176]	; (800a898 <_strtod_l+0x8a0>)
 800a7e6:	464b      	mov	r3, r9
 800a7e8:	2900      	cmp	r1, #0
 800a7ea:	f000 809f 	beq.w	800a92c <_strtod_l+0x934>
 800a7ee:	ea02 0109 	and.w	r1, r2, r9
 800a7f2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a7f6:	f300 8099 	bgt.w	800a92c <_strtod_l+0x934>
 800a7fa:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a7fe:	f77f aea8 	ble.w	800a552 <_strtod_l+0x55a>
 800a802:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a888 <_strtod_l+0x890>
 800a806:	ec49 8b16 	vmov	d6, r8, r9
 800a80a:	4b23      	ldr	r3, [pc, #140]	; (800a898 <_strtod_l+0x8a0>)
 800a80c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a810:	ee17 2a90 	vmov	r2, s15
 800a814:	4013      	ands	r3, r2
 800a816:	ec59 8b17 	vmov	r8, r9, d7
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f47f ae34 	bne.w	800a488 <_strtod_l+0x490>
 800a820:	2322      	movs	r3, #34	; 0x22
 800a822:	6023      	str	r3, [r4, #0]
 800a824:	e630      	b.n	800a488 <_strtod_l+0x490>
 800a826:	f04f 31ff 	mov.w	r1, #4294967295
 800a82a:	fa01 f202 	lsl.w	r2, r1, r2
 800a82e:	ea02 0808 	and.w	r8, r2, r8
 800a832:	e6da      	b.n	800a5ea <_strtod_l+0x5f2>
 800a834:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800a838:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800a83c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800a840:	33e2      	adds	r3, #226	; 0xe2
 800a842:	fa00 f303 	lsl.w	r3, r0, r3
 800a846:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800a84a:	e73f      	b.n	800a6cc <_strtod_l+0x6d4>
 800a84c:	2200      	movs	r2, #0
 800a84e:	2301      	movs	r3, #1
 800a850:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a854:	e73a      	b.n	800a6cc <_strtod_l+0x6d4>
 800a856:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a858:	461a      	mov	r2, r3
 800a85a:	4620      	mov	r0, r4
 800a85c:	f7ff f962 	bl	8009b24 <__lshift>
 800a860:	9012      	str	r0, [sp, #72]	; 0x48
 800a862:	2800      	cmp	r0, #0
 800a864:	f47f af64 	bne.w	800a730 <_strtod_l+0x738>
 800a868:	e604      	b.n	800a474 <_strtod_l+0x47c>
 800a86a:	bf00      	nop
 800a86c:	f3af 8000 	nop.w
 800a870:	94a03595 	.word	0x94a03595
 800a874:	3fcfffff 	.word	0x3fcfffff
 800a878:	94a03595 	.word	0x94a03595
 800a87c:	3fdfffff 	.word	0x3fdfffff
 800a880:	35afe535 	.word	0x35afe535
 800a884:	3fe00000 	.word	0x3fe00000
 800a888:	00000000 	.word	0x00000000
 800a88c:	39500000 	.word	0x39500000
 800a890:	0800c580 	.word	0x0800c580
 800a894:	fffffc02 	.word	0xfffffc02
 800a898:	7ff00000 	.word	0x7ff00000
 800a89c:	46cb      	mov	fp, r9
 800a89e:	d15f      	bne.n	800a960 <_strtod_l+0x968>
 800a8a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8a4:	f1ba 0f00 	cmp.w	sl, #0
 800a8a8:	d02a      	beq.n	800a900 <_strtod_l+0x908>
 800a8aa:	4aa7      	ldr	r2, [pc, #668]	; (800ab48 <_strtod_l+0xb50>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d12b      	bne.n	800a908 <_strtod_l+0x910>
 800a8b0:	9b05      	ldr	r3, [sp, #20]
 800a8b2:	4642      	mov	r2, r8
 800a8b4:	b1fb      	cbz	r3, 800a8f6 <_strtod_l+0x8fe>
 800a8b6:	4ba5      	ldr	r3, [pc, #660]	; (800ab4c <_strtod_l+0xb54>)
 800a8b8:	ea09 0303 	and.w	r3, r9, r3
 800a8bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a8c0:	f04f 31ff 	mov.w	r1, #4294967295
 800a8c4:	d81a      	bhi.n	800a8fc <_strtod_l+0x904>
 800a8c6:	0d1b      	lsrs	r3, r3, #20
 800a8c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d119      	bne.n	800a908 <_strtod_l+0x910>
 800a8d4:	4b9e      	ldr	r3, [pc, #632]	; (800ab50 <_strtod_l+0xb58>)
 800a8d6:	459b      	cmp	fp, r3
 800a8d8:	d102      	bne.n	800a8e0 <_strtod_l+0x8e8>
 800a8da:	3201      	adds	r2, #1
 800a8dc:	f43f adca 	beq.w	800a474 <_strtod_l+0x47c>
 800a8e0:	4b9a      	ldr	r3, [pc, #616]	; (800ab4c <_strtod_l+0xb54>)
 800a8e2:	ea0b 0303 	and.w	r3, fp, r3
 800a8e6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a8ea:	f04f 0800 	mov.w	r8, #0
 800a8ee:	9b05      	ldr	r3, [sp, #20]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d186      	bne.n	800a802 <_strtod_l+0x80a>
 800a8f4:	e5c8      	b.n	800a488 <_strtod_l+0x490>
 800a8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8fa:	e7e9      	b.n	800a8d0 <_strtod_l+0x8d8>
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	e7e7      	b.n	800a8d0 <_strtod_l+0x8d8>
 800a900:	ea53 0308 	orrs.w	r3, r3, r8
 800a904:	f43f af6d 	beq.w	800a7e2 <_strtod_l+0x7ea>
 800a908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a90a:	b1cb      	cbz	r3, 800a940 <_strtod_l+0x948>
 800a90c:	ea13 0f0b 	tst.w	r3, fp
 800a910:	d0ed      	beq.n	800a8ee <_strtod_l+0x8f6>
 800a912:	9a05      	ldr	r2, [sp, #20]
 800a914:	4640      	mov	r0, r8
 800a916:	4649      	mov	r1, r9
 800a918:	f1ba 0f00 	cmp.w	sl, #0
 800a91c:	d014      	beq.n	800a948 <_strtod_l+0x950>
 800a91e:	f7ff fb51 	bl	8009fc4 <sulp>
 800a922:	ee38 7b00 	vadd.f64	d7, d8, d0
 800a926:	ec59 8b17 	vmov	r8, r9, d7
 800a92a:	e7e0      	b.n	800a8ee <_strtod_l+0x8f6>
 800a92c:	4013      	ands	r3, r2
 800a92e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a932:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a936:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a93a:	f04f 38ff 	mov.w	r8, #4294967295
 800a93e:	e7d6      	b.n	800a8ee <_strtod_l+0x8f6>
 800a940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a942:	ea13 0f08 	tst.w	r3, r8
 800a946:	e7e3      	b.n	800a910 <_strtod_l+0x918>
 800a948:	f7ff fb3c 	bl	8009fc4 <sulp>
 800a94c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800a950:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a958:	ec59 8b10 	vmov	r8, r9, d0
 800a95c:	d1c7      	bne.n	800a8ee <_strtod_l+0x8f6>
 800a95e:	e5f8      	b.n	800a552 <_strtod_l+0x55a>
 800a960:	4631      	mov	r1, r6
 800a962:	4628      	mov	r0, r5
 800a964:	f7ff faba 	bl	8009edc <__ratio>
 800a968:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800a96c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a974:	d85f      	bhi.n	800aa36 <_strtod_l+0xa3e>
 800a976:	f1ba 0f00 	cmp.w	sl, #0
 800a97a:	d166      	bne.n	800aa4a <_strtod_l+0xa52>
 800a97c:	f1b8 0f00 	cmp.w	r8, #0
 800a980:	d14d      	bne.n	800aa1e <_strtod_l+0xa26>
 800a982:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a986:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d162      	bne.n	800aa54 <_strtod_l+0xa5c>
 800a98e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800a992:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800a996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a99a:	d401      	bmi.n	800a9a0 <_strtod_l+0x9a8>
 800a99c:	ee20 db0d 	vmul.f64	d13, d0, d13
 800a9a0:	eeb1 cb4d 	vneg.f64	d12, d13
 800a9a4:	4869      	ldr	r0, [pc, #420]	; (800ab4c <_strtod_l+0xb54>)
 800a9a6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800ab58 <_strtod_l+0xb60>
 800a9aa:	ea0b 0100 	and.w	r1, fp, r0
 800a9ae:	4561      	cmp	r1, ip
 800a9b0:	ec53 2b1c 	vmov	r2, r3, d12
 800a9b4:	d17a      	bne.n	800aaac <_strtod_l+0xab4>
 800a9b6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800a9ba:	ec49 8b10 	vmov	d0, r8, r9
 800a9be:	910a      	str	r1, [sp, #40]	; 0x28
 800a9c0:	f7ff f9c2 	bl	8009d48 <__ulp>
 800a9c4:	ec49 8b1e 	vmov	d14, r8, r9
 800a9c8:	4860      	ldr	r0, [pc, #384]	; (800ab4c <_strtod_l+0xb54>)
 800a9ca:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800a9ce:	ee1e 3a90 	vmov	r3, s29
 800a9d2:	4a60      	ldr	r2, [pc, #384]	; (800ab54 <_strtod_l+0xb5c>)
 800a9d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a9d6:	4018      	ands	r0, r3
 800a9d8:	4290      	cmp	r0, r2
 800a9da:	ec59 8b1e 	vmov	r8, r9, d14
 800a9de:	d93c      	bls.n	800aa5a <_strtod_l+0xa62>
 800a9e0:	ee18 2a90 	vmov	r2, s17
 800a9e4:	4b5a      	ldr	r3, [pc, #360]	; (800ab50 <_strtod_l+0xb58>)
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d104      	bne.n	800a9f4 <_strtod_l+0x9fc>
 800a9ea:	ee18 3a10 	vmov	r3, s16
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	f43f ad40 	beq.w	800a474 <_strtod_l+0x47c>
 800a9f4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800ab50 <_strtod_l+0xb58>
 800a9f8:	f04f 38ff 	mov.w	r8, #4294967295
 800a9fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f7fe fe76 	bl	80096f0 <_Bfree>
 800aa04:	4639      	mov	r1, r7
 800aa06:	4620      	mov	r0, r4
 800aa08:	f7fe fe72 	bl	80096f0 <_Bfree>
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f7fe fe6e 	bl	80096f0 <_Bfree>
 800aa14:	4629      	mov	r1, r5
 800aa16:	4620      	mov	r0, r4
 800aa18:	f7fe fe6a 	bl	80096f0 <_Bfree>
 800aa1c:	e609      	b.n	800a632 <_strtod_l+0x63a>
 800aa1e:	f1b8 0f01 	cmp.w	r8, #1
 800aa22:	d103      	bne.n	800aa2c <_strtod_l+0xa34>
 800aa24:	f1b9 0f00 	cmp.w	r9, #0
 800aa28:	f43f ad93 	beq.w	800a552 <_strtod_l+0x55a>
 800aa2c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800aa30:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800aa34:	e7b6      	b.n	800a9a4 <_strtod_l+0x9ac>
 800aa36:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800aa3a:	ee20 db0d 	vmul.f64	d13, d0, d13
 800aa3e:	f1ba 0f00 	cmp.w	sl, #0
 800aa42:	d0ad      	beq.n	800a9a0 <_strtod_l+0x9a8>
 800aa44:	eeb0 cb4d 	vmov.f64	d12, d13
 800aa48:	e7ac      	b.n	800a9a4 <_strtod_l+0x9ac>
 800aa4a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800aa4e:	eeb0 db4c 	vmov.f64	d13, d12
 800aa52:	e7a7      	b.n	800a9a4 <_strtod_l+0x9ac>
 800aa54:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800aa58:	e7a4      	b.n	800a9a4 <_strtod_l+0x9ac>
 800aa5a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800aa5e:	9b05      	ldr	r3, [sp, #20]
 800aa60:	46cb      	mov	fp, r9
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1ca      	bne.n	800a9fc <_strtod_l+0xa04>
 800aa66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa6a:	0d1b      	lsrs	r3, r3, #20
 800aa6c:	051b      	lsls	r3, r3, #20
 800aa6e:	4299      	cmp	r1, r3
 800aa70:	d1c4      	bne.n	800a9fc <_strtod_l+0xa04>
 800aa72:	ec51 0b1d 	vmov	r0, r1, d13
 800aa76:	f7f5 fe0f 	bl	8000698 <__aeabi_d2lz>
 800aa7a:	f7f5 fdc7 	bl	800060c <__aeabi_l2d>
 800aa7e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800aa82:	ec41 0b17 	vmov	d7, r0, r1
 800aa86:	ea4b 0b08 	orr.w	fp, fp, r8
 800aa8a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800aa8e:	ee3d db47 	vsub.f64	d13, d13, d7
 800aa92:	d03c      	beq.n	800ab0e <_strtod_l+0xb16>
 800aa94:	eeb4 dbca 	vcmpe.f64	d13, d10
 800aa98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa9c:	f53f acf4 	bmi.w	800a488 <_strtod_l+0x490>
 800aaa0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800aaa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa8:	dda8      	ble.n	800a9fc <_strtod_l+0xa04>
 800aaaa:	e4ed      	b.n	800a488 <_strtod_l+0x490>
 800aaac:	9805      	ldr	r0, [sp, #20]
 800aaae:	b1f0      	cbz	r0, 800aaee <_strtod_l+0xaf6>
 800aab0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800aab4:	d81b      	bhi.n	800aaee <_strtod_l+0xaf6>
 800aab6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800ab40 <_strtod_l+0xb48>
 800aaba:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800aabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac2:	d811      	bhi.n	800aae8 <_strtod_l+0xaf0>
 800aac4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800aac8:	ee1d 3a10 	vmov	r3, s26
 800aacc:	2b01      	cmp	r3, #1
 800aace:	bf38      	it	cc
 800aad0:	2301      	movcc	r3, #1
 800aad2:	ee0d 3a10 	vmov	s26, r3
 800aad6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800aada:	f1ba 0f00 	cmp.w	sl, #0
 800aade:	d113      	bne.n	800ab08 <_strtod_l+0xb10>
 800aae0:	eeb1 7b4d 	vneg.f64	d7, d13
 800aae4:	ec53 2b17 	vmov	r2, r3, d7
 800aae8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800aaec:	1a43      	subs	r3, r0, r1
 800aaee:	eeb0 0b48 	vmov.f64	d0, d8
 800aaf2:	ec43 2b1c 	vmov	d12, r2, r3
 800aaf6:	910a      	str	r1, [sp, #40]	; 0x28
 800aaf8:	f7ff f926 	bl	8009d48 <__ulp>
 800aafc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aafe:	eeac 8b00 	vfma.f64	d8, d12, d0
 800ab02:	ec59 8b18 	vmov	r8, r9, d8
 800ab06:	e7aa      	b.n	800aa5e <_strtod_l+0xa66>
 800ab08:	eeb0 7b4d 	vmov.f64	d7, d13
 800ab0c:	e7ea      	b.n	800aae4 <_strtod_l+0xaec>
 800ab0e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800ab12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab16:	f57f af71 	bpl.w	800a9fc <_strtod_l+0xa04>
 800ab1a:	e4b5      	b.n	800a488 <_strtod_l+0x490>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	9308      	str	r3, [sp, #32]
 800ab20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	f7ff baa6 	b.w	800a076 <_strtod_l+0x7e>
 800ab2a:	2a65      	cmp	r2, #101	; 0x65
 800ab2c:	f43f aba2 	beq.w	800a274 <_strtod_l+0x27c>
 800ab30:	2a45      	cmp	r2, #69	; 0x45
 800ab32:	f43f ab9f 	beq.w	800a274 <_strtod_l+0x27c>
 800ab36:	2101      	movs	r1, #1
 800ab38:	f7ff bbd8 	b.w	800a2ec <_strtod_l+0x2f4>
 800ab3c:	f3af 8000 	nop.w
 800ab40:	ffc00000 	.word	0xffc00000
 800ab44:	41dfffff 	.word	0x41dfffff
 800ab48:	000fffff 	.word	0x000fffff
 800ab4c:	7ff00000 	.word	0x7ff00000
 800ab50:	7fefffff 	.word	0x7fefffff
 800ab54:	7c9fffff 	.word	0x7c9fffff
 800ab58:	7fe00000 	.word	0x7fe00000

0800ab5c <_strtod_r>:
 800ab5c:	4b01      	ldr	r3, [pc, #4]	; (800ab64 <_strtod_r+0x8>)
 800ab5e:	f7ff ba4b 	b.w	8009ff8 <_strtod_l>
 800ab62:	bf00      	nop
 800ab64:	20000080 	.word	0x20000080

0800ab68 <_strtol_l.constprop.0>:
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab6e:	d001      	beq.n	800ab74 <_strtol_l.constprop.0+0xc>
 800ab70:	2b24      	cmp	r3, #36	; 0x24
 800ab72:	d906      	bls.n	800ab82 <_strtol_l.constprop.0+0x1a>
 800ab74:	f7fd fe52 	bl	800881c <__errno>
 800ab78:	2316      	movs	r3, #22
 800ab7a:	6003      	str	r3, [r0, #0]
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ac68 <_strtol_l.constprop.0+0x100>
 800ab86:	460d      	mov	r5, r1
 800ab88:	462e      	mov	r6, r5
 800ab8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab8e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ab92:	f017 0708 	ands.w	r7, r7, #8
 800ab96:	d1f7      	bne.n	800ab88 <_strtol_l.constprop.0+0x20>
 800ab98:	2c2d      	cmp	r4, #45	; 0x2d
 800ab9a:	d132      	bne.n	800ac02 <_strtol_l.constprop.0+0x9a>
 800ab9c:	782c      	ldrb	r4, [r5, #0]
 800ab9e:	2701      	movs	r7, #1
 800aba0:	1cb5      	adds	r5, r6, #2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d05b      	beq.n	800ac5e <_strtol_l.constprop.0+0xf6>
 800aba6:	2b10      	cmp	r3, #16
 800aba8:	d109      	bne.n	800abbe <_strtol_l.constprop.0+0x56>
 800abaa:	2c30      	cmp	r4, #48	; 0x30
 800abac:	d107      	bne.n	800abbe <_strtol_l.constprop.0+0x56>
 800abae:	782c      	ldrb	r4, [r5, #0]
 800abb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800abb4:	2c58      	cmp	r4, #88	; 0x58
 800abb6:	d14d      	bne.n	800ac54 <_strtol_l.constprop.0+0xec>
 800abb8:	786c      	ldrb	r4, [r5, #1]
 800abba:	2310      	movs	r3, #16
 800abbc:	3502      	adds	r5, #2
 800abbe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800abc2:	f108 38ff 	add.w	r8, r8, #4294967295
 800abc6:	f04f 0e00 	mov.w	lr, #0
 800abca:	fbb8 f9f3 	udiv	r9, r8, r3
 800abce:	4676      	mov	r6, lr
 800abd0:	fb03 8a19 	mls	sl, r3, r9, r8
 800abd4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800abd8:	f1bc 0f09 	cmp.w	ip, #9
 800abdc:	d816      	bhi.n	800ac0c <_strtol_l.constprop.0+0xa4>
 800abde:	4664      	mov	r4, ip
 800abe0:	42a3      	cmp	r3, r4
 800abe2:	dd24      	ble.n	800ac2e <_strtol_l.constprop.0+0xc6>
 800abe4:	f1be 3fff 	cmp.w	lr, #4294967295
 800abe8:	d008      	beq.n	800abfc <_strtol_l.constprop.0+0x94>
 800abea:	45b1      	cmp	r9, r6
 800abec:	d31c      	bcc.n	800ac28 <_strtol_l.constprop.0+0xc0>
 800abee:	d101      	bne.n	800abf4 <_strtol_l.constprop.0+0x8c>
 800abf0:	45a2      	cmp	sl, r4
 800abf2:	db19      	blt.n	800ac28 <_strtol_l.constprop.0+0xc0>
 800abf4:	fb06 4603 	mla	r6, r6, r3, r4
 800abf8:	f04f 0e01 	mov.w	lr, #1
 800abfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac00:	e7e8      	b.n	800abd4 <_strtol_l.constprop.0+0x6c>
 800ac02:	2c2b      	cmp	r4, #43	; 0x2b
 800ac04:	bf04      	itt	eq
 800ac06:	782c      	ldrbeq	r4, [r5, #0]
 800ac08:	1cb5      	addeq	r5, r6, #2
 800ac0a:	e7ca      	b.n	800aba2 <_strtol_l.constprop.0+0x3a>
 800ac0c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ac10:	f1bc 0f19 	cmp.w	ip, #25
 800ac14:	d801      	bhi.n	800ac1a <_strtol_l.constprop.0+0xb2>
 800ac16:	3c37      	subs	r4, #55	; 0x37
 800ac18:	e7e2      	b.n	800abe0 <_strtol_l.constprop.0+0x78>
 800ac1a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ac1e:	f1bc 0f19 	cmp.w	ip, #25
 800ac22:	d804      	bhi.n	800ac2e <_strtol_l.constprop.0+0xc6>
 800ac24:	3c57      	subs	r4, #87	; 0x57
 800ac26:	e7db      	b.n	800abe0 <_strtol_l.constprop.0+0x78>
 800ac28:	f04f 3eff 	mov.w	lr, #4294967295
 800ac2c:	e7e6      	b.n	800abfc <_strtol_l.constprop.0+0x94>
 800ac2e:	f1be 3fff 	cmp.w	lr, #4294967295
 800ac32:	d105      	bne.n	800ac40 <_strtol_l.constprop.0+0xd8>
 800ac34:	2322      	movs	r3, #34	; 0x22
 800ac36:	6003      	str	r3, [r0, #0]
 800ac38:	4646      	mov	r6, r8
 800ac3a:	b942      	cbnz	r2, 800ac4e <_strtol_l.constprop.0+0xe6>
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	e79e      	b.n	800ab7e <_strtol_l.constprop.0+0x16>
 800ac40:	b107      	cbz	r7, 800ac44 <_strtol_l.constprop.0+0xdc>
 800ac42:	4276      	negs	r6, r6
 800ac44:	2a00      	cmp	r2, #0
 800ac46:	d0f9      	beq.n	800ac3c <_strtol_l.constprop.0+0xd4>
 800ac48:	f1be 0f00 	cmp.w	lr, #0
 800ac4c:	d000      	beq.n	800ac50 <_strtol_l.constprop.0+0xe8>
 800ac4e:	1e69      	subs	r1, r5, #1
 800ac50:	6011      	str	r1, [r2, #0]
 800ac52:	e7f3      	b.n	800ac3c <_strtol_l.constprop.0+0xd4>
 800ac54:	2430      	movs	r4, #48	; 0x30
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1b1      	bne.n	800abbe <_strtol_l.constprop.0+0x56>
 800ac5a:	2308      	movs	r3, #8
 800ac5c:	e7af      	b.n	800abbe <_strtol_l.constprop.0+0x56>
 800ac5e:	2c30      	cmp	r4, #48	; 0x30
 800ac60:	d0a5      	beq.n	800abae <_strtol_l.constprop.0+0x46>
 800ac62:	230a      	movs	r3, #10
 800ac64:	e7ab      	b.n	800abbe <_strtol_l.constprop.0+0x56>
 800ac66:	bf00      	nop
 800ac68:	0800c5a9 	.word	0x0800c5a9

0800ac6c <_strtol_r>:
 800ac6c:	f7ff bf7c 	b.w	800ab68 <_strtol_l.constprop.0>

0800ac70 <__ssputs_r>:
 800ac70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac74:	688e      	ldr	r6, [r1, #8]
 800ac76:	461f      	mov	r7, r3
 800ac78:	42be      	cmp	r6, r7
 800ac7a:	680b      	ldr	r3, [r1, #0]
 800ac7c:	4682      	mov	sl, r0
 800ac7e:	460c      	mov	r4, r1
 800ac80:	4690      	mov	r8, r2
 800ac82:	d82c      	bhi.n	800acde <__ssputs_r+0x6e>
 800ac84:	898a      	ldrh	r2, [r1, #12]
 800ac86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac8a:	d026      	beq.n	800acda <__ssputs_r+0x6a>
 800ac8c:	6965      	ldr	r5, [r4, #20]
 800ac8e:	6909      	ldr	r1, [r1, #16]
 800ac90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac94:	eba3 0901 	sub.w	r9, r3, r1
 800ac98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac9c:	1c7b      	adds	r3, r7, #1
 800ac9e:	444b      	add	r3, r9
 800aca0:	106d      	asrs	r5, r5, #1
 800aca2:	429d      	cmp	r5, r3
 800aca4:	bf38      	it	cc
 800aca6:	461d      	movcc	r5, r3
 800aca8:	0553      	lsls	r3, r2, #21
 800acaa:	d527      	bpl.n	800acfc <__ssputs_r+0x8c>
 800acac:	4629      	mov	r1, r5
 800acae:	f7fe fc53 	bl	8009558 <_malloc_r>
 800acb2:	4606      	mov	r6, r0
 800acb4:	b360      	cbz	r0, 800ad10 <__ssputs_r+0xa0>
 800acb6:	6921      	ldr	r1, [r4, #16]
 800acb8:	464a      	mov	r2, r9
 800acba:	f000 fa1b 	bl	800b0f4 <memcpy>
 800acbe:	89a3      	ldrh	r3, [r4, #12]
 800acc0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acc8:	81a3      	strh	r3, [r4, #12]
 800acca:	6126      	str	r6, [r4, #16]
 800accc:	6165      	str	r5, [r4, #20]
 800acce:	444e      	add	r6, r9
 800acd0:	eba5 0509 	sub.w	r5, r5, r9
 800acd4:	6026      	str	r6, [r4, #0]
 800acd6:	60a5      	str	r5, [r4, #8]
 800acd8:	463e      	mov	r6, r7
 800acda:	42be      	cmp	r6, r7
 800acdc:	d900      	bls.n	800ace0 <__ssputs_r+0x70>
 800acde:	463e      	mov	r6, r7
 800ace0:	6820      	ldr	r0, [r4, #0]
 800ace2:	4632      	mov	r2, r6
 800ace4:	4641      	mov	r1, r8
 800ace6:	f000 f9c9 	bl	800b07c <memmove>
 800acea:	68a3      	ldr	r3, [r4, #8]
 800acec:	1b9b      	subs	r3, r3, r6
 800acee:	60a3      	str	r3, [r4, #8]
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	4433      	add	r3, r6
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	2000      	movs	r0, #0
 800acf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acfc:	462a      	mov	r2, r5
 800acfe:	f000 fdac 	bl	800b85a <_realloc_r>
 800ad02:	4606      	mov	r6, r0
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d1e0      	bne.n	800acca <__ssputs_r+0x5a>
 800ad08:	6921      	ldr	r1, [r4, #16]
 800ad0a:	4650      	mov	r0, sl
 800ad0c:	f7fe fbb0 	bl	8009470 <_free_r>
 800ad10:	230c      	movs	r3, #12
 800ad12:	f8ca 3000 	str.w	r3, [sl]
 800ad16:	89a3      	ldrh	r3, [r4, #12]
 800ad18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad1c:	81a3      	strh	r3, [r4, #12]
 800ad1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad22:	e7e9      	b.n	800acf8 <__ssputs_r+0x88>

0800ad24 <_svfiprintf_r>:
 800ad24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad28:	4698      	mov	r8, r3
 800ad2a:	898b      	ldrh	r3, [r1, #12]
 800ad2c:	061b      	lsls	r3, r3, #24
 800ad2e:	b09d      	sub	sp, #116	; 0x74
 800ad30:	4607      	mov	r7, r0
 800ad32:	460d      	mov	r5, r1
 800ad34:	4614      	mov	r4, r2
 800ad36:	d50e      	bpl.n	800ad56 <_svfiprintf_r+0x32>
 800ad38:	690b      	ldr	r3, [r1, #16]
 800ad3a:	b963      	cbnz	r3, 800ad56 <_svfiprintf_r+0x32>
 800ad3c:	2140      	movs	r1, #64	; 0x40
 800ad3e:	f7fe fc0b 	bl	8009558 <_malloc_r>
 800ad42:	6028      	str	r0, [r5, #0]
 800ad44:	6128      	str	r0, [r5, #16]
 800ad46:	b920      	cbnz	r0, 800ad52 <_svfiprintf_r+0x2e>
 800ad48:	230c      	movs	r3, #12
 800ad4a:	603b      	str	r3, [r7, #0]
 800ad4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad50:	e0d0      	b.n	800aef4 <_svfiprintf_r+0x1d0>
 800ad52:	2340      	movs	r3, #64	; 0x40
 800ad54:	616b      	str	r3, [r5, #20]
 800ad56:	2300      	movs	r3, #0
 800ad58:	9309      	str	r3, [sp, #36]	; 0x24
 800ad5a:	2320      	movs	r3, #32
 800ad5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad60:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad64:	2330      	movs	r3, #48	; 0x30
 800ad66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800af0c <_svfiprintf_r+0x1e8>
 800ad6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad6e:	f04f 0901 	mov.w	r9, #1
 800ad72:	4623      	mov	r3, r4
 800ad74:	469a      	mov	sl, r3
 800ad76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad7a:	b10a      	cbz	r2, 800ad80 <_svfiprintf_r+0x5c>
 800ad7c:	2a25      	cmp	r2, #37	; 0x25
 800ad7e:	d1f9      	bne.n	800ad74 <_svfiprintf_r+0x50>
 800ad80:	ebba 0b04 	subs.w	fp, sl, r4
 800ad84:	d00b      	beq.n	800ad9e <_svfiprintf_r+0x7a>
 800ad86:	465b      	mov	r3, fp
 800ad88:	4622      	mov	r2, r4
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	4638      	mov	r0, r7
 800ad8e:	f7ff ff6f 	bl	800ac70 <__ssputs_r>
 800ad92:	3001      	adds	r0, #1
 800ad94:	f000 80a9 	beq.w	800aeea <_svfiprintf_r+0x1c6>
 800ad98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad9a:	445a      	add	r2, fp
 800ad9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad9e:	f89a 3000 	ldrb.w	r3, [sl]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 80a1 	beq.w	800aeea <_svfiprintf_r+0x1c6>
 800ada8:	2300      	movs	r3, #0
 800adaa:	f04f 32ff 	mov.w	r2, #4294967295
 800adae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adb2:	f10a 0a01 	add.w	sl, sl, #1
 800adb6:	9304      	str	r3, [sp, #16]
 800adb8:	9307      	str	r3, [sp, #28]
 800adba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adbe:	931a      	str	r3, [sp, #104]	; 0x68
 800adc0:	4654      	mov	r4, sl
 800adc2:	2205      	movs	r2, #5
 800adc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adc8:	4850      	ldr	r0, [pc, #320]	; (800af0c <_svfiprintf_r+0x1e8>)
 800adca:	f7f5 fa39 	bl	8000240 <memchr>
 800adce:	9a04      	ldr	r2, [sp, #16]
 800add0:	b9d8      	cbnz	r0, 800ae0a <_svfiprintf_r+0xe6>
 800add2:	06d0      	lsls	r0, r2, #27
 800add4:	bf44      	itt	mi
 800add6:	2320      	movmi	r3, #32
 800add8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800addc:	0711      	lsls	r1, r2, #28
 800adde:	bf44      	itt	mi
 800ade0:	232b      	movmi	r3, #43	; 0x2b
 800ade2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ade6:	f89a 3000 	ldrb.w	r3, [sl]
 800adea:	2b2a      	cmp	r3, #42	; 0x2a
 800adec:	d015      	beq.n	800ae1a <_svfiprintf_r+0xf6>
 800adee:	9a07      	ldr	r2, [sp, #28]
 800adf0:	4654      	mov	r4, sl
 800adf2:	2000      	movs	r0, #0
 800adf4:	f04f 0c0a 	mov.w	ip, #10
 800adf8:	4621      	mov	r1, r4
 800adfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adfe:	3b30      	subs	r3, #48	; 0x30
 800ae00:	2b09      	cmp	r3, #9
 800ae02:	d94d      	bls.n	800aea0 <_svfiprintf_r+0x17c>
 800ae04:	b1b0      	cbz	r0, 800ae34 <_svfiprintf_r+0x110>
 800ae06:	9207      	str	r2, [sp, #28]
 800ae08:	e014      	b.n	800ae34 <_svfiprintf_r+0x110>
 800ae0a:	eba0 0308 	sub.w	r3, r0, r8
 800ae0e:	fa09 f303 	lsl.w	r3, r9, r3
 800ae12:	4313      	orrs	r3, r2
 800ae14:	9304      	str	r3, [sp, #16]
 800ae16:	46a2      	mov	sl, r4
 800ae18:	e7d2      	b.n	800adc0 <_svfiprintf_r+0x9c>
 800ae1a:	9b03      	ldr	r3, [sp, #12]
 800ae1c:	1d19      	adds	r1, r3, #4
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	9103      	str	r1, [sp, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	bfbb      	ittet	lt
 800ae26:	425b      	neglt	r3, r3
 800ae28:	f042 0202 	orrlt.w	r2, r2, #2
 800ae2c:	9307      	strge	r3, [sp, #28]
 800ae2e:	9307      	strlt	r3, [sp, #28]
 800ae30:	bfb8      	it	lt
 800ae32:	9204      	strlt	r2, [sp, #16]
 800ae34:	7823      	ldrb	r3, [r4, #0]
 800ae36:	2b2e      	cmp	r3, #46	; 0x2e
 800ae38:	d10c      	bne.n	800ae54 <_svfiprintf_r+0x130>
 800ae3a:	7863      	ldrb	r3, [r4, #1]
 800ae3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae3e:	d134      	bne.n	800aeaa <_svfiprintf_r+0x186>
 800ae40:	9b03      	ldr	r3, [sp, #12]
 800ae42:	1d1a      	adds	r2, r3, #4
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	9203      	str	r2, [sp, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	bfb8      	it	lt
 800ae4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae50:	3402      	adds	r4, #2
 800ae52:	9305      	str	r3, [sp, #20]
 800ae54:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800af1c <_svfiprintf_r+0x1f8>
 800ae58:	7821      	ldrb	r1, [r4, #0]
 800ae5a:	2203      	movs	r2, #3
 800ae5c:	4650      	mov	r0, sl
 800ae5e:	f7f5 f9ef 	bl	8000240 <memchr>
 800ae62:	b138      	cbz	r0, 800ae74 <_svfiprintf_r+0x150>
 800ae64:	9b04      	ldr	r3, [sp, #16]
 800ae66:	eba0 000a 	sub.w	r0, r0, sl
 800ae6a:	2240      	movs	r2, #64	; 0x40
 800ae6c:	4082      	lsls	r2, r0
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	3401      	adds	r4, #1
 800ae72:	9304      	str	r3, [sp, #16]
 800ae74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae78:	4825      	ldr	r0, [pc, #148]	; (800af10 <_svfiprintf_r+0x1ec>)
 800ae7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae7e:	2206      	movs	r2, #6
 800ae80:	f7f5 f9de 	bl	8000240 <memchr>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d038      	beq.n	800aefa <_svfiprintf_r+0x1d6>
 800ae88:	4b22      	ldr	r3, [pc, #136]	; (800af14 <_svfiprintf_r+0x1f0>)
 800ae8a:	bb1b      	cbnz	r3, 800aed4 <_svfiprintf_r+0x1b0>
 800ae8c:	9b03      	ldr	r3, [sp, #12]
 800ae8e:	3307      	adds	r3, #7
 800ae90:	f023 0307 	bic.w	r3, r3, #7
 800ae94:	3308      	adds	r3, #8
 800ae96:	9303      	str	r3, [sp, #12]
 800ae98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae9a:	4433      	add	r3, r6
 800ae9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae9e:	e768      	b.n	800ad72 <_svfiprintf_r+0x4e>
 800aea0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aea4:	460c      	mov	r4, r1
 800aea6:	2001      	movs	r0, #1
 800aea8:	e7a6      	b.n	800adf8 <_svfiprintf_r+0xd4>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	3401      	adds	r4, #1
 800aeae:	9305      	str	r3, [sp, #20]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	f04f 0c0a 	mov.w	ip, #10
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aebc:	3a30      	subs	r2, #48	; 0x30
 800aebe:	2a09      	cmp	r2, #9
 800aec0:	d903      	bls.n	800aeca <_svfiprintf_r+0x1a6>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d0c6      	beq.n	800ae54 <_svfiprintf_r+0x130>
 800aec6:	9105      	str	r1, [sp, #20]
 800aec8:	e7c4      	b.n	800ae54 <_svfiprintf_r+0x130>
 800aeca:	fb0c 2101 	mla	r1, ip, r1, r2
 800aece:	4604      	mov	r4, r0
 800aed0:	2301      	movs	r3, #1
 800aed2:	e7f0      	b.n	800aeb6 <_svfiprintf_r+0x192>
 800aed4:	ab03      	add	r3, sp, #12
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	462a      	mov	r2, r5
 800aeda:	4b0f      	ldr	r3, [pc, #60]	; (800af18 <_svfiprintf_r+0x1f4>)
 800aedc:	a904      	add	r1, sp, #16
 800aede:	4638      	mov	r0, r7
 800aee0:	f7fc fd76 	bl	80079d0 <_printf_float>
 800aee4:	1c42      	adds	r2, r0, #1
 800aee6:	4606      	mov	r6, r0
 800aee8:	d1d6      	bne.n	800ae98 <_svfiprintf_r+0x174>
 800aeea:	89ab      	ldrh	r3, [r5, #12]
 800aeec:	065b      	lsls	r3, r3, #25
 800aeee:	f53f af2d 	bmi.w	800ad4c <_svfiprintf_r+0x28>
 800aef2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aef4:	b01d      	add	sp, #116	; 0x74
 800aef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefa:	ab03      	add	r3, sp, #12
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	462a      	mov	r2, r5
 800af00:	4b05      	ldr	r3, [pc, #20]	; (800af18 <_svfiprintf_r+0x1f4>)
 800af02:	a904      	add	r1, sp, #16
 800af04:	4638      	mov	r0, r7
 800af06:	f7fc ffeb 	bl	8007ee0 <_printf_i>
 800af0a:	e7eb      	b.n	800aee4 <_svfiprintf_r+0x1c0>
 800af0c:	0800c6a9 	.word	0x0800c6a9
 800af10:	0800c6b3 	.word	0x0800c6b3
 800af14:	080079d1 	.word	0x080079d1
 800af18:	0800ac71 	.word	0x0800ac71
 800af1c:	0800c6af 	.word	0x0800c6af

0800af20 <__sflush_r>:
 800af20:	898a      	ldrh	r2, [r1, #12]
 800af22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af26:	4605      	mov	r5, r0
 800af28:	0710      	lsls	r0, r2, #28
 800af2a:	460c      	mov	r4, r1
 800af2c:	d458      	bmi.n	800afe0 <__sflush_r+0xc0>
 800af2e:	684b      	ldr	r3, [r1, #4]
 800af30:	2b00      	cmp	r3, #0
 800af32:	dc05      	bgt.n	800af40 <__sflush_r+0x20>
 800af34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af36:	2b00      	cmp	r3, #0
 800af38:	dc02      	bgt.n	800af40 <__sflush_r+0x20>
 800af3a:	2000      	movs	r0, #0
 800af3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af42:	2e00      	cmp	r6, #0
 800af44:	d0f9      	beq.n	800af3a <__sflush_r+0x1a>
 800af46:	2300      	movs	r3, #0
 800af48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af4c:	682f      	ldr	r7, [r5, #0]
 800af4e:	6a21      	ldr	r1, [r4, #32]
 800af50:	602b      	str	r3, [r5, #0]
 800af52:	d032      	beq.n	800afba <__sflush_r+0x9a>
 800af54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af56:	89a3      	ldrh	r3, [r4, #12]
 800af58:	075a      	lsls	r2, r3, #29
 800af5a:	d505      	bpl.n	800af68 <__sflush_r+0x48>
 800af5c:	6863      	ldr	r3, [r4, #4]
 800af5e:	1ac0      	subs	r0, r0, r3
 800af60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af62:	b10b      	cbz	r3, 800af68 <__sflush_r+0x48>
 800af64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af66:	1ac0      	subs	r0, r0, r3
 800af68:	2300      	movs	r3, #0
 800af6a:	4602      	mov	r2, r0
 800af6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af6e:	6a21      	ldr	r1, [r4, #32]
 800af70:	4628      	mov	r0, r5
 800af72:	47b0      	blx	r6
 800af74:	1c43      	adds	r3, r0, #1
 800af76:	89a3      	ldrh	r3, [r4, #12]
 800af78:	d106      	bne.n	800af88 <__sflush_r+0x68>
 800af7a:	6829      	ldr	r1, [r5, #0]
 800af7c:	291d      	cmp	r1, #29
 800af7e:	d82b      	bhi.n	800afd8 <__sflush_r+0xb8>
 800af80:	4a29      	ldr	r2, [pc, #164]	; (800b028 <__sflush_r+0x108>)
 800af82:	410a      	asrs	r2, r1
 800af84:	07d6      	lsls	r6, r2, #31
 800af86:	d427      	bmi.n	800afd8 <__sflush_r+0xb8>
 800af88:	2200      	movs	r2, #0
 800af8a:	6062      	str	r2, [r4, #4]
 800af8c:	04d9      	lsls	r1, r3, #19
 800af8e:	6922      	ldr	r2, [r4, #16]
 800af90:	6022      	str	r2, [r4, #0]
 800af92:	d504      	bpl.n	800af9e <__sflush_r+0x7e>
 800af94:	1c42      	adds	r2, r0, #1
 800af96:	d101      	bne.n	800af9c <__sflush_r+0x7c>
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	b903      	cbnz	r3, 800af9e <__sflush_r+0x7e>
 800af9c:	6560      	str	r0, [r4, #84]	; 0x54
 800af9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afa0:	602f      	str	r7, [r5, #0]
 800afa2:	2900      	cmp	r1, #0
 800afa4:	d0c9      	beq.n	800af3a <__sflush_r+0x1a>
 800afa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afaa:	4299      	cmp	r1, r3
 800afac:	d002      	beq.n	800afb4 <__sflush_r+0x94>
 800afae:	4628      	mov	r0, r5
 800afb0:	f7fe fa5e 	bl	8009470 <_free_r>
 800afb4:	2000      	movs	r0, #0
 800afb6:	6360      	str	r0, [r4, #52]	; 0x34
 800afb8:	e7c0      	b.n	800af3c <__sflush_r+0x1c>
 800afba:	2301      	movs	r3, #1
 800afbc:	4628      	mov	r0, r5
 800afbe:	47b0      	blx	r6
 800afc0:	1c41      	adds	r1, r0, #1
 800afc2:	d1c8      	bne.n	800af56 <__sflush_r+0x36>
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d0c5      	beq.n	800af56 <__sflush_r+0x36>
 800afca:	2b1d      	cmp	r3, #29
 800afcc:	d001      	beq.n	800afd2 <__sflush_r+0xb2>
 800afce:	2b16      	cmp	r3, #22
 800afd0:	d101      	bne.n	800afd6 <__sflush_r+0xb6>
 800afd2:	602f      	str	r7, [r5, #0]
 800afd4:	e7b1      	b.n	800af3a <__sflush_r+0x1a>
 800afd6:	89a3      	ldrh	r3, [r4, #12]
 800afd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afdc:	81a3      	strh	r3, [r4, #12]
 800afde:	e7ad      	b.n	800af3c <__sflush_r+0x1c>
 800afe0:	690f      	ldr	r7, [r1, #16]
 800afe2:	2f00      	cmp	r7, #0
 800afe4:	d0a9      	beq.n	800af3a <__sflush_r+0x1a>
 800afe6:	0793      	lsls	r3, r2, #30
 800afe8:	680e      	ldr	r6, [r1, #0]
 800afea:	bf08      	it	eq
 800afec:	694b      	ldreq	r3, [r1, #20]
 800afee:	600f      	str	r7, [r1, #0]
 800aff0:	bf18      	it	ne
 800aff2:	2300      	movne	r3, #0
 800aff4:	eba6 0807 	sub.w	r8, r6, r7
 800aff8:	608b      	str	r3, [r1, #8]
 800affa:	f1b8 0f00 	cmp.w	r8, #0
 800affe:	dd9c      	ble.n	800af3a <__sflush_r+0x1a>
 800b000:	6a21      	ldr	r1, [r4, #32]
 800b002:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b004:	4643      	mov	r3, r8
 800b006:	463a      	mov	r2, r7
 800b008:	4628      	mov	r0, r5
 800b00a:	47b0      	blx	r6
 800b00c:	2800      	cmp	r0, #0
 800b00e:	dc06      	bgt.n	800b01e <__sflush_r+0xfe>
 800b010:	89a3      	ldrh	r3, [r4, #12]
 800b012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b016:	81a3      	strh	r3, [r4, #12]
 800b018:	f04f 30ff 	mov.w	r0, #4294967295
 800b01c:	e78e      	b.n	800af3c <__sflush_r+0x1c>
 800b01e:	4407      	add	r7, r0
 800b020:	eba8 0800 	sub.w	r8, r8, r0
 800b024:	e7e9      	b.n	800affa <__sflush_r+0xda>
 800b026:	bf00      	nop
 800b028:	dfbffffe 	.word	0xdfbffffe

0800b02c <_fflush_r>:
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	690b      	ldr	r3, [r1, #16]
 800b030:	4605      	mov	r5, r0
 800b032:	460c      	mov	r4, r1
 800b034:	b913      	cbnz	r3, 800b03c <_fflush_r+0x10>
 800b036:	2500      	movs	r5, #0
 800b038:	4628      	mov	r0, r5
 800b03a:	bd38      	pop	{r3, r4, r5, pc}
 800b03c:	b118      	cbz	r0, 800b046 <_fflush_r+0x1a>
 800b03e:	6a03      	ldr	r3, [r0, #32]
 800b040:	b90b      	cbnz	r3, 800b046 <_fflush_r+0x1a>
 800b042:	f7fd faff 	bl	8008644 <__sinit>
 800b046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d0f3      	beq.n	800b036 <_fflush_r+0xa>
 800b04e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b050:	07d0      	lsls	r0, r2, #31
 800b052:	d404      	bmi.n	800b05e <_fflush_r+0x32>
 800b054:	0599      	lsls	r1, r3, #22
 800b056:	d402      	bmi.n	800b05e <_fflush_r+0x32>
 800b058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b05a:	f7fd fc0a 	bl	8008872 <__retarget_lock_acquire_recursive>
 800b05e:	4628      	mov	r0, r5
 800b060:	4621      	mov	r1, r4
 800b062:	f7ff ff5d 	bl	800af20 <__sflush_r>
 800b066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b068:	07da      	lsls	r2, r3, #31
 800b06a:	4605      	mov	r5, r0
 800b06c:	d4e4      	bmi.n	800b038 <_fflush_r+0xc>
 800b06e:	89a3      	ldrh	r3, [r4, #12]
 800b070:	059b      	lsls	r3, r3, #22
 800b072:	d4e1      	bmi.n	800b038 <_fflush_r+0xc>
 800b074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b076:	f7fd fbfd 	bl	8008874 <__retarget_lock_release_recursive>
 800b07a:	e7dd      	b.n	800b038 <_fflush_r+0xc>

0800b07c <memmove>:
 800b07c:	4288      	cmp	r0, r1
 800b07e:	b510      	push	{r4, lr}
 800b080:	eb01 0402 	add.w	r4, r1, r2
 800b084:	d902      	bls.n	800b08c <memmove+0x10>
 800b086:	4284      	cmp	r4, r0
 800b088:	4623      	mov	r3, r4
 800b08a:	d807      	bhi.n	800b09c <memmove+0x20>
 800b08c:	1e43      	subs	r3, r0, #1
 800b08e:	42a1      	cmp	r1, r4
 800b090:	d008      	beq.n	800b0a4 <memmove+0x28>
 800b092:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b09a:	e7f8      	b.n	800b08e <memmove+0x12>
 800b09c:	4402      	add	r2, r0
 800b09e:	4601      	mov	r1, r0
 800b0a0:	428a      	cmp	r2, r1
 800b0a2:	d100      	bne.n	800b0a6 <memmove+0x2a>
 800b0a4:	bd10      	pop	{r4, pc}
 800b0a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0ae:	e7f7      	b.n	800b0a0 <memmove+0x24>

0800b0b0 <strncmp>:
 800b0b0:	b510      	push	{r4, lr}
 800b0b2:	b16a      	cbz	r2, 800b0d0 <strncmp+0x20>
 800b0b4:	3901      	subs	r1, #1
 800b0b6:	1884      	adds	r4, r0, r2
 800b0b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d103      	bne.n	800b0cc <strncmp+0x1c>
 800b0c4:	42a0      	cmp	r0, r4
 800b0c6:	d001      	beq.n	800b0cc <strncmp+0x1c>
 800b0c8:	2a00      	cmp	r2, #0
 800b0ca:	d1f5      	bne.n	800b0b8 <strncmp+0x8>
 800b0cc:	1ad0      	subs	r0, r2, r3
 800b0ce:	bd10      	pop	{r4, pc}
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	e7fc      	b.n	800b0ce <strncmp+0x1e>

0800b0d4 <_sbrk_r>:
 800b0d4:	b538      	push	{r3, r4, r5, lr}
 800b0d6:	4d06      	ldr	r5, [pc, #24]	; (800b0f0 <_sbrk_r+0x1c>)
 800b0d8:	2300      	movs	r3, #0
 800b0da:	4604      	mov	r4, r0
 800b0dc:	4608      	mov	r0, r1
 800b0de:	602b      	str	r3, [r5, #0]
 800b0e0:	f7f6 feb8 	bl	8001e54 <_sbrk>
 800b0e4:	1c43      	adds	r3, r0, #1
 800b0e6:	d102      	bne.n	800b0ee <_sbrk_r+0x1a>
 800b0e8:	682b      	ldr	r3, [r5, #0]
 800b0ea:	b103      	cbz	r3, 800b0ee <_sbrk_r+0x1a>
 800b0ec:	6023      	str	r3, [r4, #0]
 800b0ee:	bd38      	pop	{r3, r4, r5, pc}
 800b0f0:	20000650 	.word	0x20000650

0800b0f4 <memcpy>:
 800b0f4:	440a      	add	r2, r1
 800b0f6:	4291      	cmp	r1, r2
 800b0f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0fc:	d100      	bne.n	800b100 <memcpy+0xc>
 800b0fe:	4770      	bx	lr
 800b100:	b510      	push	{r4, lr}
 800b102:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b10a:	4291      	cmp	r1, r2
 800b10c:	d1f9      	bne.n	800b102 <memcpy+0xe>
 800b10e:	bd10      	pop	{r4, pc}

0800b110 <nan>:
 800b110:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b118 <nan+0x8>
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	00000000 	.word	0x00000000
 800b11c:	7ff80000 	.word	0x7ff80000

0800b120 <__assert_func>:
 800b120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b122:	4614      	mov	r4, r2
 800b124:	461a      	mov	r2, r3
 800b126:	4b09      	ldr	r3, [pc, #36]	; (800b14c <__assert_func+0x2c>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4605      	mov	r5, r0
 800b12c:	68d8      	ldr	r0, [r3, #12]
 800b12e:	b14c      	cbz	r4, 800b144 <__assert_func+0x24>
 800b130:	4b07      	ldr	r3, [pc, #28]	; (800b150 <__assert_func+0x30>)
 800b132:	9100      	str	r1, [sp, #0]
 800b134:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b138:	4906      	ldr	r1, [pc, #24]	; (800b154 <__assert_func+0x34>)
 800b13a:	462b      	mov	r3, r5
 800b13c:	f000 fbca 	bl	800b8d4 <fiprintf>
 800b140:	f000 fbda 	bl	800b8f8 <abort>
 800b144:	4b04      	ldr	r3, [pc, #16]	; (800b158 <__assert_func+0x38>)
 800b146:	461c      	mov	r4, r3
 800b148:	e7f3      	b.n	800b132 <__assert_func+0x12>
 800b14a:	bf00      	nop
 800b14c:	2000007c 	.word	0x2000007c
 800b150:	0800c6c2 	.word	0x0800c6c2
 800b154:	0800c6cf 	.word	0x0800c6cf
 800b158:	0800c6fd 	.word	0x0800c6fd

0800b15c <_calloc_r>:
 800b15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b15e:	fba1 2402 	umull	r2, r4, r1, r2
 800b162:	b94c      	cbnz	r4, 800b178 <_calloc_r+0x1c>
 800b164:	4611      	mov	r1, r2
 800b166:	9201      	str	r2, [sp, #4]
 800b168:	f7fe f9f6 	bl	8009558 <_malloc_r>
 800b16c:	9a01      	ldr	r2, [sp, #4]
 800b16e:	4605      	mov	r5, r0
 800b170:	b930      	cbnz	r0, 800b180 <_calloc_r+0x24>
 800b172:	4628      	mov	r0, r5
 800b174:	b003      	add	sp, #12
 800b176:	bd30      	pop	{r4, r5, pc}
 800b178:	220c      	movs	r2, #12
 800b17a:	6002      	str	r2, [r0, #0]
 800b17c:	2500      	movs	r5, #0
 800b17e:	e7f8      	b.n	800b172 <_calloc_r+0x16>
 800b180:	4621      	mov	r1, r4
 800b182:	f7fd faf8 	bl	8008776 <memset>
 800b186:	e7f4      	b.n	800b172 <_calloc_r+0x16>

0800b188 <rshift>:
 800b188:	6903      	ldr	r3, [r0, #16]
 800b18a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b18e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b192:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b196:	f100 0414 	add.w	r4, r0, #20
 800b19a:	dd45      	ble.n	800b228 <rshift+0xa0>
 800b19c:	f011 011f 	ands.w	r1, r1, #31
 800b1a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b1a8:	d10c      	bne.n	800b1c4 <rshift+0x3c>
 800b1aa:	f100 0710 	add.w	r7, r0, #16
 800b1ae:	4629      	mov	r1, r5
 800b1b0:	42b1      	cmp	r1, r6
 800b1b2:	d334      	bcc.n	800b21e <rshift+0x96>
 800b1b4:	1a9b      	subs	r3, r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	1eea      	subs	r2, r5, #3
 800b1ba:	4296      	cmp	r6, r2
 800b1bc:	bf38      	it	cc
 800b1be:	2300      	movcc	r3, #0
 800b1c0:	4423      	add	r3, r4
 800b1c2:	e015      	b.n	800b1f0 <rshift+0x68>
 800b1c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b1c8:	f1c1 0820 	rsb	r8, r1, #32
 800b1cc:	40cf      	lsrs	r7, r1
 800b1ce:	f105 0e04 	add.w	lr, r5, #4
 800b1d2:	46a1      	mov	r9, r4
 800b1d4:	4576      	cmp	r6, lr
 800b1d6:	46f4      	mov	ip, lr
 800b1d8:	d815      	bhi.n	800b206 <rshift+0x7e>
 800b1da:	1a9a      	subs	r2, r3, r2
 800b1dc:	0092      	lsls	r2, r2, #2
 800b1de:	3a04      	subs	r2, #4
 800b1e0:	3501      	adds	r5, #1
 800b1e2:	42ae      	cmp	r6, r5
 800b1e4:	bf38      	it	cc
 800b1e6:	2200      	movcc	r2, #0
 800b1e8:	18a3      	adds	r3, r4, r2
 800b1ea:	50a7      	str	r7, [r4, r2]
 800b1ec:	b107      	cbz	r7, 800b1f0 <rshift+0x68>
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	1b1a      	subs	r2, r3, r4
 800b1f2:	42a3      	cmp	r3, r4
 800b1f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1f8:	bf08      	it	eq
 800b1fa:	2300      	moveq	r3, #0
 800b1fc:	6102      	str	r2, [r0, #16]
 800b1fe:	bf08      	it	eq
 800b200:	6143      	streq	r3, [r0, #20]
 800b202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b206:	f8dc c000 	ldr.w	ip, [ip]
 800b20a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b20e:	ea4c 0707 	orr.w	r7, ip, r7
 800b212:	f849 7b04 	str.w	r7, [r9], #4
 800b216:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b21a:	40cf      	lsrs	r7, r1
 800b21c:	e7da      	b.n	800b1d4 <rshift+0x4c>
 800b21e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b222:	f847 cf04 	str.w	ip, [r7, #4]!
 800b226:	e7c3      	b.n	800b1b0 <rshift+0x28>
 800b228:	4623      	mov	r3, r4
 800b22a:	e7e1      	b.n	800b1f0 <rshift+0x68>

0800b22c <__hexdig_fun>:
 800b22c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b230:	2b09      	cmp	r3, #9
 800b232:	d802      	bhi.n	800b23a <__hexdig_fun+0xe>
 800b234:	3820      	subs	r0, #32
 800b236:	b2c0      	uxtb	r0, r0
 800b238:	4770      	bx	lr
 800b23a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b23e:	2b05      	cmp	r3, #5
 800b240:	d801      	bhi.n	800b246 <__hexdig_fun+0x1a>
 800b242:	3847      	subs	r0, #71	; 0x47
 800b244:	e7f7      	b.n	800b236 <__hexdig_fun+0xa>
 800b246:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b24a:	2b05      	cmp	r3, #5
 800b24c:	d801      	bhi.n	800b252 <__hexdig_fun+0x26>
 800b24e:	3827      	subs	r0, #39	; 0x27
 800b250:	e7f1      	b.n	800b236 <__hexdig_fun+0xa>
 800b252:	2000      	movs	r0, #0
 800b254:	4770      	bx	lr
	...

0800b258 <__gethex>:
 800b258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	4617      	mov	r7, r2
 800b25e:	680a      	ldr	r2, [r1, #0]
 800b260:	b085      	sub	sp, #20
 800b262:	f102 0b02 	add.w	fp, r2, #2
 800b266:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b26a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b26e:	4681      	mov	r9, r0
 800b270:	468a      	mov	sl, r1
 800b272:	9302      	str	r3, [sp, #8]
 800b274:	32fe      	adds	r2, #254	; 0xfe
 800b276:	eb02 030b 	add.w	r3, r2, fp
 800b27a:	46d8      	mov	r8, fp
 800b27c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b280:	9301      	str	r3, [sp, #4]
 800b282:	2830      	cmp	r0, #48	; 0x30
 800b284:	d0f7      	beq.n	800b276 <__gethex+0x1e>
 800b286:	f7ff ffd1 	bl	800b22c <__hexdig_fun>
 800b28a:	4604      	mov	r4, r0
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d138      	bne.n	800b302 <__gethex+0xaa>
 800b290:	49a7      	ldr	r1, [pc, #668]	; (800b530 <__gethex+0x2d8>)
 800b292:	2201      	movs	r2, #1
 800b294:	4640      	mov	r0, r8
 800b296:	f7ff ff0b 	bl	800b0b0 <strncmp>
 800b29a:	4606      	mov	r6, r0
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d169      	bne.n	800b374 <__gethex+0x11c>
 800b2a0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b2a4:	465d      	mov	r5, fp
 800b2a6:	f7ff ffc1 	bl	800b22c <__hexdig_fun>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d064      	beq.n	800b378 <__gethex+0x120>
 800b2ae:	465a      	mov	r2, fp
 800b2b0:	7810      	ldrb	r0, [r2, #0]
 800b2b2:	2830      	cmp	r0, #48	; 0x30
 800b2b4:	4690      	mov	r8, r2
 800b2b6:	f102 0201 	add.w	r2, r2, #1
 800b2ba:	d0f9      	beq.n	800b2b0 <__gethex+0x58>
 800b2bc:	f7ff ffb6 	bl	800b22c <__hexdig_fun>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	fab0 f480 	clz	r4, r0
 800b2c6:	0964      	lsrs	r4, r4, #5
 800b2c8:	465e      	mov	r6, fp
 800b2ca:	9301      	str	r3, [sp, #4]
 800b2cc:	4642      	mov	r2, r8
 800b2ce:	4615      	mov	r5, r2
 800b2d0:	3201      	adds	r2, #1
 800b2d2:	7828      	ldrb	r0, [r5, #0]
 800b2d4:	f7ff ffaa 	bl	800b22c <__hexdig_fun>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d1f8      	bne.n	800b2ce <__gethex+0x76>
 800b2dc:	4994      	ldr	r1, [pc, #592]	; (800b530 <__gethex+0x2d8>)
 800b2de:	2201      	movs	r2, #1
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f7ff fee5 	bl	800b0b0 <strncmp>
 800b2e6:	b978      	cbnz	r0, 800b308 <__gethex+0xb0>
 800b2e8:	b946      	cbnz	r6, 800b2fc <__gethex+0xa4>
 800b2ea:	1c6e      	adds	r6, r5, #1
 800b2ec:	4632      	mov	r2, r6
 800b2ee:	4615      	mov	r5, r2
 800b2f0:	3201      	adds	r2, #1
 800b2f2:	7828      	ldrb	r0, [r5, #0]
 800b2f4:	f7ff ff9a 	bl	800b22c <__hexdig_fun>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d1f8      	bne.n	800b2ee <__gethex+0x96>
 800b2fc:	1b73      	subs	r3, r6, r5
 800b2fe:	009e      	lsls	r6, r3, #2
 800b300:	e004      	b.n	800b30c <__gethex+0xb4>
 800b302:	2400      	movs	r4, #0
 800b304:	4626      	mov	r6, r4
 800b306:	e7e1      	b.n	800b2cc <__gethex+0x74>
 800b308:	2e00      	cmp	r6, #0
 800b30a:	d1f7      	bne.n	800b2fc <__gethex+0xa4>
 800b30c:	782b      	ldrb	r3, [r5, #0]
 800b30e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b312:	2b50      	cmp	r3, #80	; 0x50
 800b314:	d13d      	bne.n	800b392 <__gethex+0x13a>
 800b316:	786b      	ldrb	r3, [r5, #1]
 800b318:	2b2b      	cmp	r3, #43	; 0x2b
 800b31a:	d02f      	beq.n	800b37c <__gethex+0x124>
 800b31c:	2b2d      	cmp	r3, #45	; 0x2d
 800b31e:	d031      	beq.n	800b384 <__gethex+0x12c>
 800b320:	1c69      	adds	r1, r5, #1
 800b322:	f04f 0b00 	mov.w	fp, #0
 800b326:	7808      	ldrb	r0, [r1, #0]
 800b328:	f7ff ff80 	bl	800b22c <__hexdig_fun>
 800b32c:	1e42      	subs	r2, r0, #1
 800b32e:	b2d2      	uxtb	r2, r2
 800b330:	2a18      	cmp	r2, #24
 800b332:	d82e      	bhi.n	800b392 <__gethex+0x13a>
 800b334:	f1a0 0210 	sub.w	r2, r0, #16
 800b338:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b33c:	f7ff ff76 	bl	800b22c <__hexdig_fun>
 800b340:	f100 3cff 	add.w	ip, r0, #4294967295
 800b344:	fa5f fc8c 	uxtb.w	ip, ip
 800b348:	f1bc 0f18 	cmp.w	ip, #24
 800b34c:	d91d      	bls.n	800b38a <__gethex+0x132>
 800b34e:	f1bb 0f00 	cmp.w	fp, #0
 800b352:	d000      	beq.n	800b356 <__gethex+0xfe>
 800b354:	4252      	negs	r2, r2
 800b356:	4416      	add	r6, r2
 800b358:	f8ca 1000 	str.w	r1, [sl]
 800b35c:	b1dc      	cbz	r4, 800b396 <__gethex+0x13e>
 800b35e:	9b01      	ldr	r3, [sp, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	bf14      	ite	ne
 800b364:	f04f 0800 	movne.w	r8, #0
 800b368:	f04f 0806 	moveq.w	r8, #6
 800b36c:	4640      	mov	r0, r8
 800b36e:	b005      	add	sp, #20
 800b370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b374:	4645      	mov	r5, r8
 800b376:	4626      	mov	r6, r4
 800b378:	2401      	movs	r4, #1
 800b37a:	e7c7      	b.n	800b30c <__gethex+0xb4>
 800b37c:	f04f 0b00 	mov.w	fp, #0
 800b380:	1ca9      	adds	r1, r5, #2
 800b382:	e7d0      	b.n	800b326 <__gethex+0xce>
 800b384:	f04f 0b01 	mov.w	fp, #1
 800b388:	e7fa      	b.n	800b380 <__gethex+0x128>
 800b38a:	230a      	movs	r3, #10
 800b38c:	fb03 0002 	mla	r0, r3, r2, r0
 800b390:	e7d0      	b.n	800b334 <__gethex+0xdc>
 800b392:	4629      	mov	r1, r5
 800b394:	e7e0      	b.n	800b358 <__gethex+0x100>
 800b396:	eba5 0308 	sub.w	r3, r5, r8
 800b39a:	3b01      	subs	r3, #1
 800b39c:	4621      	mov	r1, r4
 800b39e:	2b07      	cmp	r3, #7
 800b3a0:	dc0a      	bgt.n	800b3b8 <__gethex+0x160>
 800b3a2:	4648      	mov	r0, r9
 800b3a4:	f7fe f964 	bl	8009670 <_Balloc>
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	b940      	cbnz	r0, 800b3be <__gethex+0x166>
 800b3ac:	4b61      	ldr	r3, [pc, #388]	; (800b534 <__gethex+0x2dc>)
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	21e4      	movs	r1, #228	; 0xe4
 800b3b2:	4861      	ldr	r0, [pc, #388]	; (800b538 <__gethex+0x2e0>)
 800b3b4:	f7ff feb4 	bl	800b120 <__assert_func>
 800b3b8:	3101      	adds	r1, #1
 800b3ba:	105b      	asrs	r3, r3, #1
 800b3bc:	e7ef      	b.n	800b39e <__gethex+0x146>
 800b3be:	f100 0a14 	add.w	sl, r0, #20
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	495a      	ldr	r1, [pc, #360]	; (800b530 <__gethex+0x2d8>)
 800b3c6:	f8cd a004 	str.w	sl, [sp, #4]
 800b3ca:	469b      	mov	fp, r3
 800b3cc:	45a8      	cmp	r8, r5
 800b3ce:	d342      	bcc.n	800b456 <__gethex+0x1fe>
 800b3d0:	9801      	ldr	r0, [sp, #4]
 800b3d2:	f840 bb04 	str.w	fp, [r0], #4
 800b3d6:	eba0 000a 	sub.w	r0, r0, sl
 800b3da:	1080      	asrs	r0, r0, #2
 800b3dc:	6120      	str	r0, [r4, #16]
 800b3de:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b3e2:	4658      	mov	r0, fp
 800b3e4:	f7fe fa36 	bl	8009854 <__hi0bits>
 800b3e8:	683d      	ldr	r5, [r7, #0]
 800b3ea:	eba8 0000 	sub.w	r0, r8, r0
 800b3ee:	42a8      	cmp	r0, r5
 800b3f0:	dd59      	ble.n	800b4a6 <__gethex+0x24e>
 800b3f2:	eba0 0805 	sub.w	r8, r0, r5
 800b3f6:	4641      	mov	r1, r8
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f7fe fdc2 	bl	8009f82 <__any_on>
 800b3fe:	4683      	mov	fp, r0
 800b400:	b1b8      	cbz	r0, 800b432 <__gethex+0x1da>
 800b402:	f108 33ff 	add.w	r3, r8, #4294967295
 800b406:	1159      	asrs	r1, r3, #5
 800b408:	f003 021f 	and.w	r2, r3, #31
 800b40c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b410:	f04f 0b01 	mov.w	fp, #1
 800b414:	fa0b f202 	lsl.w	r2, fp, r2
 800b418:	420a      	tst	r2, r1
 800b41a:	d00a      	beq.n	800b432 <__gethex+0x1da>
 800b41c:	455b      	cmp	r3, fp
 800b41e:	dd06      	ble.n	800b42e <__gethex+0x1d6>
 800b420:	f1a8 0102 	sub.w	r1, r8, #2
 800b424:	4620      	mov	r0, r4
 800b426:	f7fe fdac 	bl	8009f82 <__any_on>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d138      	bne.n	800b4a0 <__gethex+0x248>
 800b42e:	f04f 0b02 	mov.w	fp, #2
 800b432:	4641      	mov	r1, r8
 800b434:	4620      	mov	r0, r4
 800b436:	f7ff fea7 	bl	800b188 <rshift>
 800b43a:	4446      	add	r6, r8
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	42b3      	cmp	r3, r6
 800b440:	da41      	bge.n	800b4c6 <__gethex+0x26e>
 800b442:	4621      	mov	r1, r4
 800b444:	4648      	mov	r0, r9
 800b446:	f7fe f953 	bl	80096f0 <_Bfree>
 800b44a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b44c:	2300      	movs	r3, #0
 800b44e:	6013      	str	r3, [r2, #0]
 800b450:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b454:	e78a      	b.n	800b36c <__gethex+0x114>
 800b456:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b45a:	2a2e      	cmp	r2, #46	; 0x2e
 800b45c:	d014      	beq.n	800b488 <__gethex+0x230>
 800b45e:	2b20      	cmp	r3, #32
 800b460:	d106      	bne.n	800b470 <__gethex+0x218>
 800b462:	9b01      	ldr	r3, [sp, #4]
 800b464:	f843 bb04 	str.w	fp, [r3], #4
 800b468:	f04f 0b00 	mov.w	fp, #0
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	465b      	mov	r3, fp
 800b470:	7828      	ldrb	r0, [r5, #0]
 800b472:	9303      	str	r3, [sp, #12]
 800b474:	f7ff feda 	bl	800b22c <__hexdig_fun>
 800b478:	9b03      	ldr	r3, [sp, #12]
 800b47a:	f000 000f 	and.w	r0, r0, #15
 800b47e:	4098      	lsls	r0, r3
 800b480:	ea4b 0b00 	orr.w	fp, fp, r0
 800b484:	3304      	adds	r3, #4
 800b486:	e7a1      	b.n	800b3cc <__gethex+0x174>
 800b488:	45a8      	cmp	r8, r5
 800b48a:	d8e8      	bhi.n	800b45e <__gethex+0x206>
 800b48c:	2201      	movs	r2, #1
 800b48e:	4628      	mov	r0, r5
 800b490:	9303      	str	r3, [sp, #12]
 800b492:	f7ff fe0d 	bl	800b0b0 <strncmp>
 800b496:	4926      	ldr	r1, [pc, #152]	; (800b530 <__gethex+0x2d8>)
 800b498:	9b03      	ldr	r3, [sp, #12]
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d1df      	bne.n	800b45e <__gethex+0x206>
 800b49e:	e795      	b.n	800b3cc <__gethex+0x174>
 800b4a0:	f04f 0b03 	mov.w	fp, #3
 800b4a4:	e7c5      	b.n	800b432 <__gethex+0x1da>
 800b4a6:	da0b      	bge.n	800b4c0 <__gethex+0x268>
 800b4a8:	eba5 0800 	sub.w	r8, r5, r0
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	4642      	mov	r2, r8
 800b4b0:	4648      	mov	r0, r9
 800b4b2:	f7fe fb37 	bl	8009b24 <__lshift>
 800b4b6:	eba6 0608 	sub.w	r6, r6, r8
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	f100 0a14 	add.w	sl, r0, #20
 800b4c0:	f04f 0b00 	mov.w	fp, #0
 800b4c4:	e7ba      	b.n	800b43c <__gethex+0x1e4>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	42b3      	cmp	r3, r6
 800b4ca:	dd73      	ble.n	800b5b4 <__gethex+0x35c>
 800b4cc:	1b9e      	subs	r6, r3, r6
 800b4ce:	42b5      	cmp	r5, r6
 800b4d0:	dc34      	bgt.n	800b53c <__gethex+0x2e4>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	d023      	beq.n	800b520 <__gethex+0x2c8>
 800b4d8:	2b03      	cmp	r3, #3
 800b4da:	d025      	beq.n	800b528 <__gethex+0x2d0>
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d115      	bne.n	800b50c <__gethex+0x2b4>
 800b4e0:	42b5      	cmp	r5, r6
 800b4e2:	d113      	bne.n	800b50c <__gethex+0x2b4>
 800b4e4:	2d01      	cmp	r5, #1
 800b4e6:	d10b      	bne.n	800b500 <__gethex+0x2a8>
 800b4e8:	9a02      	ldr	r2, [sp, #8]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6013      	str	r3, [r2, #0]
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	6123      	str	r3, [r4, #16]
 800b4f2:	f8ca 3000 	str.w	r3, [sl]
 800b4f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4f8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b4fc:	601c      	str	r4, [r3, #0]
 800b4fe:	e735      	b.n	800b36c <__gethex+0x114>
 800b500:	1e69      	subs	r1, r5, #1
 800b502:	4620      	mov	r0, r4
 800b504:	f7fe fd3d 	bl	8009f82 <__any_on>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d1ed      	bne.n	800b4e8 <__gethex+0x290>
 800b50c:	4621      	mov	r1, r4
 800b50e:	4648      	mov	r0, r9
 800b510:	f7fe f8ee 	bl	80096f0 <_Bfree>
 800b514:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b516:	2300      	movs	r3, #0
 800b518:	6013      	str	r3, [r2, #0]
 800b51a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b51e:	e725      	b.n	800b36c <__gethex+0x114>
 800b520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1f2      	bne.n	800b50c <__gethex+0x2b4>
 800b526:	e7df      	b.n	800b4e8 <__gethex+0x290>
 800b528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1dc      	bne.n	800b4e8 <__gethex+0x290>
 800b52e:	e7ed      	b.n	800b50c <__gethex+0x2b4>
 800b530:	0800c554 	.word	0x0800c554
 800b534:	0800c3e9 	.word	0x0800c3e9
 800b538:	0800c6fe 	.word	0x0800c6fe
 800b53c:	f106 38ff 	add.w	r8, r6, #4294967295
 800b540:	f1bb 0f00 	cmp.w	fp, #0
 800b544:	d133      	bne.n	800b5ae <__gethex+0x356>
 800b546:	f1b8 0f00 	cmp.w	r8, #0
 800b54a:	d004      	beq.n	800b556 <__gethex+0x2fe>
 800b54c:	4641      	mov	r1, r8
 800b54e:	4620      	mov	r0, r4
 800b550:	f7fe fd17 	bl	8009f82 <__any_on>
 800b554:	4683      	mov	fp, r0
 800b556:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b55a:	2301      	movs	r3, #1
 800b55c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b560:	f008 081f 	and.w	r8, r8, #31
 800b564:	fa03 f308 	lsl.w	r3, r3, r8
 800b568:	4213      	tst	r3, r2
 800b56a:	4631      	mov	r1, r6
 800b56c:	4620      	mov	r0, r4
 800b56e:	bf18      	it	ne
 800b570:	f04b 0b02 	orrne.w	fp, fp, #2
 800b574:	1bad      	subs	r5, r5, r6
 800b576:	f7ff fe07 	bl	800b188 <rshift>
 800b57a:	687e      	ldr	r6, [r7, #4]
 800b57c:	f04f 0802 	mov.w	r8, #2
 800b580:	f1bb 0f00 	cmp.w	fp, #0
 800b584:	d04a      	beq.n	800b61c <__gethex+0x3c4>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2b02      	cmp	r3, #2
 800b58a:	d016      	beq.n	800b5ba <__gethex+0x362>
 800b58c:	2b03      	cmp	r3, #3
 800b58e:	d018      	beq.n	800b5c2 <__gethex+0x36a>
 800b590:	2b01      	cmp	r3, #1
 800b592:	d109      	bne.n	800b5a8 <__gethex+0x350>
 800b594:	f01b 0f02 	tst.w	fp, #2
 800b598:	d006      	beq.n	800b5a8 <__gethex+0x350>
 800b59a:	f8da 3000 	ldr.w	r3, [sl]
 800b59e:	ea4b 0b03 	orr.w	fp, fp, r3
 800b5a2:	f01b 0f01 	tst.w	fp, #1
 800b5a6:	d10f      	bne.n	800b5c8 <__gethex+0x370>
 800b5a8:	f048 0810 	orr.w	r8, r8, #16
 800b5ac:	e036      	b.n	800b61c <__gethex+0x3c4>
 800b5ae:	f04f 0b01 	mov.w	fp, #1
 800b5b2:	e7d0      	b.n	800b556 <__gethex+0x2fe>
 800b5b4:	f04f 0801 	mov.w	r8, #1
 800b5b8:	e7e2      	b.n	800b580 <__gethex+0x328>
 800b5ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5bc:	f1c3 0301 	rsb	r3, r3, #1
 800b5c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d0ef      	beq.n	800b5a8 <__gethex+0x350>
 800b5c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b5cc:	f104 0214 	add.w	r2, r4, #20
 800b5d0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b5da:	2300      	movs	r3, #0
 800b5dc:	4694      	mov	ip, r2
 800b5de:	f852 1b04 	ldr.w	r1, [r2], #4
 800b5e2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b5e6:	d01e      	beq.n	800b626 <__gethex+0x3ce>
 800b5e8:	3101      	adds	r1, #1
 800b5ea:	f8cc 1000 	str.w	r1, [ip]
 800b5ee:	f1b8 0f02 	cmp.w	r8, #2
 800b5f2:	f104 0214 	add.w	r2, r4, #20
 800b5f6:	d13d      	bne.n	800b674 <__gethex+0x41c>
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	42ab      	cmp	r3, r5
 800b5fe:	d10b      	bne.n	800b618 <__gethex+0x3c0>
 800b600:	1169      	asrs	r1, r5, #5
 800b602:	2301      	movs	r3, #1
 800b604:	f005 051f 	and.w	r5, r5, #31
 800b608:	fa03 f505 	lsl.w	r5, r3, r5
 800b60c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b610:	421d      	tst	r5, r3
 800b612:	bf18      	it	ne
 800b614:	f04f 0801 	movne.w	r8, #1
 800b618:	f048 0820 	orr.w	r8, r8, #32
 800b61c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b61e:	601c      	str	r4, [r3, #0]
 800b620:	9b02      	ldr	r3, [sp, #8]
 800b622:	601e      	str	r6, [r3, #0]
 800b624:	e6a2      	b.n	800b36c <__gethex+0x114>
 800b626:	4290      	cmp	r0, r2
 800b628:	f842 3c04 	str.w	r3, [r2, #-4]
 800b62c:	d8d6      	bhi.n	800b5dc <__gethex+0x384>
 800b62e:	68a2      	ldr	r2, [r4, #8]
 800b630:	4593      	cmp	fp, r2
 800b632:	db17      	blt.n	800b664 <__gethex+0x40c>
 800b634:	6861      	ldr	r1, [r4, #4]
 800b636:	4648      	mov	r0, r9
 800b638:	3101      	adds	r1, #1
 800b63a:	f7fe f819 	bl	8009670 <_Balloc>
 800b63e:	4682      	mov	sl, r0
 800b640:	b918      	cbnz	r0, 800b64a <__gethex+0x3f2>
 800b642:	4b1b      	ldr	r3, [pc, #108]	; (800b6b0 <__gethex+0x458>)
 800b644:	4602      	mov	r2, r0
 800b646:	2184      	movs	r1, #132	; 0x84
 800b648:	e6b3      	b.n	800b3b2 <__gethex+0x15a>
 800b64a:	6922      	ldr	r2, [r4, #16]
 800b64c:	3202      	adds	r2, #2
 800b64e:	f104 010c 	add.w	r1, r4, #12
 800b652:	0092      	lsls	r2, r2, #2
 800b654:	300c      	adds	r0, #12
 800b656:	f7ff fd4d 	bl	800b0f4 <memcpy>
 800b65a:	4621      	mov	r1, r4
 800b65c:	4648      	mov	r0, r9
 800b65e:	f7fe f847 	bl	80096f0 <_Bfree>
 800b662:	4654      	mov	r4, sl
 800b664:	6922      	ldr	r2, [r4, #16]
 800b666:	1c51      	adds	r1, r2, #1
 800b668:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b66c:	6121      	str	r1, [r4, #16]
 800b66e:	2101      	movs	r1, #1
 800b670:	6151      	str	r1, [r2, #20]
 800b672:	e7bc      	b.n	800b5ee <__gethex+0x396>
 800b674:	6921      	ldr	r1, [r4, #16]
 800b676:	4559      	cmp	r1, fp
 800b678:	dd0b      	ble.n	800b692 <__gethex+0x43a>
 800b67a:	2101      	movs	r1, #1
 800b67c:	4620      	mov	r0, r4
 800b67e:	f7ff fd83 	bl	800b188 <rshift>
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	3601      	adds	r6, #1
 800b686:	42b3      	cmp	r3, r6
 800b688:	f6ff aedb 	blt.w	800b442 <__gethex+0x1ea>
 800b68c:	f04f 0801 	mov.w	r8, #1
 800b690:	e7c2      	b.n	800b618 <__gethex+0x3c0>
 800b692:	f015 051f 	ands.w	r5, r5, #31
 800b696:	d0f9      	beq.n	800b68c <__gethex+0x434>
 800b698:	9b01      	ldr	r3, [sp, #4]
 800b69a:	441a      	add	r2, r3
 800b69c:	f1c5 0520 	rsb	r5, r5, #32
 800b6a0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b6a4:	f7fe f8d6 	bl	8009854 <__hi0bits>
 800b6a8:	42a8      	cmp	r0, r5
 800b6aa:	dbe6      	blt.n	800b67a <__gethex+0x422>
 800b6ac:	e7ee      	b.n	800b68c <__gethex+0x434>
 800b6ae:	bf00      	nop
 800b6b0:	0800c3e9 	.word	0x0800c3e9

0800b6b4 <L_shift>:
 800b6b4:	f1c2 0208 	rsb	r2, r2, #8
 800b6b8:	0092      	lsls	r2, r2, #2
 800b6ba:	b570      	push	{r4, r5, r6, lr}
 800b6bc:	f1c2 0620 	rsb	r6, r2, #32
 800b6c0:	6843      	ldr	r3, [r0, #4]
 800b6c2:	6804      	ldr	r4, [r0, #0]
 800b6c4:	fa03 f506 	lsl.w	r5, r3, r6
 800b6c8:	432c      	orrs	r4, r5
 800b6ca:	40d3      	lsrs	r3, r2
 800b6cc:	6004      	str	r4, [r0, #0]
 800b6ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6d2:	4288      	cmp	r0, r1
 800b6d4:	d3f4      	bcc.n	800b6c0 <L_shift+0xc>
 800b6d6:	bd70      	pop	{r4, r5, r6, pc}

0800b6d8 <__match>:
 800b6d8:	b530      	push	{r4, r5, lr}
 800b6da:	6803      	ldr	r3, [r0, #0]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6e2:	b914      	cbnz	r4, 800b6ea <__match+0x12>
 800b6e4:	6003      	str	r3, [r0, #0]
 800b6e6:	2001      	movs	r0, #1
 800b6e8:	bd30      	pop	{r4, r5, pc}
 800b6ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b6f2:	2d19      	cmp	r5, #25
 800b6f4:	bf98      	it	ls
 800b6f6:	3220      	addls	r2, #32
 800b6f8:	42a2      	cmp	r2, r4
 800b6fa:	d0f0      	beq.n	800b6de <__match+0x6>
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	e7f3      	b.n	800b6e8 <__match+0x10>

0800b700 <__hexnan>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	680b      	ldr	r3, [r1, #0]
 800b706:	6801      	ldr	r1, [r0, #0]
 800b708:	115e      	asrs	r6, r3, #5
 800b70a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b70e:	f013 031f 	ands.w	r3, r3, #31
 800b712:	b087      	sub	sp, #28
 800b714:	bf18      	it	ne
 800b716:	3604      	addne	r6, #4
 800b718:	2500      	movs	r5, #0
 800b71a:	1f37      	subs	r7, r6, #4
 800b71c:	4682      	mov	sl, r0
 800b71e:	4690      	mov	r8, r2
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	f846 5c04 	str.w	r5, [r6, #-4]
 800b726:	46b9      	mov	r9, r7
 800b728:	463c      	mov	r4, r7
 800b72a:	9502      	str	r5, [sp, #8]
 800b72c:	46ab      	mov	fp, r5
 800b72e:	784a      	ldrb	r2, [r1, #1]
 800b730:	1c4b      	adds	r3, r1, #1
 800b732:	9303      	str	r3, [sp, #12]
 800b734:	b342      	cbz	r2, 800b788 <__hexnan+0x88>
 800b736:	4610      	mov	r0, r2
 800b738:	9105      	str	r1, [sp, #20]
 800b73a:	9204      	str	r2, [sp, #16]
 800b73c:	f7ff fd76 	bl	800b22c <__hexdig_fun>
 800b740:	2800      	cmp	r0, #0
 800b742:	d14f      	bne.n	800b7e4 <__hexnan+0xe4>
 800b744:	9a04      	ldr	r2, [sp, #16]
 800b746:	9905      	ldr	r1, [sp, #20]
 800b748:	2a20      	cmp	r2, #32
 800b74a:	d818      	bhi.n	800b77e <__hexnan+0x7e>
 800b74c:	9b02      	ldr	r3, [sp, #8]
 800b74e:	459b      	cmp	fp, r3
 800b750:	dd13      	ble.n	800b77a <__hexnan+0x7a>
 800b752:	454c      	cmp	r4, r9
 800b754:	d206      	bcs.n	800b764 <__hexnan+0x64>
 800b756:	2d07      	cmp	r5, #7
 800b758:	dc04      	bgt.n	800b764 <__hexnan+0x64>
 800b75a:	462a      	mov	r2, r5
 800b75c:	4649      	mov	r1, r9
 800b75e:	4620      	mov	r0, r4
 800b760:	f7ff ffa8 	bl	800b6b4 <L_shift>
 800b764:	4544      	cmp	r4, r8
 800b766:	d950      	bls.n	800b80a <__hexnan+0x10a>
 800b768:	2300      	movs	r3, #0
 800b76a:	f1a4 0904 	sub.w	r9, r4, #4
 800b76e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b772:	f8cd b008 	str.w	fp, [sp, #8]
 800b776:	464c      	mov	r4, r9
 800b778:	461d      	mov	r5, r3
 800b77a:	9903      	ldr	r1, [sp, #12]
 800b77c:	e7d7      	b.n	800b72e <__hexnan+0x2e>
 800b77e:	2a29      	cmp	r2, #41	; 0x29
 800b780:	d155      	bne.n	800b82e <__hexnan+0x12e>
 800b782:	3102      	adds	r1, #2
 800b784:	f8ca 1000 	str.w	r1, [sl]
 800b788:	f1bb 0f00 	cmp.w	fp, #0
 800b78c:	d04f      	beq.n	800b82e <__hexnan+0x12e>
 800b78e:	454c      	cmp	r4, r9
 800b790:	d206      	bcs.n	800b7a0 <__hexnan+0xa0>
 800b792:	2d07      	cmp	r5, #7
 800b794:	dc04      	bgt.n	800b7a0 <__hexnan+0xa0>
 800b796:	462a      	mov	r2, r5
 800b798:	4649      	mov	r1, r9
 800b79a:	4620      	mov	r0, r4
 800b79c:	f7ff ff8a 	bl	800b6b4 <L_shift>
 800b7a0:	4544      	cmp	r4, r8
 800b7a2:	d934      	bls.n	800b80e <__hexnan+0x10e>
 800b7a4:	f1a8 0204 	sub.w	r2, r8, #4
 800b7a8:	4623      	mov	r3, r4
 800b7aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800b7ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7b2:	429f      	cmp	r7, r3
 800b7b4:	d2f9      	bcs.n	800b7aa <__hexnan+0xaa>
 800b7b6:	1b3b      	subs	r3, r7, r4
 800b7b8:	f023 0303 	bic.w	r3, r3, #3
 800b7bc:	3304      	adds	r3, #4
 800b7be:	3e03      	subs	r6, #3
 800b7c0:	3401      	adds	r4, #1
 800b7c2:	42a6      	cmp	r6, r4
 800b7c4:	bf38      	it	cc
 800b7c6:	2304      	movcc	r3, #4
 800b7c8:	4443      	add	r3, r8
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f843 2b04 	str.w	r2, [r3], #4
 800b7d0:	429f      	cmp	r7, r3
 800b7d2:	d2fb      	bcs.n	800b7cc <__hexnan+0xcc>
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	b91b      	cbnz	r3, 800b7e0 <__hexnan+0xe0>
 800b7d8:	4547      	cmp	r7, r8
 800b7da:	d126      	bne.n	800b82a <__hexnan+0x12a>
 800b7dc:	2301      	movs	r3, #1
 800b7de:	603b      	str	r3, [r7, #0]
 800b7e0:	2005      	movs	r0, #5
 800b7e2:	e025      	b.n	800b830 <__hexnan+0x130>
 800b7e4:	3501      	adds	r5, #1
 800b7e6:	2d08      	cmp	r5, #8
 800b7e8:	f10b 0b01 	add.w	fp, fp, #1
 800b7ec:	dd06      	ble.n	800b7fc <__hexnan+0xfc>
 800b7ee:	4544      	cmp	r4, r8
 800b7f0:	d9c3      	bls.n	800b77a <__hexnan+0x7a>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7f8:	2501      	movs	r5, #1
 800b7fa:	3c04      	subs	r4, #4
 800b7fc:	6822      	ldr	r2, [r4, #0]
 800b7fe:	f000 000f 	and.w	r0, r0, #15
 800b802:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b806:	6020      	str	r0, [r4, #0]
 800b808:	e7b7      	b.n	800b77a <__hexnan+0x7a>
 800b80a:	2508      	movs	r5, #8
 800b80c:	e7b5      	b.n	800b77a <__hexnan+0x7a>
 800b80e:	9b01      	ldr	r3, [sp, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d0df      	beq.n	800b7d4 <__hexnan+0xd4>
 800b814:	f1c3 0320 	rsb	r3, r3, #32
 800b818:	f04f 32ff 	mov.w	r2, #4294967295
 800b81c:	40da      	lsrs	r2, r3
 800b81e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b822:	4013      	ands	r3, r2
 800b824:	f846 3c04 	str.w	r3, [r6, #-4]
 800b828:	e7d4      	b.n	800b7d4 <__hexnan+0xd4>
 800b82a:	3f04      	subs	r7, #4
 800b82c:	e7d2      	b.n	800b7d4 <__hexnan+0xd4>
 800b82e:	2004      	movs	r0, #4
 800b830:	b007      	add	sp, #28
 800b832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b836 <__ascii_mbtowc>:
 800b836:	b082      	sub	sp, #8
 800b838:	b901      	cbnz	r1, 800b83c <__ascii_mbtowc+0x6>
 800b83a:	a901      	add	r1, sp, #4
 800b83c:	b142      	cbz	r2, 800b850 <__ascii_mbtowc+0x1a>
 800b83e:	b14b      	cbz	r3, 800b854 <__ascii_mbtowc+0x1e>
 800b840:	7813      	ldrb	r3, [r2, #0]
 800b842:	600b      	str	r3, [r1, #0]
 800b844:	7812      	ldrb	r2, [r2, #0]
 800b846:	1e10      	subs	r0, r2, #0
 800b848:	bf18      	it	ne
 800b84a:	2001      	movne	r0, #1
 800b84c:	b002      	add	sp, #8
 800b84e:	4770      	bx	lr
 800b850:	4610      	mov	r0, r2
 800b852:	e7fb      	b.n	800b84c <__ascii_mbtowc+0x16>
 800b854:	f06f 0001 	mvn.w	r0, #1
 800b858:	e7f8      	b.n	800b84c <__ascii_mbtowc+0x16>

0800b85a <_realloc_r>:
 800b85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b85e:	4680      	mov	r8, r0
 800b860:	4614      	mov	r4, r2
 800b862:	460e      	mov	r6, r1
 800b864:	b921      	cbnz	r1, 800b870 <_realloc_r+0x16>
 800b866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b86a:	4611      	mov	r1, r2
 800b86c:	f7fd be74 	b.w	8009558 <_malloc_r>
 800b870:	b92a      	cbnz	r2, 800b87e <_realloc_r+0x24>
 800b872:	f7fd fdfd 	bl	8009470 <_free_r>
 800b876:	4625      	mov	r5, r4
 800b878:	4628      	mov	r0, r5
 800b87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b87e:	f000 f842 	bl	800b906 <_malloc_usable_size_r>
 800b882:	4284      	cmp	r4, r0
 800b884:	4607      	mov	r7, r0
 800b886:	d802      	bhi.n	800b88e <_realloc_r+0x34>
 800b888:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b88c:	d812      	bhi.n	800b8b4 <_realloc_r+0x5a>
 800b88e:	4621      	mov	r1, r4
 800b890:	4640      	mov	r0, r8
 800b892:	f7fd fe61 	bl	8009558 <_malloc_r>
 800b896:	4605      	mov	r5, r0
 800b898:	2800      	cmp	r0, #0
 800b89a:	d0ed      	beq.n	800b878 <_realloc_r+0x1e>
 800b89c:	42bc      	cmp	r4, r7
 800b89e:	4622      	mov	r2, r4
 800b8a0:	4631      	mov	r1, r6
 800b8a2:	bf28      	it	cs
 800b8a4:	463a      	movcs	r2, r7
 800b8a6:	f7ff fc25 	bl	800b0f4 <memcpy>
 800b8aa:	4631      	mov	r1, r6
 800b8ac:	4640      	mov	r0, r8
 800b8ae:	f7fd fddf 	bl	8009470 <_free_r>
 800b8b2:	e7e1      	b.n	800b878 <_realloc_r+0x1e>
 800b8b4:	4635      	mov	r5, r6
 800b8b6:	e7df      	b.n	800b878 <_realloc_r+0x1e>

0800b8b8 <__ascii_wctomb>:
 800b8b8:	b149      	cbz	r1, 800b8ce <__ascii_wctomb+0x16>
 800b8ba:	2aff      	cmp	r2, #255	; 0xff
 800b8bc:	bf85      	ittet	hi
 800b8be:	238a      	movhi	r3, #138	; 0x8a
 800b8c0:	6003      	strhi	r3, [r0, #0]
 800b8c2:	700a      	strbls	r2, [r1, #0]
 800b8c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b8c8:	bf98      	it	ls
 800b8ca:	2001      	movls	r0, #1
 800b8cc:	4770      	bx	lr
 800b8ce:	4608      	mov	r0, r1
 800b8d0:	4770      	bx	lr
	...

0800b8d4 <fiprintf>:
 800b8d4:	b40e      	push	{r1, r2, r3}
 800b8d6:	b503      	push	{r0, r1, lr}
 800b8d8:	4601      	mov	r1, r0
 800b8da:	ab03      	add	r3, sp, #12
 800b8dc:	4805      	ldr	r0, [pc, #20]	; (800b8f4 <fiprintf+0x20>)
 800b8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e2:	6800      	ldr	r0, [r0, #0]
 800b8e4:	9301      	str	r3, [sp, #4]
 800b8e6:	f000 f83f 	bl	800b968 <_vfiprintf_r>
 800b8ea:	b002      	add	sp, #8
 800b8ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8f0:	b003      	add	sp, #12
 800b8f2:	4770      	bx	lr
 800b8f4:	2000007c 	.word	0x2000007c

0800b8f8 <abort>:
 800b8f8:	b508      	push	{r3, lr}
 800b8fa:	2006      	movs	r0, #6
 800b8fc:	f000 fa0c 	bl	800bd18 <raise>
 800b900:	2001      	movs	r0, #1
 800b902:	f7f6 fa2f 	bl	8001d64 <_exit>

0800b906 <_malloc_usable_size_r>:
 800b906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b90a:	1f18      	subs	r0, r3, #4
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	bfbc      	itt	lt
 800b910:	580b      	ldrlt	r3, [r1, r0]
 800b912:	18c0      	addlt	r0, r0, r3
 800b914:	4770      	bx	lr

0800b916 <__sfputc_r>:
 800b916:	6893      	ldr	r3, [r2, #8]
 800b918:	3b01      	subs	r3, #1
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	b410      	push	{r4}
 800b91e:	6093      	str	r3, [r2, #8]
 800b920:	da08      	bge.n	800b934 <__sfputc_r+0x1e>
 800b922:	6994      	ldr	r4, [r2, #24]
 800b924:	42a3      	cmp	r3, r4
 800b926:	db01      	blt.n	800b92c <__sfputc_r+0x16>
 800b928:	290a      	cmp	r1, #10
 800b92a:	d103      	bne.n	800b934 <__sfputc_r+0x1e>
 800b92c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b930:	f000 b934 	b.w	800bb9c <__swbuf_r>
 800b934:	6813      	ldr	r3, [r2, #0]
 800b936:	1c58      	adds	r0, r3, #1
 800b938:	6010      	str	r0, [r2, #0]
 800b93a:	7019      	strb	r1, [r3, #0]
 800b93c:	4608      	mov	r0, r1
 800b93e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <__sfputs_r>:
 800b944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b946:	4606      	mov	r6, r0
 800b948:	460f      	mov	r7, r1
 800b94a:	4614      	mov	r4, r2
 800b94c:	18d5      	adds	r5, r2, r3
 800b94e:	42ac      	cmp	r4, r5
 800b950:	d101      	bne.n	800b956 <__sfputs_r+0x12>
 800b952:	2000      	movs	r0, #0
 800b954:	e007      	b.n	800b966 <__sfputs_r+0x22>
 800b956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b95a:	463a      	mov	r2, r7
 800b95c:	4630      	mov	r0, r6
 800b95e:	f7ff ffda 	bl	800b916 <__sfputc_r>
 800b962:	1c43      	adds	r3, r0, #1
 800b964:	d1f3      	bne.n	800b94e <__sfputs_r+0xa>
 800b966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b968 <_vfiprintf_r>:
 800b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96c:	460d      	mov	r5, r1
 800b96e:	b09d      	sub	sp, #116	; 0x74
 800b970:	4614      	mov	r4, r2
 800b972:	4698      	mov	r8, r3
 800b974:	4606      	mov	r6, r0
 800b976:	b118      	cbz	r0, 800b980 <_vfiprintf_r+0x18>
 800b978:	6a03      	ldr	r3, [r0, #32]
 800b97a:	b90b      	cbnz	r3, 800b980 <_vfiprintf_r+0x18>
 800b97c:	f7fc fe62 	bl	8008644 <__sinit>
 800b980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b982:	07d9      	lsls	r1, r3, #31
 800b984:	d405      	bmi.n	800b992 <_vfiprintf_r+0x2a>
 800b986:	89ab      	ldrh	r3, [r5, #12]
 800b988:	059a      	lsls	r2, r3, #22
 800b98a:	d402      	bmi.n	800b992 <_vfiprintf_r+0x2a>
 800b98c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b98e:	f7fc ff70 	bl	8008872 <__retarget_lock_acquire_recursive>
 800b992:	89ab      	ldrh	r3, [r5, #12]
 800b994:	071b      	lsls	r3, r3, #28
 800b996:	d501      	bpl.n	800b99c <_vfiprintf_r+0x34>
 800b998:	692b      	ldr	r3, [r5, #16]
 800b99a:	b99b      	cbnz	r3, 800b9c4 <_vfiprintf_r+0x5c>
 800b99c:	4629      	mov	r1, r5
 800b99e:	4630      	mov	r0, r6
 800b9a0:	f000 f93a 	bl	800bc18 <__swsetup_r>
 800b9a4:	b170      	cbz	r0, 800b9c4 <_vfiprintf_r+0x5c>
 800b9a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9a8:	07dc      	lsls	r4, r3, #31
 800b9aa:	d504      	bpl.n	800b9b6 <_vfiprintf_r+0x4e>
 800b9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b0:	b01d      	add	sp, #116	; 0x74
 800b9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b6:	89ab      	ldrh	r3, [r5, #12]
 800b9b8:	0598      	lsls	r0, r3, #22
 800b9ba:	d4f7      	bmi.n	800b9ac <_vfiprintf_r+0x44>
 800b9bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9be:	f7fc ff59 	bl	8008874 <__retarget_lock_release_recursive>
 800b9c2:	e7f3      	b.n	800b9ac <_vfiprintf_r+0x44>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9c8:	2320      	movs	r3, #32
 800b9ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9d2:	2330      	movs	r3, #48	; 0x30
 800b9d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bb88 <_vfiprintf_r+0x220>
 800b9d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9dc:	f04f 0901 	mov.w	r9, #1
 800b9e0:	4623      	mov	r3, r4
 800b9e2:	469a      	mov	sl, r3
 800b9e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9e8:	b10a      	cbz	r2, 800b9ee <_vfiprintf_r+0x86>
 800b9ea:	2a25      	cmp	r2, #37	; 0x25
 800b9ec:	d1f9      	bne.n	800b9e2 <_vfiprintf_r+0x7a>
 800b9ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b9f2:	d00b      	beq.n	800ba0c <_vfiprintf_r+0xa4>
 800b9f4:	465b      	mov	r3, fp
 800b9f6:	4622      	mov	r2, r4
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	f7ff ffa2 	bl	800b944 <__sfputs_r>
 800ba00:	3001      	adds	r0, #1
 800ba02:	f000 80a9 	beq.w	800bb58 <_vfiprintf_r+0x1f0>
 800ba06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba08:	445a      	add	r2, fp
 800ba0a:	9209      	str	r2, [sp, #36]	; 0x24
 800ba0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f000 80a1 	beq.w	800bb58 <_vfiprintf_r+0x1f0>
 800ba16:	2300      	movs	r3, #0
 800ba18:	f04f 32ff 	mov.w	r2, #4294967295
 800ba1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba20:	f10a 0a01 	add.w	sl, sl, #1
 800ba24:	9304      	str	r3, [sp, #16]
 800ba26:	9307      	str	r3, [sp, #28]
 800ba28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba2c:	931a      	str	r3, [sp, #104]	; 0x68
 800ba2e:	4654      	mov	r4, sl
 800ba30:	2205      	movs	r2, #5
 800ba32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba36:	4854      	ldr	r0, [pc, #336]	; (800bb88 <_vfiprintf_r+0x220>)
 800ba38:	f7f4 fc02 	bl	8000240 <memchr>
 800ba3c:	9a04      	ldr	r2, [sp, #16]
 800ba3e:	b9d8      	cbnz	r0, 800ba78 <_vfiprintf_r+0x110>
 800ba40:	06d1      	lsls	r1, r2, #27
 800ba42:	bf44      	itt	mi
 800ba44:	2320      	movmi	r3, #32
 800ba46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba4a:	0713      	lsls	r3, r2, #28
 800ba4c:	bf44      	itt	mi
 800ba4e:	232b      	movmi	r3, #43	; 0x2b
 800ba50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba54:	f89a 3000 	ldrb.w	r3, [sl]
 800ba58:	2b2a      	cmp	r3, #42	; 0x2a
 800ba5a:	d015      	beq.n	800ba88 <_vfiprintf_r+0x120>
 800ba5c:	9a07      	ldr	r2, [sp, #28]
 800ba5e:	4654      	mov	r4, sl
 800ba60:	2000      	movs	r0, #0
 800ba62:	f04f 0c0a 	mov.w	ip, #10
 800ba66:	4621      	mov	r1, r4
 800ba68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba6c:	3b30      	subs	r3, #48	; 0x30
 800ba6e:	2b09      	cmp	r3, #9
 800ba70:	d94d      	bls.n	800bb0e <_vfiprintf_r+0x1a6>
 800ba72:	b1b0      	cbz	r0, 800baa2 <_vfiprintf_r+0x13a>
 800ba74:	9207      	str	r2, [sp, #28]
 800ba76:	e014      	b.n	800baa2 <_vfiprintf_r+0x13a>
 800ba78:	eba0 0308 	sub.w	r3, r0, r8
 800ba7c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba80:	4313      	orrs	r3, r2
 800ba82:	9304      	str	r3, [sp, #16]
 800ba84:	46a2      	mov	sl, r4
 800ba86:	e7d2      	b.n	800ba2e <_vfiprintf_r+0xc6>
 800ba88:	9b03      	ldr	r3, [sp, #12]
 800ba8a:	1d19      	adds	r1, r3, #4
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	9103      	str	r1, [sp, #12]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	bfbb      	ittet	lt
 800ba94:	425b      	neglt	r3, r3
 800ba96:	f042 0202 	orrlt.w	r2, r2, #2
 800ba9a:	9307      	strge	r3, [sp, #28]
 800ba9c:	9307      	strlt	r3, [sp, #28]
 800ba9e:	bfb8      	it	lt
 800baa0:	9204      	strlt	r2, [sp, #16]
 800baa2:	7823      	ldrb	r3, [r4, #0]
 800baa4:	2b2e      	cmp	r3, #46	; 0x2e
 800baa6:	d10c      	bne.n	800bac2 <_vfiprintf_r+0x15a>
 800baa8:	7863      	ldrb	r3, [r4, #1]
 800baaa:	2b2a      	cmp	r3, #42	; 0x2a
 800baac:	d134      	bne.n	800bb18 <_vfiprintf_r+0x1b0>
 800baae:	9b03      	ldr	r3, [sp, #12]
 800bab0:	1d1a      	adds	r2, r3, #4
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	9203      	str	r2, [sp, #12]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	bfb8      	it	lt
 800baba:	f04f 33ff 	movlt.w	r3, #4294967295
 800babe:	3402      	adds	r4, #2
 800bac0:	9305      	str	r3, [sp, #20]
 800bac2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bb98 <_vfiprintf_r+0x230>
 800bac6:	7821      	ldrb	r1, [r4, #0]
 800bac8:	2203      	movs	r2, #3
 800baca:	4650      	mov	r0, sl
 800bacc:	f7f4 fbb8 	bl	8000240 <memchr>
 800bad0:	b138      	cbz	r0, 800bae2 <_vfiprintf_r+0x17a>
 800bad2:	9b04      	ldr	r3, [sp, #16]
 800bad4:	eba0 000a 	sub.w	r0, r0, sl
 800bad8:	2240      	movs	r2, #64	; 0x40
 800bada:	4082      	lsls	r2, r0
 800badc:	4313      	orrs	r3, r2
 800bade:	3401      	adds	r4, #1
 800bae0:	9304      	str	r3, [sp, #16]
 800bae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae6:	4829      	ldr	r0, [pc, #164]	; (800bb8c <_vfiprintf_r+0x224>)
 800bae8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baec:	2206      	movs	r2, #6
 800baee:	f7f4 fba7 	bl	8000240 <memchr>
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d03f      	beq.n	800bb76 <_vfiprintf_r+0x20e>
 800baf6:	4b26      	ldr	r3, [pc, #152]	; (800bb90 <_vfiprintf_r+0x228>)
 800baf8:	bb1b      	cbnz	r3, 800bb42 <_vfiprintf_r+0x1da>
 800bafa:	9b03      	ldr	r3, [sp, #12]
 800bafc:	3307      	adds	r3, #7
 800bafe:	f023 0307 	bic.w	r3, r3, #7
 800bb02:	3308      	adds	r3, #8
 800bb04:	9303      	str	r3, [sp, #12]
 800bb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb08:	443b      	add	r3, r7
 800bb0a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb0c:	e768      	b.n	800b9e0 <_vfiprintf_r+0x78>
 800bb0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb12:	460c      	mov	r4, r1
 800bb14:	2001      	movs	r0, #1
 800bb16:	e7a6      	b.n	800ba66 <_vfiprintf_r+0xfe>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	3401      	adds	r4, #1
 800bb1c:	9305      	str	r3, [sp, #20]
 800bb1e:	4619      	mov	r1, r3
 800bb20:	f04f 0c0a 	mov.w	ip, #10
 800bb24:	4620      	mov	r0, r4
 800bb26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb2a:	3a30      	subs	r2, #48	; 0x30
 800bb2c:	2a09      	cmp	r2, #9
 800bb2e:	d903      	bls.n	800bb38 <_vfiprintf_r+0x1d0>
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d0c6      	beq.n	800bac2 <_vfiprintf_r+0x15a>
 800bb34:	9105      	str	r1, [sp, #20]
 800bb36:	e7c4      	b.n	800bac2 <_vfiprintf_r+0x15a>
 800bb38:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e7f0      	b.n	800bb24 <_vfiprintf_r+0x1bc>
 800bb42:	ab03      	add	r3, sp, #12
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	462a      	mov	r2, r5
 800bb48:	4b12      	ldr	r3, [pc, #72]	; (800bb94 <_vfiprintf_r+0x22c>)
 800bb4a:	a904      	add	r1, sp, #16
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f7fb ff3f 	bl	80079d0 <_printf_float>
 800bb52:	4607      	mov	r7, r0
 800bb54:	1c78      	adds	r0, r7, #1
 800bb56:	d1d6      	bne.n	800bb06 <_vfiprintf_r+0x19e>
 800bb58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb5a:	07d9      	lsls	r1, r3, #31
 800bb5c:	d405      	bmi.n	800bb6a <_vfiprintf_r+0x202>
 800bb5e:	89ab      	ldrh	r3, [r5, #12]
 800bb60:	059a      	lsls	r2, r3, #22
 800bb62:	d402      	bmi.n	800bb6a <_vfiprintf_r+0x202>
 800bb64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb66:	f7fc fe85 	bl	8008874 <__retarget_lock_release_recursive>
 800bb6a:	89ab      	ldrh	r3, [r5, #12]
 800bb6c:	065b      	lsls	r3, r3, #25
 800bb6e:	f53f af1d 	bmi.w	800b9ac <_vfiprintf_r+0x44>
 800bb72:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb74:	e71c      	b.n	800b9b0 <_vfiprintf_r+0x48>
 800bb76:	ab03      	add	r3, sp, #12
 800bb78:	9300      	str	r3, [sp, #0]
 800bb7a:	462a      	mov	r2, r5
 800bb7c:	4b05      	ldr	r3, [pc, #20]	; (800bb94 <_vfiprintf_r+0x22c>)
 800bb7e:	a904      	add	r1, sp, #16
 800bb80:	4630      	mov	r0, r6
 800bb82:	f7fc f9ad 	bl	8007ee0 <_printf_i>
 800bb86:	e7e4      	b.n	800bb52 <_vfiprintf_r+0x1ea>
 800bb88:	0800c6a9 	.word	0x0800c6a9
 800bb8c:	0800c6b3 	.word	0x0800c6b3
 800bb90:	080079d1 	.word	0x080079d1
 800bb94:	0800b945 	.word	0x0800b945
 800bb98:	0800c6af 	.word	0x0800c6af

0800bb9c <__swbuf_r>:
 800bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9e:	460e      	mov	r6, r1
 800bba0:	4614      	mov	r4, r2
 800bba2:	4605      	mov	r5, r0
 800bba4:	b118      	cbz	r0, 800bbae <__swbuf_r+0x12>
 800bba6:	6a03      	ldr	r3, [r0, #32]
 800bba8:	b90b      	cbnz	r3, 800bbae <__swbuf_r+0x12>
 800bbaa:	f7fc fd4b 	bl	8008644 <__sinit>
 800bbae:	69a3      	ldr	r3, [r4, #24]
 800bbb0:	60a3      	str	r3, [r4, #8]
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	071a      	lsls	r2, r3, #28
 800bbb6:	d525      	bpl.n	800bc04 <__swbuf_r+0x68>
 800bbb8:	6923      	ldr	r3, [r4, #16]
 800bbba:	b31b      	cbz	r3, 800bc04 <__swbuf_r+0x68>
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	6922      	ldr	r2, [r4, #16]
 800bbc0:	1a98      	subs	r0, r3, r2
 800bbc2:	6963      	ldr	r3, [r4, #20]
 800bbc4:	b2f6      	uxtb	r6, r6
 800bbc6:	4283      	cmp	r3, r0
 800bbc8:	4637      	mov	r7, r6
 800bbca:	dc04      	bgt.n	800bbd6 <__swbuf_r+0x3a>
 800bbcc:	4621      	mov	r1, r4
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f7ff fa2c 	bl	800b02c <_fflush_r>
 800bbd4:	b9e0      	cbnz	r0, 800bc10 <__swbuf_r+0x74>
 800bbd6:	68a3      	ldr	r3, [r4, #8]
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	60a3      	str	r3, [r4, #8]
 800bbdc:	6823      	ldr	r3, [r4, #0]
 800bbde:	1c5a      	adds	r2, r3, #1
 800bbe0:	6022      	str	r2, [r4, #0]
 800bbe2:	701e      	strb	r6, [r3, #0]
 800bbe4:	6962      	ldr	r2, [r4, #20]
 800bbe6:	1c43      	adds	r3, r0, #1
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d004      	beq.n	800bbf6 <__swbuf_r+0x5a>
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	07db      	lsls	r3, r3, #31
 800bbf0:	d506      	bpl.n	800bc00 <__swbuf_r+0x64>
 800bbf2:	2e0a      	cmp	r6, #10
 800bbf4:	d104      	bne.n	800bc00 <__swbuf_r+0x64>
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	f7ff fa17 	bl	800b02c <_fflush_r>
 800bbfe:	b938      	cbnz	r0, 800bc10 <__swbuf_r+0x74>
 800bc00:	4638      	mov	r0, r7
 800bc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc04:	4621      	mov	r1, r4
 800bc06:	4628      	mov	r0, r5
 800bc08:	f000 f806 	bl	800bc18 <__swsetup_r>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d0d5      	beq.n	800bbbc <__swbuf_r+0x20>
 800bc10:	f04f 37ff 	mov.w	r7, #4294967295
 800bc14:	e7f4      	b.n	800bc00 <__swbuf_r+0x64>
	...

0800bc18 <__swsetup_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	4b2a      	ldr	r3, [pc, #168]	; (800bcc4 <__swsetup_r+0xac>)
 800bc1c:	4605      	mov	r5, r0
 800bc1e:	6818      	ldr	r0, [r3, #0]
 800bc20:	460c      	mov	r4, r1
 800bc22:	b118      	cbz	r0, 800bc2c <__swsetup_r+0x14>
 800bc24:	6a03      	ldr	r3, [r0, #32]
 800bc26:	b90b      	cbnz	r3, 800bc2c <__swsetup_r+0x14>
 800bc28:	f7fc fd0c 	bl	8008644 <__sinit>
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc32:	0718      	lsls	r0, r3, #28
 800bc34:	d422      	bmi.n	800bc7c <__swsetup_r+0x64>
 800bc36:	06d9      	lsls	r1, r3, #27
 800bc38:	d407      	bmi.n	800bc4a <__swsetup_r+0x32>
 800bc3a:	2309      	movs	r3, #9
 800bc3c:	602b      	str	r3, [r5, #0]
 800bc3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc42:	81a3      	strh	r3, [r4, #12]
 800bc44:	f04f 30ff 	mov.w	r0, #4294967295
 800bc48:	e034      	b.n	800bcb4 <__swsetup_r+0x9c>
 800bc4a:	0758      	lsls	r0, r3, #29
 800bc4c:	d512      	bpl.n	800bc74 <__swsetup_r+0x5c>
 800bc4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc50:	b141      	cbz	r1, 800bc64 <__swsetup_r+0x4c>
 800bc52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc56:	4299      	cmp	r1, r3
 800bc58:	d002      	beq.n	800bc60 <__swsetup_r+0x48>
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	f7fd fc08 	bl	8009470 <_free_r>
 800bc60:	2300      	movs	r3, #0
 800bc62:	6363      	str	r3, [r4, #52]	; 0x34
 800bc64:	89a3      	ldrh	r3, [r4, #12]
 800bc66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc6a:	81a3      	strh	r3, [r4, #12]
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	6063      	str	r3, [r4, #4]
 800bc70:	6923      	ldr	r3, [r4, #16]
 800bc72:	6023      	str	r3, [r4, #0]
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	f043 0308 	orr.w	r3, r3, #8
 800bc7a:	81a3      	strh	r3, [r4, #12]
 800bc7c:	6923      	ldr	r3, [r4, #16]
 800bc7e:	b94b      	cbnz	r3, 800bc94 <__swsetup_r+0x7c>
 800bc80:	89a3      	ldrh	r3, [r4, #12]
 800bc82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc8a:	d003      	beq.n	800bc94 <__swsetup_r+0x7c>
 800bc8c:	4621      	mov	r1, r4
 800bc8e:	4628      	mov	r0, r5
 800bc90:	f000 f884 	bl	800bd9c <__smakebuf_r>
 800bc94:	89a0      	ldrh	r0, [r4, #12]
 800bc96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc9a:	f010 0301 	ands.w	r3, r0, #1
 800bc9e:	d00a      	beq.n	800bcb6 <__swsetup_r+0x9e>
 800bca0:	2300      	movs	r3, #0
 800bca2:	60a3      	str	r3, [r4, #8]
 800bca4:	6963      	ldr	r3, [r4, #20]
 800bca6:	425b      	negs	r3, r3
 800bca8:	61a3      	str	r3, [r4, #24]
 800bcaa:	6923      	ldr	r3, [r4, #16]
 800bcac:	b943      	cbnz	r3, 800bcc0 <__swsetup_r+0xa8>
 800bcae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcb2:	d1c4      	bne.n	800bc3e <__swsetup_r+0x26>
 800bcb4:	bd38      	pop	{r3, r4, r5, pc}
 800bcb6:	0781      	lsls	r1, r0, #30
 800bcb8:	bf58      	it	pl
 800bcba:	6963      	ldrpl	r3, [r4, #20]
 800bcbc:	60a3      	str	r3, [r4, #8]
 800bcbe:	e7f4      	b.n	800bcaa <__swsetup_r+0x92>
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	e7f7      	b.n	800bcb4 <__swsetup_r+0x9c>
 800bcc4:	2000007c 	.word	0x2000007c

0800bcc8 <_raise_r>:
 800bcc8:	291f      	cmp	r1, #31
 800bcca:	b538      	push	{r3, r4, r5, lr}
 800bccc:	4604      	mov	r4, r0
 800bcce:	460d      	mov	r5, r1
 800bcd0:	d904      	bls.n	800bcdc <_raise_r+0x14>
 800bcd2:	2316      	movs	r3, #22
 800bcd4:	6003      	str	r3, [r0, #0]
 800bcd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcda:	bd38      	pop	{r3, r4, r5, pc}
 800bcdc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bcde:	b112      	cbz	r2, 800bce6 <_raise_r+0x1e>
 800bce0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bce4:	b94b      	cbnz	r3, 800bcfa <_raise_r+0x32>
 800bce6:	4620      	mov	r0, r4
 800bce8:	f000 f830 	bl	800bd4c <_getpid_r>
 800bcec:	462a      	mov	r2, r5
 800bcee:	4601      	mov	r1, r0
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcf6:	f000 b817 	b.w	800bd28 <_kill_r>
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d00a      	beq.n	800bd14 <_raise_r+0x4c>
 800bcfe:	1c59      	adds	r1, r3, #1
 800bd00:	d103      	bne.n	800bd0a <_raise_r+0x42>
 800bd02:	2316      	movs	r3, #22
 800bd04:	6003      	str	r3, [r0, #0]
 800bd06:	2001      	movs	r0, #1
 800bd08:	e7e7      	b.n	800bcda <_raise_r+0x12>
 800bd0a:	2400      	movs	r4, #0
 800bd0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd10:	4628      	mov	r0, r5
 800bd12:	4798      	blx	r3
 800bd14:	2000      	movs	r0, #0
 800bd16:	e7e0      	b.n	800bcda <_raise_r+0x12>

0800bd18 <raise>:
 800bd18:	4b02      	ldr	r3, [pc, #8]	; (800bd24 <raise+0xc>)
 800bd1a:	4601      	mov	r1, r0
 800bd1c:	6818      	ldr	r0, [r3, #0]
 800bd1e:	f7ff bfd3 	b.w	800bcc8 <_raise_r>
 800bd22:	bf00      	nop
 800bd24:	2000007c 	.word	0x2000007c

0800bd28 <_kill_r>:
 800bd28:	b538      	push	{r3, r4, r5, lr}
 800bd2a:	4d07      	ldr	r5, [pc, #28]	; (800bd48 <_kill_r+0x20>)
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	4604      	mov	r4, r0
 800bd30:	4608      	mov	r0, r1
 800bd32:	4611      	mov	r1, r2
 800bd34:	602b      	str	r3, [r5, #0]
 800bd36:	f7f6 f805 	bl	8001d44 <_kill>
 800bd3a:	1c43      	adds	r3, r0, #1
 800bd3c:	d102      	bne.n	800bd44 <_kill_r+0x1c>
 800bd3e:	682b      	ldr	r3, [r5, #0]
 800bd40:	b103      	cbz	r3, 800bd44 <_kill_r+0x1c>
 800bd42:	6023      	str	r3, [r4, #0]
 800bd44:	bd38      	pop	{r3, r4, r5, pc}
 800bd46:	bf00      	nop
 800bd48:	20000650 	.word	0x20000650

0800bd4c <_getpid_r>:
 800bd4c:	f7f5 bff2 	b.w	8001d34 <_getpid>

0800bd50 <__swhatbuf_r>:
 800bd50:	b570      	push	{r4, r5, r6, lr}
 800bd52:	460c      	mov	r4, r1
 800bd54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd58:	2900      	cmp	r1, #0
 800bd5a:	b096      	sub	sp, #88	; 0x58
 800bd5c:	4615      	mov	r5, r2
 800bd5e:	461e      	mov	r6, r3
 800bd60:	da0d      	bge.n	800bd7e <__swhatbuf_r+0x2e>
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bd68:	f04f 0100 	mov.w	r1, #0
 800bd6c:	bf0c      	ite	eq
 800bd6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bd72:	2340      	movne	r3, #64	; 0x40
 800bd74:	2000      	movs	r0, #0
 800bd76:	6031      	str	r1, [r6, #0]
 800bd78:	602b      	str	r3, [r5, #0]
 800bd7a:	b016      	add	sp, #88	; 0x58
 800bd7c:	bd70      	pop	{r4, r5, r6, pc}
 800bd7e:	466a      	mov	r2, sp
 800bd80:	f000 f848 	bl	800be14 <_fstat_r>
 800bd84:	2800      	cmp	r0, #0
 800bd86:	dbec      	blt.n	800bd62 <__swhatbuf_r+0x12>
 800bd88:	9901      	ldr	r1, [sp, #4]
 800bd8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bd8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bd92:	4259      	negs	r1, r3
 800bd94:	4159      	adcs	r1, r3
 800bd96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd9a:	e7eb      	b.n	800bd74 <__swhatbuf_r+0x24>

0800bd9c <__smakebuf_r>:
 800bd9c:	898b      	ldrh	r3, [r1, #12]
 800bd9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bda0:	079d      	lsls	r5, r3, #30
 800bda2:	4606      	mov	r6, r0
 800bda4:	460c      	mov	r4, r1
 800bda6:	d507      	bpl.n	800bdb8 <__smakebuf_r+0x1c>
 800bda8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	6123      	str	r3, [r4, #16]
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	6163      	str	r3, [r4, #20]
 800bdb4:	b002      	add	sp, #8
 800bdb6:	bd70      	pop	{r4, r5, r6, pc}
 800bdb8:	ab01      	add	r3, sp, #4
 800bdba:	466a      	mov	r2, sp
 800bdbc:	f7ff ffc8 	bl	800bd50 <__swhatbuf_r>
 800bdc0:	9900      	ldr	r1, [sp, #0]
 800bdc2:	4605      	mov	r5, r0
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	f7fd fbc7 	bl	8009558 <_malloc_r>
 800bdca:	b948      	cbnz	r0, 800bde0 <__smakebuf_r+0x44>
 800bdcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd0:	059a      	lsls	r2, r3, #22
 800bdd2:	d4ef      	bmi.n	800bdb4 <__smakebuf_r+0x18>
 800bdd4:	f023 0303 	bic.w	r3, r3, #3
 800bdd8:	f043 0302 	orr.w	r3, r3, #2
 800bddc:	81a3      	strh	r3, [r4, #12]
 800bdde:	e7e3      	b.n	800bda8 <__smakebuf_r+0xc>
 800bde0:	89a3      	ldrh	r3, [r4, #12]
 800bde2:	6020      	str	r0, [r4, #0]
 800bde4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bde8:	81a3      	strh	r3, [r4, #12]
 800bdea:	9b00      	ldr	r3, [sp, #0]
 800bdec:	6163      	str	r3, [r4, #20]
 800bdee:	9b01      	ldr	r3, [sp, #4]
 800bdf0:	6120      	str	r0, [r4, #16]
 800bdf2:	b15b      	cbz	r3, 800be0c <__smakebuf_r+0x70>
 800bdf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f000 f81d 	bl	800be38 <_isatty_r>
 800bdfe:	b128      	cbz	r0, 800be0c <__smakebuf_r+0x70>
 800be00:	89a3      	ldrh	r3, [r4, #12]
 800be02:	f023 0303 	bic.w	r3, r3, #3
 800be06:	f043 0301 	orr.w	r3, r3, #1
 800be0a:	81a3      	strh	r3, [r4, #12]
 800be0c:	89a3      	ldrh	r3, [r4, #12]
 800be0e:	431d      	orrs	r5, r3
 800be10:	81a5      	strh	r5, [r4, #12]
 800be12:	e7cf      	b.n	800bdb4 <__smakebuf_r+0x18>

0800be14 <_fstat_r>:
 800be14:	b538      	push	{r3, r4, r5, lr}
 800be16:	4d07      	ldr	r5, [pc, #28]	; (800be34 <_fstat_r+0x20>)
 800be18:	2300      	movs	r3, #0
 800be1a:	4604      	mov	r4, r0
 800be1c:	4608      	mov	r0, r1
 800be1e:	4611      	mov	r1, r2
 800be20:	602b      	str	r3, [r5, #0]
 800be22:	f7f5 ffee 	bl	8001e02 <_fstat>
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	d102      	bne.n	800be30 <_fstat_r+0x1c>
 800be2a:	682b      	ldr	r3, [r5, #0]
 800be2c:	b103      	cbz	r3, 800be30 <_fstat_r+0x1c>
 800be2e:	6023      	str	r3, [r4, #0]
 800be30:	bd38      	pop	{r3, r4, r5, pc}
 800be32:	bf00      	nop
 800be34:	20000650 	.word	0x20000650

0800be38 <_isatty_r>:
 800be38:	b538      	push	{r3, r4, r5, lr}
 800be3a:	4d06      	ldr	r5, [pc, #24]	; (800be54 <_isatty_r+0x1c>)
 800be3c:	2300      	movs	r3, #0
 800be3e:	4604      	mov	r4, r0
 800be40:	4608      	mov	r0, r1
 800be42:	602b      	str	r3, [r5, #0]
 800be44:	f7f5 ffed 	bl	8001e22 <_isatty>
 800be48:	1c43      	adds	r3, r0, #1
 800be4a:	d102      	bne.n	800be52 <_isatty_r+0x1a>
 800be4c:	682b      	ldr	r3, [r5, #0]
 800be4e:	b103      	cbz	r3, 800be52 <_isatty_r+0x1a>
 800be50:	6023      	str	r3, [r4, #0]
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	20000650 	.word	0x20000650

0800be58 <_init>:
 800be58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5a:	bf00      	nop
 800be5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be5e:	bc08      	pop	{r3}
 800be60:	469e      	mov	lr, r3
 800be62:	4770      	bx	lr

0800be64 <_fini>:
 800be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be66:	bf00      	nop
 800be68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6a:	bc08      	pop	{r3}
 800be6c:	469e      	mov	lr, r3
 800be6e:	4770      	bx	lr
